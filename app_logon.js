(function(
    userConfig,
    defaultConfig
) {
    // summary:
    //		This is the "source loader" and is the entry point for Dojo during development. You may also load Dojo with
    //		any AMD-compliant loader via the package main module dojo/main.
    // description:
    //		This is the "source loader" for Dojo. It provides an AMD-compliant loader that can be configured
    //		to operate in either synchronous or asynchronous modes. After the loader is defined, dojo is loaded
    //		IAW the package main module dojo/main. In the event you wish to use a foreign loader, you may load dojo as a package
    //		via the package main module dojo/main and this loader is not required; see dojo/package.json for details.
    //
    //		In order to keep compatibility with the v1.x line, this loader includes additional machinery that enables
    //		the dojo.provide, dojo.require et al API. This machinery is loaded by default, but may be dynamically removed
    //		via the has.js API and statically removed via the build system.
    //
    //		This loader includes sniffing machinery to determine the environment; the following environments are supported:
    //
    //		- browser
    //		- node.js
    //		- rhino
    //
    //		This is the so-called "source loader". As such, it includes many optional features that may be discadred by
    //		building a customized verion with the build system.

    // Design and Implementation Notes
    //
    // This is a dojo-specific adaption of bdLoad, donated to the dojo foundation by Altoviso LLC.
    //
    // This function defines an AMD-compliant (http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition)
    // loader that can be configured to operate in either synchronous or asynchronous modes.
    //
    // Since this machinery implements a loader, it does not have the luxury of using a load system and/or
    // leveraging a utility library. This results in an unpleasantly long file; here is a road map of the contents:
    //
    //	 1. Small library for use implementing the loader.
    //	 2. Define the has.js API; this is used throughout the loader to bracket features.
    //	 3. Define the node.js and rhino sniffs and sniff.
    //	 4. Define the loader's data.
    //	 5. Define the configuration machinery.
    //	 6. Define the script element sniffing machinery and sniff for configuration data.
    //	 7. Configure the loader IAW the provided user, default, and sniffing data.
    //	 8. Define the global require function.
    //	 9. Define the module resolution machinery.
    //	10. Define the module and plugin module definition machinery
    //	11. Define the script injection machinery.
    //	12. Define the window load detection.
    //	13. Define the logging API.
    //	14. Define the tracing API.
    //	16. Define the AMD define function.
    //	17. Define the dojo v1.x provide/require machinery--so called "legacy" modes.
    //	18. Publish global variables.
    //
    // Language and Acronyms and Idioms
    //
    // moduleId: a CJS module identifier, (used for public APIs)
    // mid: moduleId (used internally)
    // packageId: a package identifier (used for public APIs)
    // pid: packageId (used internally); the implied system or default package has pid===""
    // pack: package is used internally to reference a package object (since javascript has reserved words including "package")
    // prid: plugin resource identifier
    // The integer constant 1 is used in place of true and 0 in place of false.

    // define a minimal library to help build the loader
    var noop = function() {},

        isEmpty = function(it) {
            for (var p in it) {
                return 0;
            }
            return 1;
        },

        toString = {}.toString,

        isFunction = function(it) {
            return toString.call(it) == "[object Function]";
        },

        isString = function(it) {
            return toString.call(it) == "[object String]";
        },

        isArray = function(it) {
            return toString.call(it) == "[object Array]";
        },

        forEach = function(vector, callback) {
            if (vector) {
                for (var i = 0; i < vector.length;) {
                    callback(vector[i++]);
                }
            }
        },

        mix = function(dest, src) {
            for (var p in src) {
                dest[p] = src[p];
            }
            return dest;
        },

        makeError = function(error, info) {
            return mix(new Error(error), {
                src: "dojoLoader",
                info: info
            });
        },

        uidSeed = 1,

        uid = function() {
            // Returns a unique indentifier (within the lifetime of the document) of the form /_d+/.
            return "_" + uidSeed++;
        },

        // FIXME: how to doc window.require() api

        // this will be the global require function; define it immediately so we can start hanging things off of it
        req = function(
            config, //(object, optional) hash of configuration properties
            dependencies, //(array of commonjs.moduleId, optional) list of modules to be loaded before applying callback
            callback //(function, optional) lamda expression to apply to module values implied by dependencies
        ) {
            return contextRequire(config, dependencies, callback, 0, req);
        },

        // the loader uses the has.js API to control feature inclusion/exclusion; define then use throughout
        global = this,

        doc = global.document,

        element = doc && doc.createElement("DiV"),

        has = req.has = function(name) {
            return isFunction(hasCache[name]) ? (hasCache[name] = hasCache[name](global, doc, element)) : hasCache[name];
        },

        hasCache = has.cache = defaultConfig.hasCache;

    has.add = function(name, test, now, force) {
        (hasCache[name] === undefined || force) && (hasCache[name] = test);
        return now && has(name);
    };

    0 && has.add("host-node", userConfig.has && "host-node" in userConfig.has ?
        userConfig.has["host-node"] :
        (typeof process == "object" && process.versions && process.versions.node && process.versions.v8));
    if (0) {
        // fixup the default config for node.js environment
        require("./_base/configNode.js").config(defaultConfig);
        // remember node's require (with respect to baseUrl==dojo's root)
        defaultConfig.loaderPatch.nodeRequire = require;
    }

    0 && has.add("host-rhino", userConfig.has && "host-rhino" in userConfig.has ?
        userConfig.has["host-rhino"] :
        (typeof load == "function" && (typeof Packages == "function" || typeof Packages == "object")));
    if (0) {
        // owing to rhino's lame feature that hides the source of the script, give the user a way to specify the baseUrl...
        for (var baseUrl = userConfig.baseUrl || ".", arg, rhinoArgs = this.arguments, i = 0; i < rhinoArgs.length;) {
            arg = (rhinoArgs[i++] + "").split("=");
            if (arg[0] == "baseUrl") {
                baseUrl = arg[1];
                break;
            }
        }
        load(baseUrl + "/_base/configRhino.js");
        rhinoDojoConfig(defaultConfig, baseUrl, rhinoArgs);
    }

    // userConfig has tests override defaultConfig has tests; do this after the environment detection because
    // the environment detection usually sets some has feature values in the hasCache.
    for (var p in userConfig.has) {
        has.add(p, userConfig.has[p], 0, 1);
    }

    //
    // define the loader data
    //

    // the loader will use these like symbols if the loader has the traceApi; otherwise
    // define magic numbers so that modules can be provided as part of defaultConfig
    var requested = 1,
        arrived = 2,
        nonmodule = 3,
        executing = 4,
        executed = 5;

    if (0) {
        // these make debugging nice; but using strings for symbols is a gross rookie error; don't do it for production code
        requested = "requested";
        arrived = "arrived";
        nonmodule = "not-a-module";
        executing = "executing";
        executed = "executed";
    }

    var legacyMode = 0,
        sync = "sync",
        xd = "xd",
        syncExecStack = [],
        dojoRequirePlugin = 0,
        checkDojoRequirePlugin = noop,
        transformToAmd = noop,
        getXhr;
    if (0) {
        req.isXdUrl = noop;

        req.initSyncLoader = function(dojoRequirePlugin_, checkDojoRequirePlugin_, transformToAmd_) {
            // the first dojo/_base/loader loaded gets to define these variables; they are designed to work
            // in the presense of zero to many mapped dojo/_base/loaders
            if (!dojoRequirePlugin) {
                dojoRequirePlugin = dojoRequirePlugin_;
                checkDojoRequirePlugin = checkDojoRequirePlugin_;
                transformToAmd = transformToAmd_;
            }

            return {
                sync: sync,
                requested: requested,
                arrived: arrived,
                nonmodule: nonmodule,
                executing: executing,
                executed: executed,
                syncExecStack: syncExecStack,
                modules: modules,
                execQ: execQ,
                getModule: getModule,
                injectModule: injectModule,
                setArrived: setArrived,
                signal: signal,
                finishExec: finishExec,
                execModule: execModule,
                dojoRequirePlugin: dojoRequirePlugin,
                getLegacyMode: function() {
                    return legacyMode;
                },
                guardCheckComplete: guardCheckComplete
            };
        };

        if (1) {
            // in legacy sync mode, the loader needs a minimal XHR library

            var locationProtocol = location.protocol,
                locationHost = location.host;
            req.isXdUrl = function(url) {
                if (/^\./.test(url)) {
                    // begins with a dot is always relative to page URL; therefore not xdomain
                    return false;
                }
                if (/^\/\//.test(url)) {
                    // for v1.6- backcompat, url starting with // indicates xdomain
                    return true;
                }
                // get protocol and host
                // \/+ takes care of the typical file protocol that looks like file:///drive/path/to/file
                // locationHost is falsy if file protocol => if locationProtocol matches and is "file:", || will return false
                var match = url.match(/^([^\/\:]+\:)\/+([^\/]+)/);
                return match && (match[1] != locationProtocol || (locationHost && match[2] != locationHost));
            };


            // note: to get the file:// protocol to work in FF, you must set security.fileuri.strict_origin_policy to false in about:config
            1 || has.add("dojo-xhr-factory", 1);
            has.add("dojo-force-activex-xhr", 1 && !doc.addEventListener && window.location.protocol == "file:");
            has.add("native-xhr", typeof XMLHttpRequest != "undefined");
            if (has("native-xhr") && !has("dojo-force-activex-xhr")) {
                getXhr = function() {
                    return new XMLHttpRequest();
                };
            } else {
                // if in the browser an old IE; find an xhr
                for (var XMLHTTP_PROGIDS = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'], progid, i = 0; i < 3;) {
                    try {
                        progid = XMLHTTP_PROGIDS[i++];
                        if (new ActiveXObject(progid)) {
                            // this progid works; therefore, use it from now on
                            break;
                        }
                    } catch (e) {
                        // squelch; we're just trying to find a good ActiveX progid
                        // if they all fail, then progid ends up as the last attempt and that will signal the error
                        // the first time the client actually tries to exec an xhr
                    }
                }
                getXhr = function() {
                    return new ActiveXObject(progid);
                };
            }
            req.getXhr = getXhr;

            has.add("dojo-gettext-api", 1);
            req.getText = function(url, async, onLoad) {
                var xhr = getXhr();
                xhr.open('GET', fixupUrl(url), false);
                xhr.send(null);
                if (xhr.status == 200 || (!location.host && !xhr.status)) {
                    if (onLoad) {
                        onLoad(xhr.responseText, async);
                    }
                } else {
                    throw makeError("xhrFailed", xhr.status);
                }
                return xhr.responseText;
            };
        }
    } else {
        req.async = 1;
    }

    //
    // loader eval
    //
    var eval_ =
        // use the function constructor so our eval is scoped close to (but not in) in the global space with minimal pollution
        new Function('return eval(arguments[0]);');

    req.eval =
        function(text, hint) {
            return eval_(text + "\r\n////@ sourceURL=" + hint);
        };

    //
    // loader micro events API
    //
    var listenerQueues = {},
        error = "error",
        signal = req.signal = function(type, args) {
            var queue = listenerQueues[type];
            // notice we run a copy of the queue; this allows listeners to add/remove
            // other listeners without affecting this particular signal
            forEach(queue && queue.slice(0), function(listener) {
                listener.apply(null, isArray(args) ? args : [args]);
            });
        },
        on = req.on = function(type, listener) {
            // notice a queue is not created until a client actually connects
            var queue = listenerQueues[type] || (listenerQueues[type] = []);
            queue.push(listener);
            return {
                remove: function() {
                    for (var i = 0; i < queue.length; i++) {
                        if (queue[i] === listener) {
                            queue.splice(i, 1);
                            return;
                        }
                    }
                }
            };
        };

    // configuration machinery; with an optimized/built defaultConfig, all configuration machinery can be discarded
    // lexical variables hold key loader data structures to help with minification; these may be completely,
    // one-time initialized by defaultConfig for optimized/built versions
    var
        aliases
    // a vector of pairs of [regexs or string, replacement] => (alias, actual)
    = [],

    paths
        // CommonJS paths
        = {},

        pathsMapProg
    // list of (from-path, to-path, regex, length) derived from paths;
    // a "program" to apply paths; see computeMapProg
    = [],

    packs
        // a map from packageId to package configuration object; see fixupPackageInfo
        = {},

        map = req.map
    // AMD map config variable; dojo/_base/kernel needs req.map to figure out the scope map
    = {},

    mapProgs
        // vector of quads as described by computeMapProg; map-key is AMD map key, map-value is AMD map value
        = [],

        modules
    // A hash:(mid) --> (module-object) the module namespace
    //
    // pid: the package identifier to which the module belongs (e.g., "dojo"); "" indicates the system or default package
    // mid: the fully-resolved (i.e., mappings have been applied) module identifier without the package identifier (e.g., "dojo/io/script")
    // url: the URL from which the module was retrieved
    // pack: the package object of the package to which the module belongs
    // executed: 0 => not executed; executing => in the process of tranversing deps and running factory; executed => factory has been executed
    // deps: the dependency vector for this module (vector of modules objects)
    // def: the factory for this module
    // result: the result of the running the factory for this module
    // injected: (0 | requested | arrived) the status of the module; nonmodule means the resource did not call define
    // load: plugin load function; applicable only for plugins
    //
    // Modules go through several phases in creation:
    //
    // 1. Requested: some other module's definition or a require application contained the requested module in
    //	  its dependency vector or executing code explicitly demands a module via req.require.
    //
    // 2. Injected: a script element has been appended to the insert-point element demanding the resource implied by the URL
    //
    // 3. Loaded: the resource injected in [2] has been evalated.
    //
    // 4. Defined: the resource contained a define statement that advised the loader about the module. Notice that some
    //	  resources may just contain a bundle of code and never formally define a module via define
    //
    // 5. Evaluated: the module was defined via define and the loader has evaluated the factory and computed a result.
    = {},

    cacheBust
        // query string to append to module URLs to bust browser cache
        = "",

        cache
    // hash:(mid | url)-->(function | string)
    //
    // A cache of resources. The resources arrive via a config.cache object, which is a hash from either mid --> function or
    // url --> string. The url key is distinguished from the mid key by always containing the prefix "url:". url keys as provided
    // by config.cache always have a string value that represents the contents of the resource at the given url. mid keys as provided
    // by configl.cache always have a function value that causes the same code to execute as if the module was script injected.
    //
    // Both kinds of key-value pairs are entered into cache via the function consumePendingCache, which may relocate keys as given
    // by any mappings *iff* the config.cache was received as part of a module resource request.
    //
    // Further, for mid keys, the implied url is computed and the value is entered into that key as well. This allows mapped modules
    // to retrieve cached items that may have arrived consequent to another namespace.
    //
    = {},

    urlKeyPrefix
        // the prefix to prepend to a URL key in the cache.
        = "url:",

        pendingCacheInsert
    // hash:(mid)-->(function)
    //
    // Gives a set of cache modules pending entry into cache. When cached modules are published to the loader, they are
    // entered into pendingCacheInsert; modules are then pressed into cache upon (1) AMD define or (2) upon receiving another
    // independent set of cached modules. (1) is the usual case, and this case allows normalizing mids given in the pending
    // cache for the local configuration, possibly relocating modules.
    = {},

    dojoSniffConfig
        // map of configuration variables
        // give the data-dojo-config as sniffed from the document (if any)
        = {};

    if (1) {
        var consumePendingCacheInsert = function(referenceModule) {
                var p, item, match, now, m;
                for (p in pendingCacheInsert) {
                    item = pendingCacheInsert[p];
                    match = p.match(/^url\:(.+)/);
                    if (match) {
                        cache[urlKeyPrefix + toUrl(match[1], referenceModule)] = item;
                    } else if (p == "*now") {
                        now = item;
                    } else if (p != "*noref") {
                        m = getModuleInfo(p, referenceModule);
                        cache[m.mid] = cache[urlKeyPrefix + m.url] = item;
                    }
                }
                if (now) {
                    now(createRequire(referenceModule));
                }
                pendingCacheInsert = {};
            },

            escapeString = function(s) {
                return s.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function(c) {
                    return "\\" + c;
                });
            },

            computeMapProg = function(map, dest) {
                // This routine takes a map as represented by a JavaScript object and initializes dest, a vector of
                // quads of (map-key, map-value, refex-for-map-key, length-of-map-key), sorted decreasing by length-
                // of-map-key. The regex looks for the map-key followed by either "/" or end-of-string at the beginning
                // of a the search source. Notice the map-value is irrelevent to the algorithm
                dest.splice(0, dest.length);
                for (var p in map) {
                    dest.push([
                        p,
                        map[p],
                        new RegExp("^" + escapeString(p) + "(\/|$)"),
                        p.length
                    ]);
                }
                dest.sort(function(lhs, rhs) {
                    return rhs[3] - lhs[3];
                });
                return dest;
            },

            fixupPackageInfo = function(packageInfo) {
                // calculate the precise (name, location, main, mappings) for a package
                var name = packageInfo.name;
                if (!name) {
                    // packageInfo must be a string that gives the name
                    name = packageInfo;
                    packageInfo = {
                        name: name
                    };
                }
                packageInfo = mix({
                    main: "main"
                }, packageInfo);
                packageInfo.location = packageInfo.location ? packageInfo.location : name;

                // packageMap is depricated in favor of AMD map
                if (packageInfo.packageMap) {
                    map[name] = packageInfo.packageMap;
                }

                if (!packageInfo.main.indexOf("./")) {
                    packageInfo.main = packageInfo.main.substring(2);
                }

                // now that we've got a fully-resolved package object, push it into the configuration
                packs[name] = packageInfo;
            },

            delayedModuleConfig
        // module config cannot be consummed until the loader is completely initialized; therefore, all
        // module config detected during booting is memorized and applied at the end of loader initialization
        // TODO: this is a bit of a kludge; all config should be moved to end of loader initialization, but
        // we'll delay this chore and do it with a final loader 1.x cleanup after the 2.x loader prototyping is complete
        = [],


        config = function(config, booting, referenceModule) {
            for (var p in config) {
                if (p == "waitSeconds") {
                    req.waitms = (config[p] || 0) * 1000;
                }
                if (p == "cacheBust") {
                    cacheBust = config[p] ? (isString(config[p]) ? config[p] : (new Date()).getTime() + "") : "";
                }
                if (p == "baseUrl" || p == "combo") {
                    req[p] = config[p];
                }
                if (0 && p == "async") {
                    // falsy or "sync" => legacy sync loader
                    // "xd" => sync but loading xdomain tree and therefore loading asynchronously (not configurable, set automatically by the loader)
                    // "legacyAsync" => permanently in "xd" by choice
                    // "debugAtAllCosts" => trying to load everything via script injection (not implemented)
                    // otherwise, must be truthy => AMD
                    // legacyMode: sync | legacyAsync | xd | false
                    var mode = config[p];
                    req.legacyMode = legacyMode = (isString(mode) && /sync|legacyAsync/.test(mode) ? mode : (!mode ? sync : false));
                    req.async = !legacyMode;
                }
                if (config[p] !== hasCache) {
                    // accumulate raw config info for client apps which can use this to pass their own config
                    req.rawConfig[p] = config[p];
                    p != "has" && has.add("config-" + p, config[p], 0, booting);
                }
            }

            // make sure baseUrl exists
            if (!req.baseUrl) {
                req.baseUrl = "./";
            }
            // make sure baseUrl ends with a slash
            if (!/\/$/.test(req.baseUrl)) {
                req.baseUrl += "/";
            }

            // now do the special work for has, packages, packagePaths, paths, aliases, and cache

            for (p in config.has) {
                has.add(p, config.has[p], 0, booting);
            }

            // for each package found in any packages config item, augment the packs map owned by the loader
            forEach(config.packages, fixupPackageInfo);

            // for each packagePath found in any packagePaths config item, augment the packageConfig
            // packagePaths is depricated; remove in 2.0
            for (baseUrl in config.packagePaths) {
                forEach(config.packagePaths[baseUrl], function(packageInfo) {
                    var location = baseUrl + "/" + packageInfo;
                    if (isString(packageInfo)) {
                        packageInfo = {
                            name: packageInfo
                        };
                    }
                    packageInfo.location = location;
                    fixupPackageInfo(packageInfo);
                });
            }

            // notice that computeMapProg treats the dest as a reference; therefore, if/when that variable
            // is published (see dojo-publish-privates), the published variable will always hold a valid value.

            // this must come after all package processing since package processing may mutate map
            computeMapProg(mix(map, config.map), mapProgs);
            forEach(mapProgs, function(item) {
                item[1] = computeMapProg(item[1], []);
                if (item[0] == "*") {
                    mapProgs.star = item[1];
                }
            });

            // push in any paths and recompute the internal pathmap
            computeMapProg(mix(paths, config.paths), pathsMapProg);

            // aliases
            forEach(config.aliases, function(pair) {
                if (isString(pair[0])) {
                    pair[0] = new RegExp("^" + escapeString(pair[0]) + "$");
                }
                aliases.push(pair);
            });

            if (booting) {
                delayedModuleConfig.push({
                    config: config.config
                });
            } else {
                for (p in config.config) {
                    var module = getModule(p, referenceModule);
                    module.config = mix(module.config || {}, config.config[p]);
                }
            }

            // push in any new cache values
            if (config.cache) {
                consumePendingCacheInsert();
                pendingCacheInsert = config.cache;
                if (config.cache["*noref"]) {
                    consumePendingCacheInsert();
                }
            }

            signal("config", [config, req.rawConfig]);
        };

        //
        // execute the various sniffs; userConfig can override and value
        //

        if (0 || 1) {
            // the sniff regex looks for a src attribute ending in dojo.js, optionally preceeded with a path.
            // match[3] returns the path to dojo.js (if any) without the trailing slash. This is used for the
            // dojo location on CDN deployments and baseUrl when either/both of these are not provided
            // explicitly in the config data; this is the 1.6- behavior.

            var scripts = doc.getElementsByTagName("script"),
                i = 0,
                script, dojoDir, src, match;
            while (i < scripts.length) {
                script = scripts[i++];
                if ((src = script.getAttribute("src")) && (match = src.match(/(((.*)\/)|^)dojo\.js(\W|$)/i))) {
                    // sniff dojoDir and baseUrl
                    dojoDir = match[3] || "";
                    defaultConfig.baseUrl = defaultConfig.baseUrl || dojoDir;

                    // sniff configuration on attribute in script element
                    src = (script.getAttribute("data-dojo-config") || script.getAttribute("djConfig"));
                    if (src) {
                        dojoSniffConfig = req.eval("({ " + src + " })", "data-dojo-config");
                    }

                    // sniff requirejs attribute
                    if (0) {
                        var dataMain = script.getAttribute("data-main");
                        if (dataMain) {
                            dojoSniffConfig.deps = dojoSniffConfig.deps || [dataMain];
                        }
                    }
                    break;
                }
            }
        }

        if (0) {
            // pass down doh.testConfig from parent as if it were a data-dojo-config
            try {
                if (window.parent != window && window.parent.require) {
                    var doh = window.parent.require("doh");
                    doh && mix(dojoSniffConfig, doh.testConfig);
                }
            } catch (e) {}
        }

        // configure the loader; let the user override defaults
        req.rawConfig = {};
        config(defaultConfig, 1);

        // do this before setting userConfig/sniffConfig to allow userConfig/sniff overrides
        if (0) {
            packs.dojo.location = dojoDir;
            if (dojoDir) {
                dojoDir += "/";
            }
            packs.dijit.location = dojoDir + "../dijit/";
            packs.dojox.location = dojoDir + "../dojox/";
        }

        config(userConfig, 1);
        config(dojoSniffConfig, 1);

    } else {
        // no config API, assume defaultConfig has everything the loader needs...for the entire lifetime of the application
        paths = defaultConfig.paths;
        pathsMapProg = defaultConfig.pathsMapProg;
        packs = defaultConfig.packs;
        aliases = defaultConfig.aliases;
        mapProgs = defaultConfig.mapProgs;
        modules = defaultConfig.modules;
        cache = defaultConfig.cache;
        cacheBust = defaultConfig.cacheBust;

        // remember the default config for other processes (e.g., dojo/config)
        req.rawConfig = defaultConfig;
    }


    if (0) {
        req.combo = req.combo || {
            add: noop
        };
        var comboPending = 0,
            combosPending = [],
            comboPendingTimer = null;
    }


    // build the loader machinery iaw configuration, including has feature tests
    var injectDependencies = function(module) {
            // checkComplete!=0 holds the idle signal; we're not idle if we're injecting dependencies
            guardCheckComplete(function() {
                forEach(module.deps, injectModule);
                if (0 && comboPending && !comboPendingTimer) {
                    comboPendingTimer = setTimeout(function() {
                        comboPending = 0;
                        comboPendingTimer = null;
                        req.combo.done(function(mids, url) {
                            var onLoadCallback = function() {
                                // defQ is a vector of module definitions 1-to-1, onto mids
                                runDefQ(0, mids);
                                checkComplete();
                            };
                            combosPending.push(mids);
                            injectingModule = mids;
                            req.injectUrl(url, onLoadCallback, mids);
                            injectingModule = 0;
                        }, req);
                    }, 0);
                }
            });
        },

        contextRequire = function(a1, a2, a3, referenceModule, contextRequire) {
            var module, syntheticMid;
            if (isString(a1)) {
                // signature is (moduleId)
                module = getModule(a1, referenceModule, true);
                if (module && module.executed) {
                    return module.result;
                }
                throw makeError("undefinedModule", a1);
            }
            if (!isArray(a1)) {
                // a1 is a configuration
                config(a1, 0, referenceModule);

                // juggle args; (a2, a3) may be (dependencies, callback)
                a1 = a2;
                a2 = a3;
            }
            if (isArray(a1)) {
                // signature is (requestList [,callback])
                if (!a1.length) {
                    a2 && a2();
                } else {
                    syntheticMid = "require*" + uid();

                    // resolve the request list with respect to the reference module
                    for (var mid, deps = [], i = 0; i < a1.length;) {
                        mid = a1[i++];
                        deps.push(getModule(mid, referenceModule));
                    }

                    // construct a synthetic module to control execution of the requestList, and, optionally, callback
                    module = mix(makeModuleInfo("", syntheticMid, 0, ""), {
                        injected: arrived,
                        deps: deps,
                        def: a2 || noop,
                        require: referenceModule ? referenceModule.require : req,
                        gc: 1 //garbage collect
                    });
                    modules[module.mid] = module;

                    // checkComplete!=0 holds the idle signal; we're not idle if we're injecting dependencies
                    injectDependencies(module);

                    // try to immediately execute
                    // if already traversing a factory tree, then strict causes circular dependency to abort the execution; maybe
                    // it's possible to execute this require later after the current traversal completes and avoid the circular dependency.
                    // ...but *always* insist on immediate in synch mode
                    var strict = checkCompleteGuard && legacyMode != sync;
                    guardCheckComplete(function() {
                        execModule(module, strict);
                    });
                    if (!module.executed) {
                        // some deps weren't on board or circular dependency detected and strict; therefore, push into the execQ
                        execQ.push(module);
                    }
                    checkComplete();
                }
            }
            return contextRequire;
        },

        createRequire = function(module) {
            if (!module) {
                return req;
            }
            var result = module.require;
            if (!result) {
                result = function(a1, a2, a3) {
                    return contextRequire(a1, a2, a3, module, result);
                };
                module.require = mix(result, req);
                result.module = module;
                result.toUrl = function(name) {
                    return toUrl(name, module);
                };
                result.toAbsMid = function(mid) {
                    return toAbsMid(mid, module);
                };
                if (0) {
                    result.undef = function(mid) {
                        req.undef(mid, module);
                    };
                }
                if (0) {
                    result.syncLoadNls = function(mid) {
                        var nlsModuleInfo = getModuleInfo(mid, module),
                            nlsModule = modules[nlsModuleInfo.mid];
                        if (!nlsModule || !nlsModule.executed) {
                            cached = cache[nlsModuleInfo.mid] || cache[urlKeyPrefix + nlsModuleInfo.url];
                            if (cached) {
                                evalModuleText(cached);
                                nlsModule = modules[nlsModuleInfo.mid];
                            }
                        }
                        return nlsModule && nlsModule.executed && nlsModule.result;
                    };
                }

            }
            return result;
        },

        execQ =
        // The list of modules that need to be evaluated.
        [],

        defQ =
        // The queue of define arguments sent to loader.
        [],

        waiting =
        // The set of modules upon which the loader is waiting for definition to arrive
        {},

        setRequested = function(module) {
            module.injected = requested;
            waiting[module.mid] = 1;
            if (module.url) {
                waiting[module.url] = module.pack || 1;
            }
            startTimer();
        },

        setArrived = function(module) {
            module.injected = arrived;
            delete waiting[module.mid];
            if (module.url) {
                delete waiting[module.url];
            }
            if (isEmpty(waiting)) {
                clearTimer();
                0 && legacyMode == xd && (legacyMode = sync);
            }
        },

        execComplete = req.idle =
        // says the loader has completed (or not) its work
        function() {
            return !defQ.length && isEmpty(waiting) && !execQ.length && !checkCompleteGuard;
        },

        runMapProg = function(targetMid, map) {
            // search for targetMid in map; return the map item if found; falsy otherwise
            if (map) {
                for (var i = 0; i < map.length; i++) {
                    if (map[i][2].test(targetMid)) {
                        return map[i];
                    }
                }
            }
            return 0;
        },

        compactPath = function(path) {
            var result = [],
                segment, lastSegment;
            path = path.replace(/\\/g, '/').split('/');
            while (path.length) {
                segment = path.shift();
                if (segment == ".." && result.length && lastSegment != "..") {
                    result.pop();
                    lastSegment = result[result.length - 1];
                } else if (segment != ".") {
                    result.push(lastSegment = segment);
                } // else ignore "."
            }
            return result.join("/");
        },

        makeModuleInfo = function(pid, mid, pack, url) {
            if (0) {
                var xd = req.isXdUrl(url);
                return {
                    pid: pid,
                    mid: mid,
                    pack: pack,
                    url: url,
                    executed: 0,
                    def: 0,
                    isXd: xd,
                    isAmd: !!(xd || (packs[pid] && packs[pid].isAmd))
                };
            } else {
                return {
                    pid: pid,
                    mid: mid,
                    pack: pack,
                    url: url,
                    executed: 0,
                    def: 0
                };
            }
        },

        getModuleInfo_ = function(mid, referenceModule, packs, modules, baseUrl, mapProgs, pathsMapProg, alwaysCreate) {
            // arguments are passed instead of using lexical variables so that this function my be used independent of the loader (e.g., the builder)
            // alwaysCreate is useful in this case so that getModuleInfo never returns references to real modules owned by the loader
            var pid, pack, midInPackage, mapProg, mapItem, url, result, isRelative, requestedMid;
            requestedMid = mid;
            isRelative = /^\./.test(mid);
            if (/(^\/)|(\:)|(\.js$)/.test(mid) || (isRelative && !referenceModule)) {
                // absolute path or protocol of .js filetype, or relative path but no reference module and therefore relative to page
                // whatever it is, it's not a module but just a URL of some sort
                // note: pid===0 indicates the routine is returning an unmodified mid

                return makeModuleInfo(0, mid, 0, mid);
            } else {
                // relative module ids are relative to the referenceModule; get rid of any dots
                mid = compactPath(isRelative ? (referenceModule.mid + "/../" + mid) : mid);
                if (/^\./.test(mid)) {
                    throw makeError("irrationalPath", mid);
                }
                // at this point, mid is an absolute mid

                // map the mid
                if (referenceModule) {
                    mapItem = runMapProg(referenceModule.mid, mapProgs);
                }
                mapItem = mapItem || mapProgs.star;
                mapItem = mapItem && runMapProg(mid, mapItem[1]);

                if (mapItem) {
                    mid = mapItem[1] + mid.substring(mapItem[3]);
                }

                match = mid.match(/^([^\/]+)(\/(.+))?$/);
                pid = match ? match[1] : "";
                if ((pack = packs[pid])) {
                    mid = pid + "/" + (midInPackage = (match[3] || pack.main));
                } else {
                    pid = "";
                }

                // search aliases
                var candidateLength = 0,
                    candidate = 0;
                forEach(aliases, function(pair) {
                    var match = mid.match(pair[0]);
                    if (match && match.length > candidateLength) {
                        candidate = isFunction(pair[1]) ? mid.replace(pair[0], pair[1]) : pair[1];
                    }
                });
                if (candidate) {
                    return getModuleInfo_(candidate, 0, packs, modules, baseUrl, mapProgs, pathsMapProg, alwaysCreate);
                }

                result = modules[mid];
                if (result) {
                    return alwaysCreate ? makeModuleInfo(result.pid, result.mid, result.pack, result.url) : modules[mid];
                }
            }
            // get here iff the sought-after module does not yet exist; therefore, we need to compute the URL given the
            // fully resolved (i.e., all relative indicators and package mapping resolved) module id

            // note: pid!==0 indicates the routine is returning a url that has .js appended unmodified mid
            mapItem = runMapProg(mid, pathsMapProg);
            if (mapItem) {
                url = mapItem[1] + mid.substring(mapItem[3]);
            } else if (pid) {
                url = pack.location + "/" + midInPackage;
            } else if (0) {
                url = "../" + mid;
            } else {
                url = mid;
            }
            // if result is not absolute, add baseUrl
            if (!(/(^\/)|(\:)/.test(url))) {
                url = baseUrl + url;
            }
            url += ".js";
            return makeModuleInfo(pid, mid, pack, compactPath(url));
        },

        getModuleInfo = function(mid, referenceModule) {
            return getModuleInfo_(mid, referenceModule, packs, modules, req.baseUrl, mapProgs, pathsMapProg);
        },

        resolvePluginResourceId = function(plugin, prid, referenceModule) {
            return plugin.normalize ? plugin.normalize(prid, function(mid) {
                return toAbsMid(mid, referenceModule);
            }) : toAbsMid(prid, referenceModule);
        },

        dynamicPluginUidGenerator = 0,

        getModule = function(mid, referenceModule, immediate) {
            // compute and optionally construct (if necessary) the module implied by the mid with respect to referenceModule
            var match, plugin, prid, result;
            match = mid.match(/^(.+?)\!(.*)$/);
            if (match) {
                // name was <plugin-module>!<plugin-resource-id>
                plugin = getModule(match[1], referenceModule, immediate);

                if (0 && legacyMode == sync && !plugin.executed) {
                    injectModule(plugin);
                    if (plugin.injected === arrived && !plugin.executed) {
                        guardCheckComplete(function() {
                            execModule(plugin);
                        });
                    }
                    if (plugin.executed) {
                        promoteModuleToPlugin(plugin);
                    } else {
                        // we are in xdomain mode for some reason
                        execQ.unshift(plugin);
                    }
                }



                if (plugin.executed === executed && !plugin.load) {
                    // executed the module not knowing it was a plugin
                    promoteModuleToPlugin(plugin);
                }

                // if the plugin has not been loaded, then can't resolve the prid and  must assume this plugin is dynamic until we find out otherwise
                if (plugin.load) {
                    prid = resolvePluginResourceId(plugin, match[2], referenceModule);
                    mid = (plugin.mid + "!" + (plugin.dynamic ? ++dynamicPluginUidGenerator + "!" : "") + prid);
                } else {
                    prid = match[2];
                    mid = plugin.mid + "!" + (++dynamicPluginUidGenerator) + "!waitingForPlugin";
                }
                result = {
                    plugin: plugin,
                    mid: mid,
                    req: createRequire(referenceModule),
                    prid: prid
                };
            } else {
                result = getModuleInfo(mid, referenceModule);
            }
            return modules[result.mid] || (!immediate && (modules[result.mid] = result));
        },

        toAbsMid = req.toAbsMid = function(mid, referenceModule) {
            return getModuleInfo(mid, referenceModule).mid;
        },

        toUrl = req.toUrl = function(name, referenceModule) {
            var moduleInfo = getModuleInfo(name + "/x", referenceModule),
                url = moduleInfo.url;
            return fixupUrl(moduleInfo.pid === 0 ?
                // if pid===0, then name had a protocol or absolute path; either way, toUrl is the identify function in such cases
                name :
                // "/x.js" since getModuleInfo automatically appends ".js" and we appended "/x" to make name look likde a module id
                url.substring(0, url.length - 5)
            );
        },

        nonModuleProps = {
            injected: arrived,
            executed: executed,
            def: nonmodule,
            result: nonmodule
        },

        makeCjs = function(mid) {
            return modules[mid] = mix({
                mid: mid
            }, nonModuleProps);
        },

        cjsRequireModule = makeCjs("require"),
        cjsExportsModule = makeCjs("exports"),
        cjsModuleModule = makeCjs("module"),

        runFactory = function(module, args) {
            req.trace("loader-run-factory", [module.mid]);
            var factory = module.def,
                result;
            0 && syncExecStack.unshift(module);
            if (0) {
                try {
                    result = isFunction(factory) ? factory.apply(null, args) : factory;
                } catch (e) {
                    signal(error, module.result = makeError("factoryThrew", [module, e]));
                }
            } else {
                result = isFunction(factory) ? factory.apply(null, args) : factory;
            }
            module.result = result === undefined && module.cjs ? module.cjs.exports : result;
            0 && syncExecStack.shift(module);
        },

        abortExec = {},

        defOrder = 0,

        promoteModuleToPlugin = function(pluginModule) {
            var plugin = pluginModule.result;
            pluginModule.dynamic = plugin.dynamic;
            pluginModule.normalize = plugin.normalize;
            pluginModule.load = plugin.load;
            return pluginModule;
        },

        resolvePluginLoadQ = function(plugin) {
            // plugins is a newly executed module that has a loadQ waiting to run

            // step 1: traverse the loadQ and fixup the mid and prid; remember the map from original mid to new mid
            // recall the original mid was created before the plugin was on board and therefore it was impossible to
            // compute the final mid; accordingly, prid may or may not change, but the mid will definitely change
            var map = {};
            forEach(plugin.loadQ, function(pseudoPluginResource) {
                // manufacture and insert the real module in modules
                var prid = resolvePluginResourceId(plugin, pseudoPluginResource.prid, pseudoPluginResource.req.module),
                    mid = plugin.dynamic ? pseudoPluginResource.mid.replace(/waitingForPlugin$/, prid) : (plugin.mid + "!" + prid),
                    pluginResource = mix(mix({}, pseudoPluginResource), {
                        mid: mid,
                        prid: prid,
                        injected: 0
                    });
                if (!modules[mid]) {
                    // create a new (the real) plugin resource and inject it normally now that the plugin is on board
                    injectPlugin(modules[mid] = pluginResource);
                } // else this was a duplicate request for the same (plugin, rid) for a nondynamic plugin

                // pluginResource is really just a placeholder with the wrong mid (because we couldn't calculate it until the plugin was on board)
                // mark is as arrived and delete it from modules; the real module was requested above
                map[pseudoPluginResource.mid] = modules[mid];
                setArrived(pseudoPluginResource);
                delete modules[pseudoPluginResource.mid];
            });
            plugin.loadQ = 0;

            // step2: replace all references to any placeholder modules with real modules
            var substituteModules = function(module) {
                for (var replacement, deps = module.deps || [], i = 0; i < deps.length; i++) {
                    replacement = map[deps[i].mid];
                    if (replacement) {
                        deps[i] = replacement;
                    }
                }
            };
            for (var p in modules) {
                substituteModules(modules[p]);
            }
            forEach(execQ, substituteModules);
        },

        finishExec = function(module) {
            req.trace("loader-finish-exec", [module.mid]);
            module.executed = executed;
            module.defOrder = defOrder++;
            0 && forEach(module.provides, function(cb) {
                cb();
            });
            if (module.loadQ) {
                // the module was a plugin
                promoteModuleToPlugin(module);
                resolvePluginLoadQ(module);
            }
            // remove all occurences of this module from the execQ
            for (i = 0; i < execQ.length;) {
                if (execQ[i] === module) {
                    execQ.splice(i, 1);
                } else {
                    i++;
                }
            }
            // delete references to synthetic modules
            if (/^require\*/.test(module.mid)) {
                delete modules[module.mid];
            }
        },

        circleTrace = [],

        execModule = function(module, strict) {
            // run the dependency vector, then run the factory for module
            if (module.executed === executing) {
                req.trace("loader-circular-dependency", [circleTrace.concat(module.mid).join("->")]);
                return (!module.def || strict) ? abortExec : (module.cjs && module.cjs.exports);
            }
            // at this point the module is either not executed or fully executed


            if (!module.executed) {
                if (!module.def) {
                    return abortExec;
                }
                var mid = module.mid,
                    deps = module.deps || [],
                    arg, argResult,
                    args = [],
                    i = 0;

                if (0) {
                    circleTrace.push(mid);
                    req.trace("loader-exec-module", ["exec", circleTrace.length, mid]);
                }

                // for circular dependencies, assume the first module encountered was executed OK
                // modules that circularly depend on a module that has not run its factory will get
                // the premade cjs.exports===module.result. They can take a reference to this object and/or
                // add properties to it. When the module finally runs its factory, the factory can
                // read/write/replace this object. Notice that so long as the object isn't replaced, any
                // reference taken earlier while walking the deps list is still valid.
                module.executed = executing;
                while (i < deps.length) {
                    arg = deps[i++];
                    argResult = ((arg === cjsRequireModule) ? createRequire(module) :
                        ((arg === cjsExportsModule) ? module.cjs.exports :
                            ((arg === cjsModuleModule) ? module.cjs :
                                execModule(arg, strict))));
                    if (argResult === abortExec) {
                        module.executed = 0;
                        req.trace("loader-exec-module", ["abort", mid]);
                        0 && circleTrace.pop();
                        return abortExec;
                    }
                    args.push(argResult);
                }
                runFactory(module, args);
                finishExec(module);
                0 && circleTrace.pop();
            }
            // at this point the module is guaranteed fully executed

            return module.result;
        },


        checkCompleteGuard = 0,

        guardCheckComplete = function(proc) {
            try {
                checkCompleteGuard++;
                proc();
            } finally {
                checkCompleteGuard--;
            }
            if (execComplete()) {
                signal("idle", []);
            }
        },

        checkComplete = function() {
            // keep going through the execQ as long as at least one factory is executed
            // plugins, recursion, cached modules all make for many execution path possibilities
            if (checkCompleteGuard) {
                return;
            }
            guardCheckComplete(function() {
                checkDojoRequirePlugin();
                for (var currentDefOrder, module, i = 0; i < execQ.length;) {
                    currentDefOrder = defOrder;
                    module = execQ[i];
                    execModule(module);
                    if (currentDefOrder != defOrder) {
                        // defOrder was bumped one or more times indicating something was executed (note, this indicates
                        // the execQ was modified, maybe a lot (for example a later module causes an earlier module to execute)
                        checkDojoRequirePlugin();
                        i = 0;
                    } else {
                        // nothing happened; check the next module in the exec queue
                        i++;
                    }
                }
            });
        };


    if (0) {
        req.undef = function(moduleId, referenceModule) {
            // In order to reload a module, it must be undefined (this routine) and then re-requested.
            // This is useful for testing frameworks (at least).
            var module = getModule(moduleId, referenceModule);
            setArrived(module);
            delete modules[module.mid];
        };
    }

    if (1) {
        if (has("dojo-loader-eval-hint-url") === undefined) {
            has.add("dojo-loader-eval-hint-url", 1);
        }

        var fixupUrl = function(url) {
                url += ""; // make sure url is a Javascript string (some paths may be a Java string)
                return url + (cacheBust ? ((/\?/.test(url) ? "&" : "?") + cacheBust) : "");
            },

            injectPlugin = function(
                module
            ) {
                // injects the plugin module given by module; may have to inject the plugin itself
                var plugin = module.plugin;

                if (plugin.executed === executed && !plugin.load) {
                    // executed the module not knowing it was a plugin
                    promoteModuleToPlugin(plugin);
                }

                var onLoad = function(def) {
                    module.result = def;
                    setArrived(module);
                    finishExec(module);
                    checkComplete();
                };

                if (plugin.load) {
                    plugin.load(module.prid, module.req, onLoad);
                } else if (plugin.loadQ) {
                    plugin.loadQ.push(module);
                } else {
                    // the unshift instead of push is important: we don't want plugins to execute as
                    // dependencies of some other module because this may cause circles when the plugin
                    // loadQ is run; also, generally, we want plugins to run early since they may load
                    // several other modules and therefore can potentially unblock many modules
                    plugin.loadQ = [module];
                    execQ.unshift(plugin);
                    injectModule(plugin);
                }
            },

            // for IE, injecting a module may result in a recursive execution if the module is in the cache

            cached = 0,

            injectingModule = 0,

            injectingCachedModule = 0,

            evalModuleText = function(text, module) {
                // see def() for the injectingCachedModule bracket; it simply causes a short, safe curcuit
                if (0) {
                    text = text.replace(/"use strict"/g, '');
                }
                injectingCachedModule = 1;
                if (0) {
                    try {
                        if (text === cached) {
                            cached.call(null);
                        } else {
                            req.eval(text, has("dojo-loader-eval-hint-url") ? module.url : module.mid);
                        }
                    } catch (e) {
                        signal(error, makeError("evalModuleThrew", module));
                    }
                } else {
                    if (text === cached) {
                        cached.call(null);
                    } else {
                        req.eval(text, has("dojo-loader-eval-hint-url") ? module.url : module.mid);
                    }
                }
                injectingCachedModule = 0;
            },

            injectModule = function(module) {
                // Inject the module. In the browser environment, this means appending a script element into
                // the document; in other environments, it means loading a file.
                //
                // If in synchronous mode, then get the module synchronously if it's not xdomainLoading.

                var mid = module.mid,
                    url = module.url;
                if (module.executed || module.injected || waiting[mid] || (module.url && ((module.pack && waiting[module.url] === module.pack) || waiting[module.url] == 1))) {
                    return;
                }
                setRequested(module);

                if (0) {
                    var viaCombo = 0;
                    if (module.plugin && module.plugin.isCombo) {
                        // a combo plugin; therefore, must be handled by combo service
                        // the prid should have already been converted to a URL (if required by the plugin) during
                        // the normalze process; in any event, there is no way for the loader to know how to
                        // to the conversion; therefore the third argument is zero
                        req.combo.add(module.plugin.mid, module.prid, 0, req);
                        viaCombo = 1;
                    } else if (!module.plugin) {
                        viaCombo = req.combo.add(0, module.mid, module.url, req);
                    }
                    if (viaCombo) {
                        comboPending = 1;
                        return;
                    }
                }

                if (module.plugin) {
                    injectPlugin(module);
                    return;
                } // else a normal module (not a plugin)


                var onLoadCallback = function() {
                    runDefQ(module);
                    if (module.injected !== arrived) {
                        // the script that contained the module arrived and has been executed yet
                        // nothing was added to the defQ (so it wasn't an AMD module) and the module
                        // wasn't marked as arrived by dojo.provide (so it wasn't a v1.6- module);
                        // therefore, it must not have been a module; adjust state accordingly
                        setArrived(module);
                        mix(module, nonModuleProps);
                        req.trace("loader-define-nonmodule", [module.url]);
                    }

                    if (0 && legacyMode) {
                        // must call checkComplete even in for sync loader because we may be in xdomainLoading mode;
                        // but, if xd loading, then don't call checkComplete until out of the current sync traversal
                        // in order to preserve order of execution of the dojo.required modules
                        !syncExecStack.length && checkComplete();
                    } else {
                        checkComplete();
                    }
                };
                cached = cache[mid] || cache[urlKeyPrefix + module.url];
                if (cached) {
                    req.trace("loader-inject", ["cache", module.mid, url]);
                    evalModuleText(cached, module);
                    onLoadCallback();
                    return;
                }
                if (0 && legacyMode) {
                    if (module.isXd) {
                        // switch to async mode temporarily; if current legacyMode!=sync, then is must be one of {legacyAsync, xd, false}
                        legacyMode == sync && (legacyMode = xd);
                        // fall through and load via script injection
                    } else if (module.isAmd && legacyMode != sync) {
                        // fall through and load via script injection
                    } else {
                        // mode may be sync, xd/legacyAsync, or async; module may be AMD or legacy; but module is always located on the same domain
                        var xhrCallback = function(text) {
                            if (legacyMode == sync) {
                                // the top of syncExecStack gives the current synchronously executing module; the loader needs
                                // to know this if it has to switch to async loading in the middle of evaluating a legacy module
                                // this happens when a modules dojo.require's a module that must be loaded async because it's xdomain
                                // (using unshift/shift because there is no back() methods for Javascript arrays)
                                syncExecStack.unshift(module);
                                evalModuleText(text, module);
                                syncExecStack.shift();

                                // maybe the module was an AMD module
                                runDefQ(module);

                                // legacy modules never get to defineModule() => cjs and injected never set; also evaluation implies executing
                                if (!module.cjs) {
                                    setArrived(module);
                                    finishExec(module);
                                }

                                if (module.finish) {
                                    // while synchronously evaluating this module, dojo.require was applied referencing a module
                                    // that had to be loaded async; therefore, the loader stopped answering all dojo.require
                                    // requests so they could be answered completely in the correct sequence; module.finish gives
                                    // the list of dojo.requires that must be re-applied once all target modules are available;
                                    // make a synthetic module to execute the dojo.require's in the correct order

                                    // compute a guarnateed-unique mid for the synthetic finish module; remember the finish vector; remove it from the reference module
                                    // TODO: can we just leave the module.finish...what's it hurting?
                                    var finishMid = mid + "*finish",
                                        finish = module.finish;
                                    delete module.finish;

                                    def(finishMid, ["dojo", ("dojo/require!" + finish.join(",")).replace(/\./g, "/")], function(dojo) {
                                        forEach(finish, function(mid) {
                                            dojo.require(mid);
                                        });
                                    });
                                    // unshift, not push, which causes the current traversal to be reattempted from the top
                                    execQ.unshift(getModule(finishMid));
                                }
                                onLoadCallback();
                            } else {
                                text = transformToAmd(module, text);
                                if (text) {
                                    evalModuleText(text, module);
                                    onLoadCallback();
                                } else {
                                    // if transformToAmd returned falsy, then the module was already AMD and it can be script-injected
                                    // do so to improve debugability(even though it means another download...which probably won't happen with a good browser cache)
                                    injectingModule = module;
                                    req.injectUrl(fixupUrl(url), onLoadCallback, module);
                                    injectingModule = 0;
                                }
                            }
                        };

                        req.trace("loader-inject", ["xhr", module.mid, url, legacyMode != sync]);
                        if (0) {
                            try {
                                req.getText(url, legacyMode != sync, xhrCallback);
                            } catch (e) {
                                signal(error, makeError("xhrInjectFailed", [module, e]));
                            }
                        } else {
                            req.getText(url, legacyMode != sync, xhrCallback);
                        }
                        return;
                    }
                } // else async mode or fell through in xdomain loading mode; either way, load by script injection
                req.trace("loader-inject", ["script", module.mid, url]);
                injectingModule = module;
                req.injectUrl(fixupUrl(url), onLoadCallback, module);
                injectingModule = 0;
            },

            defineModule = function(module, deps, def) {
                req.trace("loader-define-module", [module.mid, deps]);

                if (0 && module.plugin && module.plugin.isCombo) {
                    // the module is a plugin resource loaded by the combo service
                    // note: check for module.plugin should be enough since normal plugin resources should
                    // not follow this path; module.plugin.isCombo is future-proofing belt and suspenders
                    module.result = isFunction(def) ? def() : def;
                    setArrived(module);
                    finishExec(module);
                    return module;
                };

                var mid = module.mid;
                if (module.injected === arrived) {
                    signal(error, makeError("multipleDefine", module));
                    return module;
                }
                mix(module, {
                    deps: deps,
                    def: def,
                    cjs: {
                        id: module.mid,
                        uri: module.url,
                        exports: (module.result = {}),
                        setExports: function(exports) {
                            module.cjs.exports = exports;
                        },
                        config: function() {
                            return module.config;
                        }
                    }
                });

                // resolve deps with respect to this module
                for (var i = 0; i < deps.length; i++) {
                    deps[i] = getModule(deps[i], module);
                }

                if (0 && legacyMode && !waiting[mid]) {
                    // the module showed up without being asked for; it was probably in a <script> element
                    injectDependencies(module);
                    execQ.push(module);
                    checkComplete();
                }
                setArrived(module);

                if (!isFunction(def) && !deps.length) {
                    module.result = def;
                    finishExec(module);
                }

                return module;
            },

            runDefQ = function(referenceModule, mids) {
                // defQ is an array of [id, dependencies, factory]
                // mids (if any) is a vector of mids given by a combo service
                var definedModules = [],
                    module, args;
                while (defQ.length) {
                    args = defQ.shift();
                    mids && (args[0] = mids.shift());
                    // explicit define indicates possible multiple modules in a single file; delay injecting dependencies until defQ fully
                    // processed since modules earlier in the queue depend on already-arrived modules that are later in the queue
                    // TODO: what if no args[0] and no referenceModule
                    module = (args[0] && getModule(args[0])) || referenceModule;
                    definedModules.push([module, args[1], args[2]]);
                }
                consumePendingCacheInsert(referenceModule);
                forEach(definedModules, function(args) {
                    injectDependencies(defineModule.apply(null, args));
                });
            };
    }

    var timerId = 0,
        clearTimer = noop,
        startTimer = noop;
    if (0) {
        // Timer machinery that monitors how long the loader is waiting and signals an error when the timer runs out.
        clearTimer = function() {
                timerId && clearTimeout(timerId);
                timerId = 0;
            },

            startTimer = function() {
                clearTimer();
                if (req.waitms) {
                    timerId = window.setTimeout(function() {
                        clearTimer();
                        signal(error, makeError("timeout", waiting));
                    }, req.waitms);
                }
            };
    }

    if (1) {
        // the typically unnecessary !! in front of doc.attachEvent is due to an opera bug; see	#15096
        has.add("ie-event-behavior", !!doc.attachEvent && (typeof opera === "undefined" || opera.toString() != "[object Opera]"));
    }

    if (1 && (1 || 1)) {
        var domOn = function(node, eventName, ieEventName, handler) {
                // Add an event listener to a DOM node using the API appropriate for the current browser;
                // return a function that will disconnect the listener.
                if (!has("ie-event-behavior")) {
                    node.addEventListener(eventName, handler, false);
                    return function() {
                        node.removeEventListener(eventName, handler, false);
                    };
                } else {
                    node.attachEvent(ieEventName, handler);
                    return function() {
                        node.detachEvent(ieEventName, handler);
                    };
                }
            },
            windowOnLoadListener = domOn(window, "load", "onload", function() {
                req.pageLoaded = 1;
                doc.readyState != "complete" && (doc.readyState = "complete");
                windowOnLoadListener();
            });

        if (1) {
            // if the loader is on the page, there must be at least one script element
            // getting its parent and then doing insertBefore solves the "Operation Aborted"
            // error in IE from appending to a node that isn't properly closed; see
            // dojo/tests/_base/loader/requirejs/simple-badbase.html for an example
            var sibling = doc.getElementsByTagName("script")[0],
                insertPoint = sibling.parentNode;
            req.injectUrl = function(url, callback, owner) {
                // insert a script element to the insert-point element with src=url;
                // apply callback upon detecting the script has loaded.

                var node = owner.node = doc.createElement("script"),
                    onLoad = function(e) {
                        e = e || window.event;
                        var node = e.target || e.srcElement;
                        if (e.type === "load" || /complete|loaded/.test(node.readyState)) {
                            loadDisconnector();
                            errorDisconnector();
                            callback && callback();
                        }
                    },
                    loadDisconnector = domOn(node, "load", "onreadystatechange", onLoad),
                    errorDisconnector = domOn(node, "error", "onerror", function(e) {
                        loadDisconnector();
                        errorDisconnector();
                        signal(error, makeError("scriptError", [url, e]));
                    });

                node.type = "text/javascript";
                node.charset = "utf-8";
                node.src = url;
                insertPoint.insertBefore(node, sibling);
                return node;
            };
        }
    }

    if (0) {
        req.log = function() {
            try {
                for (var i = 0; i < arguments.length; i++) {
                    console.log(arguments[i]);
                }
            } catch (e) {}
        };
    } else {
        req.log = noop;
    }

    if (0) {
        var trace = req.trace = function(
            group, // the trace group to which this application belongs
            args // the contents of the trace
        ) {
            ///
            // Tracing interface by group.
            //
            // Sends the contents of args to the console iff (req.trace.on && req.trace[group])

            if (trace.on && trace.group[group]) {
                signal("trace", [group, args]);
                for (var arg, dump = [], text = "trace:" + group + (args.length ? (":" + args[0]) : ""), i = 1; i < args.length;) {
                    arg = args[i++];
                    if (isString(arg)) {
                        text += ", " + arg;
                    } else {
                        dump.push(arg);
                    }
                }
                req.log(text);
                dump.length && dump.push(".");
                req.log.apply(req, dump);
            }
        };
        mix(trace, {
            on: 1,
            group: {},
            set: function(group, value) {
                if (isString(group)) {
                    trace.group[group] = value;
                } else {
                    mix(trace.group, group);
                }
            }
        });
        trace.set(mix(mix(mix({}, defaultConfig.trace), userConfig.trace), dojoSniffConfig.trace));
        on("config", function(config) {
            config.trace && trace.set(config.trace);
        });
    } else {
        req.trace = noop;
    }

    var def = function(
        mid, //(commonjs.moduleId, optional) list of modules to be loaded before running factory
        dependencies, //(array of commonjs.moduleId, optional)
        factory //(any)
    ) {
        ///
        // Advises the loader of a module factory. //Implements http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition.
        ///
        //note
        // CommonJS factory scan courtesy of http://requirejs.org

        var arity = arguments.length,
            defaultDeps = ["require", "exports", "module"],
            // the predominate signature...
            args = [0, mid, dependencies];
        if (arity == 1) {
            args = [0, (isFunction(mid) ? defaultDeps : []), mid];
        } else if (arity == 2 && isString(mid)) {
            args = [mid, (isFunction(dependencies) ? defaultDeps : []), dependencies];
        } else if (arity == 3) {
            args = [mid, dependencies, factory];
        }

        if (0 && args[1] === defaultDeps) {
            args[2].toString()
                .replace(/(\/\*([\s\S]*?)\*\/|\/\/(.*)$)/mg, "")
                .replace(/require\(["']([\w\!\-_\.\/]+)["']\)/g, function(match, dep) {
                    args[1].push(dep);
                });
        }

        req.trace("loader-define", args.slice(0, 2));
        var targetModule = args[0] && getModule(args[0]),
            module;
        if (targetModule && !waiting[targetModule.mid]) {
            // given a mid that hasn't been requested; therefore, defined through means other than injecting
            // consequent to a require() or define() application; examples include defining modules on-the-fly
            // due to some code path or including a module in a script element. In any case,
            // there is no callback waiting to finish processing and nothing to trigger the defQ and the
            // dependencies are never requested; therefore, do it here.
            injectDependencies(defineModule(targetModule, args[1], args[2]));
        } else if (!has("ie-event-behavior") || !1 || injectingCachedModule) {
            // not IE path: anonymous module and therefore must have been injected; therefore, onLoad will fire immediately
            // after script finishes being evaluated and the defQ can be run from that callback to detect the module id
            defQ.push(args);
        } else {
            // IE path: possibly anonymous module and therefore injected; therefore, cannot depend on 1-to-1,
            // in-order exec of onLoad with script eval (since it's IE) and must manually detect here
            targetModule = targetModule || injectingModule;
            if (!targetModule) {
                for (mid in waiting) {
                    module = modules[mid];
                    if (module && module.node && module.node.readyState === 'interactive') {
                        targetModule = module;
                        break;
                    }
                }
                if (0 && !targetModule) {
                    for (var i = 0; i < combosPending.length; i++) {
                        targetModule = combosPending[i];
                        if (targetModule.node && targetModule.node.readyState === 'interactive') {
                            break;
                        }
                        targetModule = 0;
                    }
                }
            }
            if (0 && isArray(targetModule)) {
                injectDependencies(defineModule(getModule(targetModule.shift()), args[1], args[2]));
                if (!targetModule.length) {
                    combosPending.splice(i, 1);
                }
            } else if (targetModule) {
                consumePendingCacheInsert(targetModule);
                injectDependencies(defineModule(targetModule, args[1], args[2]));
            } else {
                signal(error, makeError("ieDefineFailed", args[0]));
            }
            checkComplete();
        }
    };
    def.amd = {
        vendor: "dojotoolkit.org"
    };

    if (0) {
        req.def = def;
    }

    // allow config to override default implemention of named functions; this is useful for
    // non-browser environments, e.g., overriding injectUrl, getText, log, etc. in node.js, Rhino, etc.
    // also useful for testing and monkey patching loader
    mix(mix(req, defaultConfig.loaderPatch), userConfig.loaderPatch);

    // now that req is fully initialized and won't change, we can hook it up to the error signal
    on(error, function(arg) {
        try {
            console.error(arg);
            if (arg instanceof Error) {
                for (var p in arg) {
                    console.log(p + ":", arg[p]);
                }
                console.log(".");
            }
        } catch (e) {}
    });

    // always publish these
    mix(req, {
        uid: uid,
        cache: cache,
        packs: packs
    });


    if (0) {
        mix(req, {
            // these may be interesting to look at when debugging
            paths: paths,
            aliases: aliases,
            modules: modules,
            legacyMode: legacyMode,
            execQ: execQ,
            defQ: defQ,
            waiting: waiting,

            // these are used for testing
            // TODO: move testing infrastructure to a different has feature
            packs: packs,
            mapProgs: mapProgs,
            pathsMapProg: pathsMapProg,
            listenerQueues: listenerQueues,

            // these are used by the builder (at least)
            computeMapProg: computeMapProg,
            runMapProg: runMapProg,
            compactPath: compactPath,
            getModuleInfo: getModuleInfo_
        });
    }

    // the loader can be defined exactly once; look for global define which is the symbol AMD loaders are
    // *required* to define (as opposed to require, which is optional)
    if (global.define) {
        if (0) {
            signal(error, makeError("defineAlreadyDefined", 0));
        }
        return;
    } else {
        global.define = def;
        global.require = req;
        if (0) {
            require = req;
        }
    }

    if (0 && req.combo && req.combo.plugins) {
        var plugins = req.combo.plugins,
            pluginName;
        for (pluginName in plugins) {
            mix(mix(getModule(pluginName), plugins[pluginName]), {
                isCombo: 1,
                executed: "executed",
                load: 1
            });
        }
    }

    if (1) {
        forEach(delayedModuleConfig, function(c) {
            config(c);
        });
        var bootDeps = dojoSniffConfig.deps || userConfig.deps || defaultConfig.deps,
            bootCallback = dojoSniffConfig.callback || userConfig.callback || defaultConfig.callback;
        req.boot = (bootDeps || bootCallback) ? [bootDeps || [], bootCallback] : 0;
    }
    if (!1) {
        !req.async && req(["dojo"]);
        req.boot && req.apply(null, req.boot);
    }
})
(this.dojoConfig || this.djConfig || this.require || {}, {
    aliases: [],
    async: 1,
    baseUrl: globalVP + "/saas/Components/default/resources/script/",
    deps: ["app/run"],
    hasCache: {
        'config-selectorEngine': "acme",
        'config-tlmSiblingOfDojo': 1,
        'dojo-built': 1,
        'dojo-loader': 1,
        dom: 1,
        'host-browser': 1
    },
    packages: [{
            location: "libraries/dtk/dojox",
            name: "dojox"
        },
        {
            location: "modules",
            name: "reg_modules"
        },
        {
            location: "libraries/hsbc/core",
            name: "hsbccore"
        },
        {
            location: "libraries/hsbc/bijit",
            name: "hsbcbijit"
        },
        {
            location: "libraries/dtk/dijit",
            name: "dijit"
        },
        {
            location: "libraries/dtk/dojo",
            name: "dojo"
        },
        {
            location: "app",
            name: "app"
        },
        {
            location: "config",
            name: "config"
        },
        {
            location: "libraries/hsbc/widget",
            name: "hsbcwidget"
        }
    ],
    parseOnLoad: false
});
require({
    cache: {
        'dojo/request/xhr': function() {
            define("dojo/request/xhr", [
                '../errors/RequestError',
                './watch',
                './handlers',
                './util',
                '../has'
                /*=====,
                	'../request',
                	'../_base/declare' =====*/
            ], function(RequestError, watch, handlers, util, has /*=====, request, declare =====*/ ) {
                has.add('native-xhr', function() {
                    // if true, the environment has a native XHR implementation
                    return typeof XMLHttpRequest !== 'undefined';
                });
                has.add('dojo-force-activex-xhr', function() {
                    return has('activex') && !document.addEventListener && window.location.protocol === 'file:';
                });

                has.add('native-xhr2', function() {
                    if (!has('native-xhr')) {
                        return;
                    }
                    var x = new XMLHttpRequest();
                    return typeof x['addEventListener'] !== 'undefined' &&
                        (typeof opera === 'undefined' || typeof x['upload'] !== 'undefined');
                });

                has.add('native-formdata', function() {
                    // if true, the environment has a native FormData implementation
                    return typeof FormData === 'function';
                });

                function handleResponse(response, error) {
                    var _xhr = response.xhr;
                    response.status = response.xhr.status;
                    response.text = _xhr.responseText;

                    if (response.options.handleAs === 'xml') {
                        response.data = _xhr.responseXML;
                    }

                    if (!error) {
                        try {
                            handlers(response);
                        } catch (e) {
                            error = e;
                        }
                    }

                    if (error) {
                        this.reject(error);
                    } else if (util.checkStatus(_xhr.status)) {
                        this.resolve(response);
                    } else {
                        error = new RequestError('Unable to load ' + response.url + ' status: ' + _xhr.status, response);

                        this.reject(error);
                    }
                }

                var isValid, isReady, addListeners, cancel;
                if (has('native-xhr2')) {
                    // Any platform with XHR2 will only use the watch mechanism for timeout.

                    isValid = function(response) {
                        // summary:
                        //		Check to see if the request should be taken out of the watch queue
                        return !this.isFulfilled();
                    };
                    cancel = function(dfd, response) {
                        // summary:
                        //		Canceler for deferred
                        response.xhr.abort();
                    };
                    addListeners = function(_xhr, dfd, response) {
                        // summary:
                        //		Adds event listeners to the XMLHttpRequest object
                        function onLoad(evt) {
                            dfd.handleResponse(response);
                        }

                        function onError(evt) {
                            var _xhr = evt.target;
                            var error = new RequestError('Unable to load ' + response.url + ' status: ' + _xhr.status, response);
                            dfd.handleResponse(response, error);
                        }

                        function onProgress(evt) {
                            if (evt.lengthComputable) {
                                response.loaded = evt.loaded;
                                response.total = evt.total;
                                dfd.progress(response);
                            }
                        }

                        _xhr.addEventListener('load', onLoad, false);
                        _xhr.addEventListener('error', onError, false);
                        _xhr.addEventListener('progress', onProgress, false);

                        return function() {
                            _xhr.removeEventListener('load', onLoad, false);
                            _xhr.removeEventListener('error', onError, false);
                            _xhr.removeEventListener('progress', onProgress, false);
                        };
                    };
                } else {
                    isValid = function(response) {
                        return response.xhr.readyState; //boolean
                    };
                    isReady = function(response) {
                        return 4 === response.xhr.readyState; //boolean
                    };
                    cancel = function(dfd, response) {
                        // summary:
                        //		canceller function for util.deferred call.
                        var xhr = response.xhr;
                        var _at = typeof xhr.abort;
                        if (_at === 'function' || _at === 'object' || _at === 'unknown') {
                            xhr.abort();
                        }
                    };
                }

                var undefined,
                    defaultOptions = {
                        data: null,
                        query: null,
                        sync: false,
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    };

                function xhr(url, options, returnDeferred) {
                    var response = util.parseArgs(
                        url,
                        util.deepCreate(defaultOptions, options),
                        has('native-formdata') && options && options.data && options.data instanceof FormData
                    );
                    url = response.url;
                    options = response.options;

                    var remover,
                        last = function() {
                            remover && remover();
                        };

                    //Make the Deferred object for this xhr request.
                    var dfd = util.deferred(
                        response,
                        cancel,
                        isValid,
                        isReady,
                        handleResponse,
                        last
                    );
                    var _xhr = response.xhr = xhr._create();

                    if (!_xhr) {
                        // If XHR factory somehow returns nothings,
                        // cancel the deferred.
                        dfd.cancel(new RequestError('XHR was not created'));
                        return returnDeferred ? dfd : dfd.promise;
                    }

                    response.getHeader = function(headerName) {
                        return this.xhr.getResponseHeader(headerName);
                    };

                    if (addListeners) {
                        remover = addListeners(_xhr, dfd, response);
                    }

                    var data = options.data,
                        async = !options.sync,
                        method = options.method;

                    try {
                        // IE6 won't let you call apply() on the native function.
                        _xhr.open(method, url, async, options.user || undefined, options.password || undefined);

                        if (options.withCredentials) {
                            _xhr.withCredentials = options.withCredentials;
                        }

                        var headers = options.headers,
                            contentType;
                        if (headers) {
                            for (var hdr in headers) {
                                if (hdr.toLowerCase() === 'content-type') {
                                    contentType = headers[hdr];
                                } else if (headers[hdr]) {
                                    //Only add header if it has a value. This allows for instance, skipping
                                    //insertion of X-Requested-With by specifying empty value.
                                    _xhr.setRequestHeader(hdr, headers[hdr]);
                                }
                            }
                        }

                        if (contentType && contentType !== false) {
                            _xhr.setRequestHeader('Content-Type', contentType);
                        }
                        if (!headers || !('X-Requested-With' in headers)) {
                            _xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                        }

                        if (util.notify) {
                            util.notify.emit('send', response, dfd.promise.cancel);
                        }
                        _xhr.send(data);
                    } catch (e) {
                        dfd.reject(e);
                    }

                    watch(dfd);
                    _xhr = null;

                    return returnDeferred ? dfd : dfd.promise;
                }

                /*=====
                xhr = function(url, options){
                	// summary:
                	//		Sends a request using XMLHttpRequest with the given URL and options.
                	// url: String
                	//		URL to request
                	// options: dojo/request/xhr.__Options?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                xhr.__BaseOptions = declare(request.__BaseOptions, {
                	// sync: Boolean?
                	//		Whether to make a synchronous request or not. Default
                	//		is `false` (asynchronous).
                	// data: String|Object|FormData?
                	//		Data to transfer. This is ignored for GET and DELETE
                	//		requests.
                	// headers: Object?
                	//		Headers to use for the request.
                	// user: String?
                	//		Username to use during the request.
                	// password: String?
                	//		Password to use during the request.
                	// withCredentials: Boolean?
                	//		For cross-site requests, whether to send credentials
                	//		or not.
                });
                xhr.__MethodOptions = declare(null, {
                	// method: String?
                	//		The HTTP method to use to make the request. Must be
                	//		uppercase. Default is `"GET"`.
                });
                xhr.__Options = declare([xhr.__BaseOptions, xhr.__MethodOptions]);

                xhr.get = function(url, options){
                	// summary:
                	//		Send an HTTP GET request using XMLHttpRequest with the given URL and options.
                	// url: String
                	//		URL to request
                	// options: dojo/request/xhr.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                xhr.post = function(url, options){
                	// summary:
                	//		Send an HTTP POST request using XMLHttpRequest with the given URL and options.
                	// url: String
                	//		URL to request
                	// options: dojo/request/xhr.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                xhr.put = function(url, options){
                	// summary:
                	//		Send an HTTP PUT request using XMLHttpRequest with the given URL and options.
                	// url: String
                	//		URL to request
                	// options: dojo/request/xhr.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                xhr.del = function(url, options){
                	// summary:
                	//		Send an HTTP DELETE request using XMLHttpRequest with the given URL and options.
                	// url: String
                	//		URL to request
                	// options: dojo/request/xhr.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                =====*/
                xhr._create = function() {
                    // summary:
                    //		does the work of portably generating a new XMLHTTPRequest object.
                    throw new Error('XMLHTTP not available');
                };
                if (has('native-xhr') && !has('dojo-force-activex-xhr')) {
                    xhr._create = function() {
                        return new XMLHttpRequest();
                    };
                } else if (has('activex')) {
                    try {
                        new ActiveXObject('Msxml2.XMLHTTP');
                        xhr._create = function() {
                            return new ActiveXObject('Msxml2.XMLHTTP');
                        };
                    } catch (e) {
                        try {
                            new ActiveXObject('Microsoft.XMLHTTP');
                            xhr._create = function() {
                                return new ActiveXObject('Microsoft.XMLHTTP');
                            };
                        } catch (e) {}
                    }
                }

                util.addCommonMethods(xhr);

                return xhr;
            });

        },
        'dijit/form/nls/validate': function() {
            define("dijit/form/nls/validate", {
                root:
                    //begin v1.x content
                    ({
                        invalidMessage: "The value entered is not valid.",
                        missingMessage: "This value is required.",
                        rangeMessage: "This value is out of range."
                    })
                    //end v1.x content
                    ,
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });

        },
        'url:dijit/templates/CheckedMenuItem.html': "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,labelNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&#160;</td>\n</tr>\n",
        'dojo/sniff': function() {
            define(["./has"], function(has) {
                // module:
                //		dojo/sniff

                /*=====
                return function(){
                	// summary:
                	//		This module sets has() flags based on the current browser.
                	//		It returns the has() function.
                };
                =====*/

                if (1) {
                    var n = navigator,
                        dua = n.userAgent,
                        dav = n.appVersion,
                        tv = parseFloat(dav);

                    has.add("air", dua.indexOf("AdobeAIR") >= 0),
                        has.add("khtml", dav.indexOf("Konqueror") >= 0 ? tv : undefined);
                    has.add("webkit", parseFloat(dua.split("WebKit/")[1]) || undefined);
                    has.add("chrome", parseFloat(dua.split("Chrome/")[1]) || undefined);
                    has.add("safari", dav.indexOf("Safari") >= 0 && !has("chrome") ? parseFloat(dav.split("Version/")[1]) : undefined);
                    has.add("mac", dav.indexOf("Macintosh") >= 0);
                    has.add("quirks", document.compatMode == "BackCompat");
                    has.add("ios", /iPhone|iPod|iPad/.test(dua));
                    has.add("android", parseFloat(dua.split("Android ")[1]) || undefined);

                    if (!has("webkit")) {
                        // Opera
                        if (dua.indexOf("Opera") >= 0) {
                            // see http://dev.opera.com/articles/view/opera-ua-string-changes and http://www.useragentstring.com/pages/Opera/
                            // 9.8 has both styles; <9.8, 9.9 only old style
                            has.add("opera", tv >= 9.8 ? parseFloat(dua.split("Version/")[1]) || tv : tv);
                        }

                        // Mozilla and firefox
                        if (dua.indexOf("Gecko") >= 0 && !has("khtml") && !has("webkit")) {
                            has.add("mozilla", tv);
                        }
                        if (has("mozilla")) {
                            //We really need to get away from this. Consider a sane isGecko approach for the future.
                            has.add("ff", parseFloat(dua.split("Firefox/")[1] || dua.split("Minefield/")[1]) || undefined);
                        }

                        // IE
                        if (document.all && !has("opera")) {
                            var isIE = parseFloat(dav.split("MSIE ")[1]) || undefined;

                            //In cases where the page has an HTTP header or META tag with
                            //X-UA-Compatible, then it is in emulation mode.
                            //Make sure isIE reflects the desired version.
                            //document.documentMode of 5 means quirks mode.
                            //Only switch the value if documentMode's major version
                            //is different from isIE's major version.
                            var mode = document.documentMode;
                            if (mode && mode != 5 && Math.floor(isIE) != mode) {
                                isIE = mode;
                            }

                            has.add("ie", isIE);
                        }

                        // Wii
                        has.add("wii", typeof opera != "undefined" && opera.wiiremote);
                    }
                }

                return has;
            });

        },
        'dijit/form/TextBox': function() {
            require({
                cache: {
                    'url:dijit/form/templates/TextBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/TextBox", [
                "dojo/_base/declare", // declare
                "dojo/dom-construct", // domConstruct.create
                "dojo/dom-style", // domStyle.getComputedStyle
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.hitch
                "dojo/sniff", // has("ie") has("mozilla")
                "./_FormValueWidget",
                "./_TextBoxMixin",
                "dojo/text!./templates/TextBox.html",
                "../main" // to export dijit._setSelectionRange, remove in 2.0
            ], function(declare, domConstruct, domStyle, kernel, lang, has,
                _FormValueWidget, _TextBoxMixin, template, dijit) {

                // module:
                //		dijit/form/TextBox

                var TextBox = declare("dijit.form.TextBox", [_FormValueWidget, _TextBoxMixin], {
                    // summary:
                    //		A base class for textbox form inputs

                    templateString: template,
                    _singleNodeTemplate: '<input class="dijit dijitReset dijitLeft dijitInputField" data-dojo-attach-point="textbox,focusNode" autocomplete="off" type="${type}" ${!nameAttrSetting} />',

                    _buttonInputDisabled: has("ie") ? "disabled" : "", // allows IE to disallow focus, but Firefox cannot be disabled for mousedown events

                    baseClass: "dijitTextBox",

                    postMixInProperties: function() {
                        var type = this.type.toLowerCase();
                        if (this.templateString && this.templateString.toLowerCase() == "input" || ((type == "hidden" || type == "file") && this.templateString == this.constructor.prototype.templateString)) {
                            this.templateString = this._singleNodeTemplate;
                        }
                        this.inherited(arguments);
                    },

                    postCreate: function() {
                        this.inherited(arguments);

                        if (has("ie") < 9) {
                            // IE INPUT tag fontFamily has to be set directly using STYLE
                            // the defer gives IE a chance to render the TextBox and to deal with font inheritance
                            this.defer(function() {
                                try {
                                    var s = domStyle.getComputedStyle(this.domNode); // can throw an exception if widget is immediately destroyed
                                    if (s) {
                                        var ff = s.fontFamily;
                                        if (ff) {
                                            var inputs = this.domNode.getElementsByTagName("INPUT");
                                            if (inputs) {
                                                for (var i = 0; i < inputs.length; i++) {
                                                    inputs[i].style.fontFamily = ff;
                                                }
                                            }
                                        }
                                    }
                                } catch (e) {
                                    /*when used in a Dialog, and this is called before the dialog is
                                    					 shown, s.fontFamily would trigger "Invalid Argument" error.*/
                                }
                            });
                        }
                    },

                    _onInput: function(e) {
                        this.inherited(arguments);
                        if (this.intermediateChanges) { // _TextBoxMixin uses onInput
                            // allow the key to post to the widget input box
                            this.defer(function() {
                                this._handleOnChange(this.get('value'), false);
                            });
                        }
                    },

                    _setPlaceHolderAttr: function(v) {
                        this._set("placeHolder", v);
                        if (!this._phspan) {
                            this._attachPoints.push('_phspan');
                            // dijitInputField class gives placeHolder same padding as the input field
                            // parent node already has dijitInputField class but it doesn't affect this <span>
                            // since it's position: absolute.
                            this._phspan = domConstruct.create('span', {
                                onmousedown: function(e) {
                                    e.preventDefault();
                                },
                                className: 'dijitPlaceHolder dijitInputField'
                            }, this.textbox, 'after');
                        }
                        this._phspan.innerHTML = "";
                        this._phspan.appendChild(this._phspan.ownerDocument.createTextNode(v));
                        this._updatePlaceHolder();
                    },

                    _updatePlaceHolder: function() {
                        if (this._phspan) {
                            this._phspan.style.display = (this.placeHolder && !this.focused && !this.textbox.value) ? "" : "none";
                        }
                    },

                    _setValueAttr: function(value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue) {
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    },

                    getDisplayedValue: function() {
                        // summary:
                        //		Deprecated.  Use get('displayedValue') instead.
                        // tags:
                        //		deprecated
                        kernel.deprecated(this.declaredClass + "::getDisplayedValue() is deprecated. Use get('displayedValue') instead.", "", "2.0");
                        return this.get('displayedValue');
                    },

                    setDisplayedValue: function( /*String*/ value) {
                        // summary:
                        //		Deprecated.  Use set('displayedValue', ...) instead.
                        // tags:
                        //		deprecated
                        kernel.deprecated(this.declaredClass + "::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.", "", "2.0");
                        this.set('displayedValue', value);
                    },

                    _onBlur: function(e) {
                        if (this.disabled) {
                            return;
                        }
                        this.inherited(arguments);
                        this._updatePlaceHolder();

                        if (has("mozilla")) {
                            if (this.selectOnClick) {
                                // clear selection so that the next mouse click doesn't reselect
                                this.textbox.selectionStart = this.textbox.selectionEnd = undefined;
                            }
                        }
                    },

                    _onFocus: function( /*String*/ by) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        this.inherited(arguments);
                        this._updatePlaceHolder();
                    }
                });

                if (has("ie")) {
                    TextBox.prototype._isTextSelected = function() {
                        var range = this.ownerDocument.selection.createRange();
                        var parent = range.parentElement();
                        return parent == this.textbox && range.text.length > 0;
                    };

                    // Overrides definition of _setSelectionRange from _TextBoxMixin (TODO: move to _TextBoxMixin.js?)
                    dijit._setSelectionRange = _TextBoxMixin._setSelectionRange = function( /*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop) {
                        if (element.createTextRange) {
                            var r = element.createTextRange();
                            r.collapse(true);
                            r.moveStart("character", -99999); // move to 0
                            r.moveStart("character", start); // delta from 0 is the correct position
                            r.moveEnd("character", stop - start);
                            r.select();
                        }
                    }
                }

                return TextBox;
            });

        },
        'dojo/dom-geometry': function() {
            define(["./sniff", "./_base/window", "./dom", "./dom-style"],
                function(has, win, dom, style) {
                    // module:
                    //		dojo/dom-geometry

                    // the result object
                    var geom = {
                        // summary:
                        //		This module defines the core dojo DOM geometry API.
                    };

                    // Box functions will assume this model.
                    // On IE/Opera, BORDER_BOX will be set if the primary document is in quirks mode.
                    // Can be set to change behavior of box setters.

                    // can be either:
                    //	"border-box"
                    //	"content-box" (default)
                    geom.boxModel = "content-box";

                    // We punt per-node box mode testing completely.
                    // If anybody cares, we can provide an additional (optional) unit
                    // that overrides existing code to include per-node box sensitivity.

                    // Opera documentation claims that Opera 9 uses border-box in BackCompat mode.
                    // but experiments (Opera 9.10.8679 on Windows Vista) indicate that it actually continues to use content-box.
                    // IIRC, earlier versions of Opera did in fact use border-box.
                    // Opera guys, this is really confusing. Opera being broken in quirks mode is not our fault.

                    if (has("ie") /*|| has("opera")*/ ) {
                        // client code may have to adjust if compatMode varies across iframes
                        geom.boxModel = document.compatMode == "BackCompat" ? "border-box" : "content-box";
                    }

                    geom.getPadExtents = function getPadExtents( /*DomNode*/ node, /*Object*/ computedStyle) {
                        // summary:
                        //		Returns object with special values specifically useful for node
                        //		fitting.
                        // description:
                        //		Returns an object with `w`, `h`, `l`, `t` properties:
                        //	|		l/t/r/b = left/top/right/bottom padding (respectively)
                        //	|		w = the total of the left and right padding
                        //	|		h = the total of the top and bottom padding
                        //		If 'node' has position, l/t forms the origin for child nodes.
                        //		The w/h are used for calculating boxes.
                        //		Normally application code will not need to invoke this
                        //		directly, and will use the ...box... functions instead.
                        // node: DOMNode
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var s = computedStyle || style.getComputedStyle(node),
                            px = style.toPixelValue,
                            l = px(node, s.paddingLeft),
                            t = px(node, s.paddingTop),
                            r = px(node, s.paddingRight),
                            b = px(node, s.paddingBottom);
                        return {
                            l: l,
                            t: t,
                            r: r,
                            b: b,
                            w: l + r,
                            h: t + b
                        };
                    };

                    var none = "none";

                    geom.getBorderExtents = function getBorderExtents( /*DomNode*/ node, /*Object*/ computedStyle) {
                        // summary:
                        //		returns an object with properties useful for noting the border
                        //		dimensions.
                        // description:
                        //		- l/t/r/b = the sum of left/top/right/bottom border (respectively)
                        //		- w = the sum of the left and right border
                        //		- h = the sum of the top and bottom border
                        //
                        //		The w/h are used for calculating boxes.
                        //		Normally application code will not need to invoke this
                        //		directly, and will use the ...box... functions instead.
                        // node: DOMNode
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var px = style.toPixelValue,
                            s = computedStyle || style.getComputedStyle(node),
                            l = s.borderLeftStyle != none ? px(node, s.borderLeftWidth) : 0,
                            t = s.borderTopStyle != none ? px(node, s.borderTopWidth) : 0,
                            r = s.borderRightStyle != none ? px(node, s.borderRightWidth) : 0,
                            b = s.borderBottomStyle != none ? px(node, s.borderBottomWidth) : 0;
                        return {
                            l: l,
                            t: t,
                            r: r,
                            b: b,
                            w: l + r,
                            h: t + b
                        };
                    };

                    geom.getPadBorderExtents = function getPadBorderExtents( /*DomNode*/ node, /*Object*/ computedStyle) {
                        // summary:
                        //		Returns object with properties useful for box fitting with
                        //		regards to padding.
                        // description:
                        //		- l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)
                        //		- w = the sum of the left and right padding and border
                        //		- h = the sum of the top and bottom padding and border
                        //
                        //		The w/h are used for calculating boxes.
                        //		Normally application code will not need to invoke this
                        //		directly, and will use the ...box... functions instead.
                        // node: DOMNode
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var s = computedStyle || style.getComputedStyle(node),
                            p = geom.getPadExtents(node, s),
                            b = geom.getBorderExtents(node, s);
                        return {
                            l: p.l + b.l,
                            t: p.t + b.t,
                            r: p.r + b.r,
                            b: p.b + b.b,
                            w: p.w + b.w,
                            h: p.h + b.h
                        };
                    };

                    geom.getMarginExtents = function getMarginExtents(node, computedStyle) {
                        // summary:
                        //		returns object with properties useful for box fitting with
                        //		regards to box margins (i.e., the outer-box).
                        //
                        //		- l/t = marginLeft, marginTop, respectively
                        //		- w = total width, margin inclusive
                        //		- h = total height, margin inclusive
                        //
                        //		The w/h are used for calculating boxes.
                        //		Normally application code will not need to invoke this
                        //		directly, and will use the ...box... functions instead.
                        // node: DOMNode
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var s = computedStyle || style.getComputedStyle(node),
                            px = style.toPixelValue,
                            l = px(node, s.marginLeft),
                            t = px(node, s.marginTop),
                            r = px(node, s.marginRight),
                            b = px(node, s.marginBottom);
                        return {
                            l: l,
                            t: t,
                            r: r,
                            b: b,
                            w: l + r,
                            h: t + b
                        };
                    };

                    // Box getters work in any box context because offsetWidth/clientWidth
                    // are invariant wrt box context
                    //
                    // They do *not* work for display: inline objects that have padding styles
                    // because the user agent ignores padding (it's bogus styling in any case)
                    //
                    // Be careful with IMGs because they are inline or block depending on
                    // browser and browser mode.

                    // Although it would be easier to read, there are not separate versions of
                    // _getMarginBox for each browser because:
                    // 1. the branching is not expensive
                    // 2. factoring the shared code wastes cycles (function call overhead)
                    // 3. duplicating the shared code wastes bytes

                    geom.getMarginBox = function getMarginBox( /*DomNode*/ node, /*Object*/ computedStyle) {
                        // summary:
                        //		returns an object that encodes the width, height, left and top
                        //		positions of the node's margin box.
                        // node: DOMNode
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var s = computedStyle || style.getComputedStyle(node),
                            me = geom.getMarginExtents(node, s),
                            l = node.offsetLeft - me.l,
                            t = node.offsetTop - me.t,
                            p = node.parentNode,
                            px = style.toPixelValue,
                            pcs;
                        if (has("mozilla")) {
                            // Mozilla:
                            // If offsetParent has a computed overflow != visible, the offsetLeft is decreased
                            // by the parent's border.
                            // We don't want to compute the parent's style, so instead we examine node's
                            // computed left/top which is more stable.
                            var sl = parseFloat(s.left),
                                st = parseFloat(s.top);
                            if (!isNaN(sl) && !isNaN(st)) {
                                l = sl;
                                t = st;
                            } else {
                                // If child's computed left/top are not parseable as a number (e.g. "auto"), we
                                // have no choice but to examine the parent's computed style.
                                if (p && p.style) {
                                    pcs = style.getComputedStyle(p);
                                    if (pcs.overflow != "visible") {
                                        l += pcs.borderLeftStyle != none ? px(node, pcs.borderLeftWidth) : 0;
                                        t += pcs.borderTopStyle != none ? px(node, pcs.borderTopWidth) : 0;
                                    }
                                }
                            }
                        } else if (has("opera") || (has("ie") == 8 && !has("quirks"))) {
                            // On Opera and IE 8, offsetLeft/Top includes the parent's border
                            if (p) {
                                pcs = style.getComputedStyle(p);
                                l -= pcs.borderLeftStyle != none ? px(node, pcs.borderLeftWidth) : 0;
                                t -= pcs.borderTopStyle != none ? px(node, pcs.borderTopWidth) : 0;
                            }
                        }
                        return {
                            l: l,
                            t: t,
                            w: node.offsetWidth + me.w,
                            h: node.offsetHeight + me.h
                        };
                    };

                    geom.getContentBox = function getContentBox(node, computedStyle) {
                        // summary:
                        //		Returns an object that encodes the width, height, left and top
                        //		positions of the node's content box, irrespective of the
                        //		current box model.
                        // node: DOMNode
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        // clientWidth/Height are important since the automatically account for scrollbars
                        // fallback to offsetWidth/Height for special cases (see #3378)
                        node = dom.byId(node);
                        var s = computedStyle || style.getComputedStyle(node),
                            w = node.clientWidth,
                            h,
                            pe = geom.getPadExtents(node, s),
                            be = geom.getBorderExtents(node, s);
                        if (!w) {
                            w = node.offsetWidth;
                            h = node.offsetHeight;
                        } else {
                            h = node.clientHeight;
                            be.w = be.h = 0;
                        }
                        // On Opera, offsetLeft includes the parent's border
                        if (has("opera")) {
                            pe.l += be.l;
                            pe.t += be.t;
                        }
                        return {
                            l: pe.l,
                            t: pe.t,
                            w: w - pe.w - be.w,
                            h: h - pe.h - be.h
                        };
                    };

                    // Box setters depend on box context because interpretation of width/height styles
                    // vary wrt box context.
                    //
                    // The value of boxModel is used to determine box context.
                    // boxModel can be set directly to change behavior.
                    //
                    // Beware of display: inline objects that have padding styles
                    // because the user agent ignores padding (it's a bogus setup anyway)
                    //
                    // Be careful with IMGs because they are inline or block depending on
                    // browser and browser mode.
                    //
                    // Elements other than DIV may have special quirks, like built-in
                    // margins or padding, or values not detectable via computedStyle.
                    // In particular, margins on TABLE do not seems to appear
                    // at all in computedStyle on Mozilla.

                    function setBox( /*DomNode*/ node, /*Number?*/ l, /*Number?*/ t, /*Number?*/ w, /*Number?*/ h, /*String?*/ u) {
                        // summary:
                        //		sets width/height/left/top in the current (native) box-model
                        //		dimensions. Uses the unit passed in u.
                        // node:
                        //		DOM Node reference. Id string not supported for performance
                        //		reasons.
                        // l:
                        //		left offset from parent.
                        // t:
                        //		top offset from parent.
                        // w:
                        //		width in current box model.
                        // h:
                        //		width in current box model.
                        // u:
                        //		unit measure to use for other measures. Defaults to "px".
                        u = u || "px";
                        var s = node.style;
                        if (!isNaN(l)) {
                            s.left = l + u;
                        }
                        if (!isNaN(t)) {
                            s.top = t + u;
                        }
                        if (w >= 0) {
                            s.width = w + u;
                        }
                        if (h >= 0) {
                            s.height = h + u;
                        }
                    }

                    function isButtonTag( /*DomNode*/ node) {
                        // summary:
                        //		True if the node is BUTTON or INPUT.type="button".
                        return node.tagName.toLowerCase() == "button" ||
                            node.tagName.toLowerCase() == "input" && (node.getAttribute("type") || "").toLowerCase() == "button"; // boolean
                    }

                    function usesBorderBox( /*DomNode*/ node) {
                        // summary:
                        //		True if the node uses border-box layout.

                        // We could test the computed style of node to see if a particular box
                        // has been specified, but there are details and we choose not to bother.

                        // TABLE and BUTTON (and INPUT type=button) are always border-box by default.
                        // If you have assigned a different box to either one via CSS then
                        // box functions will break.

                        return geom.boxModel == "border-box" || node.tagName.toLowerCase() == "table" || isButtonTag(node); // boolean
                    }

                    geom.setContentSize = function setContentSize( /*DomNode*/ node, /*Object*/ box, /*Object*/ computedStyle) {
                        // summary:
                        //		Sets the size of the node's contents, irrespective of margins,
                        //		padding, or borders.
                        // node: DOMNode
                        // box: Object
                        //		hash with optional "w", and "h" properties for "width", and "height"
                        //		respectively. All specified properties should have numeric values in whole pixels.
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var w = box.w,
                            h = box.h;
                        if (usesBorderBox(node)) {
                            var pb = geom.getPadBorderExtents(node, computedStyle);
                            if (w >= 0) {
                                w += pb.w;
                            }
                            if (h >= 0) {
                                h += pb.h;
                            }
                        }
                        setBox(node, NaN, NaN, w, h);
                    };

                    var nilExtents = {
                        l: 0,
                        t: 0,
                        w: 0,
                        h: 0
                    };

                    geom.setMarginBox = function setMarginBox( /*DomNode*/ node, /*Object*/ box, /*Object*/ computedStyle) {
                        // summary:
                        //		sets the size of the node's margin box and placement
                        //		(left/top), irrespective of box model. Think of it as a
                        //		passthrough to setBox that handles box-model vagaries for
                        //		you.
                        // node: DOMNode
                        // box: Object
                        //		hash with optional "l", "t", "w", and "h" properties for "left", "right", "width", and "height"
                        //		respectively. All specified properties should have numeric values in whole pixels.
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var s = computedStyle || style.getComputedStyle(node),
                            w = box.w,
                            h = box.h,
                            // Some elements have special padding, margin, and box-model settings.
                            // To use box functions you may need to set padding, margin explicitly.
                            // Controlling box-model is harder, in a pinch you might set dojo/dom-geometry.boxModel.
                            pb = usesBorderBox(node) ? nilExtents : geom.getPadBorderExtents(node, s),
                            mb = geom.getMarginExtents(node, s);
                        if (has("webkit")) {
                            // on Safari (3.1.2), button nodes with no explicit size have a default margin
                            // setting an explicit size eliminates the margin.
                            // We have to swizzle the width to get correct margin reading.
                            if (isButtonTag(node)) {
                                var ns = node.style;
                                if (w >= 0 && !ns.width) {
                                    ns.width = "4px";
                                }
                                if (h >= 0 && !ns.height) {
                                    ns.height = "4px";
                                }
                            }
                        }
                        if (w >= 0) {
                            w = Math.max(w - pb.w - mb.w, 0);
                        }
                        if (h >= 0) {
                            h = Math.max(h - pb.h - mb.h, 0);
                        }
                        setBox(node, box.l, box.t, w, h);
                    };

                    // =============================
                    // Positioning
                    // =============================

                    geom.isBodyLtr = function isBodyLtr( /*Document?*/ doc) {
                        // summary:
                        //		Returns true if the current language is left-to-right, and false otherwise.
                        // doc: Document?
                        //		Optional document to query.   If unspecified, use win.doc.
                        // returns: Boolean

                        doc = doc || win.doc;
                        return (win.body(doc).dir || doc.documentElement.dir || "ltr").toLowerCase() == "ltr"; // Boolean
                    };

                    geom.docScroll = function docScroll( /*Document?*/ doc) {
                        // summary:
                        //		Returns an object with {node, x, y} with corresponding offsets.
                        // doc: Document?
                        //		Optional document to query.   If unspecified, use win.doc.
                        // returns: Object

                        doc = doc || win.doc;
                        var node = win.doc.parentWindow || win.doc.defaultView; // use UI window, not dojo.global window.   TODO: use dojo/window::get() except for circular dependency problem
                        return "pageXOffset" in node ? {
                                x: node.pageXOffset,
                                y: node.pageYOffset
                            } :
                            (node = has("quirks") ? win.body(doc) : doc.documentElement) && {
                                x: geom.fixIeBiDiScrollLeft(node.scrollLeft || 0, doc),
                                y: node.scrollTop || 0
                            };
                    };

                    if (has("ie")) {
                        geom.getIeDocumentElementOffset = function getIeDocumentElementOffset( /*Document?*/ doc) {
                            // summary:
                            //		returns the offset in x and y from the document body to the
                            //		visual edge of the page for IE
                            // doc: Document?
                            //		Optional document to query.   If unspecified, use win.doc.
                            // description:
                            //		The following values in IE contain an offset:
                            //	|		event.clientX
                            //	|		event.clientY
                            //	|		node.getBoundingClientRect().left
                            //	|		node.getBoundingClientRect().top
                            //		But other position related values do not contain this offset,
                            //		such as node.offsetLeft, node.offsetTop, node.style.left and
                            //		node.style.top. The offset is always (2, 2) in LTR direction.
                            //		When the body is in RTL direction, the offset counts the width
                            //		of left scroll bar's width.  This function computes the actual
                            //		offset.

                            //NOTE: assumes we're being called in an IE browser

                            doc = doc || win.doc;
                            var de = doc.documentElement; // only deal with HTML element here, position() handles body/quirks

                            if (has("ie") < 8) {
                                var r = de.getBoundingClientRect(), // works well for IE6+
                                    l = r.left,
                                    t = r.top;
                                if (has("ie") < 7) {
                                    l += de.clientLeft; // scrollbar size in strict/RTL, or,
                                    t += de.clientTop; // HTML border size in strict
                                }
                                return {
                                    x: l < 0 ? 0 : l, // FRAME element border size can lead to inaccurate negative values
                                    y: t < 0 ? 0 : t
                                };
                            } else {
                                return {
                                    x: 0,
                                    y: 0
                                };
                            }
                        };
                    }

                    geom.fixIeBiDiScrollLeft = function fixIeBiDiScrollLeft( /*Integer*/ scrollLeft, /*Document?*/ doc) {
                        // summary:
                        //		In RTL direction, scrollLeft should be a negative value, but IE
                        //		returns a positive one. All codes using documentElement.scrollLeft
                        //		must call this function to fix this error, otherwise the position
                        //		will offset to right when there is a horizontal scrollbar.
                        // scrollLeft: Number
                        // doc: Document?
                        //		Optional document to query.   If unspecified, use win.doc.
                        // returns: Number

                        // In RTL direction, scrollLeft should be a negative value, but IE
                        // returns a positive one. All codes using documentElement.scrollLeft
                        // must call this function to fix this error, otherwise the position
                        // will offset to right when there is a horizontal scrollbar.

                        doc = doc || win.doc;
                        var ie = has("ie");
                        if (ie && !geom.isBodyLtr(doc)) {
                            var qk = has("quirks"),
                                de = qk ? win.body(doc) : doc.documentElement,
                                pwin = win.global; // TODO: use winUtils.get(doc) after resolving circular dependency b/w dom-geometry.js and dojo/window.js
                            if (ie == 6 && !qk && pwin.frameElement && de.scrollHeight > de.clientHeight) {
                                scrollLeft += de.clientLeft; // workaround ie6+strict+rtl+iframe+vertical-scrollbar bug where clientWidth is too small by clientLeft pixels
                            }
                            return (ie < 8 || qk) ? (scrollLeft + de.clientWidth - de.scrollWidth) : -scrollLeft; // Integer
                        }
                        return scrollLeft; // Integer
                    };

                    geom.position = function( /*DomNode*/ node, /*Boolean?*/ includeScroll) {
                        // summary:
                        //		Gets the position and size of the passed element relative to
                        //		the viewport (if includeScroll==false), or relative to the
                        //		document root (if includeScroll==true).
                        //
                        // description:
                        //		Returns an object of the form:
                        //		`{ x: 100, y: 300, w: 20, h: 15 }`.
                        //		If includeScroll==true, the x and y values will include any
                        //		document offsets that may affect the position relative to the
                        //		viewport.
                        //		Uses the border-box model (inclusive of border and padding but
                        //		not margin).  Does not act as a setter.
                        // node: DOMNode|String
                        // includeScroll: Boolean?
                        // returns: Object

                        node = dom.byId(node);
                        var db = win.body(node.ownerDocument),
                            ret = node.getBoundingClientRect();
                        ret = {
                            x: ret.left,
                            y: ret.top,
                            w: ret.right - ret.left,
                            h: ret.bottom - ret.top
                        };

                        if (has("ie")) {
                            // On IE there's a 2px offset that we need to adjust for, see dojo.getIeDocumentElementOffset()
                            var offset = geom.getIeDocumentElementOffset(node.ownerDocument);

                            // fixes the position in IE, quirks mode
                            ret.x -= offset.x + (has("quirks") ? db.clientLeft + db.offsetLeft : 0);
                            ret.y -= offset.y + (has("quirks") ? db.clientTop + db.offsetTop : 0);
                        }

                        // account for document scrolling
                        // if offsetParent is used, ret value already includes scroll position
                        // so we may have to actually remove that value if !includeScroll
                        if (includeScroll) {
                            var scroll = geom.docScroll(node.ownerDocument);
                            ret.x += scroll.x;
                            ret.y += scroll.y;
                        }

                        return ret; // Object
                    };

                    // random "private" functions wildly used throughout the toolkit

                    geom.getMarginSize = function getMarginSize( /*DomNode*/ node, /*Object*/ computedStyle) {
                        // summary:
                        //		returns an object that encodes the width and height of
                        //		the node's margin box
                        // node: DOMNode|String
                        // computedStyle: Object?
                        //		This parameter accepts computed styles object.
                        //		If this parameter is omitted, the functions will call
                        //		dojo.getComputedStyle to get one. It is a better way, calling
                        //		dojo.computedStyle once, and then pass the reference to this
                        //		computedStyle parameter. Wherever possible, reuse the returned
                        //		object of dojo/dom-style.getComputedStyle().

                        node = dom.byId(node);
                        var me = geom.getMarginExtents(node, computedStyle || style.getComputedStyle(node));
                        var size = node.getBoundingClientRect();
                        return {
                            w: (size.right - size.left) + me.w,
                            h: (size.bottom - size.top) + me.h
                        };
                    };

                    geom.normalizeEvent = function(event) {
                        // summary:
                        //		Normalizes the geometry of a DOM event, normalizing the pageX, pageY,
                        //		offsetX, offsetY, layerX, and layerX properties
                        // event: Object
                        if (!("layerX" in event)) {
                            event.layerX = event.offsetX;
                            event.layerY = event.offsetY;
                        }
                        if (!has("dom-addeventlistener")) {
                            // old IE version
                            // FIXME: scroll position query is duped from dojo.html to
                            // avoid dependency on that entire module. Now that HTML is in
                            // Base, we should convert back to something similar there.
                            var se = event.target;
                            var doc = (se && se.ownerDocument) || document;
                            // DO NOT replace the following to use dojo.body(), in IE, document.documentElement should be used
                            // here rather than document.body
                            var docBody = has("quirks") ? doc.body : doc.documentElement;
                            var offset = geom.getIeDocumentElementOffset(doc);
                            event.pageX = event.clientX + geom.fixIeBiDiScrollLeft(docBody.scrollLeft || 0, doc) - offset.x;
                            event.pageY = event.clientY + (docBody.scrollTop || 0) - offset.y;
                        }
                    };

                    // TODO: evaluate separate getters/setters for position and sizes?

                    return geom;
                });

        },
        'dijit/_TemplatedMixin': function() {
            define("dijit/_TemplatedMixin", [
                "dojo/_base/lang", // lang.getObject
                "dojo/touch",
                "./_WidgetBase",
                "dojo/string", // string.substitute string.trim
                "dojo/cache", // dojo.cache
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-construct", // domConstruct.destroy, domConstruct.toDom
                "dojo/sniff", // has("ie")
                "dojo/_base/unload" // unload.addOnWindowUnload
            ], function(lang, touch, _WidgetBase, string, cache, array, declare, domConstruct, has, unload) {

                // module:
                //		dijit/_TemplatedMixin

                var _TemplatedMixin = declare("dijit._TemplatedMixin", null, {
                    // summary:
                    //		Mixin for widgets that are instantiated from a template

                    // templateString: [protected] String
                    //		A string that represents the widget template.
                    //		Use in conjunction with dojo.cache() to load from a file.
                    templateString: null,

                    // templatePath: [protected deprecated] String
                    //		Path to template (HTML file) for this widget relative to dojo.baseUrl.
                    //		Deprecated: use templateString with require([... "dojo/text!..."], ...) instead
                    templatePath: null,

                    // skipNodeCache: [protected] Boolean
                    //		If using a cached widget template nodes poses issues for a
                    //		particular widget class, it can set this property to ensure
                    //		that its template is always re-built from a string
                    _skipNodeCache: false,

                    // _earlyTemplatedStartup: Boolean
                    //		A fallback to preserve the 1.0 - 1.3 behavior of children in
                    //		templates having their startup called before the parent widget
                    //		fires postCreate. Defaults to 'false', causing child widgets to
                    //		have their .startup() called immediately before a parent widget
                    //		.startup(), but always after the parent .postCreate(). Set to
                    //		'true' to re-enable to previous, arguably broken, behavior.
                    _earlyTemplatedStartup: false,

                    /*=====
                    		// _attachPoints: [private] String[]
                    		//		List of widget attribute names associated with data-dojo-attach-point=... in the
                    		//		template, ex: ["containerNode", "labelNode"]
                    		_attachPoints: [],

                    		// _attachEvents: [private] Handle[]
                    		//		List of connections associated with data-dojo-attach-event=... in the
                    		//		template
                    		_attachEvents: [],
                     =====*/

                    constructor: function( /*===== params, srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.

                        this._attachPoints = [];
                        this._attachEvents = [];
                    },

                    _stringRepl: function(tmpl) {
                        // summary:
                        //		Does substitution of ${foo} type properties in template string
                        // tags:
                        //		private
                        var className = this.declaredClass,
                            _this = this;
                        // Cache contains a string because we need to do property replacement
                        // do the property replacement
                        return string.substitute(tmpl, this, function(value, key) {
                            if (key.charAt(0) == '!') {
                                value = lang.getObject(key.substr(1), false, _this);
                            }
                            if (typeof value == "undefined") {
                                throw new Error(className + " template:" + key);
                            } // a debugging aide
                            if (value == null) {
                                return "";
                            }

                            // Substitution keys beginning with ! will skip the transform step,
                            // in case a user wishes to insert unescaped markup, e.g. ${!foo}
                            return key.charAt(0) == "!" ? value :
                                // Safer substitution, see heading "Attribute values" in
                                // http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
                                value.toString().replace(/"/g, "&quot;"); //TODO: add &amp? use encodeXML method?
                        }, this);
                    },

                    buildRendering: function() {
                        // summary:
                        //		Construct the UI for this widget from a template, setting this.domNode.
                        // tags:
                        //		protected

                        if (!this.templateString) {
                            this.templateString = cache(this.templatePath, {
                                sanitize: true
                            });
                        }

                        // Lookup cached version of template, and download to cache if it
                        // isn't there already.  Returns either a DomNode or a string, depending on
                        // whether or not the template contains ${foo} replacement parameters.
                        var cached = _TemplatedMixin.getCachedTemplate(this.templateString, this._skipNodeCache, this.ownerDocument);

                        var node;
                        if (lang.isString(cached)) {
                            node = domConstruct.toDom(this._stringRepl(cached), this.ownerDocument);
                            if (node.nodeType != 1) {
                                // Flag common problems such as templates with multiple top level nodes (nodeType == 11)
                                throw new Error("Invalid template: " + cached);
                            }
                        } else {
                            // if it's a node, all we have to do is clone it
                            node = cached.cloneNode(true);
                        }

                        this.domNode = node;

                        // Call down to _Widget.buildRendering() to get base classes assigned
                        // TODO: change the baseClass assignment to _setBaseClassAttr
                        this.inherited(arguments);

                        // recurse through the node, looking for, and attaching to, our
                        // attachment points and events, which should be defined on the template node.
                        this._attachTemplateNodes(node, function(n, p) {
                            return n.getAttribute(p);
                        });

                        this._beforeFillContent(); // hook for _WidgetsInTemplateMixin

                        this._fillContent(this.srcNodeRef);
                    },

                    _beforeFillContent: function() {},

                    _fillContent: function( /*DomNode*/ source) {
                        // summary:
                        //		Relocate source contents to templated container node.
                        //		this.containerNode must be able to receive children, or exceptions will be thrown.
                        // tags:
                        //		protected
                        var dest = this.containerNode;
                        if (source && dest) {
                            while (source.hasChildNodes()) {
                                dest.appendChild(source.firstChild);
                            }
                        }
                    },

                    _attachTemplateNodes: function(rootNode, getAttrFunc) {
                        // summary:
                        //		Iterate through the template and attach functions and nodes accordingly.
                        //		Alternately, if rootNode is an array of widgets, then will process data-dojo-attach-point
                        //		etc. for those widgets.
                        // description:
                        //		Map widget properties and functions to the handlers specified in
                        //		the dom node and it's descendants. This function iterates over all
                        //		nodes and looks for these properties:
                        //
                        //		- dojoAttachPoint/data-dojo-attach-point
                        //		- dojoAttachEvent/data-dojo-attach-event
                        // rootNode: DomNode|Widget[]
                        //		the node to search for properties. All children will be searched.
                        // getAttrFunc: Function
                        //		a function which will be used to obtain property for a given
                        //		DomNode/Widget
                        // tags:
                        //		private

                        var nodes = lang.isArray(rootNode) ? rootNode : (rootNode.all || rootNode.getElementsByTagName("*"));
                        var x = lang.isArray(rootNode) ? 0 : -1;
                        for (; x < 0 || nodes[x]; x++) { // don't access nodes.length on IE, see #14346
                            var baseNode = (x == -1) ? rootNode : nodes[x];
                            if (this.widgetsInTemplate && (getAttrFunc(baseNode, "dojoType") || getAttrFunc(baseNode, "data-dojo-type"))) {
                                continue;
                            }
                            // Process data-dojo-attach-point
                            var attachPoint = getAttrFunc(baseNode, "dojoAttachPoint") || getAttrFunc(baseNode, "data-dojo-attach-point");
                            if (attachPoint) {
                                var point, points = attachPoint.split(/\s*,\s*/);
                                while ((point = points.shift())) {
                                    if (lang.isArray(this[point])) {
                                        this[point].push(baseNode);
                                    } else {
                                        this[point] = baseNode;
                                    }
                                    this._attachPoints.push(point);
                                }
                            }

                            // Process data-dojo-attach-event
                            var attachEvent = getAttrFunc(baseNode, "dojoAttachEvent") || getAttrFunc(baseNode, "data-dojo-attach-event");
                            if (attachEvent) {
                                // NOTE: we want to support attributes that have the form
                                // "domEvent: nativeEvent; ..."
                                var event, events = attachEvent.split(/\s*,\s*/);
                                var trim = lang.trim;
                                while ((event = events.shift())) {
                                    if (event) {
                                        var thisFunc = null;
                                        if (event.indexOf(":") != -1) {
                                            // oh, if only JS had tuple assignment
                                            var funcNameArr = event.split(":");
                                            event = trim(funcNameArr[0]);
                                            thisFunc = trim(funcNameArr[1]);
                                        } else {
                                            event = trim(event);
                                        }
                                        if (!thisFunc) {
                                            thisFunc = event;
                                        }
                                        // Map "press", "move" and "release" to keys.touch, keys.move, keys.release
                                        this._attachEvents.push(this.connect(baseNode, touch[event] || event, thisFunc));
                                    }
                                }
                            }
                        }
                    },

                    destroyRendering: function() {
                        // Delete all attach points to prevent IE6 memory leaks.
                        array.forEach(this._attachPoints, function(point) {
                            delete this[point];
                        }, this);
                        this._attachPoints = [];

                        // And same for event handlers
                        array.forEach(this._attachEvents, this.disconnect, this);
                        this._attachEvents = [];

                        this.inherited(arguments);
                    }
                });

                // key is templateString; object is either string or DOM tree
                _TemplatedMixin._templateCache = {};

                _TemplatedMixin.getCachedTemplate = function(templateString, alwaysUseString, doc) {
                    // summary:
                    //		Static method to get a template based on the templatePath or
                    //		templateString key
                    // templateString: String
                    //		The template
                    // alwaysUseString: Boolean
                    //		Don't cache the DOM tree for this template, even if it doesn't have any variables
                    // doc: Document?
                    //		The target document.   Defaults to document global if unspecified.
                    // returns: Mixed
                    //		Either string (if there are ${} variables that need to be replaced) or just
                    //		a DOM tree (if the node can be cloned directly)

                    // is it already cached?
                    var tmplts = _TemplatedMixin._templateCache;
                    var key = templateString;
                    var cached = tmplts[key];
                    if (cached) {
                        try {
                            // if the cached value is an innerHTML string (no ownerDocument) or a DOM tree created within the
                            // current document, then use the current cached value
                            if (!cached.ownerDocument || cached.ownerDocument == (doc || document)) {
                                // string or node of the same document
                                return cached;
                            }
                        } catch (e) { /* squelch */ } // IE can throw an exception if cached.ownerDocument was reloaded
                        domConstruct.destroy(cached);
                    }

                    templateString = string.trim(templateString);

                    if (alwaysUseString || templateString.match(/\$\{([^\}]+)\}/g)) {
                        // there are variables in the template so all we can do is cache the string
                        return (tmplts[key] = templateString); //String
                    } else {
                        // there are no variables in the template so we can cache the DOM tree
                        var node = domConstruct.toDom(templateString, doc);
                        if (node.nodeType != 1) {
                            throw new Error("Invalid template: " + templateString);
                        }
                        return (tmplts[key] = node); //Node
                    }
                };

                if (has("ie")) {
                    unload.addOnWindowUnload(function() {
                        var cache = _TemplatedMixin._templateCache;
                        for (var key in cache) {
                            var value = cache[key];
                            if (typeof value == "object") { // value is either a string or a DOM node template
                                domConstruct.destroy(value);
                            }
                            delete cache[key];
                        }
                    });
                }

                // These arguments can be specified for widgets which are used in templates.
                // Since any widget can be specified as sub widgets in template, mix it
                // into the base widget class.  (This is a hack, but it's effective.).
                // Remove for 2.0.   Also, hide from API doc parser.
                lang.extend(_WidgetBase, /*===== {} || =====*/ {
                    dojoAttachEvent: "",
                    dojoAttachPoint: ""
                });

                return _TemplatedMixin;
            });

        },
        'dojox/string/tokenize': function() {
            define("dojox/string/tokenize", [
                "dojo/_base/lang",
                "dojo/_base/sniff"
            ], function(lang, has) {
                var tokenize = lang.getObject("dojox.string", true).tokenize;

                tokenize = function( /*String*/ str, /*RegExp*/ re, /*Function?*/ parseDelim, /*Object?*/ instance) {
                    // summary:
                    //		Split a string by a regular expression with the ability to capture the delimeters
                    // parseDelim:
                    //		Each group (excluding the 0 group) is passed as a parameter. If the function returns
                    //		a value, it's added to the list of tokens.
                    // instance:
                    //		Used as the "this" instance when calling parseDelim
                    var tokens = [];
                    var match, content, lastIndex = 0;
                    while (match = re.exec(str)) {
                        content = str.slice(lastIndex, re.lastIndex - match[0].length);
                        if (content.length) {
                            tokens.push(content);
                        }
                        if (parseDelim) {
                            if (has("opera")) {
                                var copy = match.slice(0);
                                while (copy.length < match.length) {
                                    copy.push(null);
                                }
                                match = copy;
                            }
                            var parsed = parseDelim.apply(instance, match.slice(1).concat(tokens.length));
                            if (typeof parsed != "undefined") {
                                tokens.push(parsed);
                            }
                        }
                        lastIndex = re.lastIndex;
                    }
                    content = str.slice(lastIndex);
                    if (content.length) {
                        tokens.push(content);
                    }
                    return tokens;
                };
                return tokenize;
            });

        },
        'url:hsbcwidget/themes/ursula/templates/countrySelectorTabs.html': "<ul class=\"regionTabs\">\r\n\t{% for tab in tabs %}\r\n\t\t<li>\r\n\t\t\t<a title=\"{{ tab.title|safe }}: Click to view HSBC websites in this region\" class=\"{{ tab.class }}\" data-region=\"{{ tab.class }}\" href=\"#\">{{ tab.text|safe }}</a>\r\n\t\t</li>\r\n\t{% endfor %}\r\n</ul>\r\n\t\t\t\r\n",
        'dijit/_Templated': function() {
            define("dijit/_Templated", [
                "./_WidgetBase",
                "./_TemplatedMixin",
                "./_WidgetsInTemplateMixin",
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/_base/lang", // lang.extend lang.isArray
                "dojo/_base/kernel" // kernel.deprecated
            ], function(_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, array, declare, lang, kernel) {

                // module:
                //		dijit/_Templated

                // These arguments can be specified for widgets which are used in templates.
                // Since any widget can be specified as sub widgets in template, mix it
                // into the base widget class.  (This is a hack, but it's effective.)
                // Remove for 2.0.   Also, hide from API doc parser.
                lang.extend(_WidgetBase, /*===== {} || =====*/ {
                    waiRole: "",
                    waiState: ""
                });

                return declare("dijit._Templated", [_TemplatedMixin, _WidgetsInTemplateMixin], {
                    // summary:
                    //		Deprecated mixin for widgets that are instantiated from a template.
                    //		Widgets should use _TemplatedMixin plus if necessary _WidgetsInTemplateMixin instead.

                    // widgetsInTemplate: [protected] Boolean
                    //		Should we parse the template to find widgets that might be
                    //		declared in markup inside it?  False by default.
                    widgetsInTemplate: false,

                    constructor: function() {
                        kernel.deprecated(this.declaredClass + ": dijit._Templated deprecated, use dijit._TemplatedMixin and if necessary dijit._WidgetsInTemplateMixin", "", "2.0");
                    },

                    _attachTemplateNodes: function(rootNode, getAttrFunc) {

                        this.inherited(arguments);

                        // Do deprecated waiRole and waiState
                        var nodes = lang.isArray(rootNode) ? rootNode : (rootNode.all || rootNode.getElementsByTagName("*"));
                        var x = lang.isArray(rootNode) ? 0 : -1;
                        for (; x < nodes.length; x++) {
                            var baseNode = (x == -1) ? rootNode : nodes[x];

                            // waiRole, waiState
                            var role = getAttrFunc(baseNode, "waiRole");
                            if (role) {
                                baseNode.setAttribute("role", role);
                            }
                            var values = getAttrFunc(baseNode, "waiState");
                            if (values) {
                                array.forEach(values.split(/\s*,\s*/), function(stateValue) {
                                    if (stateValue.indexOf('-') != -1) {
                                        var pair = stateValue.split('-');
                                        baseNode.setAttribute("aria-" + pair[0], pair[1]);
                                    }
                                });
                            }
                        }
                    }
                });
            });

        },
        'dojo/_base/unload': function() {
            define(["./kernel", "./lang", "../on"], function(dojo, lang, on) {

                // module:
                //		dojo/unload

                var win = window;

                var unload = {
                    // summary:
                    //		This module contains the document and window unload detection API.

                    addOnWindowUnload: function( /*Object|Function?*/ obj, /*String|Function?*/ functionName) {
                        // summary:
                        //		registers a function to be triggered when window.onunload
                        //		fires.
                        // description:
                        //		The first time that addOnWindowUnload is called Dojo
                        //		will register a page listener to trigger your unload
                        //		handler with. Note that registering these handlers may
                        //		destroy "fastback" page caching in browsers that support
                        //		it. Be careful trying to modify the DOM or access
                        //		JavaScript properties during this phase of page unloading:
                        //		they may not always be available. Consider
                        //		addOnUnload() if you need to modify the DOM or do
                        //		heavy JavaScript work since it fires at the equivalent of
                        //		the page's "onbeforeunload" event.
                        // example:
                        //	|	unload.addOnWindowUnload(functionPointer)
                        //	|	unload.addOnWindowUnload(object, "functionName");
                        //	|	unload.addOnWindowUnload(object, function(){ /* ... */});

                        if (!dojo.windowUnloaded) {
                            on(win, "unload", (dojo.windowUnloaded = function() {
                                // summary:
                                //		signal fired by impending window destruction. You may use
                                //		dojo.addOnWindowUnload() to register a listener for this
                                //		event. NOTE: if you wish to dojo.connect() to this method
                                //		to perform page/application cleanup, be aware that this
                                //		event WILL NOT fire if no handler has been registered with
                                //		addOnWindowUnload(). This behavior started in Dojo 1.3.
                                //		Previous versions always triggered windowUnloaded(). See
                                //		addOnWindowUnload for more info.
                            }));
                        }
                        on(win, "unload", lang.hitch(obj, functionName));
                    },

                    addOnUnload: function( /*Object?|Function?*/ obj, /*String|Function?*/ functionName) {
                        // summary:
                        //		registers a function to be triggered when the page unloads.
                        // description:
                        //		The first time that addOnUnload is called Dojo will
                        //		register a page listener to trigger your unload handler
                        //		with.
                        //
                        //		In a browser environment, the functions will be triggered
                        //		during the window.onbeforeunload event. Be careful of doing
                        //		too much work in an unload handler. onbeforeunload can be
                        //		triggered if a link to download a file is clicked, or if
                        //		the link is a javascript: link. In these cases, the
                        //		onbeforeunload event fires, but the document is not
                        //		actually destroyed. So be careful about doing destructive
                        //		operations in a dojo.addOnUnload callback.
                        //
                        //		Further note that calling dojo.addOnUnload will prevent
                        //		browsers from using a "fast back" cache to make page
                        //		loading via back button instantaneous.
                        // example:
                        //	|	dojo.addOnUnload(functionPointer)
                        //	|	dojo.addOnUnload(object, "functionName")
                        //	|	dojo.addOnUnload(object, function(){ /* ... */});

                        on(win, "beforeunload", lang.hitch(obj, functionName));
                    }
                };

                dojo.addOnWindowUnload = unload.addOnWindowUnload;
                dojo.addOnUnload = unload.addOnUnload;

                return unload;

            });

        },
        'hsbcwidget/SkipLink': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/dom",
                    "dojo/has",
                    "dijit/focus",
                    "dojo/on",
                    "dojo/dom-attr"
                ],
                function(declare, _WidgetBase, query, dom, has, focusUtil, on, domAttr) {

                    return declare([_WidgetBase], {
                        target: '',

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this,
                                node = query(self.target)[0];
                            if (node) {
                                domAttr.set(node, 'tabindex', 0);

                                on(this.domNode, 'click', function(e) {
                                    e.preventDefault();
                                    //logon journey exception
                                    var isLogonboxFirstAnchor = query('.logonBox .showStep a:first')[0];
                                    if (isLogonboxFirstAnchor !== undefined) {
                                        node = isLogonboxFirstAnchor;
                                    }
                                    focusUtil.focus(node);
                                });
                            }
                        }

                    });

                }
            );
        },
        'dijit/_CssStateMixin': function() {
            define("dijit/_CssStateMixin", [
                "dojo/_base/array", // array.forEach array.map
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.isDescendant()
                "dojo/dom-class", // domClass.toggle
                "dojo/has",
                "dojo/_base/lang", // lang.hitch
                "dojo/on",
                "dojo/ready",
                "dojo/_base/window", // win.body
                "./registry"
            ], function(array, declare, dom, domClass, has, lang, on, ready, win, registry) {

                // module:
                //		dijit/_CssStateMixin

                var CssStateMixin = declare("dijit._CssStateMixin", [], {
                    // summary:
                    //		Mixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus
                    //		state changes, and also higher-level state changes such becoming disabled or selected.
                    //
                    // description:
                    //		By mixing this class into your widget, and setting the this.baseClass attribute, it will automatically
                    //		maintain CSS classes on the widget root node (this.domNode) depending on hover,
                    //		active, focus, etc. state.   Ex: with a baseClass of dijitButton, it will apply the classes
                    //		dijitButtonHovered and dijitButtonActive, as the user moves the mouse over the widget and clicks it.
                    //
                    //		It also sets CSS like dijitButtonDisabled based on widget semantic state.
                    //
                    //		By setting the cssStateNodes attribute, a widget can also track events on subnodes (like buttons
                    //		within the widget).

                    // cssStateNodes: [protected] Object
                    //		List of sub-nodes within the widget that need CSS classes applied on mouse hover/press and focus
                    //
                    //		Each entry in the hash is a an attachpoint names (like "upArrowButton") mapped to a CSS class names
                    //		(like "dijitUpArrowButton"). Example:
                    //	|		{
                    //	|			"upArrowButton": "dijitUpArrowButton",
                    //	|			"downArrowButton": "dijitDownArrowButton"
                    //	|		}
                    //		The above will set the CSS class dijitUpArrowButton to the this.upArrowButton DOMNode when it
                    //		is hovered, etc.
                    cssStateNodes: {},

                    // hovering: [readonly] Boolean
                    //		True if cursor is over this widget
                    hovering: false,

                    // active: [readonly] Boolean
                    //		True if mouse was pressed while over this widget, and hasn't been released yet
                    active: false,

                    _applyAttributes: function() {
                        // This code would typically be in postCreate(), but putting in _applyAttributes() for
                        // performance: so the class changes happen before DOM is inserted into the document.
                        // Change back to postCreate() in 2.0.  See #11635.

                        this.inherited(arguments);

                        // Monitoring changes to disabled, readonly, etc. state, and update CSS class of root node
                        array.forEach(["disabled", "readOnly", "checked", "selected", "focused", "state", "hovering", "active", "_opened"], function(attr) {
                            this.watch(attr, lang.hitch(this, "_setStateClass"));
                        }, this);

                        // Track hover and active mouse events on widget root node, plus possibly on subnodes
                        for (var ap in this.cssStateNodes) {
                            this._trackMouseState(this[ap], this.cssStateNodes[ap]);
                        }
                        this._trackMouseState(this.domNode, this.baseClass);

                        // Set state initially; there's probably no hover/active/focus state but widget might be
                        // disabled/readonly/checked/selected so we want to set CSS classes for those conditions.
                        this._setStateClass();
                    },

                    _cssMouseEvent: function( /*Event*/ event) {
                        // summary:
                        //		Handler for CSS event on this.domNode. Sets hovering and active properties depending on mouse state,
                        //		which triggers _setStateClass() to set appropriate CSS classes for this.domNode.

                        if (!this.disabled) {
                            switch (event.type) {
                                case "mouseover":
                                    this._set("hovering", true);
                                    this._set("active", this._mouseDown);
                                    break;
                                case "mouseout":
                                    this._set("hovering", false);
                                    this._set("active", false);
                                    break;
                                case "mousedown":
                                case "touchstart":
                                    this._set("active", true);
                                    break;
                                case "mouseup":
                                case "touchend":
                                    this._set("active", false);
                                    break;
                            }
                        }
                    },

                    _setStateClass: function() {
                        // summary:
                        //		Update the visual state of the widget by setting the css classes on this.domNode
                        //		(or this.stateNode if defined) by combining this.baseClass with
                        //		various suffixes that represent the current widget state(s).
                        //
                        // description:
                        //		In the case where a widget has multiple
                        //		states, it sets the class based on all possible
                        //		combinations.  For example, an invalid form widget that is being hovered
                        //		will be "dijitInput dijitInputInvalid dijitInputHover dijitInputInvalidHover".
                        //
                        //		The widget may have one or more of the following states, determined
                        //		by this.state, this.checked, this.valid, and this.selected:
                        //
                        //		- Error - ValidationTextBox sets this.state to "Error" if the current input value is invalid
                        //		- Incomplete - ValidationTextBox sets this.state to "Incomplete" if the current input value is not finished yet
                        //		- Checked - ex: a checkmark or a ToggleButton in a checked state, will have this.checked==true
                        //		- Selected - ex: currently selected tab will have this.selected==true
                        //
                        //		In addition, it may have one or more of the following states,
                        //		based on this.disabled and flags set in _onMouse (this.active, this.hovering) and from focus manager (this.focused):
                        //
                        //		- Disabled	- if the widget is disabled
                        //		- Active		- if the mouse (or space/enter key?) is being pressed down
                        //		- Focused		- if the widget has focus
                        //		- Hover		- if the mouse is over the widget

                        // Compute new set of classes
                        var newStateClasses = this.baseClass.split(" ");

                        function multiply(modifier) {
                            newStateClasses = newStateClasses.concat(array.map(newStateClasses, function(c) {
                                return c + modifier;
                            }), "dijit" + modifier);
                        }

                        if (!this.isLeftToRight()) {
                            // For RTL mode we need to set an addition class like dijitTextBoxRtl.
                            multiply("Rtl");
                        }

                        var checkedState = this.checked == "mixed" ? "Mixed" : (this.checked ? "Checked" : "");
                        if (this.checked) {
                            multiply(checkedState);
                        }
                        if (this.state) {
                            multiply(this.state);
                        }
                        if (this.selected) {
                            multiply("Selected");
                        }
                        if (this._opened) {
                            multiply("Opened");
                        }

                        if (this.disabled) {
                            multiply("Disabled");
                        } else if (this.readOnly) {
                            multiply("ReadOnly");
                        } else {
                            if (this.active) {
                                multiply("Active");
                            } else if (this.hovering) {
                                multiply("Hover");
                            }
                        }

                        if (this.focused) {
                            multiply("Focused");
                        }

                        // Remove old state classes and add new ones.
                        // For performance concerns we only write into domNode.className once.
                        var tn = this.stateNode || this.domNode,
                            classHash = {}; // set of all classes (state and otherwise) for node

                        array.forEach(tn.className.split(" "), function(c) {
                            classHash[c] = true;
                        });

                        if ("_stateClasses" in this) {
                            array.forEach(this._stateClasses, function(c) {
                                delete classHash[c];
                            });
                        }

                        array.forEach(newStateClasses, function(c) {
                            classHash[c] = true;
                        });

                        var newClasses = [];
                        for (var c in classHash) {
                            newClasses.push(c);
                        }
                        tn.className = newClasses.join(" ");

                        this._stateClasses = newStateClasses;
                    },

                    _subnodeCssMouseEvent: function(node, clazz, evt) {
                        // summary:
                        //		Handler for hover/active mouse event on widget's subnode
                        if (this.disabled || this.readOnly) {
                            return;
                        }

                        function hover(isHovering) {
                            domClass.toggle(node, clazz + "Hover", isHovering);
                        }

                        function active(isActive) {
                            domClass.toggle(node, clazz + "Active", isActive);
                        }

                        function focused(isFocused) {
                            domClass.toggle(node, clazz + "Focused", isFocused);
                        }
                        switch (evt.type) {
                            case "mouseover":
                                hover(true);
                                break;
                            case "mouseout":
                                hover(false);
                                active(false);
                                break;
                            case "mousedown":
                            case "touchstart":
                                active(true);
                                break;
                            case "mouseup":
                            case "touchend":
                                active(false);
                                break;
                            case "focus":
                            case "focusin":
                                focused(true);
                                break;
                            case "blur":
                            case "focusout":
                                focused(false);
                                break;
                        }
                    },

                    _trackMouseState: function( /*DomNode*/ node, /*String*/ clazz) {
                        // summary:
                        //		Track mouse/focus events on specified node and set CSS class on that node to indicate
                        //		current state.   Usually not called directly, but via cssStateNodes attribute.
                        // description:
                        //		Given class=foo, will set the following CSS class on the node
                        //
                        //		- fooActive: if the user is currently pressing down the mouse button while over the node
                        //		- fooHover: if the user is hovering the mouse over the node, but not pressing down a button
                        //		- fooFocus: if the node is focused
                        //
                        //		Note that it won't set any classes if the widget is disabled.
                        // node: DomNode
                        //		Should be a sub-node of the widget, not the top node (this.domNode), since the top node
                        //		is handled specially and automatically just by mixing in this class.
                        // clazz: String
                        //		CSS class name (ex: dijitSliderUpArrow)

                        // Flag for listener code below to call this._cssMouseEvent() or this._subnodeCssMouseEvent()
                        // when node is hovered/active
                        node._cssState = clazz;
                    }
                });

                ready(function() {
                    // Document level listener to catch hover etc. events on widget root nodes and subnodes.
                    // Note that when the mouse is moved quickly, a single onmouseenter event could signal that multiple widgets
                    // have been hovered or unhovered (try test_Accordion.html)
                    function handler(evt) {
                        // Poor man's event propagation.  Don't propagate event to ancestors of evt.relatedTarget,
                        // to avoid processing mouseout events moving from a widget's domNode to a descendant node;
                        // such events shouldn't be interpreted as a mouseleave on the widget.
                        if (!dom.isDescendant(evt.relatedTarget, evt.target)) {
                            for (var node = evt.target; node && node != evt.relatedTarget; node = node.parentNode) {
                                // Process any nodes with _cssState property.   They are generally widget root nodes,
                                // but could also be sub-nodes within a widget
                                if (node._cssState) {
                                    var widget = registry.getEnclosingWidget(node);
                                    if (widget) {
                                        if (node == widget.domNode) {
                                            // event on the widget's root node
                                            widget._cssMouseEvent(evt);
                                        } else {
                                            // event on widget's sub-node
                                            widget._subnodeCssMouseEvent(node, node._cssState, evt);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    function ieHandler(evt) {
                        evt.target = evt.srcElement;
                        handler(evt);
                    }

                    // Use addEventListener() (and attachEvent() on IE) to catch the relevant events even if other handlers
                    // (on individual nodes) call evt.stopPropagation() or event.stopEvent().
                    // Currently typematic.js is doing that, not sure why.
                    // Don't monitor mouseover/mouseout on mobile because iOS generates "phantom" mouseover/mouseout events when
                    // drag-scrolling, at the point in the viewport where the drag originated.   Test the Tree in api viewer.
                    var body = win.body(),
                        types = (has("touch") ? [] : ["mouseover", "mouseout"]).concat(["mousedown", "touchstart", "mouseup", "touchend"]);
                    array.forEach(types, function(type) {
                        if (body.addEventListener) {
                            body.addEventListener(type, handler, true); // W3C
                        } else {
                            body.attachEvent("on" + type, ieHandler); // IE
                        }
                    });

                    // Track focus events on widget sub-nodes that have been registered via _trackMouseState().
                    // However, don't track focus events on the widget root nodes, because focus is tracked via the
                    // focus manager (and it's not really tracking focus, but rather tracking that focus is on one of the widget's
                    // nodes or a subwidget's node or a popup node, etc.)
                    // Remove for 2.0 (if focus CSS needed, just use :focus pseudo-selector).
                    on(body, "focusin, focusout", function(evt) {
                        var node = evt.target;
                        if (node._cssState && !node.getAttribute("widgetId")) {
                            var widget = registry.getEnclosingWidget(node);
                            widget._subnodeCssMouseEvent(node, node._cssState, evt);
                        }
                    });
                });

                return CssStateMixin;
            });

        },
        'dojo/selector/_loader': function() {
            define(["../has", "require"],
                function(has, require) {

                    "use strict";
                    var testDiv = document.createElement("div");
                    has.add("dom-qsa2.1", !!testDiv.querySelectorAll);
                    has.add("dom-qsa3", function() {
                        // test to see if we have a reasonable native selector engine available
                        try {
                            testDiv.innerHTML = "<p class='TEST'></p>"; // test kind of from sizzle
                            // Safari can't handle uppercase or unicode characters when
                            // in quirks mode, IE8 can't handle pseudos like :empty
                            return testDiv.querySelectorAll(".TEST:empty").length == 1;
                        } catch (e) {}
                    });
                    var fullEngine;
                    var acme = "./acme",
                        lite = "./lite";
                    return {
                        // summary:
                        //		This module handles loading the appropriate selector engine for the given browser

                        load: function(id, parentRequire, loaded, config) {
                            var req = require;
                            // here we implement the default logic for choosing a selector engine
                            id = id == "default" ? has("config-selectorEngine") || "css3" : id;
                            id = id == "css2" || id == "lite" ? lite :
                                id == "css2.1" ? has("dom-qsa2.1") ? lite : acme :
                                id == "css3" ? has("dom-qsa3") ? lite : acme :
                                id == "acme" ? acme : (req = parentRequire) && id;
                            if (id.charAt(id.length - 1) == '?') {
                                id = id.substring(0, id.length - 1);
                                var optionalLoad = true;
                            }
                            // the query engine is optional, only load it if a native one is not available or existing one has not been loaded
                            if (optionalLoad && (has("dom-compliant-qsa") || fullEngine)) {
                                return loaded(fullEngine);
                            }
                            // load the referenced selector engine
                            req([id], function(engine) {
                                if (id != "./lite") {
                                    fullEngine = engine;
                                }
                                loaded(engine);
                            });
                        }
                    };
                });

        },
        'hsbcwidget/formValidation': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/dom-class",
                    "dojo/dom",
                    "dojo/on",
                    "dojo/dom-attr",
                    "dojo/_base/array",
                    "dojo/dom-style",
                    "dojo/_base/lang",
                    "dojo/dom-construct",
                    "dijit/registry",
                    "dijit/focus",
                    "dojo/NodeList-traverse",
                    "dojo/NodeList-manipulate"

                ],
                function(declare, WidgetBase, query, domClass, dom, on, domAttr, array, style, lang, domConstruct, registry, focusUtil) {

                    return declare("hsbcwidget.form.Validation", [WidgetBase], {
                        selectors: {
                            question: '.jsQuestion',
                            errorMsg: '.jsValidationMsg',
                            errorListWrapper: '.jsFormErrorListWrapper',
                            errorList: '.jsFormErrorList',
                            errorListItem: '.jsFormErrorListItem'
                        },
                        classes: {
                            valid: 'valid',
                            invalid: 'invalid',
                            ignore: 'jsIgnore'
                        },
                        event: 'blur',
                        rulesLocation: 'app/validationRules',
                        visibleErrors: 1,
                        catchSubmit: true,

                        //internal class vars
                        $nodes: null,
                        $errorList: null,
                        $errorListItem: null,
                        rules: null,

                        /**
                         * Called when widget is created and initalised
                         */
                        postCreate: function() {
                            var self = this;
                            require([self.rulesLocation], function(rules) {
                                self.rules = rules;
                                self.bindInputEvents();
                                self.bindQuestionEvents();
                                self.bindFormEvents();
                                self.bindFormErrorListEvents();
                            });
                        },

                        bindFormErrorListEvents: function() {
                            var self = this;
                            self.$errorListWrapper = query(this.selectors.errorListWrapper, self.domNode)[0];
                            self.$errorList = query(this.selectors.errorList, self.domNode);
                            self.$errorListItem = query(this.selectors.errorListItem, self.domNode).remove();

                            if (self.$errorListWrapper && self.$errorList.length && self.$errorListItem.length) {
                                style.set(self.$errorListWrapper, 'display', 'none');
                                query(self.selectors.errorMsg, self.domNode).forEach(function($error) {
                                    on($error, 'onshowerror', function(e) {
                                        self.errorListError(true, e.message, e.f0r, e.rule);
                                    });
                                    on($error, 'onhideerror', function(e) {
                                        self.errorListError(false, e.message, e.f0r, e.rule);
                                    });
                                });
                            }
                        },

                        errorListError: function(show, message, f0r, rule) {
                            var self = this,
                                id = f0r + rule,
                                $msgNode = query('[data-msg-id="' + id + '"]', self.$errorList[0]);
                            if (show && !$msgNode.length) {
                                var $node = domConstruct.toDom('<a href="#' + f0r + '" title="activate link to focus incorrect form field">' + message + '</a>'),
                                    $msg = domConstruct.place(query(lang.clone(self.$errorListItem[0])).html($node)[0], self.$errorList[0], 'last');
                                domAttr.set($msg, 'data-msg-id', id);
                                on($msg, 'click', function(e) {
                                    e.preventDefault();
                                    var $input = query('#' + f0r, self.domNode);
                                    if ($input.length) {
                                        focusUtil.focus($input[0]);
                                    }
                                });
                            } else if (!show && $msgNode.length) {
                                domConstruct.destroy($msgNode[0]);
                            }

                            if (!query(self.selectors.errorListItem + '[data-msg-id]', self.$errorList[0]).length && style.get(self.$errorListWrapper, 'display') !== 'none') {
                                style.set(self.$errorListWrapper, 'display', 'none');
                            } else if (query(self.selectors.errorListItem + '[data-msg-id]', self.$errorList[0]).length && style.get(self.$errorListWrapper, 'display') === 'none') {
                                style.set(self.$errorListWrapper, 'display', 'block');
                            }
                        },
                        /**
                         * Binds form events
                         */
                        bindFormEvents: function() {
                            var self = this;
                            if (self.catchSubmit) {
                                on(self.domNode, 'submit', function(e) {
                                    var result = self.validateForm();
                                    if (!result.valid) {
                                        e.preventDefault();
                                        for (var i = 0, len = result.results.length; i < len; i++) {
                                            self.showMsgs(result.results[i].node, result.results[i]);
                                        }
                                        if (self.$errorList) {
                                            console.log(query('a', self.$errorList[0])[0]);
                                            focusUtil.focus(query('a', self.$errorList[0])[0]);
                                        }
                                    }
                                });
                            }
                        },
                        /**
                         * Binds custom events to question
                         */
                        bindQuestionEvents: function() {
                            var self = this,
                                $questions = query(self.selectors.question, self.domNode);
                            $questions.on('validate', function(addClasses, showMsgs, callback) {
                                var valid = self.validateQuestion(this);

                                if (addClasses) {
                                    self._addClasses(this, valid);
                                }
                                if (showMsgs) {
                                    self.showMsgs(this, valid);
                                }
                                if (typeof callback === 'function') {
                                    callback(valid);
                                }
                            });
                        },

                        /**
                         * Binds events to inputs
                         */
                        bindInputEvents: function() {
                            var self = this;
                            query(self.selectors.question, self.domNode).forEach(function($question) {
                                if (!domClass.contains($question, self.classes.ignore)) {
                                    query('input[data-validation-rule], textarea[data-validation-rule], select[data-validation-rule]', $question).on(self.event, function() {
                                        var validate = self.validateQuestion($question);
                                        self._addClasses($question, validate);
                                        self.showMsgs($question, validate);
                                        on.emit($question, 'onquestionvalidate', {
                                            bubbles: true,
                                            cancelable: true,
                                            result: validate
                                        });
                                    });
                                }
                            });

                        },

                        /**
                         * Show error messages
                         * @param $question {Dom Node} - Question to have messages shown.
                         * @param result {Object} - the results of the validation for this question.
                         */
                        showMsgs: function($question, result) {
                            var self = this,
                                errorsShown = 0;

                            query(self.selectors.errorMsg, $question).forEach(function($error) {
                                var rule = self.splitRules(domAttr.get($error, 'data-validation-rule')),
                                    forName = domAttr.get($error, 'data-message-for'),
                                    $input;

                                for (var i = 0, len = result.results.length; i < len; i++) {
                                    if (domAttr.get(result.results[i].node, 'name') === forName) {
                                        $input = result.results[i].node;
                                        break;
                                    }
                                    if (i === len - 1) {
                                        throw new Error('Form Validation: input rule not found for rule that is for element named: ' + forName);
                                    }
                                }
                                for (var i = 0, len = rule.length; i < len; i++) {
                                    if (array.indexOf(['!', '(', ')', '&&', '||'], rule[i]) === -1) {
                                        if (self.rules[rule[i]] && typeof self.rules[rule[i]] === 'function') {
                                            rule[i] = self.rules[rule[i]]($input);
                                        } else {
                                            throw new Error('Form Validation: No rules found for: ' + rule[i]);
                                        }
                                    }
                                }
                                if (eval(rule.join('')) && errorsShown < self.visibleErrors) {
                                    style.set($error, 'display', 'block');
                                    on.emit($error, 'onshowerror', {
                                        bubbles: true,
                                        cancelable: true,
                                        message: query($error).text(),
                                        f0r: domAttr.get($error, 'data-message-for'),
                                        rule: domAttr.get($error, 'data-validation-rule')
                                    });
                                    errorsShown++;
                                } else if (style.get($error, 'display') !== 'none') {
                                    style.set($error, 'display', 'none');
                                    on.emit($error, 'onhideerror', {
                                        bubbles: true,
                                        cancelable: true,
                                        message: query($error).text(),
                                        f0r: domAttr.get($error, 'data-message-for'),
                                        rule: domAttr.get($error, 'data-validation-rule')
                                    });
                                }
                            });
                        },

                        /**
                         * Adds classes to questions and inputs depending on the validation results supplied
                         * @param $question {Dom Node} - Question to have classes added
                         * @param result {Object} - results of the validation for this question.
                         * @private
                         */
                        _addClasses: function($question, result) {
                            var self = this;
                            if (result.valid) {
                                domClass.remove($question, self.classes.invalid);
                                domClass.add($question, self.classes.valid);
                            } else {
                                domClass.remove($question, self.classes.valid)
                                domClass.add($question, self.classes.invalid);
                            }
                        },

                        /**
                         * Validates the form
                         * @return {Object} - validation results for whole form.
                         */
                        validateForm: function() {
                            var self = this,
                                results = [],
                                formValid = true;

                            query(self.selectors.question, self.domNode).forEach(function($question) {
                                if (!domClass.contains($question, self.classes.ignore)) {
                                    var validation = self.validateQuestion($question);
                                    validation.node = $question;
                                    results.push(validation);
                                    if (!validation.valid) {
                                        formValid = false;
                                    }
                                }
                            });
                            return {
                                valid: formValid,
                                results: results
                            }
                        },

                        /**
                         * @param $question {Dom Node} - Question node to be validated
                         * @return {Object} - validation results from question
                         */
                        validateQuestion: function($question) {
                            var self = this,
                                results = [],
                                qsValid = true;
                            query('input[data-validation-rule], textarea[data-validation-rule], select[data-validation-rule]', $question).forEach(function($node) {
                                if (!domClass.contains($node, self.classes.ignore)) {
                                    var validation = self.validateInput($node, self.splitRules(domAttr.get($node, 'data-validation-rule')));
                                    validation.node = $node;
                                    results.push(validation);
                                    if (!validation.result) {
                                        qsValid = false;
                                    }
                                }
                            });
                            return {
                                valid: qsValid,
                                results: results
                            }
                        },

                        /**
                         * @param $input {Dom Node} - Input to be validated
                         * @param ruleArr {Array} - Rules to be validated against
                         * @return {Object}  validation results from input
                         */
                        validateInput: function($input, ruleArr) {
                            var self = this,
                                validation = {
                                    rules: {}
                                };
                            if (!ruleArr) {
                                var ruleArr = self.splitRules(domAttr.get($input, 'data-validation-rule'));
                            }
                            for (var i = 0, len = ruleArr.length; i < len; i++) {
                                if (self.rules[ruleArr[i]]) {
                                    if (self.rules[ruleArr[i]]($input)) {
                                        ruleArr[i] = validation.rules[ruleArr[i]] = true;
                                    } else {
                                        ruleArr[i] = validation.rules[ruleArr[i]] = false;
                                    }
                                }
                            }
                            validation.result = eval(ruleArr.join(''));
                            return validation;
                        },

                        /**
                         * Parses and splits a rule string into an array that can be used in the validation step
                         * @param ruleStr {String} - The validation rule in string form
                         * @return {Array} - The split validation rule
                         */
                        splitRules: function(ruleStr) {
                            var ruleArr = [],
                                temp = '',
                                token;
                            for (var i = 0, len = ruleStr.length; i < len; i++) {
                                token = ruleStr.charAt(i);
                                if (temp === '||' || temp === '&&' || temp === '(' || temp === ')' || temp === '!') {
                                    ruleArr.push(temp);
                                    temp = '';
                                }
                                switch (token) {
                                    case '(':
                                    case ')':
                                    case '|':
                                    case '&':
                                    case '!':
                                        if (temp !== '' && temp !== '|' && temp !== '&') {
                                            ruleArr.push(temp);
                                            temp = '';
                                        }
                                        break;
                                }
                                temp += token;
                                if (i === len - 1) {
                                    ruleArr.push(temp);
                                }
                            }
                            if (!ruleArr || !ruleArr.length) {
                                throw new Error('Form Validation: No rules found for: ' + ruleStr);
                            }
                            return ruleArr;
                        }
                    });

                }
            );
        },
        'hsbcwidget/randCharChal2_02': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dijit/_TemplatedMixin",
                    "dijit/_WidgetsInTemplateMixin",
                    "dojo/query",
                    "dojo/_base/array",
                    "dojo/_base/lang",
                    "dojo/dom-attr",
                    "dojo/dom-class",
                    "dojo/dom-style",
                    "dojo/html",
                    "dojo/text!hsbcwidget/themes/ursula/templates/randCharChal2.html",
                    "dijit/focus",
                    "dojo/on",
                    "dijit/Tooltip",
                    "dojo/parser",
                    "dojo/NodeList-traverse"

                ],
                function(declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, query, array, lang, domAttr, domClass, style, html, template, focusUtil, on, Tooltip, parser) {

                    return declare("dijit.randCharChal", [_WidgetBase, _TemplatedMixin], {
                        templateString: template,
                        widgetsInTemplate: true,
                        chalNums: null,

                        staticTemplateData: null,

                        constructor: function(kwArgs) {
                            var staticTemplateData = {

                            };


                            if ('staticTemplateData' in kwArgs) {
                                lang.mixin(staticTemplateData, kwArgs.staticTemplateData);
                                kwArgs.staticTemplateData = staticTemplateData;
                            } else {
                                this.staticTemplateData = staticTemplateData;
                            }

                            this.chalNums = [];

                            staticTemplateData = null;
                        },

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this;

                            this.init();
                            this.setLabel();

                            parser.parse(this.domNode);
                        },

                        init: function() {
                            var self = this;

                            this.$inputs = query('.jsInputWrapper input[type="password"]', this.domNode);
                            var validDiv = query('.jsInputWrapper .rValidationMsg', this.domNode);
                            var validDivNum = 0;
                            this.$inputs.forEach(function($input, index) {

                                if (array.indexOf(self.chalNums, index + 1) !== -1) {

                                    var chalNum = index + 1;
                                    domAttr.remove($input, 'disabled');
                                    domClass.add($input, 'active');
                                    domAttr.set($input, "data-validation-rule", "!empty");
                                    domAttr.set(validDiv[validDivNum], "data-message-for", "pass" + chalNum);
                                    if (validDivNum < 4) {
                                        validDivNum = validDivNum + 1;
                                    }
                                    on($input, 'keyup', function(e) {
                                        var $this = query(e.currentTarget);
                                        var key = (e.keyCode ? e.keyCode : e.which);

                                        if (key >= 48 && key <= 105) {
                                            var $nextNode = $this.nextAll('.active')[0];
                                            if (typeof $nextNode === 'undefined') return;

                                            focusUtil.focus($nextNode);
                                        }
                                    });

                                    on($input, 'blur', function() {
                                        self.validate($input);
                                    });
                                }

                            });
                        },

                        setLabel: function() {
                            var self = this,
                                $label = query('label', self.domNode),
                                $items = query('span', $label[0]);

                            if ($items.length !== self.chalNums.length) {
                                throw new Error('randCharChal: number of spans in label does not match number of active challenge items.')
                            } else {
                                $items.forEach(function($span, index) {
                                    var text = 'first';
                                    switch (self.chalNums[index]) {
                                        case 2:
                                            text = 'second';
                                            break;
                                        case 3:
                                            text = 'third';
                                            break;
                                        case 4:
                                            text = 'four';
                                            break;
                                        case 5:
                                            text = 'five';
                                            break;
                                        case 6:
                                            text = 'six';
                                            break;
                                        case 7:
                                            text = 'second to last';
                                            break;
                                        case 8:
                                            text = 'last';
                                            break;
                                    }
                                    html.set($span, text);
                                });
                            }
                        },

                        validate: function($input) {
                            var self = this;
                            var SvalidationMegShow = false;
                            var validDiv = query('.jsInputWrapper .rValidationMsg', this.domNode);
                            var $validDiv = validDiv[0];

                            if (!$input.value) {
                                domClass.add($input, 'SvalidationMsg');
                                $validDiv && domClass.remove($validDiv, 'ValidationMsgHide');
                                style.set($validDiv, 'display', 'block');
                            } else {
                                domClass.remove($input, 'SvalidationMsg');
                            }

                            for (var i = 0; i < this.$inputs.length; i++) {
                                if (domClass.contains(this.$inputs[i], 'SvalidationMsg')) {
                                    SvalidationMegShow = true;
                                }
                            }

                            if (!SvalidationMegShow) {
                                $validDiv && domClass.add($validDiv, 'ValidationMsgHide');
                                for (var c = 0; c < validDiv.length; c++) {
                                    style.set(validDiv[c], 'display', 'none');
                                }
                            }

                            SvalidationMegShow = false;
                        },

                        reset: function() {
                            var self = this;

                            query('.jsInputWrapper input[type="text"]', this.domNode).forEach(function($input, index) {
                                domAttr.add($input, 'disabled', 'disabled');
                                domClass.remove($input, 'active');
                            });

                            this.init();
                        }
                    });

                }
            );
        },
        'dijit/layout/ScrollingTabController': function() {
            require({
                cache: {
                    'url:dijit/layout/templates/ScrollingTabController.html': "<div class=\"dijitTabListContainer-${tabPosition}\" style=\"visibility:hidden\">\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerMenuButton\"\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\n\t\t\tid=\"${id}_menuBtn\"\n\t\t\tdata-dojo-props=\"containerId: '${containerId}', iconClass: 'dijitTabStripMenuIcon',\n\t\t\t\t\tdropDownPosition: ['below-alt', 'above-alt']\"\n\t\t\tdata-dojo-attach-point=\"_menuBtn\" showLabel=\"false\" title=\"\">&#9660;</div>\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\n\t\t\tid=\"${id}_leftBtn\"\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideLeftIcon', showLabel:false, title:''\"\n\t\t\tdata-dojo-attach-point=\"_leftBtn\" data-dojo-attach-event=\"onClick: doSlideLeft\">&#9664;</div>\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\n\t\t\tid=\"${id}_rightBtn\"\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideRightIcon', showLabel:false, title:''\"\n\t\t\tdata-dojo-attach-point=\"_rightBtn\" data-dojo-attach-event=\"onClick: doSlideRight\">&#9654;</div>\n\t<div class='dijitTabListWrapper' data-dojo-attach-point='tablistWrapper'>\n\t\t<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'\n\t\t\t\tdata-dojo-attach-point='containerNode' class='nowrapTabStrip'></div>\n\t</div>\n</div>",
                    'url:dijit/layout/templates/_ScrollingTabControllerButton.html': "<div data-dojo-attach-event=\"onclick:_onClick\" class=\"dijitTabInnerDiv dijitTabContent dijitButtonContents\"  data-dojo-attach-point=\"focusNode\">\n\t<img role=\"presentation\" alt=\"\" src=\"${_blankGif}\" class=\"dijitTabStripIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t<span data-dojo-attach-point=\"containerNode,titleNode\" class=\"dijitButtonText\"></span>\n</div>"
                }
            });
            define("dijit/layout/ScrollingTabController", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.add domClass.contains
                "dojo/dom-geometry", // domGeometry.contentBox
                "dojo/dom-style", // domStyle.style
                "dojo/_base/fx", // Animation
                "dojo/_base/lang", // lang.hitch
                "dojo/on",
                "dojo/query", // query
                "dojo/sniff", // has("ie"), has("webkit"), has("quirks")
                "../registry", // registry.byId()
                "dojo/text!./templates/ScrollingTabController.html",
                "dojo/text!./templates/_ScrollingTabControllerButton.html",
                "./TabController",
                "./utils", // marginBox2contextBox, layoutChildren
                "../_WidgetsInTemplateMixin",
                "../Menu",
                "../MenuItem",
                "../form/Button",
                "../_HasDropDown",
                "dojo/NodeList-dom" // NodeList.style
            ], function(array, declare, domClass, domGeometry, domStyle, fx, lang, on, query, has,
                registry, tabControllerTemplate, buttonTemplate, TabController, layoutUtils, _WidgetsInTemplateMixin,
                Menu, MenuItem, Button, _HasDropDown) {

                // module:
                //		dijit/layout/ScrollingTabController


                var ScrollingTabController = declare("dijit.layout.ScrollingTabController", [TabController, _WidgetsInTemplateMixin], {
                    // summary:
                    //		Set of tabs with left/right arrow keys and a menu to switch between tabs not
                    //		all fitting on a single row.
                    //		Works only for horizontal tabs (either above or below the content, not to the left
                    //		or right).
                    // tags:
                    //		private

                    baseClass: "dijitTabController dijitScrollingTabController",

                    templateString: tabControllerTemplate,

                    // useMenu: [const] Boolean
                    //		True if a menu should be used to select tabs when they are too
                    //		wide to fit the TabContainer, false otherwise.
                    useMenu: true,

                    // useSlider: [const] Boolean
                    //		True if a slider should be used to select tabs when they are too
                    //		wide to fit the TabContainer, false otherwise.
                    useSlider: true,

                    // tabStripClass: [const] String
                    //		The css class to apply to the tab strip, if it is visible.
                    tabStripClass: "",

                    widgetsInTemplate: true,

                    // _minScroll: Number
                    //		The distance in pixels from the edge of the tab strip which,
                    //		if a scroll animation is less than, forces the scroll to
                    //		go all the way to the left/right.
                    _minScroll: 5,

                    // Override default behavior mapping class to DOMNode
                    _setClassAttr: {
                        node: "containerNode",
                        type: "class"
                    },

                    buildRendering: function() {
                        this.inherited(arguments);
                        var n = this.domNode;

                        this.scrollNode = this.tablistWrapper;
                        this._initButtons();

                        if (!this.tabStripClass) {
                            this.tabStripClass = "dijitTabContainer" +
                                this.tabPosition.charAt(0).toUpperCase() +
                                this.tabPosition.substr(1).replace(/-.*/, "") +
                                "None";
                            domClass.add(n, "tabStrip-disabled")
                        }

                        domClass.add(this.tablistWrapper, this.tabStripClass);
                    },

                    onStartup: function() {
                        this.inherited(arguments);

                        // TabController is hidden until it finishes drawing, to give
                        // a less visually jumpy instantiation.   When it's finished, set visibility to ""
                        // to that the tabs are hidden/shown depending on the container's visibility setting.
                        domStyle.set(this.domNode, "visibility", "");
                        this._postStartup = true;

                        // changes to the tab button label or iconClass will have changed the width of the
                        // buttons, so do a resize
                        this.own(on(this.containerNode, "attrmodified-label, attrmodified-iconclass", lang.hitch(this, function(evt) {
                            if (this._dim) {
                                this.resize(this._dim);
                            }
                        })));
                    },

                    onAddChild: function(page, insertIndex) {
                        this.inherited(arguments);

                        // Increment the width of the wrapper when a tab is added
                        // This makes sure that the buttons never wrap.
                        // The value 200 is chosen as it should be bigger than most
                        // Tab button widths.
                        domStyle.set(this.containerNode, "width",
                            (domStyle.get(this.containerNode, "width") + 200) + "px");
                    },

                    onRemoveChild: function(page, insertIndex) {
                        // null out _selectedTab because we are about to delete that dom node
                        var button = this.pane2button[page.id];
                        if (this._selectedTab === button.domNode) {
                            this._selectedTab = null;
                        }

                        this.inherited(arguments);
                    },

                    _initButtons: function() {
                        // summary:
                        //		Creates the buttons used to scroll to view tabs that
                        //		may not be visible if the TabContainer is too narrow.

                        // Make a list of the buttons to display when the tab labels become
                        // wider than the TabContainer, and hide the other buttons.
                        // Also gets the total width of the displayed buttons.
                        this._btnWidth = 0;
                        this._buttons = query("> .tabStripButton", this.domNode).filter(function(btn) {
                            if ((this.useMenu && btn == this._menuBtn.domNode) ||
                                (this.useSlider && (btn == this._rightBtn.domNode || btn == this._leftBtn.domNode))) {
                                this._btnWidth += domGeometry.getMarginSize(btn).w;
                                return true;
                            } else {
                                domStyle.set(btn, "display", "none");
                                return false;
                            }
                        }, this);
                    },

                    _getTabsWidth: function() {
                        var children = this.getChildren();
                        if (children.length) {
                            var leftTab = children[this.isLeftToRight() ? 0 : children.length - 1].domNode,
                                rightTab = children[this.isLeftToRight() ? children.length - 1 : 0].domNode;
                            return rightTab.offsetLeft + rightTab.offsetWidth - leftTab.offsetLeft;
                        } else {
                            return 0;
                        }
                    },

                    _enableBtn: function(width) {
                        // summary:
                        //		Determines if the tabs are wider than the width of the TabContainer, and
                        //		thus that we need to display left/right/menu navigation buttons.
                        var tabsWidth = this._getTabsWidth();
                        width = width || domStyle.get(this.scrollNode, "width");
                        return tabsWidth > 0 && width < tabsWidth;
                    },

                    resize: function(dim) {
                        // summary:
                        //		Hides or displays the buttons used to scroll the tab list and launch the menu
                        //		that selects tabs.

                        // Save the dimensions to be used when a child is renamed.
                        this._dim = dim;

                        // Set my height to be my natural height (tall enough for one row of tab labels),
                        // and my content-box width based on margin-box width specified in dim parameter.
                        // But first reset scrollNode.height in case it was set by layoutChildren() call
                        // in a previous run of this method.
                        this.scrollNode.style.height = "auto";
                        var cb = this._contentBox = layoutUtils.marginBox2contentBox(this.domNode, {
                            h: 0,
                            w: dim.w
                        });
                        cb.h = this.scrollNode.offsetHeight;
                        domGeometry.setContentSize(this.domNode, cb);

                        // Show/hide the left/right/menu navigation buttons depending on whether or not they
                        // are needed.
                        var enable = this._enableBtn(this._contentBox.w);
                        this._buttons.style("display", enable ? "" : "none");

                        // Position and size the navigation buttons and the tablist
                        this._leftBtn.layoutAlign = "left";
                        this._rightBtn.layoutAlign = "right";
                        this._menuBtn.layoutAlign = this.isLeftToRight() ? "right" : "left";
                        layoutUtils.layoutChildren(this.domNode, this._contentBox, [this._menuBtn, this._leftBtn, this._rightBtn, {
                            domNode: this.scrollNode,
                            layoutAlign: "client"
                        }]);

                        // set proper scroll so that selected tab is visible
                        if (this._selectedTab) {
                            if (this._anim && this._anim.status() == "playing") {
                                this._anim.stop();
                            }
                            this.scrollNode.scrollLeft = this._convertToScrollLeft(this._getScrollForSelectedTab());
                        }

                        // Enable/disabled left right buttons depending on whether or not user can scroll to left or right
                        this._setButtonClass(this._getScroll());

                        this._postResize = true;

                        // Return my size so layoutChildren() can use it.
                        // Also avoids IE9 layout glitch on browser resize when scroll buttons present
                        return {
                            h: this._contentBox.h,
                            w: dim.w
                        };
                    },

                    _getScroll: function() {
                        // summary:
                        //		Returns the current scroll of the tabs where 0 means
                        //		"scrolled all the way to the left" and some positive number, based on #
                        //		of pixels of possible scroll (ex: 1000) means "scrolled all the way to the right"
                        return (this.isLeftToRight() || has("ie") < 8 || (has("ie") && has("quirks")) || has("webkit")) ? this.scrollNode.scrollLeft :
                            domStyle.get(this.containerNode, "width") - domStyle.get(this.scrollNode, "width") +
                            (has("ie") >= 8 ? -1 : 1) * this.scrollNode.scrollLeft;
                    },

                    _convertToScrollLeft: function(val) {
                        // summary:
                        //		Given a scroll value where 0 means "scrolled all the way to the left"
                        //		and some positive number, based on # of pixels of possible scroll (ex: 1000)
                        //		means "scrolled all the way to the right", return value to set this.scrollNode.scrollLeft
                        //		to achieve that scroll.
                        //
                        //		This method is to adjust for RTL funniness in various browsers and versions.
                        if (this.isLeftToRight() || has("ie") < 8 || (has("ie") && has("quirks")) || has("webkit")) {
                            return val;
                        } else {
                            var maxScroll = domStyle.get(this.containerNode, "width") - domStyle.get(this.scrollNode, "width");
                            return (has("ie") >= 8 ? -1 : 1) * (val - maxScroll);
                        }
                    },

                    onSelectChild: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Smoothly scrolls to a tab when it is selected.

                        var tab = this.pane2button[page.id];
                        if (!tab || !page) {
                            return;
                        }

                        var node = tab.domNode;

                        // Save the selection
                        if (node != this._selectedTab) {
                            this._selectedTab = node;

                            // Scroll to the selected tab, except on startup, when scrolling is handled in resize()
                            if (this._postResize) {
                                var sl = this._getScroll();

                                if (sl > node.offsetLeft ||
                                    sl + domStyle.get(this.scrollNode, "width") <
                                    node.offsetLeft + domStyle.get(node, "width")) {
                                    this.createSmoothScroll().play();
                                }
                            }
                        }

                        this.inherited(arguments);
                    },

                    _getScrollBounds: function() {
                        // summary:
                        //		Returns the minimum and maximum scroll setting to show the leftmost and rightmost
                        //		tabs (respectively)
                        var children = this.getChildren(),
                            scrollNodeWidth = domStyle.get(this.scrollNode, "width"), // about 500px
                            containerWidth = domStyle.get(this.containerNode, "width"), // 50,000px
                            maxPossibleScroll = containerWidth - scrollNodeWidth, // scrolling until right edge of containerNode visible
                            tabsWidth = this._getTabsWidth();

                        if (children.length && tabsWidth > scrollNodeWidth) {
                            // Scrolling should happen
                            return {
                                min: this.isLeftToRight() ? 0 : children[children.length - 1].domNode.offsetLeft,
                                max: this.isLeftToRight() ?
                                    (children[children.length - 1].domNode.offsetLeft + children[children.length - 1].domNode.offsetWidth) - scrollNodeWidth : maxPossibleScroll
                            };
                        } else {
                            // No scrolling needed, all tabs visible, we stay either scrolled to far left or far right (depending on dir)
                            var onlyScrollPosition = this.isLeftToRight() ? 0 : maxPossibleScroll;
                            return {
                                min: onlyScrollPosition,
                                max: onlyScrollPosition
                            };
                        }
                    },

                    _getScrollForSelectedTab: function() {
                        // summary:
                        //		Returns the scroll value setting so that the selected tab
                        //		will appear in the center
                        var w = this.scrollNode,
                            n = this._selectedTab,
                            scrollNodeWidth = domStyle.get(this.scrollNode, "width"),
                            scrollBounds = this._getScrollBounds();

                        // TODO: scroll minimal amount (to either right or left) so that
                        // selected tab is fully visible, and just return if it's already visible?
                        var pos = (n.offsetLeft + domStyle.get(n, "width") / 2) - scrollNodeWidth / 2;
                        pos = Math.min(Math.max(pos, scrollBounds.min), scrollBounds.max);

                        // TODO:
                        // If scrolling close to the left side or right side, scroll
                        // all the way to the left or right.  See this._minScroll.
                        // (But need to make sure that doesn't scroll the tab out of view...)
                        return pos;
                    },

                    createSmoothScroll: function(x) {
                        // summary:
                        //		Creates a dojo._Animation object that smoothly scrolls the tab list
                        //		either to a fixed horizontal pixel value, or to the selected tab.
                        // description:
                        //		If an number argument is passed to the function, that horizontal
                        //		pixel position is scrolled to.  Otherwise the currently selected
                        //		tab is scrolled to.
                        // x: Integer?
                        //		An optional pixel value to scroll to, indicating distance from left.

                        // Calculate position to scroll to
                        if (arguments.length > 0) {
                            // position specified by caller, just make sure it's within bounds
                            var scrollBounds = this._getScrollBounds();
                            x = Math.min(Math.max(x, scrollBounds.min), scrollBounds.max);
                        } else {
                            // scroll to center the current tab
                            x = this._getScrollForSelectedTab();
                        }

                        if (this._anim && this._anim.status() == "playing") {
                            this._anim.stop();
                        }

                        var self = this,
                            w = this.scrollNode,
                            anim = new fx.Animation({
                                beforeBegin: function() {
                                    if (this.curve) {
                                        delete this.curve;
                                    }
                                    var oldS = w.scrollLeft,
                                        newS = self._convertToScrollLeft(x);
                                    anim.curve = new fx._Line(oldS, newS);
                                },
                                onAnimate: function(val) {
                                    w.scrollLeft = val;
                                }
                            });
                        this._anim = anim;

                        // Disable/enable left/right buttons according to new scroll position
                        this._setButtonClass(x);

                        return anim; // dojo/_base/fx/Animation
                    },

                    _getBtnNode: function( /*Event*/ e) {
                        // summary:
                        //		Gets a button DOM node from a mouse click event.
                        // e:
                        //		The mouse click event.
                        var n = e.target;
                        while (n && !domClass.contains(n, "tabStripButton")) {
                            n = n.parentNode;
                        }
                        return n;
                    },

                    doSlideRight: function( /*Event*/ e) {
                        // summary:
                        //		Scrolls the menu to the right.
                        // e:
                        //		The mouse click event.
                        this.doSlide(1, this._getBtnNode(e));
                    },

                    doSlideLeft: function( /*Event*/ e) {
                        // summary:
                        //		Scrolls the menu to the left.
                        // e:
                        //		The mouse click event.
                        this.doSlide(-1, this._getBtnNode(e));
                    },

                    doSlide: function( /*Number*/ direction, /*DomNode*/ node) {
                        // summary:
                        //		Scrolls the tab list to the left or right by 75% of the widget width.
                        // direction:
                        //		If the direction is 1, the widget scrolls to the right, if it is -1,
                        //		it scrolls to the left.

                        if (node && domClass.contains(node, "dijitTabDisabled")) {
                            return;
                        }

                        var sWidth = domStyle.get(this.scrollNode, "width");
                        var d = (sWidth * 0.75) * direction;

                        var to = this._getScroll() + d;

                        this._setButtonClass(to);

                        this.createSmoothScroll(to).play();
                    },

                    _setButtonClass: function( /*Number*/ scroll) {
                        // summary:
                        //		Disables the left scroll button if the tabs are scrolled all the way to the left,
                        //		or the right scroll button in the opposite case.
                        // scroll: Integer
                        //		amount of horizontal scroll

                        var scrollBounds = this._getScrollBounds();
                        this._leftBtn.set("disabled", scroll <= scrollBounds.min);
                        this._rightBtn.set("disabled", scroll >= scrollBounds.max);
                    }
                });


                var ScrollingTabControllerButtonMixin = declare("dijit.layout._ScrollingTabControllerButtonMixin", null, {
                    baseClass: "dijitTab tabStripButton",

                    templateString: buttonTemplate,

                    // Override inherited tabIndex: 0 from dijit/form/Button, because user shouldn't be
                    // able to tab to the left/right/menu buttons
                    tabIndex: "",

                    // Similarly, override FormWidget.isFocusable() because clicking a button shouldn't focus it
                    // either (this override avoids focus() call in FormWidget.js)
                    isFocusable: function() {
                        return false;
                    }
                });

                // Class used in template
                declare("dijit.layout._ScrollingTabControllerButton", [Button, ScrollingTabControllerButtonMixin]);

                // Class used in template
                declare(
                    "dijit.layout._ScrollingTabControllerMenuButton", [Button, _HasDropDown, ScrollingTabControllerButtonMixin], {
                        // id of the TabContainer itself
                        containerId: "",

                        // -1 so user can't tab into the button, but so that button can still be focused programatically.
                        // Because need to move focus to the button (or somewhere) before the menu is hidden or IE6 will crash.
                        tabIndex: "-1",

                        isLoaded: function() {
                            // recreate menu every time, in case the TabContainer's list of children (or their icons/labels) have changed
                            return false;
                        },

                        loadDropDown: function(callback) {
                            this.dropDown = new Menu({
                                id: this.containerId + "_menu",
                                ownerDocument: this.ownerDocument,
                                dir: this.dir,
                                lang: this.lang,
                                textDir: this.textDir
                            });
                            var container = registry.byId(this.containerId);
                            array.forEach(container.getChildren(), function(page) {
                                var menuItem = new MenuItem({
                                    id: page.id + "_stcMi",
                                    label: page.title,
                                    iconClass: page.iconClass,
                                    disabled: page.disabled,
                                    ownerDocument: this.ownerDocument,
                                    dir: page.dir,
                                    lang: page.lang,
                                    textDir: page.textDir,
                                    onClick: function() {
                                        container.selectChild(page);
                                    }
                                });
                                this.dropDown.addChild(menuItem);
                            }, this);
                            callback();
                        },

                        closeDropDown: function( /*Boolean*/ focus) {
                            this.inherited(arguments);
                            if (this.dropDown) {
                                this.dropDown.destroyRecursive();
                                delete this.dropDown;
                            }
                        }
                    });

                return ScrollingTabController;
            });

        },
        'url:dijit/form/templates/ComboButton.html': "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tcellspacing='0' cellpadding='0' role=\"presentation\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonNode\" data-dojo-attach-point=\"buttonNode\" data-dojo-attach-event=\"ondijitclick:_onClick,onkeypress:_onButtonKeyPress\"\n\t\t><div id=\"${id}_button\" class=\"dijitReset dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><div class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitInline dijitButtonText\" id=\"${id}_label\" data-dojo-attach-point=\"containerNode\" role=\"presentation\"></div\n\t\t></div\n\t\t></td\n\t\t><td id=\"${id}_arrow\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\n\t\t\tdata-dojo-attach-point=\"_popupStateNode,focusNode,_buttonNode\"\n\t\t\tdata-dojo-attach-event=\"onkeypress:_onArrowKeyPress\"\n\t\t\ttitle=\"${optionsTitle}\"\n\t\t\trole=\"button\" aria-haspopup=\"true\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t\t><td style=\"display:none !important;\"\n\t\t\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" data-dojo-attach-point=\"valueNode\" role=\"presentation\"\n\t\t/></td></tr></tbody\n></table>\n",
        'dijit/DialogUnderlay': function() {
            define("dijit/DialogUnderlay", [
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/window", // winUtils.getBox
                "./_Widget",
                "./_TemplatedMixin",
                "./BackgroundIframe"
            ], function(declare, domAttr, winUtils, _Widget, _TemplatedMixin, BackgroundIframe) {

                // module:
                //		dijit/DialogUnderlay

                return declare("dijit.DialogUnderlay", [_Widget, _TemplatedMixin], {
                    // summary:
                    //		The component that blocks the screen behind a `dijit.Dialog`
                    //
                    // description:
                    //		A component used to block input behind a `dijit.Dialog`. Only a single
                    //		instance of this widget is created by `dijit.Dialog`, and saved as
                    //		a reference to be shared between all Dialogs as `dijit._underlay`
                    //
                    //		The underlay itself can be styled based on and id:
                    //	|	#myDialog_underlay { background-color:red; }
                    //
                    //		In the case of `dijit.Dialog`, this id is based on the id of the Dialog,
                    //		suffixed with _underlay.

                    // Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe.
                    // Inner div has opacity specified in CSS file.
                    templateString: "<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' data-dojo-attach-point='node'></div></div>",

                    // Parameters on creation or updatable later

                    // dialogId: String
                    //		Id of the dialog.... DialogUnderlay's id is based on this id
                    dialogId: "",

                    // class: String
                    //		This class name is used on the DialogUnderlay node, in addition to dijitDialogUnderlay
                    "class": "",

                    _setDialogIdAttr: function(id) {
                        domAttr.set(this.node, "id", id + "_underlay");
                        this._set("dialogId", id);
                    },

                    _setClassAttr: function(clazz) {
                        this.node.className = "dijitDialogUnderlay " + clazz;
                        this._set("class", clazz);
                    },

                    postCreate: function() {
                        // summary:
                        //		Append the underlay to the body
                        this.ownerDocumentBody.appendChild(this.domNode);
                    },

                    layout: function() {
                        // summary:
                        //		Sets the background to the size of the viewport
                        //
                        // description:
                        //		Sets the background to the size of the viewport (rather than the size
                        //		of the document) since we need to cover the whole browser window, even
                        //		if the document is only a few lines long.
                        // tags:
                        //		private

                        var is = this.node.style,
                            os = this.domNode.style;

                        // hide the background temporarily, so that the background itself isn't
                        // causing scrollbars to appear (might happen when user shrinks browser
                        // window and then we are called to resize)
                        os.display = "none";

                        // then resize and show
                        var viewport = winUtils.getBox(this.ownerDocument);
                        os.top = viewport.t + "px";
                        os.left = viewport.l + "px";
                        is.width = viewport.w + "px";
                        is.height = viewport.h + "px";
                        os.display = "block";
                    },

                    show: function() {
                        // summary:
                        //		Show the dialog underlay
                        this.domNode.style.display = "block";
                        this.layout();
                        this.bgIframe = new BackgroundIframe(this.domNode);
                    },

                    hide: function() {
                        // summary:
                        //		Hides the dialog underlay
                        this.bgIframe.destroy();
                        delete this.bgIframe;
                        this.domNode.style.display = "none";
                    }
                });
            });

        },
        'hsbcwidget/alertBox': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dijit/_TemplatedMixin",
                    "dojo/text!hsbcwidget/themes/ursula/templates/AlertBox.html",
                    "dojo/query",
                    "dojo/dom-class",
                    "dojo/Stateful",
                    "dijit/focus",
                    "dojo/dom-attr"
                ],
                function(declare, WidgetBase, TemplatedMixin, template, query, domClass, stateful, focusUtil, domAttr) {

                    return declare("hsbcwidget.AlertBox", [WidgetBase, TemplatedMixin], {
                        templateString: template,
                        widgetsInTemplate: false,
                        title: 'title',
                        type: 'error',
                        focusOnLoad: false,
                        alertTitle: null,
                        postCreate: function() {
                            var self = this;

                            switch (self.type) {
                                case 'information':
                                    domClass.add(self.domNode, 'infoAlert');
                                    this.alertTitle = 'Information Message';
                                    break;
                                case 'additional':
                                    domClass.add(self.domNode, 'messageAlert');
                                    this.alertTitle = 'Additional Information Message';
                                    break;
                                case 'confirmation':
                                    domClass.add(self.domNode, 'confirmAlert');
                                    this.alertTitle = 'Confirmation Message';
                                    break;
                                default:
                                    this.alertTitle = 'Alert Message';
                                    domAttr.set(this.domNode, {
                                        "aria-live": "polite",
                                        "aria-atomic": "true"
                                    });
                                    break;

                            }
                            domAttr.set(this.titleNode, 'innerHTML', this.alertTitle);
                            domAttr.set(this.domNode, 'tabindex', "-1");
                            domAttr.set(this.domNode, 'aria-hidden', 'true');

                            if (this.focusOnLoad) {
                                console.log(this.domNode);
                                focusUtil.focus(this.domNode);
                            }

                            self.watch('type', function(name, oldValue, value) {
                                //TODO: Finish watches
                            });
                        },

                        startup: function() {
                            this.inherited(arguments);
                            var self = this;
                            domAttr.set(self.domNode, 'aria-hidden', 'false');

                        }
                    });

                }
            );
        },
        'hsbcwidget/PlaceholderMessage': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/on",
                    "dojo/query",
                    "dojo/dom-prop",
                    "dojo/dom-attr",
                    "dojo/dom-class",
                    "dojo/has"
                ],
                function(declare, _WidgetBase, on, query, domProp, domAttr, domClass, has) {

                    return declare([_WidgetBase], {
                        message: '',
                        className: 'placeholder',

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this;

                            if (has('ie') <= 9) {
                                this.inputNode = query('input', this.domNode)[0];

                                if (!this.message.length) {
                                    this.message = domProp.get(this.inputNode, 'placeholder');

                                    if (!this.message) {
                                        this.message = domAttr.get(this.inputNode, 'placeholder')
                                    }
                                }

                                //Setup events
                                on(this.inputNode, 'focus', function() {
                                    self._onFocus();
                                });

                                on(this.inputNode, 'blur', function() {
                                    self._onBlur();
                                });

                                this._onBlur();
                            }
                        },

                        _onFocus: function() {
                            var value = domProp.get(this.inputNode, 'value');

                            if (domClass.contains(this.inputNode, this.className)) {
                                domProp.set(this.inputNode, 'value', '');
                                domClass.remove(this.inputNode, this.className);
                            }
                        },

                        _onBlur: function() {
                            var value = domProp.get(this.inputNode, 'value');

                            if (value) {
                                domClass.remove(this.inputNode, this.className);
                            } else {
                                domProp.set(this.inputNode, 'value', this.message);
                                domClass.add(this.inputNode, this.className);
                            }
                        }
                    });

                }
            );
        },
        'dijit/place': function() {
            define("dijit/place", [
                "dojo/_base/array", // array.forEach array.map array.some
                "dojo/dom-geometry", // domGeometry.position
                "dojo/dom-style", // domStyle.getComputedStyle
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/window", // win.body
                "dojo/window", // winUtils.getBox
                "./main" // dijit (defining dijit.place to match API doc)
            ], function(array, domGeometry, domStyle, kernel, win, winUtils, dijit) {

                // module:
                //		dijit/place


                function _place( /*DomNode*/ node, choices, layoutNode, aroundNodeCoords) {
                    // summary:
                    //		Given a list of spots to put node, put it at the first spot where it fits,
                    //		of if it doesn't fit anywhere then the place with the least overflow
                    // choices: Array
                    //		Array of elements like: {corner: 'TL', pos: {x: 10, y: 20} }
                    //		Above example says to put the top-left corner of the node at (10,20)
                    // layoutNode: Function(node, aroundNodeCorner, nodeCorner, size)
                    //		for things like tooltip, they are displayed differently (and have different dimensions)
                    //		based on their orientation relative to the parent.	 This adjusts the popup based on orientation.
                    //		It also passes in the available size for the popup, which is useful for tooltips to
                    //		tell them that their width is limited to a certain amount.	 layoutNode() may return a value expressing
                    //		how much the popup had to be modified to fit into the available space.	 This is used to determine
                    //		what the best placement is.
                    // aroundNodeCoords: Object
                    //		Size of aroundNode, ex: {w: 200, h: 50}

                    // get {x: 10, y: 10, w: 100, h:100} type obj representing position of
                    // viewport over document
                    var view = winUtils.getBox(node.ownerDocument);

                    // This won't work if the node is inside a <div style="position: relative">,
                    // so reattach it to win.doc.body.	 (Otherwise, the positioning will be wrong
                    // and also it might get cutoff)
                    if (!node.parentNode || String(node.parentNode.tagName).toLowerCase() != "body") {
                        win.body(node.ownerDocument).appendChild(node);
                    }

                    var best = null;
                    array.some(choices, function(choice) {
                        var corner = choice.corner;
                        var pos = choice.pos;
                        var overflow = 0;

                        // calculate amount of space available given specified position of node
                        var spaceAvailable = {
                            w: {
                                'L': view.l + view.w - pos.x,
                                'R': pos.x - view.l,
                                'M': view.w
                            }[corner.charAt(1)],
                            h: {
                                'T': view.t + view.h - pos.y,
                                'B': pos.y - view.t,
                                'M': view.h
                            }[corner.charAt(0)]
                        };

                        // Clear left/right position settings set earlier so they don't interfere with calculations,
                        // specifically when layoutNode() (a.k.a. Tooltip.orient()) measures natural width of Tooltip
                        var s = node.style;
                        s.left = s.right = "auto";

                        // configure node to be displayed in given position relative to button
                        // (need to do this in order to get an accurate size for the node, because
                        // a tooltip's size changes based on position, due to triangle)
                        if (layoutNode) {
                            var res = layoutNode(node, choice.aroundCorner, corner, spaceAvailable, aroundNodeCoords);
                            overflow = typeof res == "undefined" ? 0 : res;
                        }

                        // get node's size
                        var style = node.style;
                        var oldDisplay = style.display;
                        var oldVis = style.visibility;
                        if (style.display == "none") {
                            style.visibility = "hidden";
                            style.display = "";
                        }
                        var bb = domGeometry.position(node);
                        style.display = oldDisplay;
                        style.visibility = oldVis;

                        // coordinates and size of node with specified corner placed at pos,
                        // and clipped by viewport
                        var
                            startXpos = {
                                'L': pos.x,
                                'R': pos.x - bb.w,
                                'M': Math.max(view.l, Math.min(view.l + view.w, pos.x + (bb.w >> 1)) - bb.w) // M orientation is more flexible
                            }[corner.charAt(1)],
                            startYpos = {
                                'T': pos.y,
                                'B': pos.y - bb.h,
                                'M': Math.max(view.t, Math.min(view.t + view.h, pos.y + (bb.h >> 1)) - bb.h)
                            }[corner.charAt(0)],
                            startX = Math.max(view.l, startXpos),
                            startY = Math.max(view.t, startYpos),
                            endX = Math.min(view.l + view.w, startXpos + bb.w),
                            endY = Math.min(view.t + view.h, startYpos + bb.h),
                            width = endX - startX,
                            height = endY - startY;

                        overflow += (bb.w - width) + (bb.h - height);

                        if (best == null || overflow < best.overflow) {
                            best = {
                                corner: corner,
                                aroundCorner: choice.aroundCorner,
                                x: startX,
                                y: startY,
                                w: width,
                                h: height,
                                overflow: overflow,
                                spaceAvailable: spaceAvailable
                            };
                        }

                        return !overflow;
                    });

                    // In case the best position is not the last one we checked, need to call
                    // layoutNode() again.
                    if (best.overflow && layoutNode) {
                        layoutNode(node, best.aroundCorner, best.corner, best.spaceAvailable, aroundNodeCoords);
                    }

                    // And then position the node.  Do this last, after the layoutNode() above
                    // has sized the node, due to browser quirks when the viewport is scrolled
                    // (specifically that a Tooltip will shrink to fit as though the window was
                    // scrolled to the left).
                    //
                    // In RTL mode, set style.right rather than style.left so in the common case,
                    // window resizes move the popup along with the aroundNode.
                    var l = domGeometry.isBodyLtr(node.ownerDocument),
                        s = node.style;
                    s.top = best.y + "px";
                    s[l ? "left" : "right"] = (l ? best.x : view.w - best.x - best.w) + "px";
                    s[l ? "right" : "left"] = "auto"; // needed for FF or else tooltip goes to far left

                    return best;
                }

                var place = {
                    // summary:
                    //		Code to place a DOMNode relative to another DOMNode.
                    //		Load using require(["dijit/place"], function(place){ ... }).

                    at: function(node, pos, corners, padding) {
                        // summary:
                        //		Positions one of the node's corners at specified position
                        //		such that node is fully visible in viewport.
                        // description:
                        //		NOTE: node is assumed to be absolutely or relatively positioned.
                        // node: DOMNode
                        //		The node to position
                        // pos: dijit/place.__Position
                        //		Object like {x: 10, y: 20}
                        // corners: String[]
                        //		Array of Strings representing order to try corners in, like ["TR", "BL"].
                        //		Possible values are:
                        //
                        //		- "BL" - bottom left
                        //		- "BR" - bottom right
                        //		- "TL" - top left
                        //		- "TR" - top right
                        // padding: dijit/place.__Position?
                        //		optional param to set padding, to put some buffer around the element you want to position.
                        // example:
                        //		Try to place node's top right corner at (10,20).
                        //		If that makes node go (partially) off screen, then try placing
                        //		bottom left corner at (10,20).
                        //	|	place(node, {x: 10, y: 20}, ["TR", "BL"])
                        var choices = array.map(corners, function(corner) {
                            var c = {
                                corner: corner,
                                pos: {
                                    x: pos.x,
                                    y: pos.y
                                }
                            };
                            if (padding) {
                                c.pos.x += corner.charAt(1) == 'L' ? padding.x : -padding.x;
                                c.pos.y += corner.charAt(0) == 'T' ? padding.y : -padding.y;
                            }
                            return c;
                        });

                        return _place(node, choices);
                    },

                    around: function(
                        /*DomNode*/
                        node,
                        /*DomNode|dijit/place.__Rectangle*/
                        anchor,
                        /*String[]*/
                        positions,
                        /*Boolean*/
                        leftToRight,
                        /*Function?*/
                        layoutNode) {

                        // summary:
                        //		Position node adjacent or kitty-corner to anchor
                        //		such that it's fully visible in viewport.
                        // description:
                        //		Place node such that corner of node touches a corner of
                        //		aroundNode, and that node is fully visible.
                        // anchor:
                        //		Either a DOMNode or a rectangle (object with x, y, width, height).
                        // positions:
                        //		Ordered list of positions to try matching up.
                        //
                        //		- before: places drop down to the left of the anchor node/widget, or to the right in the case
                        //			of RTL scripts like Hebrew and Arabic; aligns either the top of the drop down
                        //			with the top of the anchor, or the bottom of the drop down with bottom of the anchor.
                        //		- after: places drop down to the right of the anchor node/widget, or to the left in the case
                        //			of RTL scripts like Hebrew and Arabic; aligns either the top of the drop down
                        //			with the top of the anchor, or the bottom of the drop down with bottom of the anchor.
                        //		- before-centered: centers drop down to the left of the anchor node/widget, or to the right
                        //			 in the case of RTL scripts like Hebrew and Arabic
                        //		- after-centered: centers drop down to the right of the anchor node/widget, or to the left
                        //			 in the case of RTL scripts like Hebrew and Arabic
                        //		- above-centered: drop down is centered above anchor node
                        //		- above: drop down goes above anchor node, left sides aligned
                        //		- above-alt: drop down goes above anchor node, right sides aligned
                        //		- below-centered: drop down is centered above anchor node
                        //		- below: drop down goes below anchor node
                        //		- below-alt: drop down goes below anchor node, right sides aligned
                        // layoutNode: Function(node, aroundNodeCorner, nodeCorner)
                        //		For things like tooltip, they are displayed differently (and have different dimensions)
                        //		based on their orientation relative to the parent.	 This adjusts the popup based on orientation.
                        // leftToRight:
                        //		True if widget is LTR, false if widget is RTL.   Affects the behavior of "above" and "below"
                        //		positions slightly.
                        // example:
                        //	|	placeAroundNode(node, aroundNode, {'BL':'TL', 'TR':'BR'});
                        //		This will try to position node such that node's top-left corner is at the same position
                        //		as the bottom left corner of the aroundNode (ie, put node below
                        //		aroundNode, with left edges aligned).	If that fails it will try to put
                        //		the bottom-right corner of node where the top right corner of aroundNode is
                        //		(ie, put node above aroundNode, with right edges aligned)
                        //

                        // if around is a DOMNode (or DOMNode id), convert to coordinates
                        var aroundNodePos = (typeof anchor == "string" || "offsetWidth" in anchor) ?
                            domGeometry.position(anchor, true) :
                            anchor;

                        // Compute position and size of visible part of anchor (it may be partially hidden by ancestor nodes w/scrollbars)
                        if (anchor.parentNode) {
                            // ignore nodes between position:relative and position:absolute
                            var sawPosAbsolute = domStyle.getComputedStyle(anchor).position == "absolute";
                            var parent = anchor.parentNode;
                            while (parent && parent.nodeType == 1 && parent.nodeName != "BODY") { //ignoring the body will help performance
                                var parentPos = domGeometry.position(parent, true),
                                    pcs = domStyle.getComputedStyle(parent);
                                if (/relative|absolute/.test(pcs.position)) {
                                    sawPosAbsolute = false;
                                }
                                if (!sawPosAbsolute && /hidden|auto|scroll/.test(pcs.overflow)) {
                                    var bottomYCoord = Math.min(aroundNodePos.y + aroundNodePos.h, parentPos.y + parentPos.h);
                                    var rightXCoord = Math.min(aroundNodePos.x + aroundNodePos.w, parentPos.x + parentPos.w);
                                    aroundNodePos.x = Math.max(aroundNodePos.x, parentPos.x);
                                    aroundNodePos.y = Math.max(aroundNodePos.y, parentPos.y);
                                    aroundNodePos.h = bottomYCoord - aroundNodePos.y;
                                    aroundNodePos.w = rightXCoord - aroundNodePos.x;
                                }
                                if (pcs.position == "absolute") {
                                    sawPosAbsolute = true;
                                }
                                parent = parent.parentNode;
                            }
                        }

                        var x = aroundNodePos.x,
                            y = aroundNodePos.y,
                            width = "w" in aroundNodePos ? aroundNodePos.w : (aroundNodePos.w = aroundNodePos.width),
                            height = "h" in aroundNodePos ? aroundNodePos.h : (kernel.deprecated("place.around: dijit/place.__Rectangle: { x:" + x + ", y:" + y + ", height:" + aroundNodePos.height + ", width:" + width + " } has been deprecated.  Please use { x:" + x + ", y:" + y + ", h:" + aroundNodePos.height + ", w:" + width + " }", "", "2.0"), aroundNodePos.h = aroundNodePos.height);

                        // Convert positions arguments into choices argument for _place()
                        var choices = [];

                        function push(aroundCorner, corner) {
                            choices.push({
                                aroundCorner: aroundCorner,
                                corner: corner,
                                pos: {
                                    x: {
                                        'L': x,
                                        'R': x + width,
                                        'M': x + (width >> 1)
                                    }[aroundCorner.charAt(1)],
                                    y: {
                                        'T': y,
                                        'B': y + height,
                                        'M': y + (height >> 1)
                                    }[aroundCorner.charAt(0)]
                                }
                            })
                        }
                        array.forEach(positions, function(pos) {
                            var ltr = leftToRight;
                            switch (pos) {
                                case "above-centered":
                                    push("TM", "BM");
                                    break;
                                case "below-centered":
                                    push("BM", "TM");
                                    break;
                                case "after-centered":
                                    ltr = !ltr;
                                    // fall through
                                case "before-centered":
                                    push(ltr ? "ML" : "MR", ltr ? "MR" : "ML");
                                    break;
                                case "after":
                                    ltr = !ltr;
                                    // fall through
                                case "before":
                                    push(ltr ? "TL" : "TR", ltr ? "TR" : "TL");
                                    push(ltr ? "BL" : "BR", ltr ? "BR" : "BL");
                                    break;
                                case "below-alt":
                                    ltr = !ltr;
                                    // fall through
                                case "below":
                                    // first try to align left borders, next try to align right borders (or reverse for RTL mode)
                                    push(ltr ? "BL" : "BR", ltr ? "TL" : "TR");
                                    push(ltr ? "BR" : "BL", ltr ? "TR" : "TL");
                                    break;
                                case "above-alt":
                                    ltr = !ltr;
                                    // fall through
                                case "above":
                                    // first try to align left borders, next try to align right borders (or reverse for RTL mode)
                                    push(ltr ? "TL" : "TR", ltr ? "BL" : "BR");
                                    push(ltr ? "TR" : "TL", ltr ? "BR" : "BL");
                                    break;
                                default:
                                    // To assist dijit/_base/place, accept arguments of type {aroundCorner: "BL", corner: "TL"}.
                                    // Not meant to be used directly.
                                    push(pos.aroundCorner, pos.corner);
                            }
                        });

                        var position = _place(node, choices, layoutNode, {
                            w: width,
                            h: height
                        });
                        position.aroundNodePos = aroundNodePos;

                        return position;
                    }
                };

                /*=====
                place.__Position = {
                	// x: Integer
                	//		horizontal coordinate in pixels, relative to document body
                	// y: Integer
                	//		vertical coordinate in pixels, relative to document body
                };
                place.__Rectangle = {
                	// x: Integer
                	//		horizontal offset in pixels, relative to document body
                	// y: Integer
                	//		vertical offset in pixels, relative to document body
                	// w: Integer
                	//		width in pixels.   Can also be specified as "width" for backwards-compatibility.
                	// h: Integer
                	//		height in pixels.   Can also be specified as "height" for backwards-compatibility.
                };
                =====*/

                return dijit.place = place; // setting dijit.place for back-compat, remove for 2.0
            });

        },
        'dijit/_HasDropDown': function() {
            define("dijit/_HasDropDown", [
                "dojo/_base/declare", // declare
                "dojo/_base/Deferred",
                "dojo/_base/event", // event.stop
                "dojo/dom", // dom.isDescendant
                "dojo/dom-attr", // domAttr.set
                "dojo/dom-class", // domClass.add domClass.contains domClass.remove
                "dojo/dom-geometry", // domGeometry.marginBox domGeometry.position
                "dojo/dom-style", // domStyle.set
                "dojo/has", // has("touch")
                "dojo/keys", // keys.DOWN_ARROW keys.ENTER keys.ESCAPE
                "dojo/_base/lang", // lang.hitch lang.isFunction
                "dojo/on",
                "dojo/window", // winUtils.getBox
                "./registry", // registry.byNode()
                "./focus",
                "./popup",
                "./_FocusMixin"
            ], function(declare, Deferred, event, dom, domAttr, domClass, domGeometry, domStyle, has, keys, lang, on,
                winUtils, registry, focus, popup, _FocusMixin) {


                // module:
                //		dijit/_HasDropDown

                return declare("dijit._HasDropDown", _FocusMixin, {
                    // summary:
                    //		Mixin for widgets that need drop down ability.

                    // _buttonNode: [protected] DomNode
                    //		The button/icon/node to click to display the drop down.
                    //		Can be set via a data-dojo-attach-point assignment.
                    //		If missing, then either focusNode or domNode (if focusNode is also missing) will be used.
                    _buttonNode: null,

                    // _arrowWrapperNode: [protected] DomNode
                    //		Will set CSS class dijitUpArrow, dijitDownArrow, dijitRightArrow etc. on this node depending
                    //		on where the drop down is set to be positioned.
                    //		Can be set via a data-dojo-attach-point assignment.
                    //		If missing, then _buttonNode will be used.
                    _arrowWrapperNode: null,

                    // _popupStateNode: [protected] DomNode
                    //		The node to set the popupActive class on.
                    //		Can be set via a data-dojo-attach-point assignment.
                    //		If missing, then focusNode or _buttonNode (if focusNode is missing) will be used.
                    _popupStateNode: null,

                    // _aroundNode: [protected] DomNode
                    //		The node to display the popup around.
                    //		Can be set via a data-dojo-attach-point assignment.
                    //		If missing, then domNode will be used.
                    _aroundNode: null,

                    // dropDown: [protected] Widget
                    //		The widget to display as a popup.  This widget *must* be
                    //		defined before the startup function is called.
                    dropDown: null,

                    // autoWidth: [protected] Boolean
                    //		Set to true to make the drop down at least as wide as this
                    //		widget.  Set to false if the drop down should just be its
                    //		default width
                    autoWidth: true,

                    // forceWidth: [protected] Boolean
                    //		Set to true to make the drop down exactly as wide as this
                    //		widget.  Overrides autoWidth.
                    forceWidth: false,

                    // maxHeight: [protected] Integer
                    //		The max height for our dropdown.
                    //		Any dropdown taller than this will have scrollbars.
                    //		Set to 0 for no max height, or -1 to limit height to available space in viewport
                    maxHeight: 0,

                    // dropDownPosition: [const] String[]
                    //		This variable controls the position of the drop down.
                    //		It's an array of strings with the following values:
                    //
                    //		- before: places drop down to the left of the target node/widget, or to the right in
                    //		  the case of RTL scripts like Hebrew and Arabic
                    //		- after: places drop down to the right of the target node/widget, or to the left in
                    //		  the case of RTL scripts like Hebrew and Arabic
                    //		- above: drop down goes above target node
                    //		- below: drop down goes below target node
                    //
                    //		The list is positions is tried, in order, until a position is found where the drop down fits
                    //		within the viewport.
                    //
                    dropDownPosition: ["below", "above"],

                    // _stopClickEvents: Boolean
                    //		When set to false, the click events will not be stopped, in
                    //		case you want to use them in your subclass
                    _stopClickEvents: true,

                    _onDropDownMouseDown: function( /*Event*/ e) {
                        // summary:
                        //		Callback when the user mousedown's on the arrow icon
                        if (this.disabled || this.readOnly) {
                            return;
                        }

                        // Prevent default to stop things like text selection, but don't stop propagation, so that:
                        //		1. TimeTextBox etc. can focus the <input> on mousedown
                        //		2. dropDownButtonActive class applied by _CssStateMixin (on button depress)
                        //		3. user defined onMouseDown handler fires
                        e.preventDefault();

                        this._docHandler = this.connect(this.ownerDocument, "mouseup", "_onDropDownMouseUp");

                        this.toggleDropDown();
                    },

                    _onDropDownMouseUp: function( /*Event?*/ e) {
                        // summary:
                        //		Callback when the user lifts their mouse after mouse down on the arrow icon.
                        //		If the drop down is a simple menu and the mouse is over the menu, we execute it, otherwise, we focus our
                        //		drop down widget.  If the event is missing, then we are not
                        //		a mouseup event.
                        //
                        //		This is useful for the common mouse movement pattern
                        //		with native browser `<select>` nodes:
                        //
                        //		1. mouse down on the select node (probably on the arrow)
                        //		2. move mouse to a menu item while holding down the mouse button
                        //		3. mouse up.  this selects the menu item as though the user had clicked it.
                        if (e && this._docHandler) {
                            this.disconnect(this._docHandler);
                        }
                        var dropDown = this.dropDown,
                            overMenu = false;

                        if (e && this._opened) {
                            // This code deals with the corner-case when the drop down covers the original widget,
                            // because it's so large.  In that case mouse-up shouldn't select a value from the menu.
                            // Find out if our target is somewhere in our dropdown widget,
                            // but not over our _buttonNode (the clickable node)
                            var c = domGeometry.position(this._buttonNode, true);
                            if (!(e.pageX >= c.x && e.pageX <= c.x + c.w) ||
                                !(e.pageY >= c.y && e.pageY <= c.y + c.h)) {
                                var t = e.target;
                                while (t && !overMenu) {
                                    if (domClass.contains(t, "dijitPopup")) {
                                        overMenu = true;
                                    } else {
                                        t = t.parentNode;
                                    }
                                }
                                if (overMenu) {
                                    t = e.target;
                                    if (dropDown.onItemClick) {
                                        var menuItem;
                                        while (t && !(menuItem = registry.byNode(t))) {
                                            t = t.parentNode;
                                        }
                                        if (menuItem && menuItem.onClick && menuItem.getParent) {
                                            menuItem.getParent().onItemClick(menuItem, e);
                                        }
                                    }
                                    return;
                                }
                            }
                        }
                        if (this._opened) {
                            if (dropDown.focus && dropDown.autoFocus !== false) {
                                // Focus the dropdown widget - do it on a delay so that we
                                // don't steal back focus from the dropdown.
                                this._focusDropDownTimer = this.defer(function() {
                                    dropDown.focus();
                                    delete this._focusDropDownTimer;
                                });
                            }
                        } else {
                            // The drop down arrow icon probably can't receive focus, but widget itself should get focus.
                            // defer() needed to make it work on IE (test DateTextBox)
                            this.defer("focus");
                        }

                        if (has("ios")) {
                            this._justGotMouseUp = true;
                            this.defer(function() {
                                this._justGotMouseUp = false;
                            });
                        }
                    },

                    _onDropDownClick: function( /*Event*/ e) {
                        if (has("touch") && !this._justGotMouseUp) {
                            // If there was no preceding mousedown/mouseup (like on android), then simulate them to
                            // toggle the drop down.
                            //
                            // The if(has("touch") is necessary since IE and desktop safari get spurious onclick events
                            // when there are nested tables (specifically, clicking on a table that holds a dijit/form/Select,
                            // but not on the Select itself, causes an onclick event on the Select)
                            this._onDropDownMouseDown(e);
                            this._onDropDownMouseUp(e);
                        }

                        // The drop down was already opened on mousedown/keydown; just need to call stopEvent().
                        if (this._stopClickEvents) {
                            event.stop(e);
                        }
                    },

                    buildRendering: function() {
                        this.inherited(arguments);

                        this._buttonNode = this._buttonNode || this.focusNode || this.domNode;
                        this._popupStateNode = this._popupStateNode || this.focusNode || this._buttonNode;

                        // Add a class to the "dijitDownArrowButton" type class to _buttonNode so theme can set direction of arrow
                        // based on where drop down will normally appear
                        var defaultPos = {
                            "after": this.isLeftToRight() ? "Right" : "Left",
                            "before": this.isLeftToRight() ? "Left" : "Right",
                            "above": "Up",
                            "below": "Down",
                            "left": "Left",
                            "right": "Right"
                        }[this.dropDownPosition[0]] || this.dropDownPosition[0] || "Down";
                        domClass.add(this._arrowWrapperNode || this._buttonNode, "dijit" + defaultPos + "ArrowButton");
                    },

                    postCreate: function() {
                        // summary:
                        //		set up nodes and connect our mouse and keyboard events

                        this.inherited(arguments);

                        this.own(
                            on(this._buttonNode, "mousedown", lang.hitch(this, "_onDropDownMouseDown")),
                            on(this._buttonNode, "click", lang.hitch(this, "_onDropDownClick")),
                            on(this.focusNode, "keydown", lang.hitch(this, "_onKey")),
                            on(this.focusNode, "keyup", lang.hitch(this, "_onKeyUp"))
                        );
                    },

                    destroy: function() {
                        if (this.dropDown) {
                            // Destroy the drop down, unless it's already been destroyed.  This can happen because
                            // the drop down is a direct child of <body> even though it's logically my child.
                            if (!this.dropDown._destroyed) {
                                this.dropDown.destroyRecursive();
                            }
                            delete this.dropDown;
                        }
                        this.inherited(arguments);
                    },

                    _onKey: function( /*Event*/ e) {
                        // summary:
                        //		Callback when the user presses a key while focused on the button node

                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var d = this.dropDown,
                            target = e.target;
                        if (d && this._opened && d.handleKey) {
                            if (d.handleKey(e) === false) {
                                /* false return code means that the drop down handled the key */
                                event.stop(e);
                                return;
                            }
                        }
                        if (d && this._opened && e.keyCode == keys.ESCAPE) {
                            this.closeDropDown();
                            event.stop(e);
                        } else if (!this._opened &&
                            (e.keyCode == keys.DOWN_ARROW ||
                                ((e.keyCode == keys.ENTER || e.keyCode == keys.SPACE) &&
                                    //ignore enter and space if the event is for a text input
                                    ((target.tagName || "").toLowerCase() !== 'input' ||
                                        (target.type && target.type.toLowerCase() !== 'text'))))) {
                            // Toggle the drop down, but wait until keyup so that the drop down doesn't
                            // get a stray keyup event, or in the case of key-repeat (because user held
                            // down key for too long), stray keydown events
                            this._toggleOnKeyUp = true;
                            event.stop(e);
                        }
                    },

                    _onKeyUp: function() {
                        if (this._toggleOnKeyUp) {
                            delete this._toggleOnKeyUp;
                            this.toggleDropDown();
                            var d = this.dropDown; // drop down may not exist until toggleDropDown() call
                            if (d && d.focus) {
                                this.defer(lang.hitch(d, "focus"), 1);
                            }
                        }
                    },

                    _onBlur: function() {
                        // summary:
                        //		Called magically when focus has shifted away from this widget and it's dropdown

                        // Don't focus on button if the user has explicitly focused on something else (happens
                        // when user clicks another control causing the current popup to close)..
                        // But if focus is inside of the drop down then reset focus to me, because IE doesn't like
                        // it when you display:none a node with focus.
                        var focusMe = focus.curNode && this.dropDown && dom.isDescendant(focus.curNode, this.dropDown.domNode);

                        this.closeDropDown(focusMe);

                        this.inherited(arguments);
                    },

                    isLoaded: function() {
                        // summary:
                        //		Returns true if the dropdown exists and it's data is loaded.  This can
                        //		be overridden in order to force a call to loadDropDown().
                        // tags:
                        //		protected

                        return true;
                    },

                    loadDropDown: function( /*Function*/ loadCallback) {
                        // summary:
                        //		Creates the drop down if it doesn't exist, loads the data
                        //		if there's an href and it hasn't been loaded yet, and then calls
                        //		the given callback.
                        // tags:
                        //		protected

                        // TODO: for 2.0, change API to return a Deferred, instead of calling loadCallback?
                        loadCallback();
                    },

                    loadAndOpenDropDown: function() {
                        // summary:
                        //		Creates the drop down if it doesn't exist, loads the data
                        //		if there's an href and it hasn't been loaded yet, and
                        //		then opens the drop down.  This is basically a callback when the
                        //		user presses the down arrow button to open the drop down.
                        // returns: Deferred
                        //		Deferred for the drop down widget that
                        //		fires when drop down is created and loaded
                        // tags:
                        //		protected
                        var d = new Deferred(),
                            afterLoad = lang.hitch(this, function() {
                                this.openDropDown();
                                d.resolve(this.dropDown);
                            });
                        if (!this.isLoaded()) {
                            this.loadDropDown(afterLoad);
                        } else {
                            afterLoad();
                        }
                        return d;
                    },

                    toggleDropDown: function() {
                        // summary:
                        //		Callback when the user presses the down arrow button or presses
                        //		the down arrow key to open/close the drop down.
                        //		Toggle the drop-down widget; if it is up, close it, if not, open it
                        // tags:
                        //		protected

                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        if (!this._opened) {
                            this.loadAndOpenDropDown();
                        } else {
                            this.closeDropDown();
                        }
                    },

                    openDropDown: function() {
                        // summary:
                        //		Opens the dropdown for this widget.   To be called only when this.dropDown
                        //		has been created and is ready to display (ie, it's data is loaded).
                        // returns:
                        //		return value of dijit/popup.open()
                        // tags:
                        //		protected

                        var dropDown = this.dropDown,
                            ddNode = dropDown.domNode,
                            aroundNode = this._aroundNode || this.domNode,
                            self = this;

                        // Prepare our popup's height and honor maxHeight if it exists.

                        // TODO: isn't maxHeight dependent on the return value from dijit/popup.open(),
                        // ie, dependent on how much space is available (BK)

                        if (!this._preparedNode) {
                            this._preparedNode = true;
                            // Check if we have explicitly set width and height on the dropdown widget dom node
                            if (ddNode.style.width) {
                                this._explicitDDWidth = true;
                            }
                            if (ddNode.style.height) {
                                this._explicitDDHeight = true;
                            }
                        }

                        // Code for resizing dropdown (height limitation, or increasing width to match my width)
                        if (this.maxHeight || this.forceWidth || this.autoWidth) {
                            var myStyle = {
                                display: "",
                                visibility: "hidden"
                            };
                            if (!this._explicitDDWidth) {
                                myStyle.width = "";
                            }
                            if (!this._explicitDDHeight) {
                                myStyle.height = "";
                            }
                            domStyle.set(ddNode, myStyle);

                            // Figure out maximum height allowed (if there is a height restriction)
                            var maxHeight = this.maxHeight;
                            if (maxHeight == -1) {
                                // limit height to space available in viewport either above or below my domNode
                                // (whichever side has more room)
                                var viewport = winUtils.getBox(this.ownerDocument),
                                    position = domGeometry.position(aroundNode, false);
                                maxHeight = Math.floor(Math.max(position.y, viewport.h - (position.y + position.h)));
                            }

                            // Attach dropDown to DOM and make make visibility:hidden rather than display:none
                            // so we call startup() and also get the size
                            popup.moveOffScreen(dropDown);

                            if (dropDown.startup && !dropDown._started) {
                                dropDown.startup(); // this has to be done after being added to the DOM
                            }
                            // Get size of drop down, and determine if vertical scroll bar needed.  If no scroll bar needed,
                            // use overflow:visible rather than overflow:hidden so off-by-one errors don't hide drop down border.
                            var mb = domGeometry.getMarginSize(ddNode);
                            var overHeight = (maxHeight && mb.h > maxHeight);
                            domStyle.set(ddNode, {
                                overflowX: "visible",
                                overflowY: overHeight ? "auto" : "visible"
                            });
                            if (overHeight) {
                                mb.h = maxHeight;
                                if ("w" in mb) {
                                    mb.w += 16; // room for vertical scrollbar
                                }
                            } else {
                                delete mb.h;
                            }

                            // Adjust dropdown width to match or be larger than my width
                            if (this.forceWidth) {
                                mb.w = aroundNode.offsetWidth;
                            } else if (this.autoWidth) {
                                mb.w = Math.max(mb.w, aroundNode.offsetWidth);
                            } else {
                                delete mb.w;
                            }

                            // And finally, resize the dropdown to calculated height and width
                            if (lang.isFunction(dropDown.resize)) {
                                dropDown.resize(mb);
                            } else {
                                domGeometry.setMarginBox(ddNode, mb);
                            }
                        }

                        var retVal = popup.open({
                            parent: this,
                            popup: dropDown,
                            around: aroundNode,
                            orient: this.dropDownPosition,
                            onExecute: function() {
                                self.closeDropDown(true);
                            },
                            onCancel: function() {
                                self.closeDropDown(true);
                            },
                            onClose: function() {
                                domAttr.set(self._popupStateNode, "popupActive", false);
                                domClass.remove(self._popupStateNode, "dijitHasDropDownOpen");
                                self._set("_opened", false); // use set() because _CssStateMixin is watching
                            }
                        });
                        domAttr.set(this._popupStateNode, "popupActive", "true");
                        domClass.add(this._popupStateNode, "dijitHasDropDownOpen");
                        this._set("_opened", true); // use set() because _CssStateMixin is watching
                        this.domNode.setAttribute("aria-expanded", "true");

                        return retVal;
                    },

                    closeDropDown: function( /*Boolean*/ focus) {
                        // summary:
                        //		Closes the drop down on this widget
                        // focus:
                        //		If true, refocuses the button widget
                        // tags:
                        //		protected

                        if (this._focusDropDownTimer) {
                            this._focusDropDownTimer.remove();
                            delete this._focusDropDownTimer;
                        }
                        if (this._opened) {
                            this.domNode.setAttribute("aria-expanded", "false");
                            if (focus) {
                                this.focus();
                            }
                            popup.close(this.dropDown);
                            this._opened = false;
                        }
                    }

                });
            });

        },
        'hsbcwidget/randCharChalLogon': function() {
            define([
                "dojo/_base/declare",
                "dijit/_WidgetBase",
                "dijit/_TemplatedMixin",
                "dijit/_WidgetsInTemplateMixin",
                "dojo/query",
                "dojo/_base/array",
                "dojo/_base/lang",
                "dojo/dom-attr",
                "dojo/dom-class",
                "dojo/html",
                "dojo/text!hsbcwidget/themes/ursula/templates/randCharChalLogon.html",
                "dijit/focus",
                "dojo/on",
                "dojo/parser",
                "dojo/NodeList-traverse"
            ], function(declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, query, array, lang, domAttr, domClass, html, template, focusUtil, on, parser) {

                function moveFocusToNext(e) {
                    var $this = query(e.currentTarget);
                    var key = (e.keyCode ? e.keyCode : e.which);

                    //if (key >= 48 && key <= 105){
                    if ((key >= 48 && key <= 111) || (key >= 186 && key <= 192) || (key >= 219 && key <= 222) || ((typeof dojo.isFF != 'undefined') && (key == 173))) {
                        var $nextNode = $this.nextAll('.active')[0];
                        if (typeof $nextNode === 'undefined') return;

                        focusUtil.focus($nextNode);
                    }
                }

                function validInput(value) {
                    return true;
                }

                function allActiveInputs(inputs) {
                    return array.filter(inputs, function(input) {
                        return domClass.contains(input, "active");
                    });
                }

                function allValidInputs(inputs) {
                    return array.every(allActiveInputs(inputs), function(input) {
                        return validInput(input.value);
                    });
                }

                function hideInvalidMessage(hide) {
                    var invalidMessage = query('.jsInputWrapper .rValidationMsg', this.domNode)[0];
                    if (hide) {
                        domClass.add(invalidMessage, 'ValidationMsgHide');
                    } else {
                        domClass.remove(invalidMessage, 'ValidationMsgHide');
                    }
                }

                function allBlurred() {
                    var inputs = query('.jsInputWrapper input[type="password"]', this.domNode),
                        blurred = true;

                    array.forEach(allActiveInputs(inputs), function(input) {

                        if (!domClass.contains(input, 'blurred')) {
                            blurred = false;
                            return false;
                        }

                    });

                    return blurred;
                }
                return declare("hsbcwidget.CharacterChallenge", [_WidgetBase, _TemplatedMixin], {
                    RCC_TEXT_1: "",
                    RCC_TEXT_2: "",
                    RCC_TEXT_3: "",
                    RCC_TEXT_4: "",
                    RCC_TEXT_5: "",
                    RCC_TEXT_6: "",
                    RCC_TEXT_7: "",
                    RCC_TEXT_8: "",
                    templateString: template,
                    widgetsInTemplate: true,
                    chalNums: [],

                    isFocussed: false,
                    neutral: true,
                    valid: false,
                    validateAll: function(skipHideInvalidMessage) {
                        var inputs = query('.jsInputWrapper input[type="password"]', this.domNode);
                        this.valid = allValidInputs(inputs);
                        this.neutral = false;

                        if (this.valid) {
                            array.forEach(allActiveInputs(inputs), function(input) {
                                domClass.remove(input, "SvalidationMsg");
                                domClass.add(input, "validInput");
                            });
                        } else {
                            array.forEach(allActiveInputs(inputs), function(input) {
                                domClass.add(input, "SvalidationMsg");
                                domClass.remove(input, "validInput");
                            });
                        }
                    },


                    hideInvalidMessage: hideInvalidMessage,

                    postCreate: function() {
                        this.inherited(arguments);
                        this.setLabel();
                        this.init();

                        parser.parse(this.domNode);
                    },
                    setLabel: function() {
                        var self = this,
                            $label = query('h4', self.domNode),
                            $items = query('span', $label[0]);

                        if ($items.length !== self.chalNums.length) {
                            throw new Error('randCharChal: number of spans in label does not match number of active challenge items.')
                        } else {
                            $items.forEach(dojo.hitch(this, function($span, index) {
                                var text = this.RCC_TEXT_1;
                                switch (self.chalNums[index]) {
                                    case 2:
                                        text = this.RCC_TEXT_2;
                                        break;
                                    case 3:
                                        text = this.RCC_TEXT_3;
                                        break;
                                    case 4:
                                        text = this.RCC_TEXT_4;
                                        break;
                                    case 5:
                                        text = this.RCC_TEXT_5;
                                        break;
                                    case 6:
                                        text = this.RCC_TEXT_6;
                                        break;
                                    case 7:
                                        text = this.RCC_TEXT_7;
                                        break;
                                    case 8:
                                        text = this.RCC_TEXT_8;
                                        break;
                                }
                                html.set($span, text);
                            }));
                        }
                    },
                    init: function() {
                        var self = this;
                        var inputs = query('.jsInputWrapper input[type="password"]', this.domNode);


                        array.forEach(inputs, function(input) {
                            on(input, "focus", function(e) {
                                self.isFocussed = true;
                                hideInvalidMessage(self.neutral || self.valid);
                            });

                            on(input, "blur", function(e) {

                                domClass.add(input, 'blurred');

                                if (allBlurred()) {
                                    self.isFocussed = false;
                                    hideInvalidMessage(true);
                                    self.validateAll();
                                }

                            });
                        });

                        query("body").on("click", function(e) {
                            if (!e.target || !domClass.contains(e.target, "smallestInput")) {
                                hideInvalidMessage(true);
                            }
                        });

                        array.forEach(inputs, function($input, index) {
                            if (array.indexOf(self.chalNums, index + 1) !== -1) {
                                domAttr.remove($input, 'disabled');
                                domClass.add($input, 'active');

                                on($input, 'keyup', moveFocusToNext);
                            }
                        });
                    }
                });
            });
        },
        'dojox/dtl': function() {
            define("dojox/dtl", ["./dtl/_base"], function(dxdtl) {
                /*=====
                 return {
                 // summary:
                 //		Deprecated.  Should require dojox/dtl modules directly rather than trying to access them through
                 //		this module.
                 };
                 =====*/
                return dxdtl;
            });
        },
        'hsbcwidget/ValidationTextBoxAll': function() {
            define([
                "dojo/_base/declare",
                "dijit/form/ValidationTextBox",
                "dijit/Tooltip"
            ], function(
                declare,
                ValidationTextBox,
                Tooltip
            ) {

                return declare([ValidationTextBox], {
                    postCreate: function() {
                        this.inherited(arguments);
                    },

                    successMessage: "",
                    invalidInputMessage: "",
                    minmaxMessage: "",
                    regEx: "",
                    minLen: "",
                    maxLen: "",
                    missingMessage: "",


                    validator: function(value, constraints) {


                        if (value.length == 0) {
                            this.invalidMessage = this.missingMessage;
                            return false;
                        } else if (value.length < parseInt(this.minLen) || value.length > parseInt(this.maxLen)) {
                            this.invalidMessage = this.minmaxMessage;
                            return false;
                        } else {
                            if ((new RegExp(this.regEx)).test(value)) {
                                return true;
                            } else {
                                this.invalidMessage = this.invalidInputMessage;
                                return false;
                            }
                        }
                    },


                    onFocus: function(value) {
                        if (this.isValid()) {
                            Tooltip.show(this.successMessage, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            Tooltip.show(this.invalidMessage, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        }
                    }


                });
            });
        },
        'dijit/_MenuBase': function() {
            define("dijit/_MenuBase", [
                "dojo/_base/array", // array.indexOf
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.isDescendant domClass.replace
                "dojo/dom-attr",
                "dojo/dom-class", // domClass.replace
                "dojo/_base/lang", // lang.hitch
                "dojo/mouse", // mouse.enter, mouse.leave
                "dojo/on",
                "dojo/window",
                "./a11yclick",
                "./popup",
                "./registry",
                "./_Widget",
                "./_KeyNavContainer",
                "./_TemplatedMixin"
            ], function(array, declare, dom, domAttr, domClass, lang, mouse, on, winUtils,
                a11yclick, pm, registry, _Widget, _KeyNavContainer, _TemplatedMixin) {


                // module:
                //		dijit/_MenuBase

                return declare("dijit._MenuBase", [_Widget, _TemplatedMixin, _KeyNavContainer], {
                    // summary:
                    //		Base class for Menu and MenuBar

                    // parentMenu: [readonly] Widget
                    //		pointer to menu that displayed me
                    parentMenu: null,

                    // popupDelay: Integer
                    //		number of milliseconds before hovering (without clicking) causes the popup to automatically open.
                    popupDelay: 500,

                    // autoFocus: Boolean
                    //		A toggle to control whether or not a Menu gets focused when opened as a drop down from a MenuBar
                    //		or DropDownButton/ComboButton.   Note though that it always get focused when opened via the keyboard.
                    autoFocus: false,

                    postCreate: function() {
                        var self = this,
                            matches = function(node) {
                                return domClass.contains(node, "dijitMenuItem");
                            };
                        this.own(
                            on(this.containerNode, on.selector(matches, mouse.enter), function() {
                                self.onItemHover(registry.byNode(this));
                            }),
                            on(this.containerNode, on.selector(matches, mouse.leave), function() {
                                self.onItemUnhover(registry.byNode(this));
                            }),
                            on(this.containerNode, on.selector(matches, a11yclick), function(evt) {
                                self.onItemClick(registry.byNode(this), evt);
                                evt.stopPropagation();
                                evt.preventDefault();
                            })
                        );
                        this.inherited(arguments);
                    },

                    onExecute: function() {
                        // summary:
                        //		Attach point for notification about when a menu item has been executed.
                        //		This is an internal mechanism used for Menus to signal to their parent to
                        //		close them, because they are about to execute the onClick handler.  In
                        //		general developers should not attach to or override this method.
                        // tags:
                        //		protected
                    },

                    onCancel: function( /*Boolean*/ /*===== closeAll =====*/ ) {
                        // summary:
                        //		Attach point for notification about when the user cancels the current menu
                        //		This is an internal mechanism used for Menus to signal to their parent to
                        //		close them.  In general developers should not attach to or override this method.
                        // tags:
                        //		protected
                    },

                    _moveToPopup: function( /*Event*/ evt) {
                        // summary:
                        //		This handles the right arrow key (left arrow key on RTL systems),
                        //		which will either open a submenu, or move to the next item in the
                        //		ancestor MenuBar
                        // tags:
                        //		private

                        if (this.focusedChild && this.focusedChild.popup && !this.focusedChild.disabled) {
                            this.onItemClick(this.focusedChild, evt);
                        } else {
                            var topMenu = this._getTopMenu();
                            if (topMenu && topMenu._isMenuBar) {
                                topMenu.focusNext();
                            }
                        }
                    },

                    _onPopupHover: function( /*Event*/ /*===== evt =====*/ ) {
                        // summary:
                        //		This handler is called when the mouse moves over the popup.
                        // tags:
                        //		private

                        // if the mouse hovers over a menu popup that is in pending-close state,
                        // then stop the close operation.
                        // This can't be done in onItemHover since some popup targets don't have MenuItems (e.g. ColorPicker)
                        if (this.currentPopup && this.currentPopup._pendingClose_timer) {
                            var parentMenu = this.currentPopup.parentMenu;
                            // highlight the parent menu item pointing to this popup
                            if (parentMenu.focusedChild) {
                                parentMenu.focusedChild._setSelected(false);
                            }
                            parentMenu.focusedChild = this.currentPopup.from_item;
                            parentMenu.focusedChild._setSelected(true);
                            // cancel the pending close
                            this._stopPendingCloseTimer(this.currentPopup);
                        }
                    },

                    onItemHover: function( /*MenuItem*/ item) {
                        // summary:
                        //		Called when cursor is over a MenuItem.
                        // tags:
                        //		protected

                        // Don't do anything unless user has "activated" the menu by:
                        //		1) clicking it
                        //		2) opening it from a parent menu (which automatically focuses it)
                        if (this.isActive) {
                            this.focusChild(item);
                            if (this.focusedChild.popup && !this.focusedChild.disabled && !this.hover_timer) {
                                this.hover_timer = this.defer("_openPopup", this.popupDelay);
                            }
                        }
                        // if the user is mixing mouse and keyboard navigation,
                        // then the menu may not be active but a menu item has focus,
                        // but it's not the item that the mouse just hovered over.
                        // To avoid both keyboard and mouse selections, use the latest.
                        if (this.focusedChild) {
                            this.focusChild(item);
                        }
                        this._hoveredChild = item;

                        item._set("hovering", true);
                    },

                    _onChildBlur: function(item) {
                        // summary:
                        //		Called when a child MenuItem becomes inactive because focus
                        //		has been removed from the MenuItem *and* it's descendant menus.
                        // tags:
                        //		private
                        this._stopPopupTimer();
                        item._setSelected(false);
                        // Close all popups that are open and descendants of this menu
                        var itemPopup = item.popup;
                        if (itemPopup) {
                            this._stopPendingCloseTimer(itemPopup);
                            itemPopup._pendingClose_timer = this.defer(function() {
                                itemPopup._pendingClose_timer = null;
                                if (itemPopup.parentMenu) {
                                    itemPopup.parentMenu.currentPopup = null;
                                }
                                pm.close(itemPopup); // this calls onClose
                            }, this.popupDelay);
                        }
                    },

                    onItemUnhover: function( /*MenuItem*/ item) {
                        // summary:
                        //		Callback fires when mouse exits a MenuItem
                        // tags:
                        //		protected

                        if (this.isActive) {
                            this._stopPopupTimer();
                        }
                        if (this._hoveredChild == item) {
                            this._hoveredChild = null;
                        }

                        item._set("hovering", false);
                    },

                    _stopPopupTimer: function() {
                        // summary:
                        //		Cancels the popup timer because the user has stop hovering
                        //		on the MenuItem, etc.
                        // tags:
                        //		private
                        if (this.hover_timer) {
                            this.hover_timer = this.hover_timer.remove();
                        }
                    },

                    _stopPendingCloseTimer: function( /*dijit/_WidgetBase*/ popup) {
                        // summary:
                        //		Cancels the pending-close timer because the close has been preempted
                        // tags:
                        //		private
                        if (popup._pendingClose_timer) {
                            popup._pendingClose_timer = popup._pendingClose_timer.remove();
                        }
                    },

                    _stopFocusTimer: function() {
                        // summary:
                        //		Cancels the pending-focus timer because the menu was closed before focus occured
                        // tags:
                        //		private
                        if (this._focus_timer) {
                            this._focus_timer = this._focus_timer.remove();
                        }
                    },

                    _getTopMenu: function() {
                        // summary:
                        //		Returns the top menu in this chain of Menus
                        // tags:
                        //		private
                        for (var top = this; top.parentMenu; top = top.parentMenu);
                        return top;
                    },

                    onItemClick: function( /*dijit/_WidgetBase*/ item, /*Event*/ evt) {
                        // summary:
                        //		Handle clicks on an item.
                        // tags:
                        //		private

                        // this can't be done in _onFocus since the _onFocus events occurs asynchronously
                        if (typeof this.isShowingNow == 'undefined') { // non-popup menu
                            this._markActive();
                        }

                        this.focusChild(item);

                        if (item.disabled) {
                            return false;
                        }

                        if (item.popup) {
                            this._openPopup(evt.type == "keypress");
                        } else {
                            // before calling user defined handler, close hierarchy of menus
                            // and restore focus to place it was when menu was opened
                            this.onExecute();

                            // user defined handler for click
                            item._onClick ? item._onClick(evt) : item.onClick(evt);
                        }
                    },

                    _openPopup: function( /*Boolean*/ focus) {
                        // summary:
                        //		Open the popup to the side of/underneath the current menu item, and optionally focus first item
                        // tags:
                        //		protected

                        this._stopPopupTimer();
                        var from_item = this.focusedChild;
                        if (!from_item) {
                            return;
                        } // the focused child lost focus since the timer was started
                        var popup = from_item.popup;
                        if (!popup.isShowingNow) {
                            if (this.currentPopup) {
                                this._stopPendingCloseTimer(this.currentPopup);
                                pm.close(this.currentPopup);
                            }
                            popup.parentMenu = this;
                            popup.from_item = from_item; // helps finding the parent item that should be focused for this popup
                            var self = this;
                            pm.open({
                                parent: this,
                                popup: popup,
                                around: from_item.domNode,
                                orient: this._orient || ["after", "before"],
                                onCancel: function() { // called when the child menu is canceled
                                    // set isActive=false (_closeChild vs _cleanUp) so that subsequent hovering will NOT open child menus
                                    // which seems aligned with the UX of most applications (e.g. notepad, wordpad, paint shop pro)
                                    self.focusChild(from_item); // put focus back on my node
                                    self._cleanUp(); // close the submenu (be sure this is done _after_ focus is moved)
                                    from_item._setSelected(true); // oops, _cleanUp() deselected the item
                                    self.focusedChild = from_item; // and unset focusedChild
                                },
                                onExecute: lang.hitch(this, "_cleanUp")
                            });

                            this.currentPopup = popup;
                            // detect mouseovers to handle lazy mouse movements that temporarily focus other menu items
                            popup.connect(popup.domNode, "onmouseenter", lang.hitch(self, "_onPopupHover")); // cleaned up when the popped-up widget is destroyed on close
                        }

                        if (focus && popup.focus) {
                            // If user is opening the popup via keyboard (right arrow, or down arrow for MenuBar), then focus the popup.
                            // If the cursor happens to collide with the popup, it will generate an onmouseover event
                            // even though the mouse wasn't moved.  Use defer() to call popup.focus so that
                            // our focus() call overrides the onmouseover event, rather than vice-versa.  (#8742)
                            popup._focus_timer = this.defer(lang.hitch(popup, function() {
                                this._focus_timer = null;
                                this.focus();
                            }));
                        }
                    },

                    _markActive: function() {
                        // summary:
                        //		Mark this menu's state as active.
                        //		Called when this Menu gets focus from:
                        //
                        //		1. clicking it (mouse or via space/arrow key)
                        //		2. being opened by a parent menu.
                        //
                        //		This is not called just from mouse hover.
                        //		Focusing a menu via TAB does NOT automatically set isActive
                        //		since TAB is a navigation operation and not a selection one.
                        //		For Windows apps, pressing the ALT key focuses the menubar
                        //		menus (similar to TAB navigation) but the menu is not active
                        //		(ie no dropdown) until an item is clicked.
                        this.isActive = true;
                        domClass.replace(this.domNode, "dijitMenuActive", "dijitMenuPassive");
                    },

                    onOpen: function( /*Event*/ /*===== e =====*/ ) {
                        // summary:
                        //		Callback when this menu is opened.
                        //		This is called by the popup manager as notification that the menu
                        //		was opened.
                        // tags:
                        //		private

                        this.isShowingNow = true;
                        this._markActive();
                    },

                    _markInactive: function() {
                        // summary:
                        //		Mark this menu's state as inactive.
                        this.isActive = false; // don't do this in _onBlur since the state is pending-close until we get here
                        domClass.replace(this.domNode, "dijitMenuPassive", "dijitMenuActive");
                    },

                    onClose: function() {
                        // summary:
                        //		Callback when this menu is closed.
                        //		This is called by the popup manager as notification that the menu
                        //		was closed.
                        // tags:
                        //		private

                        this._stopFocusTimer();
                        this._markInactive();
                        this.isShowingNow = false;
                        this.parentMenu = null;
                    },

                    _closeChild: function() {
                        // summary:
                        //		Called when submenu is clicked or focus is lost.  Close hierarchy of menus.
                        // tags:
                        //		private
                        this._stopPopupTimer();

                        if (this.currentPopup) {
                            // If focus is on a descendant MenuItem then move focus to me,
                            // because IE doesn't like it when you display:none a node with focus,
                            // and also so keyboard users don't lose control.
                            // Likely, immediately after a user defined onClick handler will move focus somewhere
                            // else, like a Dialog.
                            if (array.indexOf(this._focusManager.activeStack, this.id) >= 0) {
                                domAttr.set(this.focusedChild.focusNode, "tabIndex", this.tabIndex);
                                this.focusedChild.focusNode.focus();
                            }
                            // Close all popups that are open and descendants of this menu
                            pm.close(this.currentPopup);
                            this.currentPopup = null;
                        }

                        if (this.focusedChild) { // unhighlight the focused item
                            this.focusedChild._setSelected(false);
                            this.onItemUnhover(this.focusedChild);
                            this.focusedChild = null;
                        }
                    },

                    _onItemFocus: function( /*MenuItem*/ item) {
                        // summary:
                        //		Called when child of this Menu gets focus from:
                        //
                        //		1. clicking it
                        //		2. tabbing into it
                        //		3. being opened by a parent menu.
                        //
                        //		This is not called just from mouse hover.
                        if (this._hoveredChild && this._hoveredChild != item) {
                            this.onItemUnhover(this._hoveredChild); // any previous mouse movement is trumped by focus selection
                        }
                    },

                    _onBlur: function() {
                        // summary:
                        //		Called when focus is moved away from this Menu and it's submenus.
                        // tags:
                        //		protected
                        this._cleanUp();
                        this.inherited(arguments);
                    },

                    _cleanUp: function() {
                        // summary:
                        //		Called when the user is done with this menu.  Closes hierarchy of menus.
                        // tags:
                        //		private

                        this._closeChild(); // don't call this.onClose since that's incorrect for MenuBar's that never close
                        if (typeof this.isShowingNow == 'undefined') { // non-popup menu doesn't call onClose
                            this._markInactive();
                        }
                    }
                });

            });

        },
        'dojo/dom-prop': function() {
            define(["exports", "./_base/kernel", "./sniff", "./_base/lang", "./dom", "./dom-style", "./dom-construct", "./_base/connect"],
                function(exports, dojo, has, lang, dom, style, ctr, conn) {
                    // module:
                    //		dojo/dom-prop
                    // summary:
                    //		This module defines the core dojo DOM properties API.
                    //		Indirectly depends on dojo.empty() and dojo.toDom().

                    // TODOC: summary not showing up in output, see https://github.com/csnover/js-doc-parse/issues/42

                    // =============================
                    // Element properties Functions
                    // =============================

                    // helper to connect events
                    var _evtHdlrMap = {},
                        _ctr = 0,
                        _attrId = dojo._scopeName + "attrid";

                    exports.names = {
                        // properties renamed to avoid clashes with reserved words
                        "class": "className",
                        "for": "htmlFor",
                        // properties written as camelCase
                        tabindex: "tabIndex",
                        readonly: "readOnly",
                        colspan: "colSpan",
                        frameborder: "frameBorder",
                        rowspan: "rowSpan",
                        valuetype: "valueType"
                    };

                    exports.get = function getProp( /*DOMNode|String*/ node, /*String*/ name) {
                        // summary:
                        //		Gets a property on an HTML element.
                        // description:
                        //		Handles normalized getting of properties on DOM nodes.
                        //
                        // node: DOMNode|String
                        //		id or reference to the element to get the property on
                        // name: String
                        //		the name of the property to get.
                        // returns:
                        //		the value of the requested property or its default value
                        //
                        // example:
                        //	|	// get the current value of the "foo" property on a node
                        //	|	dojo.getProp(dojo.byId("nodeId"), "foo");
                        //	|	// or we can just pass the id:
                        //	|	dojo.getProp("nodeId", "foo");

                        node = dom.byId(node);
                        var lc = name.toLowerCase(),
                            propName = exports.names[lc] || name;
                        return node[propName]; // Anything
                    };

                    exports.set = function setProp( /*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value) {
                        // summary:
                        //		Sets a property on an HTML element.
                        // description:
                        //		Handles normalized setting of properties on DOM nodes.
                        //
                        //		When passing functions as values, note that they will not be
                        //		directly assigned to slots on the node, but rather the default
                        //		behavior will be removed and the new behavior will be added
                        //		using `dojo.connect()`, meaning that event handler properties
                        //		will be normalized and that some caveats with regards to
                        //		non-standard behaviors for onsubmit apply. Namely that you
                        //		should cancel form submission using `dojo.stopEvent()` on the
                        //		passed event object instead of returning a boolean value from
                        //		the handler itself.
                        // node: DOMNode|String
                        //		id or reference to the element to set the property on
                        // name: String|Object
                        //		the name of the property to set, or a hash object to set
                        //		multiple properties at once.
                        // value: String?
                        //		The value to set for the property
                        // returns:
                        //		the DOM node
                        //
                        // example:
                        //	|	// use prop() to set the tab index
                        //	|	dojo.setProp("nodeId", "tabIndex", 3);
                        //	|
                        //
                        // example:
                        //	Set multiple values at once, including event handlers:
                        //	|	dojo.setProp("formId", {
                        //	|		"foo": "bar",
                        //	|		"tabIndex": -1,
                        //	|		"method": "POST",
                        //	|		"onsubmit": function(e){
                        //	|			// stop submitting the form. Note that the IE behavior
                        //	|			// of returning true or false will have no effect here
                        //	|			// since our handler is connect()ed to the built-in
                        //	|			// onsubmit behavior and so we need to use
                        //	|			// dojo.stopEvent() to ensure that the submission
                        //	|			// doesn't proceed.
                        //	|			dojo.stopEvent(e);
                        //	|
                        //	|			// submit the form with Ajax
                        //	|			dojo.xhrPost({ form: "formId" });
                        //	|		}
                        //	|	});
                        //
                        // example:
                        //	Style is s special case: Only set with an object hash of styles
                        //	|	dojo.setProp("someNode",{
                        //	|		id:"bar",
                        //	|		style:{
                        //	|			width:"200px", height:"100px", color:"#000"
                        //	|		}
                        //	|	});
                        //
                        // example:
                        //	Again, only set style as an object hash of styles:
                        //	|	var obj = { color:"#fff", backgroundColor:"#000" };
                        //	|	dojo.setProp("someNode", "style", obj);
                        //	|
                        //	|	// though shorter to use `dojo.style()` in this case:
                        //	|	dojo.style("someNode", obj);

                        node = dom.byId(node);
                        var l = arguments.length;
                        if (l == 2 && typeof name != "string") { // inline'd type check
                            // the object form of setter: the 2nd argument is a dictionary
                            for (var x in name) {
                                exports.set(node, x, name[x]);
                            }
                            return node; // DomNode
                        }
                        var lc = name.toLowerCase(),
                            propName = exports.names[lc] || name;
                        if (propName == "style" && typeof value != "string") { // inline'd type check
                            // special case: setting a style
                            style.set(node, value);
                            return node; // DomNode
                        }
                        if (propName == "innerHTML") {
                            // special case: assigning HTML
                            // the hash lists elements with read-only innerHTML on IE
                            if (has("ie") && node.tagName.toLowerCase() in {
                                    col: 1,
                                    colgroup: 1,
                                    table: 1,
                                    tbody: 1,
                                    tfoot: 1,
                                    thead: 1,
                                    tr: 1,
                                    title: 1
                                }) {
                                ctr.empty(node);
                                node.appendChild(ctr.toDom(value, node.ownerDocument));
                            } else {
                                node[propName] = value;
                            }
                            return node; // DomNode
                        }
                        if (lang.isFunction(value)) {
                            // special case: assigning an event handler
                            // clobber if we can
                            var attrId = node[_attrId];
                            if (!attrId) {
                                attrId = _ctr++;
                                node[_attrId] = attrId;
                            }
                            if (!_evtHdlrMap[attrId]) {
                                _evtHdlrMap[attrId] = {};
                            }
                            var h = _evtHdlrMap[attrId][propName];
                            if (h) {
                                //h.remove();
                                conn.disconnect(h);
                            } else {
                                try {
                                    delete node[propName];
                                } catch (e) {}
                            }
                            // ensure that event objects are normalized, etc.
                            if (value) {
                                //_evtHdlrMap[attrId][propName] = on(node, propName, value);
                                _evtHdlrMap[attrId][propName] = conn.connect(node, propName, value);
                            } else {
                                node[propName] = null;
                            }
                            return node; // DomNode
                        }
                        node[propName] = value;
                        return node; // DomNode
                    };
                });

        },
        'dojo/errors/CancelError': function() {
            define(["./create"], function(create) {
                // module:
                //		dojo/errors/CancelError

                /*=====
                return function(){
                	// summary:
                	//		Default error if a promise is canceled without a reason.
                };
                =====*/

                return create("CancelError", null, null, {
                    dojoType: "cancel"
                });
            });

        },
        'dojo/_base/xhr': function() {
            define("dojo/_base/xhr", [
                "./kernel",
                "./sniff",
                "require",
                "../io-query",
                /*===== "./declare", =====*/
                "../dom",
                "../dom-form",
                "./Deferred",
                "./config",
                "./json",
                "./lang",
                "./array",
                "../on",
                "../aspect",
                "../request/watch",
                "../request/xhr",
                "../request/util"
            ], function(dojo, has, require, ioq, /*===== declare, =====*/ dom, domForm, Deferred, config, json, lang, array, on, aspect, watch, _xhr, util) {
                // module:
                //		dojo/_base/xhr

                /*=====
                dojo._xhrObj = function(){
                	// summary:
                	//		does the work of portably generating a new XMLHTTPRequest object.
                };
                =====*/
                dojo._xhrObj = _xhr._create;

                var cfg = dojo.config;

                // mix in io-query and dom-form
                dojo.objectToQuery = ioq.objectToQuery;
                dojo.queryToObject = ioq.queryToObject;
                dojo.fieldToObject = domForm.fieldToObject;
                dojo.formToObject = domForm.toObject;
                dojo.formToQuery = domForm.toQuery;
                dojo.formToJson = domForm.toJson;

                // need to block async callbacks from snatching this thread as the result
                // of an async callback might call another sync XHR, this hangs khtml forever
                // must checked by watchInFlight()

                dojo._blockAsync = false;

                // MOW: remove dojo._contentHandlers alias in 2.0
                var handlers = dojo._contentHandlers = dojo.contentHandlers = {
                    // summary:
                    //		A map of available XHR transport handle types. Name matches the
                    //		`handleAs` attribute passed to XHR calls.
                    // description:
                    //		A map of available XHR transport handle types. Name matches the
                    //		`handleAs` attribute passed to XHR calls. Each contentHandler is
                    //		called, passing the xhr object for manipulation. The return value
                    //		from the contentHandler will be passed to the `load` or `handle`
                    //		functions defined in the original xhr call.
                    // example:
                    //		Creating a custom content-handler:
                    //	|	xhr.contentHandlers.makeCaps = function(xhr){
                    //	|		return xhr.responseText.toUpperCase();
                    //	|	}
                    //	|	// and later:
                    //	|	dojo.xhrGet({
                    //	|		url:"foo.txt",
                    //	|		handleAs:"makeCaps",
                    //	|		load: function(data){ /* data is a toUpper version of foo.txt */ }
                    //	|	});

                    "text": function(xhr) {
                        // summary:
                        //		A contentHandler which simply returns the plaintext response data
                        return xhr.responseText;
                    },
                    "json": function(xhr) {
                        // summary:
                        //		A contentHandler which returns a JavaScript object created from the response data
                        return json.fromJson(xhr.responseText || null);
                    },
                    "json-comment-filtered": function(xhr) {
                        // summary:
                        //		A contentHandler which expects comment-filtered JSON.
                        // description:
                        //		A contentHandler which expects comment-filtered JSON.
                        //		the json-comment-filtered option was implemented to prevent
                        //		"JavaScript Hijacking", but it is less secure than standard JSON. Use
                        //		standard JSON instead. JSON prefixing can be used to subvert hijacking.
                        //
                        //		Will throw a notice suggesting to use application/json mimetype, as
                        //		json-commenting can introduce security issues. To decrease the chances of hijacking,
                        //		use the standard `json` contentHandler, and prefix your "JSON" with: {}&&
                        //
                        //		use djConfig.useCommentedJson = true to turn off the notice
                        if (!config.useCommentedJson) {
                            console.warn("Consider using the standard mimetype:application/json." +
                                " json-commenting can introduce security issues. To" +
                                " decrease the chances of hijacking, use the standard the 'json' handler and" +
                                " prefix your json with: {}&&\n" +
                                "Use djConfig.useCommentedJson=true to turn off this message.");
                        }

                        var value = xhr.responseText;
                        var cStartIdx = value.indexOf("\/*");
                        var cEndIdx = value.lastIndexOf("*\/");
                        if (cStartIdx == -1 || cEndIdx == -1) {
                            throw new Error("JSON was not comment filtered");
                        }
                        return json.fromJson(value.substring(cStartIdx + 2, cEndIdx));
                    },
                    "javascript": function(xhr) {
                        // summary:
                        //		A contentHandler which evaluates the response data, expecting it to be valid JavaScript

                        // FIXME: try Moz and IE specific eval variants?
                        return dojo.eval(xhr.responseText);
                    },
                    "xml": function(xhr) {
                        // summary:
                        //		A contentHandler returning an XML Document parsed from the response data
                        var result = xhr.responseXML;

                        if (has("ie")) {
                            if ((!result || !result.documentElement)) {
                                //WARNING: this branch used by the xml handling in dojo.io.iframe,
                                //so be sure to test dojo.io.iframe if making changes below.
                                var ms = function(n) {
                                    return "MSXML" + n + ".DOMDocument";
                                };
                                var dp = ["Microsoft.XMLDOM", ms(6), ms(4), ms(3), ms(2)];
                                array.some(dp, function(p) {
                                    try {
                                        var dom = new ActiveXObject(p);
                                        dom.async = false;
                                        dom.loadXML(xhr.responseText);
                                        result = dom;
                                    } catch (e) {
                                        return false;
                                    }
                                    return true;
                                });
                            }
                        }
                        return result; // DOMDocument
                    },
                    "json-comment-optional": function(xhr) {
                        // summary:
                        //		A contentHandler which checks the presence of comment-filtered JSON and
                        //		alternates between the `json` and `json-comment-filtered` contentHandlers.
                        if (xhr.responseText && /^[^{\[]*\/\*/.test(xhr.responseText)) {
                            return handlers["json-comment-filtered"](xhr);
                        } else {
                            return handlers["json"](xhr);
                        }
                    }
                };

                /*=====

                // kwargs function parameter definitions.   Assigning to dojo namespace rather than making them local variables
                // because they are used by dojo/io modules too

                dojo.__IoArgs = declare(null, {
                	// url: String
                	//		URL to server endpoint.
                	// content: Object?
                	//		Contains properties with string values. These
                	//		properties will be serialized as name1=value2 and
                	//		passed in the request.
                	// timeout: Integer?
                	//		Milliseconds to wait for the response. If this time
                	//		passes, the then error callbacks are called.
                	// form: DOMNode?
                	//		DOM node for a form. Used to extract the form values
                	//		and send to the server.
                	// preventCache: Boolean?
                	//		Default is false. If true, then a
                	//		"dojo.preventCache" parameter is sent in the request
                	//		with a value that changes with each request
                	//		(timestamp). Useful only with GET-type requests.
                	// handleAs: String?
                	//		Acceptable values depend on the type of IO
                	//		transport (see specific IO calls for more information).
                	// rawBody: String?
                	//		Sets the raw body for an HTTP request. If this is used, then the content
                	//		property is ignored. This is mostly useful for HTTP methods that have
                	//		a body to their requests, like PUT or POST. This property can be used instead
                	//		of postData and putData for dojo/_base/xhr.rawXhrPost and dojo/_base/xhr.rawXhrPut respectively.
                	// ioPublish: Boolean?
                	//		Set this explicitly to false to prevent publishing of topics related to
                	//		IO operations. Otherwise, if djConfig.ioPublish is set to true, topics
                	//		will be published via dojo/topic.publish() for different phases of an IO operation.
                	//		See dojo/main.__IoPublish for a list of topics that are published.

                	load: function(response, ioArgs){
                		// summary:
                		//		This function will be
                		//		called on a successful HTTP response code.
                 		// ioArgs: dojo/main.__IoCallbackArgs
                		//		Provides additional information about the request.
                		// response: Object
                		//		The response in the format as defined with handleAs.
                	},

                	error: function(response, ioArgs){
                		// summary:
                		//		This function will
                		//		be called when the request fails due to a network or server error, the url
                		//		is invalid, etc. It will also be called if the load or handle callback throws an
                		//		exception, unless djConfig.debugAtAllCosts is true.	 This allows deployed applications
                		//		to continue to run even when a logic error happens in the callback, while making
                		//		it easier to troubleshoot while in debug mode.
                		// ioArgs: dojo/main.__IoCallbackArgs
                		//		Provides additional information about the request.
                		// response: Object
                		//		The response in the format as defined with handleAs.
                	},

                	handle: function(loadOrError, response, ioArgs){
                		// summary:
                 		//		This function will
                 		//		be called at the end of every request, whether or not an error occurs.
                		// loadOrError: String
                		//		Provides a string that tells you whether this function
                		//		was called because of success (load) or failure (error).
                		// response: Object
                		//		The response in the format as defined with handleAs.
                		// ioArgs: dojo/main.__IoCallbackArgs
                		//		Provides additional information about the request.
                	}
                });

                dojo.__IoCallbackArgs = declare(null, {
                	// args: Object
                	//		the original object argument to the IO call.
                	// xhr: XMLHttpRequest
                	//		For XMLHttpRequest calls only, the
                	//		XMLHttpRequest object that was used for the
                	//		request.
                	// url: String
                	//		The final URL used for the call. Many times it
                	//		will be different than the original args.url
                	//		value.
                	// query: String
                	//		For non-GET requests, the
                	//		name1=value1&name2=value2 parameters sent up in
                	//		the request.
                	// handleAs: String
                	//		The final indicator on how the response will be
                	//		handled.
                	// id: String
                	//		For dojo/io/script calls only, the internal
                	//		script ID used for the request.
                	// canDelete: Boolean
                	//		For dojo/io/script calls only, indicates
                	//		whether the script tag that represents the
                	//		request can be deleted after callbacks have
                	//		been called. Used internally to know when
                	//		cleanup can happen on JSONP-type requests.
                	// json: Object
                	//		For dojo/io/script calls only: holds the JSON
                	//		response for JSONP-type requests. Used
                	//		internally to hold on to the JSON responses.
                	//		You should not need to access it directly --
                	//		the same object should be passed to the success
                	//		callbacks directly.
                });

                dojo.__IoPublish = declare(null, {
                	// summary:
                	//		This is a list of IO topics that can be published
                	//		if djConfig.ioPublish is set to true. IO topics can be
                	//		published for any Input/Output, network operation. So,
                	//		dojo.xhr, dojo.io.script and dojo.io.iframe can all
                	//		trigger these topics to be published.
                	// start: String
                	//		"/dojo/io/start" is sent when there are no outstanding IO
                	//		requests, and a new IO request is started. No arguments
                	//		are passed with this topic.
                	// send: String
                	//		"/dojo/io/send" is sent whenever a new IO request is started.
                	//		It passes the dojo.Deferred for the request with the topic.
                	// load: String
                	//		"/dojo/io/load" is sent whenever an IO request has loaded
                	//		successfully. It passes the response and the dojo.Deferred
                	//		for the request with the topic.
                	// error: String
                	//		"/dojo/io/error" is sent whenever an IO request has errored.
                	//		It passes the error and the dojo.Deferred
                	//		for the request with the topic.
                	// done: String
                	//		"/dojo/io/done" is sent whenever an IO request has completed,
                	//		either by loading or by erroring. It passes the error and
                	//		the dojo.Deferred for the request with the topic.
                	// stop: String
                	//		"/dojo/io/stop" is sent when all outstanding IO requests have
                	//		finished. No arguments are passed with this topic.
                });
                =====*/


                dojo._ioSetArgs = function( /*dojo/main.__IoArgs*/ args,
                    /*Function*/
                    canceller,
                    /*Function*/
                    okHandler,
                    /*Function*/
                    errHandler) {
                    // summary:
                    //		sets up the Deferred and ioArgs property on the Deferred so it
                    //		can be used in an io call.
                    // args:
                    //		The args object passed into the public io call. Recognized properties on
                    //		the args object are:
                    // canceller:
                    //		The canceller function used for the Deferred object. The function
                    //		will receive one argument, the Deferred object that is related to the
                    //		canceller.
                    // okHandler:
                    //		The first OK callback to be registered with Deferred. It has the opportunity
                    //		to transform the OK response. It will receive one argument -- the Deferred
                    //		object returned from this function.
                    // errHandler:
                    //		The first error callback to be registered with Deferred. It has the opportunity
                    //		to do cleanup on an error. It will receive two arguments: error (the
                    //		Error object) and dfd, the Deferred object returned from this function.

                    var ioArgs = {
                        args: args,
                        url: args.url
                    };

                    //Get values from form if requested.
                    var formObject = null;
                    if (args.form) {
                        var form = dom.byId(args.form);
                        //IE requires going through getAttributeNode instead of just getAttribute in some form cases,
                        //so use it for all. See #2844
                        var actnNode = form.getAttributeNode("action");
                        ioArgs.url = ioArgs.url || (actnNode ? actnNode.value : null);
                        formObject = domForm.toObject(form);
                    }

                    // set up the query params
                    var miArgs = [{}];

                    if (formObject) {
                        // potentially over-ride url-provided params w/ form values
                        miArgs.push(formObject);
                    }
                    if (args.content) {
                        // stuff in content over-rides what's set by form
                        miArgs.push(args.content);
                    }
                    if (args.preventCache) {
                        miArgs.push({
                            "dojo.preventCache": new Date().valueOf()
                        });
                    }
                    ioArgs.query = ioq.objectToQuery(lang.mixin.apply(null, miArgs));

                    // .. and the real work of getting the deferred in order, etc.
                    ioArgs.handleAs = args.handleAs || "text";
                    var d = new Deferred(function(dfd) {
                        dfd.canceled = true;
                        canceller && canceller(dfd);

                        var err = dfd.ioArgs.error;
                        if (!err) {
                            err = new Error("request cancelled");
                            err.dojoType = "cancel";
                            dfd.ioArgs.error = err;
                        }
                        return err;
                    });
                    d.addCallback(okHandler);

                    //Support specifying load, error and handle callback functions from the args.
                    //For those callbacks, the "this" object will be the args object.
                    //The callbacks will get the deferred result value as the
                    //first argument and the ioArgs object as the second argument.
                    var ld = args.load;
                    if (ld && lang.isFunction(ld)) {
                        d.addCallback(function(value) {
                            return ld.call(args, value, ioArgs);
                        });
                    }
                    var err = args.error;
                    if (err && lang.isFunction(err)) {
                        d.addErrback(function(value) {
                            return err.call(args, value, ioArgs);
                        });
                    }
                    var handle = args.handle;
                    if (handle && lang.isFunction(handle)) {
                        d.addBoth(function(value) {
                            return handle.call(args, value, ioArgs);
                        });
                    }

                    // Attach error handler last (not including topic publishing)
                    // to catch any errors that may have been generated from load
                    // or handle functions.
                    d.addErrback(function(error) {
                        return errHandler(error, d);
                    });

                    //Plug in topic publishing, if dojo.publish is loaded.
                    if (cfg.ioPublish && dojo.publish && ioArgs.args.ioPublish !== false) {
                        d.addCallbacks(
                            function(res) {
                                dojo.publish("/dojo/io/load", [d, res]);
                                return res;
                            },
                            function(res) {
                                dojo.publish("/dojo/io/error", [d, res]);
                                return res;
                            }
                        );
                        d.addBoth(function(res) {
                            dojo.publish("/dojo/io/done", [d, res]);
                            return res;
                        });
                    }

                    d.ioArgs = ioArgs;

                    // FIXME: need to wire up the xhr object's abort method to something
                    // analogous in the Deferred
                    return d;
                };

                var _deferredOk = function( /*Deferred*/ dfd) {
                    // summary:
                    //		okHandler function for dojo._ioSetArgs call.

                    var ret = handlers[dfd.ioArgs.handleAs](dfd.ioArgs.xhr);
                    return ret === undefined ? null : ret;
                };
                var _deferError = function( /*Error*/ error, /*Deferred*/ dfd) {
                    // summary:
                    //		errHandler function for dojo._ioSetArgs call.

                    if (!dfd.ioArgs.args.failOk) {
                        console.error(error);
                    }
                    return error;
                };

                //Use a separate count for knowing if we are starting/stopping io calls.
                var _checkPubCount = function(dfd) {
                    if (_pubCount <= 0) {
                        _pubCount = 0;
                        if (cfg.ioPublish && dojo.publish && (!dfd || dfd && dfd.ioArgs.args.ioPublish !== false)) {
                            dojo.publish("/dojo/io/stop");
                        }
                    }
                };

                var _pubCount = 0;
                aspect.after(watch, "_onAction", function() {
                    _pubCount -= 1;
                });
                aspect.after(watch, "_onInFlight", _checkPubCount);

                dojo._ioCancelAll = watch.cancelAll;
                /*=====
                dojo._ioCancelAll = function(){
                	// summary:
                	//		Cancels all pending IO requests, regardless of IO type
                	//		(xhr, script, iframe).
                };
                =====*/

                dojo._ioNotifyStart = function( /*Deferred*/ dfd) {
                    // summary:
                    //		If dojo.publish is available, publish topics
                    //		about the start of a request queue and/or the
                    //		the beginning of request.
                    //
                    //		Used by IO transports. An IO transport should
                    //		call this method before making the network connection.
                    if (cfg.ioPublish && dojo.publish && dfd.ioArgs.args.ioPublish !== false) {
                        if (!_pubCount) {
                            dojo.publish("/dojo/io/start");
                        }
                        _pubCount += 1;
                        dojo.publish("/dojo/io/send", [dfd]);
                    }
                };

                dojo._ioWatch = function(dfd, validCheck, ioCheck, resHandle) {
                    // summary:
                    //		Watches the io request represented by dfd to see if it completes.
                    // dfd: Deferred
                    //		The Deferred object to watch.
                    // validCheck: Function
                    //		Function used to check if the IO request is still valid. Gets the dfd
                    //		object as its only argument.
                    // ioCheck: Function
                    //		Function used to check if basic IO call worked. Gets the dfd
                    //		object as its only argument.
                    // resHandle: Function
                    //		Function used to process response. Gets the dfd
                    //		object as its only argument.

                    var args = dfd.ioArgs.options = dfd.ioArgs.args;
                    lang.mixin(dfd, {
                        response: dfd.ioArgs,
                        isValid: function(response) {
                            return validCheck(dfd);
                        },
                        isReady: function(response) {
                            return ioCheck(dfd);
                        },
                        handleResponse: function(response) {
                            return resHandle(dfd);
                        }
                    });
                    watch(dfd);

                    _checkPubCount(dfd);
                };

                var _defaultContentType = "application/x-www-form-urlencoded";

                dojo._ioAddQueryToUrl = function( /*dojo.__IoCallbackArgs*/ ioArgs) {
                    // summary:
                    //		Adds query params discovered by the io deferred construction to the URL.
                    //		Only use this for operations which are fundamentally GET-type operations.
                    if (ioArgs.query.length) {
                        ioArgs.url += (ioArgs.url.indexOf("?") == -1 ? "?" : "&") + ioArgs.query;
                        ioArgs.query = null;
                    }
                };

                /*=====
                dojo.__XhrArgs = declare(dojo.__IoArgs, {
                	// summary:
                	//		In addition to the properties listed for the dojo._IoArgs type,
                	//		the following properties are allowed for dojo.xhr* methods.
                	// handleAs: String?
                	//		Acceptable values are: text (default), json, json-comment-optional,
                	//		json-comment-filtered, javascript, xml. See `dojo/_base/xhr.contentHandlers`
                 	// sync: Boolean?
                	//		false is default. Indicates whether the request should
                	//		be a synchronous (blocking) request.
                	// headers: Object?
                	//		Additional HTTP headers to send in the request.
                	// failOk: Boolean?
                	//		false is default. Indicates whether a request should be
                	//		allowed to fail (and therefore no console error message in
                	//		the event of a failure)
                	// contentType: String|Boolean
                	//		"application/x-www-form-urlencoded" is default. Set to false to
                	//		prevent a Content-Type header from being sent, or to a string
                	//		to send a different Content-Type.
                 });
                =====*/

                dojo.xhr = function( /*String*/ method, /*dojo.__XhrArgs*/ args, /*Boolean?*/ hasBody) {
                    // summary:
                    //		Deprecated.   Use dojo/request instead.
                    // description:
                    //		Sends an HTTP request with the given method.
                    //		See also dojo.xhrGet(), xhrPost(), xhrPut() and dojo.xhrDelete() for shortcuts
                    //		for those HTTP methods. There are also methods for "raw" PUT and POST methods
                    //		via dojo.rawXhrPut() and dojo.rawXhrPost() respectively.
                    // method:
                    //		HTTP method to be used, such as GET, POST, PUT, DELETE. Should be uppercase.
                    // hasBody:
                    //		If the request has an HTTP body, then pass true for hasBody.

                    var rDfd;
                    //Make the Deferred object for this xhr request.
                    var dfd = dojo._ioSetArgs(args, function(dfd) {
                        rDfd && rDfd.cancel();
                    }, _deferredOk, _deferError);
                    var ioArgs = dfd.ioArgs;

                    //Allow for specifying the HTTP body completely.
                    if ("postData" in args) {
                        ioArgs.query = args.postData;
                    } else if ("putData" in args) {
                        ioArgs.query = args.putData;
                    } else if ("rawBody" in args) {
                        ioArgs.query = args.rawBody;
                    } else if ((arguments.length > 2 && !hasBody) || "POST|PUT".indexOf(method.toUpperCase()) === -1) {
                        //Check for hasBody being passed. If no hasBody,
                        //then only append query string if not a POST or PUT request.
                        dojo._ioAddQueryToUrl(ioArgs);
                    }

                    var options = {
                        method: method,
                        handleAs: "text",
                        timeout: args.timeout,
                        withCredentials: args.withCredentials,
                        ioArgs: ioArgs
                    };

                    if (typeof args.headers !== 'undefined') {
                        options.headers = args.headers;
                    }
                    if (typeof args.contentType !== 'undefined') {
                        if (!options.headers) {
                            options.headers = {};
                        }
                        options.headers['Content-Type'] = args.contentType;
                    }
                    if (typeof ioArgs.query !== 'undefined') {
                        options.data = ioArgs.query;
                    }
                    if (typeof args.sync !== 'undefined') {
                        options.sync = args.sync;
                    }

                    dojo._ioNotifyStart(dfd);
                    try {
                        rDfd = _xhr(ioArgs.url, options, true);
                    } catch (e) {
                        // If XHR creation fails, dojo/request/xhr throws
                        // When this happens, cancel the deferred
                        dfd.cancel();
                        return dfd;
                    }

                    // sync ioArgs
                    dfd.ioArgs.xhr = rDfd.response.xhr;

                    rDfd.then(function() {
                        dfd.resolve(dfd);
                    }).otherwise(function(error) {
                        ioArgs.error = error;
                        if (error.response) {
                            error.status = error.response.status;
                            error.responseText = error.response.text;
                            error.xhr = error.response.xhr;
                        }
                        dfd.reject(error);
                    });
                    return dfd; // dojo/_base/Deferred
                };

                dojo.xhrGet = function( /*dojo.__XhrArgs*/ args) {
                    // summary:
                    //		Sends an HTTP GET request to the server.
                    return dojo.xhr("GET", args); // dojo/_base/Deferred
                };

                dojo.rawXhrPost = dojo.xhrPost = function( /*dojo.__XhrArgs*/ args) {
                    // summary:
                    //		Sends an HTTP POST request to the server. In addition to the properties
                    //		listed for the dojo.__XhrArgs type, the following property is allowed:
                    // postData:
                    //		String. Send raw data in the body of the POST request.
                    return dojo.xhr("POST", args, true); // dojo/_base/Deferred
                };

                dojo.rawXhrPut = dojo.xhrPut = function( /*dojo.__XhrArgs*/ args) {
                    // summary:
                    //		Sends an HTTP PUT request to the server. In addition to the properties
                    //		listed for the dojo.__XhrArgs type, the following property is allowed:
                    // putData:
                    //		String. Send raw data in the body of the PUT request.
                    return dojo.xhr("PUT", args, true); // dojo/_base/Deferred
                };

                dojo.xhrDelete = function( /*dojo.__XhrArgs*/ args) {
                    // summary:
                    //		Sends an HTTP DELETE request to the server.
                    return dojo.xhr("DELETE", args); // dojo/_base/Deferred
                };

                /*
                dojo.wrapForm = function(formNode){
                	// summary:
                	//		A replacement for FormBind, but not implemented yet.

                	// FIXME: need to think harder about what extensions to this we might
                	// want. What should we allow folks to do w/ this? What events to
                	// set/send?
                	throw new Error("dojo.wrapForm not yet implemented");
                }
                */

                dojo._isDocumentOk = function(x) {
                    return util.checkStatus(x.status);
                };

                dojo._getText = function(url) {
                    var result;
                    dojo.xhrGet({
                        url: url,
                        sync: true,
                        load: function(text) {
                            result = text;
                        }
                    });
                    return result;
                };

                // Add aliases for static functions to dojo.xhr since dojo.xhr is what's returned from this module
                lang.mixin(dojo.xhr, {
                    _xhrObj: dojo._xhrObj,
                    fieldToObject: domForm.fieldToObject,
                    formToObject: domForm.toObject,
                    objectToQuery: ioq.objectToQuery,
                    formToQuery: domForm.toQuery,
                    formToJson: domForm.toJson,
                    queryToObject: ioq.queryToObject,
                    contentHandlers: handlers,
                    _ioSetArgs: dojo._ioSetArgs,
                    _ioCancelAll: dojo._ioCancelAll,
                    _ioNotifyStart: dojo._ioNotifyStart,
                    _ioWatch: dojo._ioWatch,
                    _ioAddQueryToUrl: dojo._ioAddQueryToUrl,
                    _isDocumentOk: dojo._isDocumentOk,
                    _getText: dojo._getText,
                    get: dojo.xhrGet,
                    post: dojo.xhrPost,
                    put: dojo.xhrPut,
                    del: dojo.xhrDelete // because "delete" is a reserved word
                });

                return dojo.xhr;
            });

        },
        'dijit/focus': function() {
            define("dijit/focus", [
                "dojo/aspect",
                "dojo/_base/declare", // declare
                "dojo/dom", // domAttr.get dom.isDescendant
                "dojo/dom-attr", // domAttr.get dom.isDescendant
                "dojo/dom-construct", // connect to domConstruct.empty, domConstruct.destroy
                "dojo/Evented",
                "dojo/_base/lang", // lang.hitch
                "dojo/on",
                "dojo/ready",
                "dojo/sniff", // has("ie")
                "dojo/Stateful",
                "dojo/_base/unload", // unload.addOnWindowUnload
                "dojo/_base/window", // win.body
                "dojo/window", // winUtils.get
                "./a11y", // a11y.isTabNavigable
                "./registry", // registry.byId
                "./main" // to set dijit.focus
            ], function(aspect, declare, dom, domAttr, domConstruct, Evented, lang, on, ready, has, Stateful, unload, win, winUtils,
                a11y, registry, dijit) {

                // module:
                //		dijit/focus

                var FocusManager = declare([Stateful, Evented], {
                    // summary:
                    //		Tracks the currently focused node, and which widgets are currently "active".
                    //		Access via require(["dijit/focus"], function(focus){ ... }).
                    //
                    //		A widget is considered active if it or a descendant widget has focus,
                    //		or if a non-focusable node of this widget or a descendant was recently clicked.
                    //
                    //		Call focus.watch("curNode", callback) to track the current focused DOMNode,
                    //		or focus.watch("activeStack", callback) to track the currently focused stack of widgets.
                    //
                    //		Call focus.on("widget-blur", func) or focus.on("widget-focus", ...) to monitor when
                    //		when widgets become active/inactive
                    //
                    //		Finally, focus(node) will focus a node, suppressing errors if the node doesn't exist.

                    // curNode: DomNode
                    //		Currently focused item on screen
                    curNode: null,

                    // activeStack: dijit/_WidgetBase[]
                    //		List of currently active widgets (focused widget and it's ancestors)
                    activeStack: [],

                    constructor: function() {
                        // Don't leave curNode/prevNode pointing to bogus elements
                        var check = lang.hitch(this, function(node) {
                            if (dom.isDescendant(this.curNode, node)) {
                                this.set("curNode", null);
                            }
                            if (dom.isDescendant(this.prevNode, node)) {
                                this.set("prevNode", null);
                            }
                        });
                        aspect.before(domConstruct, "empty", check);
                        aspect.before(domConstruct, "destroy", check);
                    },

                    registerIframe: function( /*DomNode*/ iframe) {
                        // summary:
                        //		Registers listeners on the specified iframe so that any click
                        //		or focus event on that iframe (or anything in it) is reported
                        //		as a focus/click event on the `<iframe>` itself.
                        // description:
                        //		Currently only used by editor.
                        // returns:
                        //		Handle with remove() method to deregister.
                        return this.registerWin(iframe.contentWindow, iframe);
                    },

                    registerWin: function( /*Window?*/ targetWindow, /*DomNode?*/ effectiveNode) {
                        // summary:
                        //		Registers listeners on the specified window (either the main
                        //		window or an iframe's window) to detect when the user has clicked somewhere
                        //		or focused somewhere.
                        // description:
                        //		Users should call registerIframe() instead of this method.
                        // targetWindow:
                        //		If specified this is the window associated with the iframe,
                        //		i.e. iframe.contentWindow.
                        // effectiveNode:
                        //		If specified, report any focus events inside targetWindow as
                        //		an event on effectiveNode, rather than on evt.target.
                        // returns:
                        //		Handle with remove() method to deregister.

                        // TODO: make this function private in 2.0; Editor/users should call registerIframe(),

                        var _this = this;
                        var mousedownListener = function(evt) {
                            _this._justMouseDowned = true;
                            setTimeout(function() {
                                _this._justMouseDowned = false;
                            }, 0);

                            // workaround weird IE bug where the click is on an orphaned node
                            // (first time clicking a Select/DropDownButton inside a TooltipDialog)
                            if (has("ie") && evt && evt.srcElement && evt.srcElement.parentNode == null) {
                                return;
                            }

                            _this._onTouchNode(effectiveNode || evt.target || evt.srcElement, "mouse");
                        };

                        // Listen for blur and focus events on targetWindow's document.
                        // Using attachEvent()/addEventListener() rather than on() to try to catch mouseDown events even
                        // if other code calls evt.stopPropagation().  But rethink for 2.0 since that doesn't work for attachEvent(),
                        // which watches events at the bubbling phase rather than capturing phase, like addEventListener(..., false).
                        // Connect to <html> (rather than document) on IE to avoid memory leaks, but document on other browsers because
                        // (at least for FF) the focus event doesn't fire on <html> or <body>.
                        var doc = has("ie") ? targetWindow.document.documentElement : targetWindow.document;
                        if (doc) {
                            if (has("ie")) {
                                targetWindow.document.body.attachEvent('onmousedown', mousedownListener);
                                var focusinListener = function(evt) {
                                    // IE reports that nodes like <body> have gotten focus, even though they have tabIndex=-1,
                                    // ignore those events
                                    var tag = evt.srcElement.tagName.toLowerCase();
                                    if (tag == "#document" || tag == "body") {
                                        return;
                                    }

                                    // Previous code called _onTouchNode() for any activate event on a non-focusable node.   Can
                                    // probably just ignore such an event as it will be handled by onmousedown handler above, but
                                    // leaving the code for now.
                                    if (a11y.isTabNavigable(evt.srcElement)) {
                                        _this._onFocusNode(effectiveNode || evt.srcElement);
                                    } else {
                                        _this._onTouchNode(effectiveNode || evt.srcElement);
                                    }
                                };
                                doc.attachEvent('onfocusin', focusinListener);
                                var focusoutListener = function(evt) {
                                    _this._onBlurNode(effectiveNode || evt.srcElement);
                                };
                                doc.attachEvent('onfocusout', focusoutListener);

                                return {
                                    remove: function() {
                                        targetWindow.document.detachEvent('onmousedown', mousedownListener);
                                        doc.detachEvent('onfocusin', focusinListener);
                                        doc.detachEvent('onfocusout', focusoutListener);
                                        doc = null; // prevent memory leak (apparent circular reference via closure)
                                    }
                                };
                            } else {
                                doc.body.addEventListener('mousedown', mousedownListener, true);
                                doc.body.addEventListener('touchstart', mousedownListener, true);
                                var focusListener = function(evt) {
                                    _this._onFocusNode(effectiveNode || evt.target);
                                };
                                doc.addEventListener('focus', focusListener, true);
                                var blurListener = function(evt) {
                                    _this._onBlurNode(effectiveNode || evt.target);
                                };
                                doc.addEventListener('blur', blurListener, true);

                                return {
                                    remove: function() {
                                        doc.body.removeEventListener('mousedown', mousedownListener, true);
                                        doc.body.removeEventListener('touchstart', mousedownListener, true);
                                        doc.removeEventListener('focus', focusListener, true);
                                        doc.removeEventListener('blur', blurListener, true);
                                        doc = null; // prevent memory leak (apparent circular reference via closure)
                                    }
                                };
                            }
                        }
                    },

                    _onBlurNode: function( /*DomNode*/ node) {
                        // summary:
                        //		Called when focus leaves a node.
                        //		Usually ignored, _unless_ it *isn't* followed by touching another node,
                        //		which indicates that we tabbed off the last field on the page,
                        //		in which case every widget is marked inactive

                        // If the blur event isn't followed by a focus event, it means the user clicked on something unfocusable,
                        // so clear focus.
                        if (this._clearFocusTimer) {
                            clearTimeout(this._clearFocusTimer);
                        }
                        this._clearFocusTimer = setTimeout(lang.hitch(this, function() {
                            this.set("prevNode", this.curNode);
                            this.set("curNode", null);
                        }), 0);

                        if (this._justMouseDowned) {
                            // the mouse down caused a new widget to be marked as active; this blur event
                            // is coming late, so ignore it.
                            return;
                        }

                        // If the blur event isn't followed by a focus or touch event then mark all widgets as inactive.
                        if (this._clearActiveWidgetsTimer) {
                            clearTimeout(this._clearActiveWidgetsTimer);
                        }
                        this._clearActiveWidgetsTimer = setTimeout(lang.hitch(this, function() {
                            delete this._clearActiveWidgetsTimer;
                            this._setStack([]);
                        }), 0);
                    },

                    _onTouchNode: function( /*DomNode*/ node, /*String*/ by) {
                        // summary:
                        //		Callback when node is focused or mouse-downed
                        // node:
                        //		The node that was touched.
                        // by:
                        //		"mouse" if the focus/touch was caused by a mouse down event

                        // ignore the recent blurNode event
                        if (this._clearActiveWidgetsTimer) {
                            clearTimeout(this._clearActiveWidgetsTimer);
                            delete this._clearActiveWidgetsTimer;
                        }

                        // compute stack of active widgets (ex: ComboButton --> Menu --> MenuItem)
                        var newStack = [];
                        try {
                            while (node) {
                                var popupParent = domAttr.get(node, "dijitPopupParent");
                                if (popupParent) {
                                    node = registry.byId(popupParent).domNode;
                                } else if (node.tagName && node.tagName.toLowerCase() == "body") {
                                    // is this the root of the document or just the root of an iframe?
                                    if (node === win.body()) {
                                        // node is the root of the main document
                                        break;
                                    }
                                    // otherwise, find the iframe this node refers to (can't access it via parentNode,
                                    // need to do this trick instead). window.frameElement is supported in IE/FF/Webkit
                                    node = winUtils.get(node.ownerDocument).frameElement;
                                } else {
                                    // if this node is the root node of a widget, then add widget id to stack,
                                    // except ignore clicks on disabled widgets (actually focusing a disabled widget still works,
                                    // to support MenuItem)
                                    var id = node.getAttribute && node.getAttribute("widgetId"),
                                        widget = id && registry.byId(id);
                                    if (widget && !(by == "mouse" && widget.get("disabled"))) {
                                        newStack.unshift(id);
                                    }
                                    node = node.parentNode;
                                }
                            }
                        } catch (e) { /* squelch */ }

                        this._setStack(newStack, by);
                    },

                    _onFocusNode: function( /*DomNode*/ node) {
                        // summary:
                        //		Callback when node is focused

                        if (!node) {
                            return;
                        }

                        if (node.nodeType == 9) {
                            // Ignore focus events on the document itself.  This is here so that
                            // (for example) clicking the up/down arrows of a spinner
                            // (which don't get focus) won't cause that widget to blur. (FF issue)
                            return;
                        }

                        // There was probably a blur event right before this event, but since we have a new focus, don't
                        // do anything with the blur
                        if (this._clearFocusTimer) {
                            clearTimeout(this._clearFocusTimer);
                            delete this._clearFocusTimer;
                        }

                        this._onTouchNode(node);

                        if (node == this.curNode) {
                            return;
                        }
                        this.set("prevNode", this.curNode);
                        this.set("curNode", node);
                    },

                    _setStack: function( /*String[]*/ newStack, /*String*/ by) {
                        // summary:
                        //		The stack of active widgets has changed.  Send out appropriate events and records new stack.
                        // newStack:
                        //		array of widget id's, starting from the top (outermost) widget
                        // by:
                        //		"mouse" if the focus/touch was caused by a mouse down event

                        var oldStack = this.activeStack;
                        this.set("activeStack", newStack);

                        // compare old stack to new stack to see how many elements they have in common
                        for (var nCommon = 0; nCommon < Math.min(oldStack.length, newStack.length); nCommon++) {
                            if (oldStack[nCommon] != newStack[nCommon]) {
                                break;
                            }
                        }

                        var widget;
                        // for all elements that have gone out of focus, set focused=false
                        for (var i = oldStack.length - 1; i >= nCommon; i--) {
                            widget = registry.byId(oldStack[i]);
                            if (widget) {
                                widget._hasBeenBlurred = true; // TODO: used by form widgets, should be moved there
                                widget.set("focused", false);
                                if (widget._focusManager == this) {
                                    widget._onBlur(by);
                                }
                                this.emit("widget-blur", widget, by);
                            }
                        }

                        // for all element that have come into focus, set focused=true
                        for (i = nCommon; i < newStack.length; i++) {
                            widget = registry.byId(newStack[i]);
                            if (widget) {
                                widget.set("focused", true);
                                if (widget._focusManager == this) {
                                    widget._onFocus(by);
                                }
                                this.emit("widget-focus", widget, by);
                            }
                        }
                    },

                    focus: function(node) {
                        // summary:
                        //		Focus the specified node, suppressing errors if they occur
                        if (node) {
                            try {
                                node.focus();
                            } catch (e) { /*quiet*/ }
                        }
                    }
                });

                var singleton = new FocusManager();

                // register top window and all the iframes it contains
                ready(function() {
                    var handle = singleton.registerWin(winUtils.get(win.doc));
                    if (has("ie")) {
                        unload.addOnWindowUnload(function() {
                            if (handle) { // because this gets called twice when doh.robot is running
                                handle.remove();
                                handle = null;
                            }
                        });
                    }
                });

                // Setup dijit.focus as a pointer to the singleton but also (for backwards compatibility)
                // as a function to set focus.   Remove for 2.0.
                dijit.focus = function(node) {
                    singleton.focus(node); // indirection here allows dijit/_base/focus.js to override behavior
                };
                for (var attr in singleton) {
                    if (!/^_/.test(attr)) {
                        dijit.focus[attr] = typeof singleton[attr] == "function" ? lang.hitch(singleton, attr) : singleton[attr];
                    }
                }
                singleton.watch(function(attr, oldVal, newVal) {
                    dijit.focus[attr] = newVal;
                });

                return singleton;
            });

        },
        'dojo/i18n': function() {
            define(["./_base/kernel", "require", "./has", "./_base/array", "./_base/config", "./_base/lang", "./_base/xhr", "./json", "module"],
                function(dojo, require, has, array, config, lang, xhr, json, module) {

                    // module:
                    //		dojo/i18n

                    has.add("dojo-preload-i18n-Api",
                        // if true, define the preload localizations machinery
                        1
                    );

                    1 || has.add("dojo-v1x-i18n-Api",
                        // if true, define the v1.x i18n functions
                        1
                    );

                    var
                        thisModule = dojo.i18n = {
                            // summary:
                            //		This module implements the dojo/i18n! plugin and the v1.6- i18n API
                            // description:
                            //		We choose to include our own plugin to leverage functionality already contained in dojo
                            //		and thereby reduce the size of the plugin compared to various loader implementations. Also, this
                            //		allows foreign AMD loaders to be used without their plugins.
                        },

                        nlsRe =
                        // regexp for reconstructing the master bundle name from parts of the regexp match
                        // nlsRe.exec("foo/bar/baz/nls/en-ca/foo") gives:
                        // ["foo/bar/baz/nls/en-ca/foo", "foo/bar/baz/nls/", "/", "/", "en-ca", "foo"]
                        // nlsRe.exec("foo/bar/baz/nls/foo") gives:
                        // ["foo/bar/baz/nls/foo", "foo/bar/baz/nls/", "/", "/", "foo", ""]
                        // so, if match[5] is blank, it means this is the top bundle definition.
                        // courtesy of http://requirejs.org
                        /(^.*(^|\/)nls)(\/|$)([^\/]*)\/?([^\/]*)/,

                        getAvailableLocales = function(
                            root,
                            locale,
                            bundlePath,
                            bundleName
                        ) {
                            // summary:
                            //		return a vector of module ids containing all available locales with respect to the target locale
                            //		For example, assuming:
                            //
                            //		- the root bundle indicates specific bundles for "fr" and "fr-ca",
                            //		-  bundlePath is "myPackage/nls"
                            //		- bundleName is "myBundle"
                            //
                            //		Then a locale argument of "fr-ca" would return
                            //
                            //			["myPackage/nls/myBundle", "myPackage/nls/fr/myBundle", "myPackage/nls/fr-ca/myBundle"]
                            //
                            //		Notice that bundles are returned least-specific to most-specific, starting with the root.
                            //
                            //		If root===false indicates we're working with a pre-AMD i18n bundle that doesn't tell about the available locales;
                            //		therefore, assume everything is available and get 404 errors that indicate a particular localization is not available

                            for (var result = [bundlePath + bundleName], localeParts = locale.split("-"), current = "", i = 0; i < localeParts.length; i++) {
                                current += (current ? "-" : "") + localeParts[i];
                                if (!root || root[current]) {
                                    result.push(bundlePath + current + "/" + bundleName);
                                }
                            }
                            return result;
                        },

                        cache = {},

                        getBundleName = function(moduleName, bundleName, locale) {
                            locale = locale ? locale.toLowerCase() : dojo.locale;
                            moduleName = moduleName.replace(/\./g, "/");
                            bundleName = bundleName.replace(/\./g, "/");
                            return (/root/i.test(locale)) ?
                                (moduleName + "/nls/" + bundleName) :
                                (moduleName + "/nls/" + locale + "/" + bundleName);
                        },

                        getL10nName = dojo.getL10nName = function(moduleName, bundleName, locale) {
                            return moduleName = module.id + "!" + getBundleName(moduleName, bundleName, locale);
                        },

                        doLoad = function(require, bundlePathAndName, bundlePath, bundleName, locale, load) {
                            // summary:
                            //		get the root bundle which instructs which other bundles are required to construct the localized bundle
                            require([bundlePathAndName], function(root) {
                                var current = lang.clone(root.root),
                                    availableLocales = getAvailableLocales(!root._v1x && root, locale, bundlePath, bundleName);
                                require(availableLocales, function() {
                                    for (var i = 1; i < availableLocales.length; i++) {
                                        current = lang.mixin(lang.clone(current), arguments[i]);
                                    }
                                    // target may not have been resolve (e.g., maybe only "fr" exists when "fr-ca" was requested)
                                    var target = bundlePathAndName + "/" + locale;
                                    cache[target] = current;
                                    load();
                                });
                            });
                        },

                        normalize = function(id, toAbsMid) {
                            // summary:
                            //		id may be relative.
                            //		preload has form `*preload*<path>/nls/<module>*<flattened locales>` and
                            //		therefore never looks like a relative
                            return /^\./.test(id) ? toAbsMid(id) : id;
                        },

                        getLocalesToLoad = function(targetLocale) {
                            var list = config.extraLocale || [];
                            list = lang.isArray(list) ? list : [list];
                            list.push(targetLocale);
                            return list;
                        },

                        load = function(id, require, load) {
                            // summary:
                            //		id is in one of the following formats
                            //
                            //		1. <path>/nls/<bundle>
                            //			=> load the bundle, localized to config.locale; load all bundles localized to
                            //			config.extraLocale (if any); return the loaded bundle localized to config.locale.
                            //
                            //		2. <path>/nls/<locale>/<bundle>
                            //			=> load then return the bundle localized to <locale>
                            //
                            //		3. *preload*<path>/nls/<module>*<JSON array of available locales>
                            //			=> for config.locale and all config.extraLocale, load all bundles found
                            //			in the best-matching bundle rollup. A value of 1 is returned, which
                            //			is meaningless other than to say the plugin is executing the requested
                            //			preloads
                            //
                            //		In cases 1 and 2, <path> is always normalized to an absolute module id upon entry; see
                            //		normalize. In case 3, it <path> is assumed to be absolute; this is arranged by the builder.
                            //
                            //		To load a bundle means to insert the bundle into the plugin's cache and publish the bundle
                            //		value to the loader. Given <path>, <bundle>, and a particular <locale>, the cache key
                            //
                            //			<path>/nls/<bundle>/<locale>
                            //
                            //		will hold the value. Similarly, then plugin will publish this value to the loader by
                            //
                            //			define("<path>/nls/<bundle>/<locale>", <bundle-value>);
                            //
                            //		Given this algorithm, other machinery can provide fast load paths be preplacing
                            //		values in the plugin's cache, which is public. When a load is demanded the
                            //		cache is inspected before starting any loading. Explicitly placing values in the plugin
                            //		cache is an advanced/experimental feature that should not be needed; use at your own risk.
                            //
                            //		For the normal AMD algorithm, the root bundle is loaded first, which instructs the
                            //		plugin what additional localized bundles are required for a particular locale. These
                            //		additional locales are loaded and a mix of the root and each progressively-specific
                            //		locale is returned. For example:
                            //
                            //		1. The client demands "dojo/i18n!some/path/nls/someBundle
                            //
                            //		2. The loader demands load(some/path/nls/someBundle)
                            //
                            //		3. This plugin require's "some/path/nls/someBundle", which is the root bundle.
                            //
                            //		4. Assuming config.locale is "ab-cd-ef" and the root bundle indicates that localizations
                            //		are available for "ab" and "ab-cd-ef" (note the missing "ab-cd", then the plugin
                            //		requires "some/path/nls/ab/someBundle" and "some/path/nls/ab-cd-ef/someBundle"
                            //
                            //		5. Upon receiving all required bundles, the plugin constructs the value of the bundle
                            //		ab-cd-ef as...
                            //
                            //				mixin(mixin(mixin({}, require("some/path/nls/someBundle"),
                            //		  			require("some/path/nls/ab/someBundle")),
                            //					require("some/path/nls/ab-cd-ef/someBundle"));
                            //
                            //		This value is inserted into the cache and published to the loader at the
                            //		key/module-id some/path/nls/someBundle/ab-cd-ef.
                            //
                            //		The special preload signature (case 3) instructs the plugin to stop servicing all normal requests
                            //		(further preload requests will be serviced) until all ongoing preloading has completed.
                            //
                            //		The preload signature instructs the plugin that a special rollup module is available that contains
                            //		one or more flattened, localized bundles. The JSON array of available locales indicates which locales
                            //		are available. Here is an example:
                            //
                            //			*preload*some/path/nls/someModule*["root", "ab", "ab-cd-ef"]
                            //
                            //		This indicates the following rollup modules are available:
                            //
                            //			some/path/nls/someModule_ROOT
                            //			some/path/nls/someModule_ab
                            //			some/path/nls/someModule_ab-cd-ef
                            //
                            //		Each of these modules is a normal AMD module that contains one or more flattened bundles in a hash.
                            //		For example, assume someModule contained the bundles some/bundle/path/someBundle and
                            //		some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:
                            //
                            //			define({
                            //				some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,
                            //				some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,
                            //			});
                            //
                            //		E.g., given this design, preloading for locale=="ab" can execute the following algorithm:
                            //
                            //			require(["some/path/nls/someModule_ab"], function(rollup){
                            //				for(var p in rollup){
                            //					var id = p + "/ab",
                            //					cache[id] = rollup[p];
                            //					define(id, rollup[p]);
                            //				}
                            //			});
                            //
                            //		Similarly, if "ab-cd" is requested, the algorithm can determine that "ab" is the best available and
                            //		load accordingly.
                            //
                            //		The builder will write such rollups for every layer if a non-empty localeList  profile property is
                            //		provided. Further, the builder will include the following cache entry in the cache associated with
                            //		any layer.
                            //
                            //			"*now":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}
                            //
                            //		The *now special cache module instructs the loader to apply the provided function to context-require
                            //		with respect to the particular layer being defined. This causes the plugin to hold all normal service
                            //		requests until all preloading is complete.
                            //
                            //		Notice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case
                            //		where the target locale has a single segment and a layer depends on a single bundle:
                            //
                            //		Without Preloads:
                            //
                            //		1. Layer loads root bundle.
                            //		2. bundle is demanded; plugin loads single localized bundle.
                            //
                            //		With Preloads:
                            //
                            //		1. Layer causes preloading of target bundle.
                            //		2. bundle is demanded; service is delayed until preloading complete; bundle is returned.
                            //
                            //		In each case a single transaction is required to load the target bundle. In cases where multiple bundles
                            //		are required and/or the locale has multiple segments, preloads still requires a single transaction whereas
                            //		the normal path requires an additional transaction for each additional bundle/locale-segment. However all
                            //		of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading
                            //		algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.

                            if (has("dojo-preload-i18n-Api")) {
                                var split = id.split("*"),
                                    preloadDemand = split[1] == "preload";
                                if (preloadDemand) {
                                    if (!cache[id]) {
                                        // use cache[id] to prevent multiple preloads of the same preload; this shouldn't happen, but
                                        // who knows what over-aggressive human optimizers may attempt
                                        cache[id] = 1;
                                        preloadL10n(split[2], json.parse(split[3]), 1, require);
                                    }
                                    // don't stall the loader!
                                    load(1);
                                }
                                if (preloadDemand || waitForPreloads(id, require, load)) {
                                    return;
                                }
                            }

                            var match = nlsRe.exec(id),
                                bundlePath = match[1] + "/",
                                bundleName = match[5] || match[4],
                                bundlePathAndName = bundlePath + bundleName,
                                localeSpecified = (match[5] && match[4]),
                                targetLocale = localeSpecified || dojo.locale,
                                loadTarget = bundlePathAndName + "/" + targetLocale,
                                loadList = localeSpecified ? [targetLocale] : getLocalesToLoad(targetLocale),
                                remaining = loadList.length,
                                finish = function() {
                                    if (!--remaining) {
                                        load(lang.delegate(cache[loadTarget]));
                                    }
                                };
                            array.forEach(loadList, function(locale) {
                                var target = bundlePathAndName + "/" + locale;
                                if (has("dojo-preload-i18n-Api")) {
                                    checkForLegacyModules(target);
                                }
                                if (!cache[target]) {
                                    doLoad(require, bundlePathAndName, bundlePath, bundleName, locale, finish);
                                } else {
                                    finish();
                                }
                            });
                        };

                    if (has("dojo-unit-tests")) {
                        var unitTests = thisModule.unitTests = [];
                    }

                    if (has("dojo-preload-i18n-Api") || 1) {
                        var normalizeLocale = thisModule.normalizeLocale = function(locale) {
                                var result = locale ? locale.toLowerCase() : dojo.locale;
                                return result == "root" ? "ROOT" : result;
                            },

                            isXd = function(mid, contextRequire) {
                                return (0 && 1) ?
                                    contextRequire.isXdUrl(require.toUrl(mid + ".js")) :
                                    true;
                            },

                            preloading = 0,

                            preloadWaitQueue = [],

                            preloadL10n = thisModule._preloadLocalizations = function( /*String*/ bundlePrefix, /*Array*/ localesGenerated, /*boolean?*/ guaranteedAmdFormat, /*function?*/ contextRequire) {
                                // summary:
                                //		Load available flattened resource bundles associated with a particular module for dojo/locale and all dojo/config.extraLocale (if any)
                                // description:
                                //		Only called by built layer files. The entire locale hierarchy is loaded. For example,
                                //		if locale=="ab-cd", then ROOT, "ab", and "ab-cd" are loaded. This is different than v1.6-
                                //		in that the v1.6- would only load ab-cd...which was *always* flattened.
                                //
                                //		If guaranteedAmdFormat is true, then the module can be loaded with require thereby circumventing the detection algorithm
                                //		and the extra possible extra transaction.

                                // If this function is called from legacy code, then guaranteedAmdFormat and contextRequire will be undefined. Since the function
                                // needs a require in order to resolve module ids, fall back to the context-require associated with this dojo/i18n module, which
                                // itself may have been mapped.
                                contextRequire = contextRequire || require;

                                function doRequire(mid, callback) {
                                    if (isXd(mid, contextRequire) || guaranteedAmdFormat) {
                                        contextRequire([mid], callback);
                                    } else {
                                        syncRequire([mid], callback, contextRequire);
                                    }
                                }

                                function forEachLocale(locale, func) {
                                    // given locale= "ab-cd-ef", calls func on "ab-cd-ef", "ab-cd", "ab", "ROOT"; stops calling the first time func returns truthy
                                    var parts = locale.split("-");
                                    while (parts.length) {
                                        if (func(parts.join("-"))) {
                                            return;
                                        }
                                        parts.pop();
                                    }
                                    func("ROOT");
                                }

                                function preload(locale) {
                                    locale = normalizeLocale(locale);
                                    forEachLocale(locale, function(loc) {
                                        if (array.indexOf(localesGenerated, loc) >= 0) {
                                            var mid = bundlePrefix.replace(/\./g, "/") + "_" + loc;
                                            preloading++;
                                            doRequire(mid, function(rollup) {
                                                for (var p in rollup) {
                                                    cache[require.toAbsMid(p) + "/" + loc] = rollup[p];
                                                }
                                                --preloading;
                                                while (!preloading && preloadWaitQueue.length) {
                                                    load.apply(null, preloadWaitQueue.shift());
                                                }
                                            });
                                            return true;
                                        }
                                        return false;
                                    });
                                }

                                preload();
                                array.forEach(dojo.config.extraLocale, preload);
                            },

                            waitForPreloads = function(id, require, load) {
                                if (preloading) {
                                    preloadWaitQueue.push([id, require, load]);
                                }
                                return preloading;
                            },

                            checkForLegacyModules = function() {};
                    }

                    if (1) {
                        // this code path assumes the dojo loader and won't work with a standard AMD loader
                        var amdValue = {},
                            evalBundle =
                            // use the function ctor to keep the minifiers away (also come close to global scope, but this is secondary)
                            new Function(
                                "__bundle", // the bundle to evalutate
                                "__checkForLegacyModules", // a function that checks if __bundle defined __mid in the global space
                                "__mid", // the mid that __bundle is intended to define
                                "__amdValue",

                                // returns one of:
                                //		1 => the bundle was an AMD bundle
                                //		a legacy bundle object that is the value of __mid
                                //		instance of Error => could not figure out how to evaluate bundle

                                // used to detect when __bundle calls define
                                "var define = function(mid, factory){define.called = 1; __amdValue.result = factory || mid;}," +
                                "	   require = function(){define.called = 1;};"

                                +
                                "try{" +
                                "define.called = 0;" +
                                "eval(__bundle);" +
                                "if(define.called==1)"
                                // bundle called define; therefore signal it's an AMD bundle
                                +
                                "return __amdValue;"

                                +
                                "if((__checkForLegacyModules = __checkForLegacyModules(__mid)))"
                                // bundle was probably a v1.6- built NLS flattened NLS bundle that defined __mid in the global space
                                +
                                "return __checkForLegacyModules;"

                                +
                                "}catch(e){}"
                                // evaulating the bundle was *neither* an AMD *nor* a legacy flattened bundle
                                // either way, re-eval *after* surrounding with parentheses

                                +
                                "try{" +
                                "return eval('('+__bundle+')');" +
                                "}catch(e){" +
                                "return e;" +
                                "}"
                            ),

                            syncRequire = function(deps, callback, require) {
                                var results = [];
                                array.forEach(deps, function(mid) {
                                    var url = require.toUrl(mid + ".js");

                                    function load(text) {
                                        var result = evalBundle(text, checkForLegacyModules, mid, amdValue);
                                        if (result === amdValue) {
                                            // the bundle was an AMD module; re-inject it through the normal AMD path
                                            // we gotta do this since it could be an anonymous module and simply evaluating
                                            // the text here won't provide the loader with the context to know what
                                            // module is being defined()'d. With browser caching, this should be free; further
                                            // this entire code path can be circumvented by using the AMD format to begin with
                                            results.push(cache[url] = amdValue.result);
                                        } else {
                                            if (result instanceof Error) {
                                                console.error("failed to evaluate i18n bundle; url=" + url, result);
                                                result = {};
                                            }
                                            // nls/<locale>/<bundle-name> indicates not the root.
                                            results.push(cache[url] = (/nls\/[^\/]+\/[^\/]+$/.test(url) ? result : {
                                                root: result,
                                                _v1x: 1
                                            }));
                                        }
                                    }

                                    if (cache[url]) {
                                        results.push(cache[url]);
                                    } else {
                                        var bundle = require.syncLoadNls(mid);
                                        // don't need to check for legacy since syncLoadNls returns a module if the module
                                        // (1) was already loaded, or (2) was in the cache. In case 1, if syncRequire is called
                                        // from getLocalization --> load, then load will have called checkForLegacyModules() before
                                        // calling syncRequire; if syncRequire is called from preloadLocalizations, then we
                                        // don't care about checkForLegacyModules() because that will be done when a particular
                                        // bundle is actually demanded. In case 2, checkForLegacyModules() is never relevant
                                        // because cached modules are always v1.7+ built modules.
                                        if (bundle) {
                                            results.push(bundle);
                                        } else {
                                            if (!xhr) {
                                                try {
                                                    require.getText(url, true, load);
                                                } catch (e) {
                                                    results.push(cache[url] = {});
                                                }
                                            } else {
                                                xhr.get({
                                                    url: url,
                                                    sync: true,
                                                    load: load,
                                                    error: function() {
                                                        results.push(cache[url] = {});
                                                    }
                                                });
                                            }
                                        }
                                    }
                                });
                                callback && callback.apply(null, results);
                            };

                        checkForLegacyModules = function(target) {
                            // legacy code may have already loaded [e.g] the raw bundle x/y/z at x.y.z; when true, push into the cache
                            for (var result, names = target.split("/"), object = dojo.global[names[0]], i = 1; object && i < names.length - 1; object = object[names[i++]]) {}
                            if (object) {
                                result = object[names[i]];
                                if (!result) {
                                    // fallback for incorrect bundle build of 1.6
                                    result = object[names[i].replace(/-/g, "_")];
                                }
                                if (result) {
                                    cache[target] = result;
                                }
                            }
                            return result;
                        };

                        thisModule.getLocalization = function(moduleName, bundleName, locale) {
                            var result,
                                l10nName = getBundleName(moduleName, bundleName, locale);
                            load(
                                l10nName,

                                // isXd() and syncRequire() need a context-require in order to resolve the mid with respect to a reference module.
                                // Since this legacy function does not have the concept of a reference module, resolve with respect to this
                                // dojo/i18n module, which, itself may have been mapped.
                                (!isXd(l10nName, require) ? function(deps, callback) {
                                    syncRequire(deps, callback, require);
                                } : require),

                                function(result_) {
                                    result = result_;
                                }
                            );
                            return result;
                        };

                        if (has("dojo-unit-tests")) {
                            unitTests.push(function(doh) {
                                doh.register("tests.i18n.unit", function(t) {
                                    var check;

                                    check = evalBundle("{prop:1}", checkForLegacyModules, "nonsense", amdValue);
                                    t.is({
                                        prop: 1
                                    }, check);
                                    t.is(undefined, check[1]);

                                    check = evalBundle("({prop:1})", checkForLegacyModules, "nonsense", amdValue);
                                    t.is({
                                        prop: 1
                                    }, check);
                                    t.is(undefined, check[1]);

                                    check = evalBundle("{'prop-x':1}", checkForLegacyModules, "nonsense", amdValue);
                                    t.is({
                                        'prop-x': 1
                                    }, check);
                                    t.is(undefined, check[1]);

                                    check = evalBundle("({'prop-x':1})", checkForLegacyModules, "nonsense", amdValue);
                                    t.is({
                                        'prop-x': 1
                                    }, check);
                                    t.is(undefined, check[1]);

                                    check = evalBundle("define({'prop-x':1})", checkForLegacyModules, "nonsense", amdValue);
                                    t.is(amdValue, check);
                                    t.is({
                                        'prop-x': 1
                                    }, amdValue.result);

                                    check = evalBundle("define('some/module', {'prop-x':1})", checkForLegacyModules, "nonsense", amdValue);
                                    t.is(amdValue, check);
                                    t.is({
                                        'prop-x': 1
                                    }, amdValue.result);

                                    check = evalBundle("this is total nonsense and should throw an error", checkForLegacyModules, "nonsense", amdValue);
                                    t.is(check instanceof Error, true);
                                });
                            });
                        }
                    }

                    return lang.mixin(thisModule, {
                        dynamic: true,
                        normalize: normalize,
                        load: load,
                        cache: cache
                    });
                });

        },
        'dijit/hccss': function() {
            define("dijit/hccss", ["dojo/dom-class", "dojo/hccss", "dojo/ready", "dojo/_base/window"], function(domClass, has, ready, win) {

                // module:
                //		dijit/hccss

                /*=====
                return function(){
                	// summary:
                	//		Test if computer is in high contrast mode, and sets `dijit_a11y` flag on `<body>` if it is.
                	//		Deprecated, use ``dojo/hccss`` instead.
                };
                =====*/

                // Priority is 90 to run ahead of parser priority of 100.   For 2.0, remove the ready() call and instead
                // change this module to depend on dojo/domReady!
                ready(90, function() {
                    if (has("highcontrast")) {
                        domClass.add(win.body(), "dijit_a11y");
                    }
                });

                return has;
            });

        },
        'hsbcwidget/randCharChal2': function() {
            define([
                "dojo/_base/declare",
                "dijit/_WidgetBase",
                "dijit/_TemplatedMixin",
                "dijit/_WidgetsInTemplateMixin",
                "dojo/query",
                "dojo/_base/array",
                "dojo/_base/lang",
                "dojo/dom-attr",
                "dojo/dom-class",
                "dojo/html",
                "dojo/text!hsbcwidget/themes/ursula/templates/randCharChal2.html",
                "dijit/focus",
                "dojo/on",
                "dojo/parser",
                "dojo/NodeList-traverse"
            ], function(declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, query, array, lang, domAttr, domClass, html, template, focusUtil, on, parser) {
                var rccvalid = "";

                function moveFocusToNext(e) {
                    var $this = query(e.currentTarget);
                    var key = (e.keyCode ? e.keyCode : e.which);

                    //if (key >= 48 && key <= 105){
                    if ((key >= 48 && key <= 111) || (key >= 186 && key <= 192) || (key >= 219 && key <= 222) || ((typeof dojo.isFF != 'undefined') && (key == 173))) {
                        var $nextNode = $this.nextAll('.active')[0];
                        if (typeof $nextNode === 'undefined') return;

                        focusUtil.focus($nextNode);
                    }
                }

                function validInput(value) {
                    //return /^[a-z0-9]+$/i.test(value);
                    if (allActiveInputs(rccvalid)[0].value == "" || allActiveInputs(rccvalid)[1].value == "" || allActiveInputs(rccvalid)[2].value == "") {
                        return false;
                    } else {
                        return true;
                    }
                }

                function allActiveInputs(inputs) {
                    return array.filter(inputs, function(input) {
                        return domClass.contains(input, "active");
                    });
                }

                function allValidInputs(inputs) {
                    return array.every(allActiveInputs(inputs), function(input) {
                        return validInput(input.value);
                    });
                }

                function hideInvalidMessage(hide) {
                    var invalidMessage = query('.jsInputWrapper .rValidationMsg', this.domNode)[0];
                    if (hide) {
                        domClass.add(invalidMessage, 'ValidationMsgHide');
                    } else {
                        domClass.remove(invalidMessage, 'ValidationMsgHide');
                    }
                }

                function allBlurred() {
                    var inputs = query('.jsInputWrapper input[type="password"]', this.domNode),
                        blurred = true;

                    array.forEach(allActiveInputs(inputs), function(input) {

                        if (!domClass.contains(input, 'blurred')) {
                            blurred = false;
                            return false;
                        }

                    });

                    return blurred;
                }
                return declare("hsbcwidget.CharacterChallenge", [_WidgetBase, _TemplatedMixin], {
                    RCC_TEXT_1: "",
                    RCC_TEXT_2: "",
                    RCC_TEXT_3: "",
                    RCC_TEXT_4: "",
                    RCC_TEXT_5: "",
                    RCC_TEXT_6: "",
                    RCC_TEXT_7: "",
                    RCC_TEXT_8: "",

                    templateString: template,
                    widgetsInTemplate: true,
                    chalNums: [],

                    isFocussed: false,
                    neutral: true,
                    valid: false,
                    validateAll: function(skipHideInvalidMessage) {
                        var inputs = query('.jsInputWrapper input[type="password"]', this.domNode);
                        rccvalid = inputs;
                        this.valid = allValidInputs(inputs);
                        this.neutral = false;

                        if (this.valid) {
                            array.forEach(allActiveInputs(inputs), function(input) {
                                domClass.remove(input, "SvalidationMsg");
                                domClass.add(input, "validInput");
                            });
                        } else {
                            array.forEach(allActiveInputs(inputs), function(input) {
                                domClass.add(input, "SvalidationMsg");
                                domClass.remove(input, "validInput");
                            });
                        }
                    },


                    hideInvalidMessage: hideInvalidMessage,

                    postCreate: function() {
                        this.inherited(arguments);
                        this.setLabel();
                        this.init();

                        parser.parse(this.domNode);
                    },
                    setLabel: function() {
                        var self = this,
                            $label = query('h4', self.domNode),
                            $items = query('span', $label[0]);

                        if ($items.length !== self.chalNums.length) {
                            throw new Error('randCharChalTest: number of spans in label does not match number of active challenge items.')
                        } else {
                            $items.forEach(dojo.hitch(this, function($span, index) {
                                var text = this.RCC_TEXT_1;
                                switch (self.chalNums[index]) {
                                    case 2:
                                        text = this.RCC_TEXT_2;
                                        break;
                                    case 3:
                                        text = this.RCC_TEXT_3;
                                        break;
                                    case 4:
                                        text = this.RCC_TEXT_4;
                                        break;
                                    case 5:
                                        text = this.RCC_TEXT_5;
                                        break;
                                    case 6:
                                        text = this.RCC_TEXT_6;
                                        break;
                                    case 7:
                                        text = this.RCC_TEXT_7;
                                        break;
                                    case 8:
                                        text = this.RCC_TEXT_8;
                                        break;
                                }
                                html.set($span, text);
                            }));
                        }
                    },
                    init: function() {
                        var self = this;
                        var inputs = query('.jsInputWrapper input[type="password"]', this.domNode);

                        /**
                        If an <input> receives focus and is invalid, show the Invalid Message tooltip.
                        If an <input> loses focus, validate and hide Invalid Message tooltip.
                        */
                        array.forEach(inputs, function(input) {
                            on(input, "focus", function(e) {
                                self.isFocussed = true;
                                hideInvalidMessage(self.neutral || self.valid);
                            });

                            on(input, "blur", function(e) {

                                domClass.add(input, 'blurred');

                                if (allBlurred()) {
                                    self.isFocussed = false;
                                    hideInvalidMessage(true);
                                    self.validateAll();
                                }

                            });
                        });

                        query("body").on("click", function(e) {
                            if (!e.target || !domClass.contains(e.target, "smallestInput")) {
                                hideInvalidMessage(true);
                            }
                        });

                        array.forEach(inputs, function($input, index) {
                            if (array.indexOf(self.chalNums, index + 1) !== -1) {
                                domAttr.remove($input, 'disabled');
                                domClass.add($input, 'active');

                                on($input, 'keyup', moveFocusToNext);
                            }
                        });
                    }
                });
            });
        },
        'dojo/_base/lang': function() {
            define("dojo/_base/lang", ["./kernel", "../has", "../sniff"], function(dojo, has) {
                // module:
                //		dojo/_base/lang

                0 && has.add("bug-for-in-skips-shadowed", function() {
                    // if true, the for-in iterator skips object properties that exist in Object's prototype (IE 6 - ?)
                    for (var i in {
                            toString: 1
                        }) {
                        return 0;
                    }
                    return 1;
                });

                // Helper methods
                var _extraNames =
                    0 ?
                    "hasOwnProperty.valueOf.isPrototypeOf.propertyIsEnumerable.toLocaleString.toString.constructor".split(".") : [],

                    _extraLen = _extraNames.length,

                    getProp = function( /*Array*/ parts, /*Boolean*/ create, /*Object*/ context) {
                        var p, i = 0,
                            dojoGlobal = dojo.global;
                        if (!context) {
                            if (!parts.length) {
                                return dojoGlobal;
                            } else {
                                p = parts[i++];
                                try {
                                    context = dojo.scopeMap[p] && dojo.scopeMap[p][1];
                                } catch (e) {}
                                context = context || (p in dojoGlobal ? dojoGlobal[p] : (create ? dojoGlobal[p] = {} : undefined));
                            }
                        }
                        while (context && (p = parts[i++])) {
                            context = (p in context ? context[p] : (create ? context[p] = {} : undefined));
                        }
                        return context; // mixed
                    },

                    opts = Object.prototype.toString,

                    efficient = function(obj, offset, startWith) {
                        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));
                    },

                    _pattern = /\{([^\}]+)\}/g;

                // Module export
                var lang = {
                    // summary:
                    //		This module defines Javascript language extensions.

                    // _extraNames: String[]
                    //		Lists property names that must be explicitly processed during for-in iteration
                    //		in environments that have  0  true.
                    _extraNames: _extraNames,

                    _mixin: function(dest, source, copyFunc) {
                        // summary:
                        //		Copies/adds all properties of source to dest; returns dest.
                        // dest: Object
                        //		The object to which to copy/add all properties contained in source.
                        // source: Object
                        //		The object from which to draw all properties to copy into dest.
                        // copyFunc: Function?
                        //		The process used to copy/add a property in source; defaults to the Javascript assignment operator.
                        // returns:
                        //		dest, as modified
                        // description:
                        //		All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions
                        //		found in Object.prototype, are copied/added to dest. Copying/adding each particular property is
                        //		delegated to copyFunc (if any); copyFunc defaults to the Javascript assignment operator if not provided.
                        //		Notice that by default, _mixin executes a so-called "shallow copy" and aggregate types are copied/added by reference.
                        var name, s, i, empty = {};
                        for (name in source) {
                            // the (!(name in empty) || empty[name] !== s) condition avoids copying properties in "source"
                            // inherited from Object.prototype.	 For example, if dest has a custom toString() method,
                            // don't overwrite it with the toString() method that source inherited from Object.prototype
                            s = source[name];
                            if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {
                                dest[name] = copyFunc ? copyFunc(s) : s;
                            }
                        }

                        if (0) {
                            if (source) {
                                for (i = 0; i < _extraLen; ++i) {
                                    name = _extraNames[i];
                                    s = source[name];
                                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {
                                        dest[name] = copyFunc ? copyFunc(s) : s;
                                    }
                                }
                            }
                        }

                        return dest; // Object
                    },

                    mixin: function(dest, sources) {
                        // summary:
                        //		Copies/adds all properties of one or more sources to dest; returns dest.
                        // dest: Object
                        //		The object to which to copy/add all properties contained in source. If dest is falsy, then
                        //		a new object is manufactured before copying/adding properties begins.
                        // sources: Object...
                        //		One of more objects from which to draw all properties to copy into dest. sources are processed
                        //		left-to-right and if more than one of these objects contain the same property name, the right-most
                        //		value "wins".
                        // returns: Object
                        //		dest, as modified
                        // description:
                        //		All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions
                        //		found in Object.prototype, are copied/added from sources to dest. sources are processed left to right.
                        //		The Javascript assignment operator is used to copy/add each property; therefore, by default, mixin
                        //		executes a so-called "shallow copy" and aggregate types are copied/added by reference.
                        // example:
                        //		make a shallow copy of an object
                        //	|	var copy = lang.mixin({}, source);
                        // example:
                        //		many class constructors often take an object which specifies
                        //		values to be configured on the object. In this case, it is
                        //		often simplest to call `lang.mixin` on the `this` object:
                        //	|	declare("acme.Base", null, {
                        //	|		constructor: function(properties){
                        //	|			// property configuration:
                        //	|			lang.mixin(this, properties);
                        //	|
                        //	|			console.log(this.quip);
                        //	|			//	...
                        //	|		},
                        //	|		quip: "I wasn't born yesterday, you know - I've seen movies.",
                        //	|		// ...
                        //	|	});
                        //	|
                        //	|	// create an instance of the class and configure it
                        //	|	var b = new acme.Base({quip: "That's what it does!" });
                        // example:
                        //		copy in properties from multiple objects
                        //	|	var flattened = lang.mixin(
                        //	|		{
                        //	|			name: "Frylock",
                        //	|			braces: true
                        //	|		},
                        //	|		{
                        //	|			name: "Carl Brutanananadilewski"
                        //	|		}
                        //	|	);
                        //	|
                        //	|	// will print "Carl Brutanananadilewski"
                        //	|	console.log(flattened.name);
                        //	|	// will print "true"
                        //	|	console.log(flattened.braces);

                        if (!dest) {
                            dest = {};
                        }
                        for (var i = 1, l = arguments.length; i < l; i++) {
                            lang._mixin(dest, arguments[i]);
                        }
                        return dest; // Object
                    },

                    setObject: function(name, value, context) {
                        // summary:
                        //		Set a property from a dot-separated string, such as "A.B.C"
                        // description:
                        //		Useful for longer api chains where you have to test each object in
                        //		the chain, or when you have an object reference in string format.
                        //		Objects are created as needed along `path`. Returns the passed
                        //		value if setting is successful or `undefined` if not.
                        // name: String
                        //		Path to a property, in the form "A.B.C".
                        // value: anything
                        //		value or object to place at location given by name
                        // context: Object?
                        //		Optional. Object to use as root of path. Defaults to
                        //		`dojo.global`.
                        // example:
                        //		set the value of `foo.bar.baz`, regardless of whether
                        //		intermediate objects already exist:
                        //	| lang.setObject("foo.bar.baz", value);
                        // example:
                        //		without `lang.setObject`, we often see code like this:
                        //	| // ensure that intermediate objects are available
                        //	| if(!obj["parent"]){ obj.parent = {}; }
                        //	| if(!obj.parent["child"]){ obj.parent.child = {}; }
                        //	| // now we can safely set the property
                        //	| obj.parent.child.prop = "some value";
                        //		whereas with `lang.setObject`, we can shorten that to:
                        //	| lang.setObject("parent.child.prop", "some value", obj);

                        var parts = name.split("."),
                            p = parts.pop(),
                            obj = getProp(parts, true, context);
                        return obj && p ? (obj[p] = value) : undefined; // Object
                    },

                    getObject: function(name, create, context) {
                        // summary:
                        //		Get a property from a dot-separated string, such as "A.B.C"
                        // description:
                        //		Useful for longer api chains where you have to test each object in
                        //		the chain, or when you have an object reference in string format.
                        // name: String
                        //		Path to an property, in the form "A.B.C".
                        // create: Boolean?
                        //		Optional. Defaults to `false`. If `true`, Objects will be
                        //		created at any point along the 'path' that is undefined.
                        // context: Object?
                        //		Optional. Object to use as root of path. Defaults to
                        //		'dojo.global'. Null may be passed.
                        return getProp(name.split("."), create, context); // Object
                    },

                    exists: function(name, obj) {
                        // summary:
                        //		determine if an object supports a given method
                        // description:
                        //		useful for longer api chains where you have to test each object in
                        //		the chain. Useful for object and method detection.
                        // name: String
                        //		Path to an object, in the form "A.B.C".
                        // obj: Object?
                        //		Object to use as root of path. Defaults to
                        //		'dojo.global'. Null may be passed.
                        // example:
                        //	| // define an object
                        //	| var foo = {
                        //	|		bar: { }
                        //	| };
                        //	|
                        //	| // search the global scope
                        //	| lang.exists("foo.bar"); // true
                        //	| lang.exists("foo.bar.baz"); // false
                        //	|
                        //	| // search from a particular scope
                        //	| lang.exists("bar", foo); // true
                        //	| lang.exists("bar.baz", foo); // false
                        return lang.getObject(name, false, obj) !== undefined; // Boolean
                    },

                    // Crockford (ish) functions

                    isString: function(it) {
                        // summary:
                        //		Return true if it is a String
                        // it: anything
                        //		Item to test.
                        return (typeof it == "string" || it instanceof String); // Boolean
                    },

                    isArray: function(it) {
                        // summary:
                        //		Return true if it is an Array.
                        //		Does not work on Arrays created in other windows.
                        // it: anything
                        //		Item to test.
                        return it && (it instanceof Array || typeof it == "array"); // Boolean
                    },

                    isFunction: function(it) {
                        // summary:
                        //		Return true if it is a Function
                        // it: anything
                        //		Item to test.
                        return opts.call(it) === "[object Function]";
                    },

                    isObject: function(it) {
                        // summary:
                        //		Returns true if it is a JavaScript object (or an Array, a Function
                        //		or null)
                        // it: anything
                        //		Item to test.
                        return it !== undefined &&
                            (it === null || typeof it == "object" || lang.isArray(it) || lang.isFunction(it)); // Boolean
                    },

                    isArrayLike: function(it) {
                        // summary:
                        //		similar to isArray() but more permissive
                        // it: anything
                        //		Item to test.
                        // returns:
                        //		If it walks like a duck and quacks like a duck, return `true`
                        // description:
                        //		Doesn't strongly test for "arrayness".  Instead, settles for "isn't
                        //		a string or number and has a length property". Arguments objects
                        //		and DOM collections will return true when passed to
                        //		isArrayLike(), but will return false when passed to
                        //		isArray().
                        return it && it !== undefined && // Boolean
                            // keep out built-in constructors (Number, String, ...) which have length
                            // properties
                            !lang.isString(it) && !lang.isFunction(it) &&
                            !(it.tagName && it.tagName.toLowerCase() == 'form') &&
                            (lang.isArray(it) || isFinite(it.length));
                    },

                    isAlien: function(it) {
                        // summary:
                        //		Returns true if it is a built-in function or some other kind of
                        //		oddball that *should* report as a function but doesn't
                        return it && !lang.isFunction(it) && /\{\s*\[native code\]\s*\}/.test(String(it)); // Boolean
                    },

                    extend: function(ctor, props) {
                        // summary:
                        //		Adds all properties and methods of props to constructor's
                        //		prototype, making them available to all instances created with
                        //		constructor.
                        // ctor: Object
                        //		Target constructor to extend.
                        // props: Object
                        //		One or more objects to mix into ctor.prototype
                        for (var i = 1, l = arguments.length; i < l; i++) {
                            lang._mixin(ctor.prototype, arguments[i]);
                        }
                        return ctor; // Object
                    },

                    _hitchArgs: function(scope, method) {
                        var pre = lang._toArray(arguments, 2);
                        var named = lang.isString(method);
                        return function() {
                            // arrayify arguments
                            var args = lang._toArray(arguments);
                            // locate our method
                            var f = named ? (scope || dojo.global)[method] : method;
                            // invoke with collected args
                            return f && f.apply(scope || this, pre.concat(args)); // mixed
                        }; // Function
                    },

                    hitch: function(scope, method) {
                        // summary:
                        //		Returns a function that will only ever execute in the a given scope.
                        //		This allows for easy use of object member functions
                        //		in callbacks and other places in which the "this" keyword may
                        //		otherwise not reference the expected scope.
                        //		Any number of default positional arguments may be passed as parameters
                        //		beyond "method".
                        //		Each of these values will be used to "placehold" (similar to curry)
                        //		for the hitched function.
                        // scope: Object
                        //		The scope to use when method executes. If method is a string,
                        //		scope is also the object containing method.
                        // method: Function|String...
                        //		A function to be hitched to scope, or the name of the method in
                        //		scope to be hitched.
                        // example:
                        //	|	lang.hitch(foo, "bar")();
                        //		runs foo.bar() in the scope of foo
                        // example:
                        //	|	lang.hitch(foo, myFunction);
                        //		returns a function that runs myFunction in the scope of foo
                        // example:
                        //		Expansion on the default positional arguments passed along from
                        //		hitch. Passed args are mixed first, additional args after.
                        //	|	var foo = { bar: function(a, b, c){ console.log(a, b, c); } };
                        //	|	var fn = lang.hitch(foo, "bar", 1, 2);
                        //	|	fn(3); // logs "1, 2, 3"
                        // example:
                        //	|	var foo = { bar: 2 };
                        //	|	lang.hitch(foo, function(){ this.bar = 10; })();
                        //		execute an anonymous function in scope of foo
                        if (arguments.length > 2) {
                            return lang._hitchArgs.apply(dojo, arguments); // Function
                        }
                        if (!method) {
                            method = scope;
                            scope = null;
                        }
                        if (lang.isString(method)) {
                            scope = scope || dojo.global;
                            if (!scope[method]) {
                                throw (['lang.hitch: scope["', method, '"] is null (scope="', scope, '")'].join(''));
                            }
                            return function() {
                                return scope[method].apply(scope, arguments || []);
                            }; // Function
                        }
                        return !scope ? method : function() {
                            return method.apply(scope, arguments || []);
                        }; // Function
                    },

                    delegate: (function() {
                        // boodman/crockford delegation w/ cornford optimization
                        function TMP() {}
                        return function(obj, props) {
                            TMP.prototype = obj;
                            var tmp = new TMP();
                            TMP.prototype = null;
                            if (props) {
                                lang._mixin(tmp, props);
                            }
                            return tmp; // Object
                        };
                    })(),
                    /*=====
                    delegate: function(obj, props){
                    	// summary:
                    	//		Returns a new object which "looks" to obj for properties which it
                    	//		does not have a value for. Optionally takes a bag of properties to
                    	//		seed the returned object with initially.
                    	// description:
                    	//		This is a small implementation of the Boodman/Crockford delegation
                    	//		pattern in JavaScript. An intermediate object constructor mediates
                    	//		the prototype chain for the returned object, using it to delegate
                    	//		down to obj for property lookup when object-local lookup fails.
                    	//		This can be thought of similarly to ES4's "wrap", save that it does
                    	//		not act on types but rather on pure objects.
                    	// obj: Object
                    	//		The object to delegate to for properties not found directly on the
                    	//		return object or in props.
                    	// props: Object...
                    	//		an object containing properties to assign to the returned object
                    	// returns:
                    	//		an Object of anonymous type
                    	// example:
                    	//	|	var foo = { bar: "baz" };
                    	//	|	var thinger = lang.delegate(foo, { thud: "xyzzy"});
                    	//	|	thinger.bar == "baz"; // delegated to foo
                    	//	|	foo.thud == undefined; // by definition
                    	//	|	thinger.thud == "xyzzy"; // mixed in from props
                    	//	|	foo.bar = "thonk";
                    	//	|	thinger.bar == "thonk"; // still delegated to foo's bar
                    },
                    =====*/

                    _toArray: has("ie") ?
                        (function() {
                            function slow(obj, offset, startWith) {
                                var arr = startWith || [];
                                for (var x = offset || 0; x < obj.length; x++) {
                                    arr.push(obj[x]);
                                }
                                return arr;
                            }
                            return function(obj) {
                                return ((obj.item) ? slow : efficient).apply(this, arguments);
                            };
                        })() : efficient,
                    /*=====
                     _toArray: function(obj, offset, startWith){
                    	 // summary:
                    	 //		Converts an array-like object (i.e. arguments, DOMCollection) to an
                    	 //		array. Returns a new Array with the elements of obj.
                    	 // obj: Object
                    	 //		the object to "arrayify". We expect the object to have, at a
                    	 //		minimum, a length property which corresponds to integer-indexed
                    	 //		properties.
                    	 // offset: Number?
                    	 //		the location in obj to start iterating from. Defaults to 0.
                    	 //		Optional.
                    	 // startWith: Array?
                    	 //		An array to pack with the properties of obj. If provided,
                    	 //		properties in obj are appended at the end of startWith and
                    	 //		startWith is the returned array.
                     },
                     =====*/

                    partial: function( /*Function|String*/ method /*, ...*/ ) {
                        // summary:
                        //		similar to hitch() except that the scope object is left to be
                        //		whatever the execution context eventually becomes.
                        // description:
                        //		Calling lang.partial is the functional equivalent of calling:
                        //		|	lang.hitch(null, funcName, ...);
                        // method:
                        //		The function to "wrap"
                        var arr = [null];
                        return lang.hitch.apply(dojo, arr.concat(lang._toArray(arguments))); // Function
                    },

                    clone: function( /*anything*/ src) {
                        // summary:
                        //		Clones objects (including DOM nodes) and all children.
                        //		Warning: do not clone cyclic structures.
                        // src:
                        //		The object to clone
                        if (!src || typeof src != "object" || lang.isFunction(src)) {
                            // null, undefined, any non-object, or function
                            return src; // anything
                        }
                        if (src.nodeType && "cloneNode" in src) {
                            // DOM Node
                            return src.cloneNode(true); // Node
                        }
                        if (src instanceof Date) {
                            // Date
                            return new Date(src.getTime()); // Date
                        }
                        if (src instanceof RegExp) {
                            // RegExp
                            return new RegExp(src); // RegExp
                        }
                        var r, i, l;
                        if (lang.isArray(src)) {
                            // array
                            r = [];
                            for (i = 0, l = src.length; i < l; ++i) {
                                if (i in src) {
                                    r.push(lang.clone(src[i]));
                                }
                            }
                            // we don't clone functions for performance reasons
                            //		}else if(d.isFunction(src)){
                            //			// function
                            //			r = function(){ return src.apply(this, arguments); };
                        } else {
                            // generic objects
                            r = src.constructor ? new src.constructor() : {};
                        }
                        return lang._mixin(r, src, lang.clone);
                    },


                    trim: String.prototype.trim ?
                        function(str) {
                            return str.trim();
                        } : function(str) {
                            return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
                        },
                    /*=====
                     trim: function(str){
                    	 // summary:
                    	 //		Trims whitespace from both sides of the string
                    	 // str: String
                    	 //		String to be trimmed
                    	 // returns: String
                    	 //		Returns the trimmed string
                    	 // description:
                    	 //		This version of trim() was selected for inclusion into the base due
                    	 //		to its compact size and relatively good performance
                    	 //		(see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript)
                    	 //		Uses String.prototype.trim instead, if available.
                    	 //		The fastest but longest version of this function is located at
                    	 //		lang.string.trim()
                     },
                     =====*/

                    replace: function(tmpl, map, pattern) {
                        // summary:
                        //		Performs parameterized substitutions on a string. Throws an
                        //		exception if any parameter is unmatched.
                        // tmpl: String
                        //		String to be used as a template.
                        // map: Object|Function
                        //		If an object, it is used as a dictionary to look up substitutions.
                        //		If a function, it is called for every substitution with following parameters:
                        //		a whole match, a name, an offset, and the whole template
                        //		string (see https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/replace
                        //		for more details).
                        // pattern: RegEx?
                        //		Optional regular expression objects that overrides the default pattern.
                        //		Must be global and match one item. The default is: /\{([^\}]+)\}/g,
                        //		which matches patterns like that: "{xxx}", where "xxx" is any sequence
                        //		of characters, which doesn't include "}".
                        // returns: String
                        //		Returns the substituted string.
                        // example:
                        //	|	// uses a dictionary for substitutions:
                        //	|	lang.replace("Hello, {name.first} {name.last} AKA {nick}!",
                        //	|		{
                        //	|			nick: "Bob",
                        //	|			name: {
                        //	|				first:	"Robert",
                        //	|				middle: "X",
                        //	|				last:		"Cringely"
                        //	|			}
                        //	|		});
                        //	|	// returns: Hello, Robert Cringely AKA Bob!
                        // example:
                        //	|	// uses an array for substitutions:
                        //	|	lang.replace("Hello, {0} {2}!",
                        //	|		["Robert", "X", "Cringely"]);
                        //	|	// returns: Hello, Robert Cringely!
                        // example:
                        //	|	// uses a function for substitutions:
                        //	|	function sum(a){
                        //	|		var t = 0;
                        //	|		arrayforEach(a, function(x){ t += x; });
                        //	|		return t;
                        //	|	}
                        //	|	lang.replace(
                        //	|		"{count} payments averaging {avg} USD per payment.",
                        //	|		lang.hitch(
                        //	|			{ payments: [11, 16, 12] },
                        //	|			function(_, key){
                        //	|				switch(key){
                        //	|					case "count": return this.payments.length;
                        //	|					case "min":		return Math.min.apply(Math, this.payments);
                        //	|					case "max":		return Math.max.apply(Math, this.payments);
                        //	|					case "sum":		return sum(this.payments);
                        //	|					case "avg":		return sum(this.payments) / this.payments.length;
                        //	|				}
                        //	|			}
                        //	|		)
                        //	|	);
                        //	|	// prints: 3 payments averaging 13 USD per payment.
                        // example:
                        //	|	// uses an alternative PHP-like pattern for substitutions:
                        //	|	lang.replace("Hello, ${0} ${2}!",
                        //	|		["Robert", "X", "Cringely"], /\$\{([^\}]+)\}/g);
                        //	|	// returns: Hello, Robert Cringely!

                        return tmpl.replace(pattern || _pattern, lang.isFunction(map) ?
                            map : function(_, k) {
                                return lang.getObject(k, false, map);
                            });
                    }
                };

                1 && lang.mixin(dojo, lang);

                return lang;
            });


        },
        'hsbcwidget/Locale': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dijit/registry",
                    "dojo/on",
                    "dojo/mouse",
                    "dojo/query",
                    "dojo/_base/lang",
                    "dijit/focus",
                    "dojo/dom",
                    "dojo/NodeList-traverse"
                ],
                function(declare, _WidgetBase, registry, on, mouse, query, lang, focusUtil, dom) {

                    return declare([_WidgetBase], {

                        startup: function() {
                            this.inherited(arguments);

                            var csWrapper = registry.byId('countrySelectorWrapper'),
                                csContent = registry.byId('countrySelectorContent');


                            on.once(csWrapper.domNode, 'dropDown.moved', function() {
                                csContent.renderTabs();
                            });

                            //Closing - Mouse
                            on(this.domNode, mouse.leave, function(e) {
                                csWrapper.close();
                            });

                            //Closing - Keyboard
                            var dropDownTriggerNode = query('.dropDownLink.trigger', this.domNode)[0],
                                focusHandler;

                            on(dropDownTriggerNode, 'focus', function(e) {
                                csWrapper.close();
                            });

                            on(csWrapper.domNode, 'dropdown-opening', function() {
                                focusHandler = focusUtil.watch('curNode', function(name, oldValue, newValue) {
                                    if (oldValue === null || newValue === null) {
                                        return;
                                    }

                                    if (!dom.isDescendant(newValue, csWrapper.domNode)) {
                                        csWrapper.close();
                                    }
                                });
                            });

                            on(csContent.domNode, 'dropdown-closed', function() {
                                if (focusHandler) {
                                    focusHandler.unwatch();
                                }
                            });



                        }
                    });

                }
            );
        },
        'url:dijit/layout/templates/AccordionButton.html': "<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n",
        'dijit/TitlePane': function() {
            require({
                cache: {
                    'url:dijit/templates/TitlePane.html': "<div>\n\t<div data-dojo-attach-event=\"onclick:_onTitleClick, onkeydown:_onTitleKey\"\n\t\t\tclass=\"dijitTitlePaneTitle\" data-dojo-attach-point=\"titleBarNode\" id=\"${id}_titleBarNode\">\n\t\t<div class=\"dijitTitlePaneTitleFocus\" data-dojo-attach-point=\"focusNode\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"arrowNode\" class=\"dijitArrowNode\" role=\"presentation\"\n\t\t\t/><span data-dojo-attach-point=\"arrowNodeInner\" class=\"dijitArrowNodeInner\"></span\n\t\t\t><span data-dojo-attach-point=\"titleNode\" class=\"dijitTitlePaneTextNode\"></span>\n\t\t</div>\n\t</div>\n\t<div class=\"dijitTitlePaneContentOuter\" data-dojo-attach-point=\"hideNode\" role=\"presentation\">\n\t\t<div class=\"dijitReset\" data-dojo-attach-point=\"wipeNode\" role=\"presentation\">\n\t\t\t<div class=\"dijitTitlePaneContentInner\" data-dojo-attach-point=\"containerNode\" role=\"region\" id=\"${id}_pane\" aria-labelledby=\"${id}_titleBarNode\">\n\t\t\t\t<!-- nested divs because wipeIn()/wipeOut() doesn't work right on node w/padding etc.  Put padding on inner div. -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n"
                }
            });
            define("dijit/TitlePane", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.setSelectable
                "dojo/dom-attr", // domAttr.set or get domAttr.remove
                "dojo/dom-class", // domClass.replace
                "dojo/dom-geometry", // domGeometry.setMarginBox domGeometry.getMarginBox
                "dojo/_base/event", // event.stop
                "dojo/fx", // fxUtils.wipeIn fxUtils.wipeOut
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/keys", // keys.DOWN_ARROW keys.ENTER
                "./_CssStateMixin",
                "./_TemplatedMixin",
                "./layout/ContentPane",
                "dojo/text!./templates/TitlePane.html",
                "./_base/manager" // defaultDuration
            ], function(array, declare, dom, domAttr, domClass, domGeometry, event, fxUtils, kernel, keys,
                _CssStateMixin, _TemplatedMixin, ContentPane, template, manager) {

                // module:
                //		dijit/TitlePane


                return declare("dijit.TitlePane", [ContentPane, _TemplatedMixin, _CssStateMixin], {
                    // summary:
                    //		A pane with a title on top, that can be expanded or collapsed.
                    //
                    // description:
                    //		An accessible container with a title Heading, and a content
                    //		section that slides open and closed. TitlePane is an extension to
                    //		`dijit/layout/ContentPane`, providing all the useful content-control aspects from it.
                    //
                    // example:
                    //	|	// load a TitlePane from remote file:
                    //	|	var foo = new dijit.TitlePane({ href: "foobar.html", title:"Title" });
                    //	|	foo.startup();
                    //
                    // example:
                    //	|	<!-- markup href example: -->
                    //	|	<div data-dojo-type="dijit/TitlePane" data-dojo-props="href: 'foobar.html', title: 'Title'"></div>
                    //
                    // example:
                    //	|	<!-- markup with inline data -->
                    //	|	<div data-dojo-type="dijit/TitlePane" title="Title">
                    //	|		<p>I am content</p>
                    //	|	</div>

                    // title: String
                    //		Title of the pane
                    title: "",
                    _setTitleAttr: {
                        node: "titleNode",
                        type: "innerHTML"
                    }, // override default where title becomes a hover tooltip

                    // open: Boolean
                    //		Whether pane is opened or closed.
                    open: true,

                    // toggleable: Boolean
                    //		Whether pane can be opened or closed by clicking the title bar.
                    toggleable: true,

                    // tabIndex: String
                    //		Tabindex setting for the title (so users can tab to the title then
                    //		use space/enter to open/close the title pane)
                    tabIndex: "0",

                    // duration: Integer
                    //		Time in milliseconds to fade in/fade out
                    duration: manager.defaultDuration,

                    // baseClass: [protected] String
                    //		The root className to be placed on this widget's domNode.
                    baseClass: "dijitTitlePane",

                    templateString: template,

                    // doLayout: [protected] Boolean
                    //		Don't change this parameter from the default value.
                    //		This ContentPane parameter doesn't make sense for TitlePane, since TitlePane
                    //		is never a child of a layout container, nor should TitlePane try to control
                    //		the size of an inner widget.
                    doLayout: false,

                    // Tooltip is defined in _WidgetBase but we need to handle the mapping to DOM here
                    _setTooltipAttr: {
                        node: "focusNode",
                        type: "attribute",
                        attribute: "title"
                    }, // focusNode spans the entire width, titleNode doesn't

                    buildRendering: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.titleNode, false);
                    },

                    postCreate: function() {
                        this.inherited(arguments);

                        // Hover and focus effect on title bar, except for non-toggleable TitlePanes
                        // This should really be controlled from _setToggleableAttr() but _CssStateMixin
                        // doesn't provide a way to disconnect a previous _trackMouseState() call
                        if (this.toggleable) {
                            this._trackMouseState(this.titleBarNode, "dijitTitlePaneTitle");
                        }

                        // setup open/close animations
                        var hideNode = this.hideNode,
                            wipeNode = this.wipeNode;
                        this._wipeIn = fxUtils.wipeIn({
                            node: wipeNode,
                            duration: this.duration,
                            beforeBegin: function() {
                                hideNode.style.display = "";
                            }
                        });
                        this._wipeOut = fxUtils.wipeOut({
                            node: wipeNode,
                            duration: this.duration,
                            onEnd: function() {
                                hideNode.style.display = "none";
                            }
                        });
                    },

                    _setOpenAttr: function( /*Boolean*/ open, /*Boolean*/ animate) {
                        // summary:
                        //		Hook to make set("open", boolean) control the open/closed state of the pane.
                        // open: Boolean
                        //		True if you want to open the pane, false if you want to close it.

                        array.forEach([this._wipeIn, this._wipeOut], function(animation) {
                            if (animation && animation.status() == "playing") {
                                animation.stop();
                            }
                        });

                        if (animate) {
                            var anim = this[open ? "_wipeIn" : "_wipeOut"];
                            anim.play();
                        } else {
                            this.hideNode.style.display = this.wipeNode.style.display = open ? "" : "none";
                        }

                        // load content (if this is the first time we are opening the TitlePane
                        // and content is specified as an href, or href was set when hidden)
                        if (this._started) {
                            if (open) {
                                this._onShow();
                            } else {
                                this.onHide();
                            }
                        }

                        this.containerNode.setAttribute("aria-hidden", open ? "false" : "true");
                        this.focusNode.setAttribute("aria-pressed", open ? "true" : "false");

                        this._set("open", open);

                        this._setCss();
                    },

                    _setToggleableAttr: function( /*Boolean*/ canToggle) {
                        // summary:
                        //		Hook to make set("toggleable", boolean) work.
                        // canToggle: Boolean
                        //		True to allow user to open/close pane by clicking title bar.

                        this.focusNode.setAttribute("role", canToggle ? "button" : "heading");
                        if (canToggle) {
                            this.focusNode.setAttribute("aria-controls", this.id + "_pane");
                            this.focusNode.setAttribute("tabIndex", this.tabIndex);
                            this.focusNode.setAttribute("aria-pressed", this.open);
                        } else {
                            domAttr.remove(this.focusNode, "aria-controls");
                            domAttr.remove(this.focusNode, "tabIndex");
                            domAttr.remove(this.focusNode, "aria-pressed");
                        }

                        this._set("toggleable", canToggle);

                        this._setCss();
                    },

                    _setContentAttr: function( /*String|DomNode|Nodelist*/ content) {
                        // summary:
                        //		Hook to make set("content", ...) work.
                        //		Typically called when an href is loaded.  Our job is to make the animation smooth.

                        if (!this.open || !this._wipeOut || this._wipeOut.status() == "playing") {
                            // we are currently *closing* the pane (or the pane is closed), so just let that continue
                            this.inherited(arguments);
                        } else {
                            if (this._wipeIn && this._wipeIn.status() == "playing") {
                                this._wipeIn.stop();
                            }

                            // freeze container at current height so that adding new content doesn't make it jump
                            domGeometry.setMarginBox(this.wipeNode, {
                                h: domGeometry.getMarginBox(this.wipeNode).h
                            });

                            // add the new content (erasing the old content, if any)
                            this.inherited(arguments);

                            // call _wipeIn.play() to animate from current height to new height
                            if (this._wipeIn) {
                                this._wipeIn.play();
                            } else {
                                this.hideNode.style.display = "";
                            }
                        }
                    },

                    toggle: function() {
                        // summary:
                        //		Switches between opened and closed state
                        // tags:
                        //		private

                        this._setOpenAttr(!this.open, true);
                    },

                    _setCss: function() {
                        // summary:
                        //		Set the open/close css state for the TitlePane
                        // tags:
                        //		private

                        var node = this.titleBarNode || this.focusNode;
                        var oldCls = this._titleBarClass;
                        this._titleBarClass = "dijit" + (this.toggleable ? "" : "Fixed") + (this.open ? "Open" : "Closed");
                        domClass.replace(node, this._titleBarClass, oldCls || "");

                        this.arrowNodeInner.innerHTML = this.open ? "-" : "+";
                    },

                    _onTitleKey: function( /*Event*/ e) {
                        // summary:
                        //		Handler for when user hits a key
                        // tags:
                        //		private

                        if (e.keyCode == keys.ENTER || e.keyCode == keys.SPACE) {
                            if (this.toggleable) {
                                this.toggle();
                                event.stop(e);
                            }
                        } else if (e.keyCode == keys.DOWN_ARROW && this.open) {
                            this.containerNode.focus();
                            e.preventDefault();
                        }
                    },

                    _onTitleClick: function() {
                        // summary:
                        //		Handler when user clicks the title bar
                        // tags:
                        //		private
                        if (this.toggleable) {
                            this.toggle();
                        }
                    },

                    setTitle: function( /*String*/ title) {
                        // summary:
                        //		Deprecated.  Use set('title', ...) instead.
                        // tags:
                        //		deprecated
                        kernel.deprecated("dijit.TitlePane.setTitle() is deprecated.  Use set('title', ...) instead.", "", "2.0");
                        this.set("title", title);
                    }
                });

            });

        },
        'dijit/form/_ComboBoxMenuMixin': function() {
            define("dijit/form/_ComboBoxMenuMixin", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/i18n", // i18n.getLocalization
                "dojo/i18n!./nls/ComboBox"
            ], function(array, declare, domAttr, i18n) {

                // module:
                //		dijit/form/_ComboBoxMenuMixin

                return declare("dijit.form._ComboBoxMenuMixin", null, {
                    // summary:
                    //		Focus-less menu for internal use in `dijit/form/ComboBox`
                    // tags:
                    //		private

                    // _messages: Object
                    //		Holds "next" and "previous" text for paging buttons on drop down
                    _messages: null,

                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this._messages = i18n.getLocalization("dijit.form", "ComboBox", this.lang);
                    },

                    buildRendering: function() {
                        this.inherited(arguments);

                        // fill in template with i18n messages
                        this.previousButton.innerHTML = this._messages["previousMessage"];
                        this.nextButton.innerHTML = this._messages["nextMessage"];
                    },

                    _setValueAttr: function( /*Object*/ value) {
                        this.value = value;
                        this.onChange(value);
                    },

                    onClick: function( /*DomNode*/ node) {
                        if (node == this.previousButton) {
                            this._setSelectedAttr(null);
                            this.onPage(-1);
                        } else if (node == this.nextButton) {
                            this._setSelectedAttr(null);
                            this.onPage(1);
                        } else {
                            this.onChange(node);
                        }
                    },

                    // stubs
                    onChange: function( /*Number*/ /*===== direction =====*/ ) {
                        // summary:
                        //		Notifies ComboBox/FilteringSelect that user selected an option.
                        // tags:
                        //		callback
                    },

                    onPage: function( /*Number*/ /*===== direction =====*/ ) {
                        // summary:
                        //		Notifies ComboBox/FilteringSelect that user clicked to advance to next/previous page.
                        // tags:
                        //		callback
                    },

                    onClose: function() {
                        // summary:
                        //		Callback from dijit.popup code to this widget, notifying it that it closed
                        // tags:
                        //		private
                        this._setSelectedAttr(null);
                    },

                    _createOption: function( /*Object*/ item, labelFunc) {
                        // summary:
                        //		Creates an option to appear on the popup menu subclassed by
                        //		`dijit/form/FilteringSelect`.

                        var menuitem = this._createMenuItem();
                        var labelObject = labelFunc(item);
                        if (labelObject.html) {
                            menuitem.innerHTML = labelObject.label;
                        } else {
                            menuitem.appendChild(
                                menuitem.ownerDocument.createTextNode(labelObject.label)
                            );
                        }
                        // #3250: in blank options, assign a normal height
                        if (menuitem.innerHTML == "") {
                            menuitem.innerHTML = "&#160;"; // &nbsp;
                        }

                        // update menuitem.dir if BidiSupport was required
                        this.applyTextDir(menuitem, (menuitem.innerText || menuitem.textContent || ""));

                        return menuitem;
                    },

                    createOptions: function(results, options, labelFunc) {
                        // summary:
                        //		Fills in the items in the drop down list
                        // results:
                        //		Array of items
                        // options:
                        //		The options to the query function of the store
                        //
                        // labelFunc:
                        //		Function to produce a label in the drop down list from a dojo.data item

                        this.items = results;

                        // display "Previous . . ." button
                        this.previousButton.style.display = (options.start == 0) ? "none" : "";
                        domAttr.set(this.previousButton, "id", this.id + "_prev");
                        // create options using _createOption function defined by parent
                        // ComboBox (or FilteringSelect) class
                        // #2309:
                        //		iterate over cache nondestructively
                        array.forEach(results, function(item, i) {
                            var menuitem = this._createOption(item, labelFunc);
                            menuitem.setAttribute("item", i); // index to this.items; use indirection to avoid mem leak
                            domAttr.set(menuitem, "id", this.id + i);
                            this.nextButton.parentNode.insertBefore(menuitem, this.nextButton);
                        }, this);
                        // display "Next . . ." button
                        var displayMore = false;
                        // Try to determine if we should show 'more'...
                        if (results.total && !results.total.then && results.total != -1) {
                            if ((options.start + options.count) < results.total) {
                                displayMore = true;
                            } else if ((options.start + options.count) > results.total && options.count == results.length) {
                                // Weird return from a data store, where a start + count > maxOptions
                                // implies maxOptions isn't really valid and we have to go into faking it.
                                // And more or less assume more if count == results.length
                                displayMore = true;
                            }
                        } else if (options.count == results.length) {
                            //Don't know the size, so we do the best we can based off count alone.
                            //So, if we have an exact match to count, assume more.
                            displayMore = true;
                        }

                        this.nextButton.style.display = displayMore ? "" : "none";
                        domAttr.set(this.nextButton, "id", this.id + "_next");
                    },

                    clearResultList: function() {
                        // summary:
                        //		Clears the entries in the drop down list, but of course keeps the previous and next buttons.
                        var container = this.containerNode;
                        while (container.childNodes.length > 2) {
                            container.removeChild(container.childNodes[container.childNodes.length - 2]);
                        }
                        this._setSelectedAttr(null);
                    },

                    highlightFirstOption: function() {
                        // summary:
                        //		Highlight the first real item in the list (not Previous Choices).
                        this.selectFirstNode();
                    },

                    highlightLastOption: function() {
                        // summary:
                        //		Highlight the last real item in the list (not More Choices).
                        this.selectLastNode();
                    },

                    selectFirstNode: function() {
                        this.inherited(arguments);
                        if (this.getHighlightedOption() == this.previousButton) {
                            this.selectNextNode();
                        }
                    },

                    selectLastNode: function() {
                        this.inherited(arguments);
                        if (this.getHighlightedOption() == this.nextButton) {
                            this.selectPreviousNode();
                        }
                    },

                    getHighlightedOption: function() {
                        return this.selected;
                    }
                });

            });

        },
        'dijit/form/_SearchMixin': function() {
            define("dijit/form/_SearchMixin", [
                "dojo/data/util/filter", // patternToRegExp
                "dojo/_base/declare", // declare
                "dojo/_base/event", // event.stop
                "dojo/keys", // keys
                "dojo/_base/lang", // lang.clone lang.hitch
                "dojo/query", // query
                "dojo/sniff", // has("ie")
                "dojo/string", // string.substitute
                "dojo/when",
                "../registry" // registry.byId
            ], function(filter, declare, event, keys, lang, query, has, string, when, registry) {

                // module:
                //		dijit/form/_SearchMixin


                return declare("dijit.form._SearchMixin", null, {
                    // summary:
                    //		A mixin that implements the base functionality to search a store based upon user-entered text such as
                    //		with `dijit/form/ComboBox` or `dijit/form/FilteringSelect`
                    // tags:
                    //		protected

                    // pageSize: Integer
                    //		Argument to data provider.
                    //		Specifies maximum number of search results to return per query
                    pageSize: Infinity,

                    // store: [const] dojo/store/api/Store
                    //		Reference to data provider object used by this ComboBox.
                    //		The store must accept an object hash of properties for its query. See `query` and `queryExpr` for details.
                    store: null,

                    // fetchProperties: Object
                    //		Mixin to the store's fetch.
                    //		For example, to set the sort order of the ComboBox menu, pass:
                    //	|	{ sort: [{attribute:"name",descending: true}] }
                    //		To override the default queryOptions so that deep=false, do:
                    //	|	{ queryOptions: {ignoreCase: true, deep: false} }
                    fetchProperties: {},

                    // query: Object
                    //		A query that can be passed to `store` to initially filter the items.
                    //		ComboBox overwrites any reference to the `searchAttr` and sets it to the `queryExpr` with the user's input substituted.
                    query: {},

                    // searchDelay: Integer
                    //		Delay in milliseconds between when user types something and we start
                    //		searching based on that value
                    searchDelay: 200,

                    // searchAttr: String
                    //		Search for items in the data store where this attribute (in the item)
                    //		matches what the user typed
                    searchAttr: "name",

                    // queryExpr: String
                    //		This specifies what query is sent to the data store,
                    //		based on what the user has typed.  Changing this expression will modify
                    //		whether the results are only exact matches, a "starting with" match,
                    //		etc.
                    //		dojo.data query expression pattern.
                    //		`${0}` will be substituted for the user text.
                    //		`*` is used for wildcards.
                    //		`${0}*` means "starts with", `*${0}*` means "contains", `${0}` means "is"
                    queryExpr: "${0}*",

                    // ignoreCase: Boolean
                    //		Set true if the query should ignore case when matching possible items
                    ignoreCase: true,

                    _abortQuery: function() {
                        // stop in-progress query
                        if (this.searchTimer) {
                            this.searchTimer = this.searchTimer.remove();
                        }
                        if (this._queryDeferHandle) {
                            this._queryDeferHandle = this._queryDeferHandle.remove();
                        }
                        if (this._fetchHandle) {
                            if (this._fetchHandle.abort) {
                                this._cancelingQuery = true;
                                this._fetchHandle.abort();
                                this._cancelingQuery = false;
                            }
                            if (this._fetchHandle.cancel) {
                                this._cancelingQuery = true;
                                this._fetchHandle.cancel();
                                this._cancelingQuery = false;
                            }
                            this._fetchHandle = null;
                        }
                    },

                    _processInput: function( /*Event*/ evt) {
                        // summary:
                        //		Handles input (keyboard/paste) events
                        if (this.disabled || this.readOnly) {
                            return;
                        }
                        var key = evt.charOrCode;

                        // except for cutting/pasting case - ctrl + x/v
                        if (evt.altKey || ((evt.ctrlKey || evt.metaKey) && (key != 'x' && key != 'v')) || key == keys.SHIFT) {
                            return; // throw out weird key combinations and spurious events
                        }

                        var doSearch = false;
                        this._prev_key_backspace = false;

                        switch (key) {
                            case keys.DELETE:
                            case keys.BACKSPACE:
                                this._prev_key_backspace = true;
                                this._maskValidSubsetError = true;
                                doSearch = true;
                                break;

                            default:
                                // Non char keys (F1-F12 etc..) shouldn't start a search..
                                // Ascii characters and IME input (Chinese, Japanese etc.) should.
                                //IME input produces keycode == 229.
                                doSearch = typeof key == 'string' || key == 229;
                        }
                        if (doSearch) {
                            // need to wait a tad before start search so that the event
                            // bubbles through DOM and we have value visible
                            if (!this.store) {
                                this.onSearch();
                            } else {
                                this.searchTimer = this.defer("_startSearchFromInput", 1);
                            }
                        }
                    },

                    onSearch: function( /*===== results, query, options =====*/ ) {
                        // summary:
                        //		Callback when a search completes.
                        //
                        // results: Object
                        //		An array of items from the originating _SearchMixin's store.
                        //
                        // query: Object
                        //		A copy of the originating _SearchMixin's query property.
                        //
                        // options: Object
                        //		The additional parameters sent to the originating _SearchMixin's store, including: start, count, queryOptions.
                        //
                        // tags:
                        //		callback
                    },

                    _startSearchFromInput: function() {
                        this._startSearch(this.focusNode.value.replace(/([\\\*\?])/g, "\\$1"));
                    },

                    _startSearch: function( /*String*/ text) {
                        // summary:
                        //		Starts a search for elements matching text (text=="" means to return all items),
                        //		and calls onSearch(...) when the search completes, to display the results.

                        this._abortQuery();
                        var
                            _this = this,
                            // Setup parameters to be passed to store.query().
                            // Create a new query to prevent accidentally querying for a hidden
                            // value from FilteringSelect's keyField
                            query = lang.clone(this.query), // #5970
                            options = {
                                start: 0,
                                count: this.pageSize,
                                queryOptions: { // remove for 2.0
                                    ignoreCase: this.ignoreCase,
                                    deep: true
                                }
                            },
                            qs = string.substitute(this.queryExpr, [text]),
                            q,
                            startQuery = function() {
                                var resPromise = _this._fetchHandle = _this.store.query(query, options);
                                if (_this.disabled || _this.readOnly || (q !== _this._lastQuery)) {
                                    return;
                                } // avoid getting unwanted notify
                                when(resPromise, function(res) {
                                    _this._fetchHandle = null;
                                    if (!_this.disabled && !_this.readOnly && (q === _this._lastQuery)) { // avoid getting unwanted notify
                                        when(resPromise.total, function(total) {
                                            res.total = total;
                                            var pageSize = _this.pageSize;
                                            if (isNaN(pageSize) || pageSize > res.total) {
                                                pageSize = res.total;
                                            }
                                            // Setup method to fetching the next page of results
                                            res.nextPage = function(direction) {
                                                //	tell callback the direction of the paging so the screen
                                                //	reader knows which menu option to shout
                                                options.direction = direction = direction !== false;
                                                options.count = pageSize;
                                                if (direction) {
                                                    options.start += res.length;
                                                    if (options.start >= res.total) {
                                                        options.count = 0;
                                                    }
                                                } else {
                                                    options.start -= pageSize;
                                                    if (options.start < 0) {
                                                        options.count = Math.max(pageSize + options.start, 0);
                                                        options.start = 0;
                                                    }
                                                }
                                                if (options.count <= 0) {
                                                    res.length = 0;
                                                    _this.onSearch(res, query, options);
                                                } else {
                                                    startQuery();
                                                }
                                            };
                                            _this.onSearch(res, query, options);
                                        });
                                    }
                                }, function(err) {
                                    _this._fetchHandle = null;
                                    if (!_this._cancelingQuery) { // don't treat canceled query as an error
                                        console.error(_this.declaredClass + ' ' + err.toString());
                                    }
                                });
                            };

                        lang.mixin(options, this.fetchProperties);

                        // Generate query
                        if (this.store._oldAPI) {
                            // remove this branch for 2.0
                            q = qs;
                        } else {
                            // Query on searchAttr is a regex for benefit of dojo/store/Memory,
                            // but with a toString() method to help dojo/store/JsonRest.
                            // Search string like "Co*" converted to regex like /^Co.*$/i.
                            q = filter.patternToRegExp(qs, this.ignoreCase);
                            q.toString = function() {
                                return qs;
                            };
                        }

                        // set _lastQuery, *then* start the timeout
                        // otherwise, if the user types and the last query returns before the timeout,
                        // _lastQuery won't be set and their input gets rewritten
                        this._lastQuery = query[this.searchAttr] = q;
                        this._queryDeferHandle = this.defer(startQuery, this.searchDelay);
                    },

                    //////////// INITIALIZATION METHODS ///////////////////////////////////////

                    constructor: function() {
                        this.query = {};
                        this.fetchProperties = {};
                    },

                    postMixInProperties: function() {
                        if (!this.store) {
                            var list = this.list;
                            if (list) {
                                this.store = registry.byId(list);
                            }
                        }
                        this.inherited(arguments);
                    }
                });
            });

        },
        'dojo/parser': function() {
            define(
                ["require", "./_base/kernel", "./_base/lang", "./_base/array", "./_base/config", "./_base/html", "./_base/window",
                    "./_base/url", "./_base/json", "./aspect", "./date/stamp", "./Deferred", "./has", "./query", "./on", "./ready"
                ],
                function(require, dojo, dlang, darray, config, dhtml, dwindow, _Url, djson, aspect, dates, Deferred, has, query, don, ready) {

                    // module:
                    //		dojo/parser

                    new Date("X"); // workaround for #11279, new Date("") == NaN


                    // Widgets like BorderContainer add properties to _Widget via dojo.extend().
                    // If BorderContainer is loaded after _Widget's parameter list has been cached,
                    // we need to refresh that parameter list (for _Widget and all widgets that extend _Widget).
                    var extendCnt = 0;
                    aspect.after(dlang, "extend", function() {
                        extendCnt++;
                    }, true);

                    function getNameMap(ctor) {
                        // summary:
                        //		Returns map from lowercase name to attribute name in class, ex: {onclick: "onClick"}
                        var map = ctor._nameCaseMap,
                            proto = ctor.prototype;

                        // Create the map if it's undefined.
                        // Refresh the map if a superclass was possibly extended with new methods since the map was created.
                        if (!map || map._extendCnt < extendCnt) {
                            map = ctor._nameCaseMap = {};
                            for (var name in proto) {
                                if (name.charAt(0) === "_") {
                                    continue;
                                } // skip internal properties
                                map[name.toLowerCase()] = name;
                            }
                            map._extendCnt = extendCnt;
                        }
                        return map;
                    }

                    // Map from widget name or list of widget names(ex: "dijit/form/Button,acme/MyMixin") to a constructor.
                    var _ctorMap = {};

                    function getCtor( /*String[]*/ types) {
                        // summary:
                        //		Retrieves a constructor.  If the types array contains more than one class/MID then the
                        //		subsequent classes will be mixed into the first class and a unique constructor will be
                        //		returned for that array.

                        var ts = types.join();
                        if (!_ctorMap[ts]) {
                            var mixins = [];
                            for (var i = 0, l = types.length; i < l; i++) {
                                var t = types[i];
                                // TODO: Consider swapping getObject and require in the future
                                mixins[mixins.length] = (_ctorMap[t] = _ctorMap[t] || (dlang.getObject(t) || (~t.indexOf('/') && require(t))));
                            }
                            var ctor = mixins.shift();
                            _ctorMap[ts] = mixins.length ? (ctor.createSubclass ? ctor.createSubclass(mixins) : ctor.extend.apply(ctor, mixins)) : ctor;
                        }

                        return _ctorMap[ts];
                    }

                    var parser = {
                        // summary:
                        //		The Dom/Widget parsing package

                        _clearCache: function() {
                            // summary:
                            //		Clear cached data.   Used mainly for benchmarking.
                            extendCnt++;
                            _ctorMap = {};
                        },

                        _functionFromScript: function(script, attrData) {
                            // summary:
                            //		Convert a `<script type="dojo/method" args="a, b, c"> ... </script>`
                            //		into a function
                            // script: DOMNode
                            //		The `<script>` DOMNode
                            // attrData: String
                            //		For HTML5 compliance, searches for attrData + "args" (typically
                            //		"data-dojo-args") instead of "args"
                            var preamble = "",
                                suffix = "",
                                argsStr = (script.getAttribute(attrData + "args") || script.getAttribute("args")),
                                withStr = script.getAttribute("with");

                            // Convert any arguments supplied in script tag into an array to be passed to the
                            var fnArgs = (argsStr || "").split(/\s*,\s*/);

                            if (withStr && withStr.length) {
                                darray.forEach(withStr.split(/\s*,\s*/), function(part) {
                                    preamble += "with(" + part + "){";
                                    suffix += "}";
                                });
                            }

                            return new Function(fnArgs, preamble + script.innerHTML + suffix);
                        },

                        instantiate: function(nodes, mixin, options) {
                            // summary:
                            //		Takes array of nodes, and turns them into class instances and
                            //		potentially calls a startup method to allow them to connect with
                            //		any children.
                            // nodes: Array
                            //		Array of DOM nodes
                            // mixin: Object?
                            //		An object that will be mixed in with each node in the array.
                            //		Values in the mixin will override values in the node, if they
                            //		exist.
                            // options: Object?
                            //		An object used to hold kwArgs for instantiation.
                            //		See parse.options argument for details.

                            mixin = mixin || {};
                            options = options || {};

                            var dojoType = (options.scope || dojo._scopeName) + "Type", // typically "dojoType"
                                attrData = "data-" + (options.scope || dojo._scopeName) + "-", // typically "data-dojo-"
                                dataDojoType = attrData + "type", // typically "data-dojo-type"
                                dataDojoMixins = attrData + "mixins"; // typically "data-dojo-mixins"

                            var list = [];
                            darray.forEach(nodes, function(node) {
                                var type = dojoType in mixin ? mixin[dojoType] : node.getAttribute(dataDojoType) || node.getAttribute(dojoType);
                                if (type) {
                                    var mixinsValue = node.getAttribute(dataDojoMixins),
                                        types = mixinsValue ? [type].concat(mixinsValue.split(/\s*,\s*/)) : [type];

                                    list.push({
                                        node: node,
                                        types: types
                                    });
                                }
                            });

                            // Instantiate the nodes and return the objects
                            return this._instantiate(list, mixin, options);
                        },

                        _instantiate: function(nodes, mixin, options) {
                            // summary:
                            //		Takes array of objects representing nodes, and turns them into class instances and
                            //		potentially calls a startup method to allow them to connect with
                            //		any children.
                            // nodes: Array
                            //		Array of objects like
                            //	|		{
                            //	|			ctor: Function (may be null)
                            //	|			types: ["dijit/form/Button", "acme/MyMixin"] (used if ctor not specified)
                            //	|			node: DOMNode,
                            //	|			scripts: [ ... ],	// array of <script type="dojo/..."> children of node
                            //	|			inherited: { ... }	// settings inherited from ancestors like dir, theme, etc.
                            //	|		}
                            // mixin: Object
                            //		An object that will be mixed in with each node in the array.
                            //		Values in the mixin will override values in the node, if they
                            //		exist.
                            // options: Object
                            //		An options object used to hold kwArgs for instantiation.
                            //		See parse.options argument for details.

                            // Call widget constructors
                            var thelist = darray.map(nodes, function(obj) {
                                var ctor = obj.ctor || getCtor(obj.types);
                                // If we still haven't resolved a ctor, it is fatal now
                                if (!ctor) {
                                    throw new Error("Unable to resolve constructor for: '" + obj.types.join() + "'");
                                }
                                return this.construct(ctor, obj.node, mixin, options, obj.scripts, obj.inherited);
                            }, this);

                            // Call startup on each top level instance if it makes sense (as for
                            // widgets).  Parent widgets will recursively call startup on their
                            // (non-top level) children
                            if (!mixin._started && !options.noStart) {
                                darray.forEach(thelist, function(instance) {
                                    if (typeof instance.startup === "function" && !instance._started) {
                                        instance.startup();
                                    }
                                });
                            }

                            return thelist;
                        },

                        construct: function(ctor, node, mixin, options, scripts, inherited) {
                            // summary:
                            //		Calls new ctor(params, node), where params is the hash of parameters specified on the node,
                            //		excluding data-dojo-type and data-dojo-mixins.   Does not call startup().   Returns the widget.
                            // ctor: Function
                            //		Widget constructor.
                            // node: DOMNode
                            //		This node will be replaced/attached to by the widget.  It also specifies the arguments to pass to ctor.
                            // mixin: Object?
                            //		Attributes in this object will be passed as parameters to ctor,
                            //		overriding attributes specified on the node.
                            // options: Object?
                            //		An options object used to hold kwArgs for instantiation.   See parse.options argument for details.
                            // scripts: DomNode[]?
                            //		Array of `<script type="dojo/*">` DOMNodes.  If not specified, will search for `<script>` tags inside node.
                            // inherited: Object?
                            //		Settings from dir=rtl or lang=... on a node above this node.   Overrides options.inherited.

                            var proto = ctor && ctor.prototype;
                            options = options || {};

                            // Setup hash to hold parameter settings for this widget.	Start with the parameter
                            // settings inherited from ancestors ("dir" and "lang").
                            // Inherited setting may later be overridden by explicit settings on node itself.
                            var params = {};

                            if (options.defaults) {
                                // settings for the document itself (or whatever subtree is being parsed)
                                dlang.mixin(params, options.defaults);
                            }
                            if (inherited) {
                                // settings from dir=rtl or lang=... on a node above this node
                                dlang.mixin(params, inherited);
                            }

                            // Get list of attributes explicitly listed in the markup
                            var attributes;
                            if (has("dom-attributes-explicit")) {
                                // Standard path to get list of user specified attributes
                                attributes = node.attributes;
                            } else if (has("dom-attributes-specified-flag")) {
                                // Special processing needed for IE8, to skip a few faux values in attributes[]
                                attributes = darray.filter(node.attributes, function(a) {
                                    return a.specified;
                                });
                            } else {
                                // Special path for IE6-7, avoid (sometimes >100) bogus entries in node.attributes
                                var clone = /^input$|^img$/i.test(node.nodeName) ? node : node.cloneNode(false),
                                    attrs = clone.outerHTML.replace(/=[^\s"']+|="[^"]*"|='[^']*'/g, "").replace(/^\s*<[a-zA-Z0-9]*\s*/, "").replace(/\s*>.*$/, "");

                                attributes = darray.map(attrs.split(/\s+/), function(name) {
                                    var lcName = name.toLowerCase();
                                    return {
                                        name: name,
                                        // getAttribute() doesn't work for button.value, returns innerHTML of button.
                                        // but getAttributeNode().value doesn't work for the form.encType or li.value
                                        value: (node.nodeName == "LI" && name == "value") || lcName == "enctype" ?
                                            node.getAttribute(lcName) : node.getAttributeNode(lcName).value
                                    };
                                });
                            }

                            // Hash to convert scoped attribute name (ex: data-dojo17-params) to something friendly (ex: data-dojo-params)
                            // TODO: remove scope for 2.0
                            var scope = options.scope || dojo._scopeName,
                                attrData = "data-" + scope + "-", // typically "data-dojo-"
                                hash = {};
                            if (scope !== "dojo") {
                                hash[attrData + "props"] = "data-dojo-props";
                                hash[attrData + "type"] = "data-dojo-type";
                                hash[attrData + "mixins"] = "data-dojo-mixins";
                                hash[scope + "type"] = "dojoType";
                                hash[attrData + "id"] = "data-dojo-id";
                            }

                            // Read in attributes and process them, including data-dojo-props, data-dojo-type,
                            // dojoAttachPoint, etc., as well as normal foo=bar attributes.
                            var i = 0,
                                item, funcAttrs = [],
                                jsname, extra;
                            while (item = attributes[i++]) {
                                var name = item.name,
                                    lcName = name.toLowerCase(),
                                    value = item.value;

                                switch (hash[lcName] || lcName) {
                                    // Already processed, just ignore
                                    case "data-dojo-type":
                                    case "dojotype":
                                    case "data-dojo-mixins":
                                        break;

                                        // Data-dojo-props.   Save for later to make sure it overrides direct foo=bar settings
                                    case "data-dojo-props":
                                        extra = value;
                                        break;

                                        // data-dojo-id or jsId. TODO: drop jsId in 2.0
                                    case "data-dojo-id":
                                    case "jsid":
                                        jsname = value;
                                        break;

                                        // For the benefit of _Templated
                                    case "data-dojo-attach-point":
                                    case "dojoattachpoint":
                                        params.dojoAttachPoint = value;
                                        break;
                                    case "data-dojo-attach-event":
                                    case "dojoattachevent":
                                        params.dojoAttachEvent = value;
                                        break;

                                        // Special parameter handling needed for IE
                                    case "class":
                                        params["class"] = node.className;
                                        break;
                                    case "style":
                                        params["style"] = node.style && node.style.cssText;
                                        break;
                                    default:
                                        // Normal attribute, ex: value="123"

                                        // Find attribute in widget corresponding to specified name.
                                        // May involve case conversion, ex: onclick --> onClick
                                        if (!(name in proto)) {
                                            var map = getNameMap(ctor);
                                            name = map[lcName] || name;
                                        }

                                        // Set params[name] to value, doing type conversion
                                        if (name in proto) {
                                            switch (typeof proto[name]) {
                                                case "string":
                                                    params[name] = value;
                                                    break;
                                                case "number":
                                                    params[name] = value.length ? Number(value) : NaN;
                                                    break;
                                                case "boolean":
                                                    // for checked/disabled value might be "" or "checked".	 interpret as true.
                                                    params[name] = value.toLowerCase() != "false";
                                                    break;
                                                case "function":
                                                    if (value === "" || value.search(/[^\w\.]+/i) != -1) {
                                                        // The user has specified some text for a function like "return x+5"
                                                        params[name] = new Function(value);
                                                    } else {
                                                        // The user has specified the name of a global function like "myOnClick"
                                                        // or a single word function "return"
                                                        params[name] = dlang.getObject(value, false) || new Function(value);
                                                    }
                                                    funcAttrs.push(name); // prevent "double connect", see #15026
                                                    break;
                                                default:
                                                    var pVal = proto[name];
                                                    params[name] =
                                                        (pVal && "length" in pVal) ? (value ? value.split(/\s*,\s*/) : []) : // array
                                                        (pVal instanceof Date) ?
                                                        (value == "" ? new Date("") : // the NaN of dates
                                                            value == "now" ? new Date() : // current date
                                                            dates.fromISOString(value)) :
                                                        (pVal instanceof _Url) ? (dojo.baseUrl + value) :
                                                        djson.fromJson(value);
                                            }
                                        } else {
                                            params[name] = value;
                                        }
                                }
                            }

                            // Remove function attributes from DOMNode to prevent "double connect" problem, see #15026.
                            // Do this as a separate loop since attributes[] is often a live collection (depends on the browser though).
                            for (var j = 0; j < funcAttrs.length; j++) {
                                var lcfname = funcAttrs[j].toLowerCase();
                                node.removeAttribute(lcfname);
                                node[lcfname] = null;
                            }

                            // Mix things found in data-dojo-props into the params, overriding any direct settings
                            if (extra) {
                                try {
                                    extra = djson.fromJson.call(options.propsThis, "{" + extra + "}");
                                    dlang.mixin(params, extra);
                                } catch (e) {
                                    // give the user a pointer to their invalid parameters. FIXME: can we kill this in production?
                                    throw new Error(e.toString() + " in data-dojo-props='" + extra + "'");
                                }
                            }

                            // Any parameters specified in "mixin" override everything else.
                            dlang.mixin(params, mixin);

                            // Get <script> nodes associated with this widget, if they weren't specified explicitly
                            if (!scripts) {
                                scripts = (ctor && (ctor._noScript || proto._noScript) ? [] : query("> script[type^='dojo/']", node));
                            }

                            // Process <script type="dojo/*"> script tags
                            // <script type="dojo/method" event="foo"> tags are added to params, and passed to
                            // the widget on instantiation.
                            // <script type="dojo/method"> tags (with no event) are executed after instantiation
                            // <script type="dojo/connect" data-dojo-event="foo"> tags are dojo.connected after instantiation
                            // <script type="dojo/watch" data-dojo-prop="foo"> tags are dojo.watch after instantiation
                            // <script type="dojo/on" data-dojo-event="foo"> tags are dojo.on after instantiation
                            // note: dojo/* script tags cannot exist in self closing widgets, like <input />
                            var aspects = [], // aspects to connect after instantiation
                                calls = [], // functions to call after instantiation
                                watches = [], // functions to watch after instantiation
                                ons = []; // functions to on after instantiation

                            if (scripts) {
                                for (i = 0; i < scripts.length; i++) {
                                    var script = scripts[i];
                                    node.removeChild(script);
                                    // FIXME: drop event="" support in 2.0. use data-dojo-event="" instead
                                    var event = (script.getAttribute(attrData + "event") || script.getAttribute("event")),
                                        prop = script.getAttribute(attrData + "prop"),
                                        method = script.getAttribute(attrData + "method"),
                                        advice = script.getAttribute(attrData + "advice"),
                                        scriptType = script.getAttribute("type"),
                                        nf = this._functionFromScript(script, attrData);
                                    if (event) {
                                        if (scriptType == "dojo/connect") {
                                            aspects.push({
                                                method: event,
                                                func: nf
                                            });
                                        } else if (scriptType == "dojo/on") {
                                            ons.push({
                                                event: event,
                                                func: nf
                                            });
                                        } else {
                                            params[event] = nf;
                                        }
                                    } else if (scriptType == "dojo/aspect") {
                                        aspects.push({
                                            method: method,
                                            advice: advice,
                                            func: nf
                                        });
                                    } else if (scriptType == "dojo/watch") {
                                        watches.push({
                                            prop: prop,
                                            func: nf
                                        });
                                    } else {
                                        calls.push(nf);
                                    }
                                }
                            }

                            // create the instance
                            var markupFactory = ctor.markupFactory || proto.markupFactory;
                            var instance = markupFactory ? markupFactory(params, node, ctor) : new ctor(params, node);

                            // map it to the JS namespace if that makes sense
                            if (jsname) {
                                dlang.setObject(jsname, instance);
                            }

                            // process connections and startup functions
                            for (i = 0; i < aspects.length; i++) {
                                aspect[aspects[i].advice || "after"](instance, aspects[i].method, dlang.hitch(instance, aspects[i].func), true);
                            }
                            for (i = 0; i < calls.length; i++) {
                                calls[i].call(instance);
                            }
                            for (i = 0; i < watches.length; i++) {
                                instance.watch(watches[i].prop, watches[i].func);
                            }
                            for (i = 0; i < ons.length; i++) {
                                don(instance, ons[i].event, ons[i].func);
                            }

                            return instance;
                        },

                        scan: function(root, options) {
                            // summary:
                            //		Scan a DOM tree and return an array of objects representing the DOMNodes
                            //		that need to be turned into widgets.
                            // description:
                            //		Search specified node (or document root node) recursively for class instances
                            //		and return an array of objects that represent potential widgets to be
                            //		instantiated. Searches for either data-dojo-type="MID" or dojoType="MID" where
                            //		"MID" is a module ID like "dijit/form/Button" or a fully qualified Class name
                            //		like "dijit/form/Button".  If the MID is not currently available, scan will
                            //		attempt to require() in the module.
                            //
                            //		See parser.parse() for details of markup.
                            // root: DomNode?
                            //		A default starting root node from which to start the parsing. Can be
                            //		omitted, defaulting to the entire document. If omitted, the `options`
                            //		object can be passed in this place. If the `options` object has a
                            //		`rootNode` member, that is used.
                            // options: Object
                            //		a kwArgs options object, see parse() for details
                            //
                            // returns: Promise
                            //		A promise that is resolved with the nodes that have been parsed.

                            var list = [], // Output List
                                mids = [], // An array of modules that are not yet loaded
                                midsHash = {}; // Used to keep the mids array unique

                            var dojoType = (options.scope || dojo._scopeName) + "Type", // typically "dojoType"
                                attrData = "data-" + (options.scope || dojo._scopeName) + "-", // typically "data-dojo-"
                                dataDojoType = attrData + "type", // typically "data-dojo-type"
                                dataDojoTextDir = attrData + "textdir", // typically "data-dojo-textdir"
                                dataDojoMixins = attrData + "mixins"; // typically "data-dojo-mixins"

                            // Info on DOMNode currently being processed
                            var node = root.firstChild;

                            // Info on parent of DOMNode currently being processed
                            //	- inherited: dir, lang, and textDir setting of parent, or inherited by parent
                            //	- parent: pointer to identical structure for my parent (or null if no parent)
                            //	- scripts: if specified, collects <script type="dojo/..."> type nodes from children
                            var inherited = options.inherited;
                            if (!inherited) {
                                function findAncestorAttr(node, attr) {
                                    return (node.getAttribute && node.getAttribute(attr)) ||
                                        (node.parentNode && findAncestorAttr(node.parentNode, attr));
                                }
                                inherited = {
                                    dir: findAncestorAttr(root, "dir"),
                                    lang: findAncestorAttr(root, "lang"),
                                    textDir: findAncestorAttr(root, dataDojoTextDir)
                                };
                                for (var key in inherited) {
                                    if (!inherited[key]) {
                                        delete inherited[key];
                                    }
                                }
                            }

                            // Metadata about parent node
                            var parent = {
                                inherited: inherited
                            };

                            // For collecting <script type="dojo/..."> type nodes (when null, we don't need to collect)
                            var scripts;

                            // when true, only look for <script type="dojo/..."> tags, and don't recurse to children
                            var scriptsOnly;

                            function getEffective(parent) {
                                // summary:
                                //		Get effective dir, lang, textDir settings for specified obj
                                //		(matching "parent" object structure above), and do caching.
                                //		Take care not to return null entries.
                                if (!parent.inherited) {
                                    parent.inherited = {};
                                    var node = parent.node,
                                        grandparent = getEffective(parent.parent);
                                    var inherited = {
                                        dir: node.getAttribute("dir") || grandparent.dir,
                                        lang: node.getAttribute("lang") || grandparent.lang,
                                        textDir: node.getAttribute(dataDojoTextDir) || grandparent.textDir
                                    };
                                    for (var key in inherited) {
                                        if (inherited[key]) {
                                            parent.inherited[key] = inherited[key];
                                        }
                                    }
                                }
                                return parent.inherited;
                            }

                            // DFS on DOM tree, collecting nodes with data-dojo-type specified.
                            while (true) {
                                if (!node) {
                                    // Finished this level, continue to parent's next sibling
                                    if (!parent || !parent.node) {
                                        break;
                                    }
                                    node = parent.node.nextSibling;
                                    scriptsOnly = false;
                                    parent = parent.parent;
                                    scripts = parent.scripts;
                                    continue;
                                }

                                if (node.nodeType != 1) {
                                    // Text or comment node, skip to next sibling
                                    node = node.nextSibling;
                                    continue;
                                }

                                if (scripts && node.nodeName.toLowerCase() == "script") {
                                    // Save <script type="dojo/..."> for parent, then continue to next sibling
                                    type = node.getAttribute("type");
                                    if (type && /^dojo\/\w/i.test(type)) {
                                        scripts.push(node);
                                    }
                                    node = node.nextSibling;
                                    continue;
                                }
                                if (scriptsOnly) {
                                    // scriptsOnly flag is set, we have already collected scripts if the parent wants them, so now we shouldn't
                                    // continue further analysis of the node and will continue to the next sibling
                                    node = node.nextSibling;
                                    continue;
                                }

                                // Check for data-dojo-type attribute, fallback to backward compatible dojoType
                                // TODO: Remove dojoType in 2.0
                                var type = node.getAttribute(dataDojoType) || node.getAttribute(dojoType);

                                // Short circuit for leaf nodes containing nothing [but text]
                                var firstChild = node.firstChild;
                                if (!type && (!firstChild || (firstChild.nodeType == 3 && !firstChild.nextSibling))) {
                                    node = node.nextSibling;
                                    continue;
                                }

                                // Meta data about current node
                                var current;

                                var ctor = null;
                                if (type) {
                                    // If dojoType/data-dojo-type specified, add to output array of nodes to instantiate.
                                    var mixinsValue = node.getAttribute(dataDojoMixins),
                                        types = mixinsValue ? [type].concat(mixinsValue.split(/\s*,\s*/)) : [type];

                                    // Note: won't find classes declared via dojo/Declaration or any modules that haven't been
                                    // loaded yet so use try/catch to avoid throw from require()
                                    try {
                                        ctor = getCtor(types);
                                    } catch (e) {}

                                    // If the constructor was not found, check to see if it has modules that can be loaded
                                    if (!ctor) {
                                        darray.forEach(types, function(t) {
                                            if (~t.indexOf('/') && !midsHash[t]) {
                                                // If the type looks like a MID and it currently isn't in the array of MIDs to load, add it.
                                                midsHash[t] = true;
                                                mids[mids.length] = t;
                                            }
                                        });
                                    }

                                    var childScripts = ctor && !ctor.prototype._noScript ? [] : null; // <script> nodes that are parent's children

                                    // Setup meta data about this widget node, and save it to list of nodes to instantiate
                                    current = {
                                        types: types,
                                        ctor: ctor,
                                        parent: parent,
                                        node: node,
                                        scripts: childScripts
                                    };
                                    current.inherited = getEffective(current); // dir & lang settings for current node, explicit or inherited
                                    list.push(current);
                                } else {
                                    // Meta data about this non-widget node
                                    current = {
                                        node: node,
                                        scripts: scripts,
                                        parent: parent
                                    };
                                }

                                // Recurse, collecting <script type="dojo/..."> children, and also looking for
                                // descendant nodes with dojoType specified (unless the widget has the stopParser flag).
                                // When finished with children, go to my next sibling.
                                node = firstChild;
                                scripts = childScripts;
                                scriptsOnly = ctor && ctor.prototype.stopParser && !(options.template);
                                parent = current;
                            }

                            var d = new Deferred();

                            // If there are modules to load then require them in
                            if (mids.length) {
                                // Warn that there are modules being auto-required
                                if (0) {
                                    console.warn("WARNING: Modules being Auto-Required: " + mids.join(", "));
                                }
                                require(mids, function() {
                                    // Go through list of widget nodes, filling in missing constructors, and filtering out nodes that shouldn't
                                    // be instantiated due to a stopParser flag on an ancestor that we belatedly learned about due to
                                    // auto-require of a module like ContentPane.   Assumes list is in DFS order.
                                    d.resolve(darray.filter(list, function(widget) {
                                        if (!widget.ctor) {
                                            // Attempt to find the constructor again.   Still won't find classes defined via
                                            // dijit/Declaration so need to try/catch.
                                            try {
                                                widget.ctor = getCtor(widget.types);
                                            } catch (e) {}
                                        }

                                        // Get the parent widget
                                        var parent = widget.parent;
                                        while (parent && !parent.types) {
                                            parent = parent.parent;
                                        }

                                        // Return false if this node should be skipped due to stopParser on an ancestor.
                                        // Since list[] is in DFS order, this loop will always set parent.instantiateChildren before
                                        // trying to compute widget.instantiate.
                                        var proto = widget.ctor && widget.ctor.prototype;
                                        widget.instantiateChildren = !(proto && proto.stopParser && !(options.template));
                                        widget.instantiate = !parent || (parent.instantiate && parent.instantiateChildren);
                                        return widget.instantiate;
                                    }));
                                });
                            } else {
                                // There were no modules to load, so just resolve with the parsed nodes.   This separate code path is for
                                // efficiency, to avoid running the require() and the callback code above.
                                d.resolve(list);
                            }

                            // Return the promise
                            return d.promise;
                        },

                        _require: function( /*DOMNode*/ script) {
                            // summary:
                            //		Helper for _scanAMD().  Takes a `<script type=dojo/require>bar: "acme/bar", ...</script>` node,
                            //		calls require() to load the specified modules and (asynchronously) assign them to the specified global
                            //		variables, and returns a Promise for when that operation completes.
                            //
                            //		In the example above, it is effectively doing a require(["acme/bar", ...], function(a){ bar = a; }).

                            var hash = djson.fromJson("{" + script.innerHTML + "}"),
                                vars = [],
                                mids = [],
                                d = new Deferred();

                            for (var name in hash) {
                                vars.push(name);
                                mids.push(hash[name]);
                            }

                            require(mids, function() {
                                for (var i = 0; i < vars.length; i++) {
                                    dlang.setObject(vars[i], arguments[i]);
                                }
                                d.resolve(arguments);
                            });

                            return d.promise;
                        },

                        _scanAmd: function(root) {
                            // summary:
                            //		Scans the DOM for any declarative requires and returns their values.
                            // description:
                            //		Looks for `<script type=dojo/require>bar: "acme/bar", ...</script>` node, calls require() to load the
                            //		specified modules and (asynchronously) assign them to the specified global variables,
                            //		 and returns a Promise for when those operations complete.
                            // root: DomNode
                            //		The node to base the scan from.

                            // Promise that resolves when all the <script type=dojo/require> nodes have finished loading.
                            var deferred = new Deferred(),
                                promise = deferred.promise;
                            deferred.resolve(true);

                            var self = this;
                            query("script[type='dojo/require']", root).forEach(function(node) {
                                // Fire off require() call for specified modules.  Chain this require to fire after
                                // any previous requires complete, so that layers can be loaded before individual module require()'s fire.
                                promise = promise.then(function() {
                                    return self._require(node);
                                });

                                // Remove from DOM so it isn't seen again
                                node.parentNode.removeChild(node);
                            });

                            return promise;
                        },

                        parse: function(rootNode, options) {
                            // summary:
                            //		Scan the DOM for class instances, and instantiate them.
                            // description:
                            //		Search specified node (or root node) recursively for class instances,
                            //		and instantiate them. Searches for either data-dojo-type="Class" or
                            //		dojoType="Class" where "Class" is a a fully qualified class name,
                            //		like `dijit/form/Button`
                            //
                            //		Using `data-dojo-type`:
                            //		Attributes using can be mixed into the parameters used to instantiate the
                            //		Class by using a `data-dojo-props` attribute on the node being converted.
                            //		`data-dojo-props` should be a string attribute to be converted from JSON.
                            //
                            //		Using `dojoType`:
                            //		Attributes are read from the original domNode and converted to appropriate
                            //		types by looking up the Class prototype values. This is the default behavior
                            //		from Dojo 1.0 to Dojo 1.5. `dojoType` support is deprecated, and will
                            //		go away in Dojo 2.0.
                            // rootNode: DomNode?
                            //		A default starting root node from which to start the parsing. Can be
                            //		omitted, defaulting to the entire document. If omitted, the `options`
                            //		object can be passed in this place. If the `options` object has a
                            //		`rootNode` member, that is used.
                            // options: Object?
                            //		A hash of options.
                            //
                            //		- noStart: Boolean?:
                            //			when set will prevent the parser from calling .startup()
                            //			when locating the nodes.
                            //		- rootNode: DomNode?:
                            //			identical to the function's `rootNode` argument, though
                            //			allowed to be passed in via this `options object.
                            //		- template: Boolean:
                            //			If true, ignores ContentPane's stopParser flag and parses contents inside of
                            //			a ContentPane inside of a template.   This allows dojoAttachPoint on widgets/nodes
                            //			nested inside the ContentPane to work.
                            //		- inherited: Object:
                            //			Hash possibly containing dir and lang settings to be applied to
                            //			parsed widgets, unless there's another setting on a sub-node that overrides
                            //		- scope: String:
                            //			Root for attribute names to search for.   If scopeName is dojo,
                            //			will search for data-dojo-type (or dojoType).   For backwards compatibility
                            //			reasons defaults to dojo._scopeName (which is "dojo" except when
                            //			multi-version support is used, when it will be something like dojo16, dojo20, etc.)
                            //		- propsThis: Object:
                            //			If specified, "this" referenced from data-dojo-props will refer to propsThis.
                            //			Intended for use from the widgets-in-template feature of `dijit._WidgetsInTemplateMixin`
                            // returns: Mixed
                            //		Returns a blended object that is an array of the instantiated objects, but also can include
                            //		a promise that is resolved with the instantiated objects.  This is done for backwards
                            //		compatibility.  If the parser auto-requires modules, it will always behave in a promise
                            //		fashion and `parser.parse().then(function(instances){...})` should be used.
                            // example:
                            //		Parse all widgets on a page:
                            //	|		parser.parse();
                            // example:
                            //		Parse all classes within the node with id="foo"
                            //	|		parser.parse(dojo.byId('foo'));
                            // example:
                            //		Parse all classes in a page, but do not call .startup() on any
                            //		child
                            //	|		parser.parse({ noStart: true })
                            // example:
                            //		Parse all classes in a node, but do not call .startup()
                            //	|		parser.parse(someNode, { noStart:true });
                            //	|		// or
                            //	|		parser.parse({ noStart:true, rootNode: someNode });

                            // determine the root node and options based on the passed arguments.
                            var root;
                            if (!options && rootNode && rootNode.rootNode) {
                                options = rootNode;
                                root = options.rootNode;
                            } else if (rootNode && dlang.isObject(rootNode) && !("nodeType" in rootNode)) {
                                options = rootNode;
                            } else {
                                root = rootNode;
                            }
                            root = root ? dhtml.byId(root) : dwindow.body();

                            options = options || {};

                            var mixin = options.template ? {
                                    template: true
                                } : {},
                                instances = [],
                                self = this;

                            // First scan for any <script type=dojo/require> nodes, and execute.
                            // Then scan for all nodes with data-dojo-type, and load any unloaded modules.
                            // Then build the object instances.  Add instances to already existing (but empty) instances[] array,
                            // which may already have been returned to caller.  Also, use otherwise to collect and throw any errors
                            // that occur during the parse().
                            var p =
                                this._scanAmd(root, options).then(function() {
                                    return self.scan(root, options);
                                }).then(function(parsedNodes) {
                                    return instances = instances.concat(self._instantiate(parsedNodes, mixin, options));
                                }).otherwise(function(e) {
                                    // TODO Modify to follow better pattern for promise error managment when available
                                    console.error("dojo/parser::parse() error", e);
                                    throw e;
                                });

                            // Blend the array with the promise
                            dlang.mixin(instances, p);
                            return instances;
                        }
                    };

                    if (1) {
                        dojo.parser = parser;
                    }

                    // Register the parser callback. It should be the first callback
                    // after the a11y test.
                    if (config.parseOnLoad) {
                        ready(100, parser, "parse");
                    }

                    return parser;
                });

        },
        'url:dijit/form/templates/DropDownButton.html': "<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\"\n/></span>\n",
        'dijit/form/ToggleButton': function() {
            define("dijit/form/ToggleButton", [
                "dojo/_base/declare", // declare
                "dojo/_base/kernel", // kernel.deprecated
                "./Button",
                "./_ToggleButtonMixin"
            ], function(declare, kernel, Button, _ToggleButtonMixin) {

                // module:
                //		dijit/form/ToggleButton


                return declare("dijit.form.ToggleButton", [Button, _ToggleButtonMixin], {
                    // summary:
                    //		A templated button widget that can be in two states (checked or not).
                    //		Can be base class for things like tabs or checkbox or radio buttons.

                    baseClass: "dijitToggleButton",

                    setChecked: function( /*Boolean*/ checked) {
                        // summary:
                        //		Deprecated.  Use set('checked', true/false) instead.
                        kernel.deprecated("setChecked(" + checked + ") is deprecated. Use set('checked'," + checked + ") instead.", "", "2.0");
                        this.set('checked', checked);
                    }
                });
            });

        },
        'dojo/date/stamp': function() {
            define("dojo/date/stamp", ["../_base/lang", "../_base/array"], function(lang, array) {

                // module:
                //		dojo/date/stamp

                var stamp = {
                    // summary:
                    //		TODOC
                };
                lang.setObject("dojo.date.stamp", stamp);

                // Methods to convert dates to or from a wire (string) format using well-known conventions

                stamp.fromISOString = function( /*String*/ formattedString, /*Number?*/ defaultTime) {
                    // summary:
                    //		Returns a Date object given a string formatted according to a subset of the ISO-8601 standard.
                    //
                    // description:
                    //		Accepts a string formatted according to a profile of ISO8601 as defined by
                    //		[RFC3339](http://www.ietf.org/rfc/rfc3339.txt), except that partial input is allowed.
                    //		Can also process dates as specified [by the W3C](http://www.w3.org/TR/NOTE-datetime)
                    //		The following combinations are valid:
                    //
                    //		- dates only
                    //			- yyyy
                    //			- yyyy-MM
                    //			- yyyy-MM-dd
                    //		- times only, with an optional time zone appended
                    //			- THH:mm
                    //			- THH:mm:ss
                    //			- THH:mm:ss.SSS
                    //		- and "datetimes" which could be any combination of the above
                    //
                    //		timezones may be specified as Z (for UTC) or +/- followed by a time expression HH:mm
                    //		Assumes the local time zone if not specified.  Does not validate.  Improperly formatted
                    //		input may return null.  Arguments which are out of bounds will be handled
                    //		by the Date constructor (e.g. January 32nd typically gets resolved to February 1st)
                    //		Only years between 100 and 9999 are supported.
                    // formattedString:
                    //		A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00
                    // defaultTime:
                    //		Used for defaults for fields omitted in the formattedString.
                    //		Uses 1970-01-01T00:00:00.0Z by default.

                    if (!stamp._isoRegExp) {
                        stamp._isoRegExp =
                            //TODO: could be more restrictive and check for 00-59, etc.
                            /^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/;
                    }

                    var match = stamp._isoRegExp.exec(formattedString),
                        result = null;

                    if (match) {
                        match.shift();
                        if (match[1]) {
                            match[1]--;
                        } // Javascript Date months are 0-based
                        if (match[6]) {
                            match[6] *= 1000;
                        } // Javascript Date expects fractional seconds as milliseconds

                        if (defaultTime) {
                            // mix in defaultTime.  Relatively expensive, so use || operators for the fast path of defaultTime === 0
                            defaultTime = new Date(defaultTime);
                            array.forEach(array.map(["FullYear", "Month", "Date", "Hours", "Minutes", "Seconds", "Milliseconds"], function(prop) {
                                return defaultTime["get" + prop]();
                            }), function(value, index) {
                                match[index] = match[index] || value;
                            });
                        }
                        result = new Date(match[0] || 1970, match[1] || 0, match[2] || 1, match[3] || 0, match[4] || 0, match[5] || 0, match[6] || 0); //TODO: UTC defaults
                        if (match[0] < 100) {
                            result.setFullYear(match[0] || 1970);
                        }

                        var offset = 0,
                            zoneSign = match[7] && match[7].charAt(0);
                        if (zoneSign != 'Z') {
                            offset = ((match[8] || 0) * 60) + (Number(match[9]) || 0);
                            if (zoneSign != '-') {
                                offset *= -1;
                            }
                        }
                        if (zoneSign) {
                            offset -= result.getTimezoneOffset();
                        }
                        if (offset) {
                            result.setTime(result.getTime() + offset * 60000);
                        }
                    }

                    return result; // Date or null
                };

                /*=====
                var __Options = {
                	// selector: String
                	//		"date" or "time" for partial formatting of the Date object.
                	//		Both date and time will be formatted by default.
                	// zulu: Boolean
                	//		if true, UTC/GMT is used for a timezone
                	// milliseconds: Boolean
                	//		if true, output milliseconds
                };
                =====*/

                stamp.toISOString = function( /*Date*/ dateObject, /*__Options?*/ options) {
                    // summary:
                    //		Format a Date object as a string according a subset of the ISO-8601 standard
                    //
                    // description:
                    //		When options.selector is omitted, output follows [RFC3339](http://www.ietf.org/rfc/rfc3339.txt)
                    //		The local time zone is included as an offset from GMT, except when selector=='time' (time without a date)
                    //		Does not check bounds.  Only years between 100 and 9999 are supported.
                    //
                    // dateObject:
                    //		A Date object

                    var _ = function(n) {
                        return (n < 10) ? "0" + n : n;
                    };
                    options = options || {};
                    var formattedDate = [],
                        getter = options.zulu ? "getUTC" : "get",
                        date = "";
                    if (options.selector != "time") {
                        var year = dateObject[getter + "FullYear"]();
                        date = ["0000".substr((year + "").length) + year, _(dateObject[getter + "Month"]() + 1), _(dateObject[getter + "Date"]())].join('-');
                    }
                    formattedDate.push(date);
                    if (options.selector != "date") {
                        var time = [_(dateObject[getter + "Hours"]()), _(dateObject[getter + "Minutes"]()), _(dateObject[getter + "Seconds"]())].join(':');
                        var millis = dateObject[getter + "Milliseconds"]();
                        if (options.milliseconds) {
                            time += "." + (millis < 100 ? "0" : "") + _(millis);
                        }
                        if (options.zulu) {
                            time += "Z";
                        } else if (options.selector != "time") {
                            var timezoneOffset = dateObject.getTimezoneOffset();
                            var absOffset = Math.abs(timezoneOffset);
                            time += (timezoneOffset > 0 ? "-" : "+") +
                                _(Math.floor(absOffset / 60)) + ":" + _(absOffset % 60);
                        }
                        formattedDate.push(time);
                    }
                    return formattedDate.join('T'); // String
                };

                return stamp;
            });

        },
        'hsbcwidget/formValidCheck': function() {
            define([
                'dojo/_base/declare',
                'dijit/form/Form',
                'dojo/_base/array',
                'dojo/on',
                'dojo/window',
                'hsbccore/dom-util'
            ], function(declare, Form, arrayUtil, on, winUtil, domUtil) {

                return declare([Form], {

                    postCreate: function() {
                        var self = this;

                        on(this.domNode, 'submit', function(e) {
                            e.preventDefault();
                            if (self.validate()) {
                                self.submit();
                            }
                        });
                    },

                    startup: function() {
                        this.descendants = this.getDescendants();

                        arrayUtil.forEach(this.descendants, function(descendant) {

                            //this.getDescendants() can return an array
                            //with items that are undefined.
                            if (descendant) {

                                on(descendant.domNode, 'click', function() {
                                    if (descendant.isValid && descendant.isValid()) {
                                        descendant.displayMessage(descendant.successMessage);
                                    }
                                });

                            }

                        });
                    },

                    validate: function() {
                        var didFocus = false;
                        var first = true;
                        return arrayUtil.every(arrayUtil.map(this.descendants, function(widget) {
                            if (widget) {
                                // Need to set this so that "required" widgets get their
                                // state set.
                                widget._hasBeenBlurred = true;
                                var valid = widget.disabled || !widget.validate || !domUtil.isVisible(widget.domNode) || widget.validate();

                                if (typeof widget.validateAll === 'function') {
                                    widget.validateAll();
                                    if (widget.hideInvalidMessage && widget.valid === false) {
                                        widget.hideInvalidMessage(false);
                                        valid = false;
                                        first = false;
                                    }
                                }

                                if (!first) {
                                    widget.hideInvalidMessage(true);
                                }

                                if (!valid && !didFocus) {
                                    // Set focus of the first non-valid widget
                                    winUtil.scrollIntoView(widget.containerNode || widget.domNode);
                                    if (!first) {
                                        widget.hideInvalidMessage(false);
                                    }
                                    widget.focus();
                                    didFocus = true;
                                }
                                return valid;
                            }
                        }), function(item) {
                            return item;
                        });
                    }

                });

            });
        },
        'dijit/form/Textarea': function() {
            define("dijit/form/Textarea", [
                "dojo/_base/declare", // declare
                "dojo/dom-style", // domStyle.set
                "./_ExpandingTextAreaMixin",
                "./SimpleTextarea"
            ], function(declare, domStyle, _ExpandingTextAreaMixin, SimpleTextarea) {

                // module:
                //		dijit/form/Textarea


                return declare("dijit.form.Textarea", [SimpleTextarea, _ExpandingTextAreaMixin], {
                    // summary:
                    //		A textarea widget that adjusts it's height according to the amount of data.
                    //
                    // description:
                    //		A textarea that dynamically expands/contracts (changing it's height) as
                    //		the user types, to display all the text without requiring a scroll bar.
                    //
                    //		Takes nearly all the parameters (name, value, etc.) that a vanilla textarea takes.
                    //		Rows is not supported since this widget adjusts the height.
                    //
                    // example:
                    // |	<textarea data-dojo-type="dijit/form/TextArea">...</textarea>


                    // TODO: for 2.0, rename this to ExpandingTextArea, and rename SimpleTextarea to TextArea

                    baseClass: "dijitTextBox dijitTextArea dijitExpandingTextArea",

                    // Override SimpleTextArea.cols to default to width:100%, for backward compatibility
                    cols: "",

                    buildRendering: function() {
                        this.inherited(arguments);

                        // tweak textarea style to reduce browser differences
                        domStyle.set(this.textbox, {
                            overflowY: 'hidden',
                            overflowX: 'auto',
                            boxSizing: 'border-box',
                            MsBoxSizing: 'border-box',
                            WebkitBoxSizing: 'border-box',
                            MozBoxSizing: 'border-box'
                        });
                    }
                });

            });

        },
        'dojo/mouse': function() {
            define("dojo/mouse", ["./_base/kernel", "./on", "./has", "./dom", "./_base/window"], function(dojo, on, has, dom, win) {

                // module:
                //		dojo/mouse

                has.add("dom-quirks", win.doc && win.doc.compatMode == "BackCompat");
                has.add("events-mouseenter", win.doc && "onmouseenter" in win.doc.createElement("div"));
                has.add("events-mousewheel", win.doc && 'onmousewheel' in win.doc);

                var mouseButtons;
                if ((has("dom-quirks") && has("ie")) || !has("dom-addeventlistener")) {
                    mouseButtons = {
                        LEFT: 1,
                        MIDDLE: 4,
                        RIGHT: 2,
                        // helper functions
                        isButton: function(e, button) {
                            return e.button & button;
                        },
                        isLeft: function(e) {
                            return e.button & 1;
                        },
                        isMiddle: function(e) {
                            return e.button & 4;
                        },
                        isRight: function(e) {
                            return e.button & 2;
                        }
                    };
                } else {
                    mouseButtons = {
                        LEFT: 0,
                        MIDDLE: 1,
                        RIGHT: 2,
                        // helper functions
                        isButton: function(e, button) {
                            return e.button == button;
                        },
                        isLeft: function(e) {
                            return e.button == 0;
                        },
                        isMiddle: function(e) {
                            return e.button == 1;
                        },
                        isRight: function(e) {
                            return e.button == 2;
                        }
                    };
                }
                dojo.mouseButtons = mouseButtons;

                /*=====
                	dojo.mouseButtons = {
                		// LEFT: Number
                		//		Numeric value of the left mouse button for the platform.
                		LEFT:   0,
                		// MIDDLE: Number
                		//		Numeric value of the middle mouse button for the platform.
                		MIDDLE: 1,
                		// RIGHT: Number
                		//		Numeric value of the right mouse button for the platform.
                		RIGHT:  2,

                		isButton: function(e, button){
                			// summary:
                			//		Checks an event object for a pressed button
                			// e: Event
                			//		Event object to examine
                			// button: Number
                			//		The button value (example: dojo.mouseButton.LEFT)
                			return e.button == button; // Boolean
                		},
                		isLeft: function(e){
                			// summary:
                			//		Checks an event object for the pressed left button
                			// e: Event
                			//		Event object to examine
                			return e.button == 0; // Boolean
                		},
                		isMiddle: function(e){
                			// summary:
                			//		Checks an event object for the pressed middle button
                			// e: Event
                			//		Event object to examine
                			return e.button == 1; // Boolean
                		},
                		isRight: function(e){
                			// summary:
                			//		Checks an event object for the pressed right button
                			// e: Event
                			//		Event object to examine
                			return e.button == 2; // Boolean
                		}
                	};
                =====*/

                function eventHandler(type, selectHandler) {
                    // emulation of mouseenter/leave with mouseover/out using descendant checking
                    var handler = function(node, listener) {
                        return on(node, type, function(evt) {
                            if (selectHandler) {
                                return selectHandler(evt, listener);
                            }
                            if (!dom.isDescendant(evt.relatedTarget, node)) {
                                return listener.call(this, evt);
                            }
                        });
                    };
                    handler.bubble = function(select) {
                        return eventHandler(type, function(evt, listener) {
                            // using a selector, use the select function to determine if the mouse moved inside the selector and was previously outside the selector
                            var target = select(evt.target);
                            var relatedTarget = evt.relatedTarget;
                            if (target && (target != (relatedTarget && relatedTarget.nodeType == 1 && select(relatedTarget)))) {
                                return listener.call(target, evt);
                            }
                        });
                    };
                    return handler;
                }
                var wheel;
                if (has("events-mousewheel")) {
                    wheel = 'mousewheel';
                } else { //firefox
                    wheel = function(node, listener) {
                        return on(node, 'DOMMouseScroll', function(evt) {
                            evt.wheelDelta = -evt.detail;
                            listener.call(this, evt);
                        });
                    };
                }
                return {
                    // summary:
                    //		This module provide mouse event handling utility functions and exports
                    //		mouseenter and mouseleave event emulation.
                    // example:
                    //		To use these events, you register a mouseenter like this:
                    //		|	define(["dojo/on", dojo/mouse"], function(on, mouse){
                    //		|		on(targetNode, mouse.enter, function(event){
                    //		|			dojo.addClass(targetNode, "highlighted");
                    //		|		});
                    //		|		on(targetNode, mouse.leave, function(event){
                    //		|			dojo.removeClass(targetNode, "highlighted");
                    //		|		});

                    _eventHandler: eventHandler, // for dojo/touch

                    // enter: Synthetic Event
                    //		This is an extension event for the mouseenter that IE provides, emulating the
                    //		behavior on other browsers.
                    enter: eventHandler("mouseover"),

                    // leave: Synthetic Event
                    //		This is an extension event for the mouseleave that IE provides, emulating the
                    //		behavior on other browsers.
                    leave: eventHandler("mouseout"),

                    // wheel: Normalized Mouse Wheel Event
                    //		This is an extension event for the mousewheel that non-Mozilla browsers provide,
                    //		emulating the behavior on Mozilla based browsers.
                    wheel: wheel,

                    isLeft: mouseButtons.isLeft,
                    /*=====
                    isLeft: function(){
                    	// summary:
                    	//		Test an event object (from a mousedown event) to see if the left button was pressed.
                    },
                    =====*/

                    isMiddle: mouseButtons.isMiddle,
                    /*=====
                     isMiddle: function(){
                    	 // summary:
                    	 //		Test an event object (from a mousedown event) to see if the middle button was pressed.
                     },
                     =====*/

                    isRight: mouseButtons.isRight
                    /*=====
                     , isRight: function(){
                    	 // summary:
                    	 //		Test an event object (from a mousedown event) to see if the right button was pressed.
                     }
                     =====*/
                };
            });

        },
        'dojo/Stateful': function() {
            define(["./_base/declare", "./_base/lang", "./_base/array", "dojo/when"], function(declare, lang, array, when) {
                // module:
                //		dojo/Stateful

                return declare("dojo.Stateful", null, {
                    // summary:
                    //		Base class for objects that provide named properties with optional getter/setter
                    //		control and the ability to watch for property changes
                    //
                    //		The class also provides the functionality to auto-magically manage getters
                    //		and setters for object attributes/properties.
                    //		
                    //		Getters and Setters should follow the format of _xxxGetter or _xxxSetter where 
                    //		the xxx is a name of the attribute to handle.  So an attribute of "foo" 
                    //		would have a custom getter of _fooGetter and a custom setter of _fooSetter.
                    //
                    // example:
                    //	|	var obj = new dojo.Stateful();
                    //	|	obj.watch("foo", function(){
                    //	|		console.log("foo changed to " + this.get("foo"));
                    //	|	});
                    //	|	obj.set("foo","bar");

                    // _attrPairNames: Hash
                    //		Used across all instances a hash to cache attribute names and their getter 
                    //		and setter names.
                    _attrPairNames: {},

                    _getAttrNames: function(name) {
                        // summary:
                        //		Helper function for get() and set().
                        //		Caches attribute name values so we don't do the string ops every time.
                        // tags:
                        //		private

                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        return (apn[name] = {
                            s: "_" + name + "Setter",
                            g: "_" + name + "Getter"
                        });
                    },

                    postscript: function( /*Object?*/ params) {
                        // Automatic setting of params during construction
                        if (params) {
                            this.set(params);
                        }
                    },

                    _get: function(name, names) {
                        // summary:
                        //		Private function that does a get based off a hash of names
                        // names:
                        //		Hash of names of custom attributes
                        return typeof this[names.g] === "function" ? this[names.g]() : this[name];
                    },
                    get: function( /*String*/ name) {
                        // summary:
                        //		Get a property on a Stateful instance.
                        // name:
                        //		The property to get.
                        // returns:
                        //		The property value on this Stateful instance.
                        // description:
                        //		Get a named property on a Stateful object. The property may
                        //		potentially be retrieved via a getter method in subclasses. In the base class
                        //		this just retrieves the object's property.
                        //		For example:
                        //	|	stateful = new dojo.Stateful({foo: 3});
                        //	|	stateful.get("foo") // returns 3
                        //	|	stateful.foo // returns 3

                        return this._get(name, this._getAttrNames(name)); //Any
                    },
                    set: function( /*String*/ name, /*Object*/ value) {
                        // summary:
                        //		Set a property on a Stateful instance
                        // name:
                        //		The property to set.
                        // value:
                        //		The value to set in the property.
                        // returns:
                        //		The function returns this dojo.Stateful instance.
                        // description:
                        //		Sets named properties on a stateful object and notifies any watchers of
                        //		the property. A programmatic setter may be defined in subclasses.
                        //		For example:
                        //	|	stateful = new dojo.Stateful();
                        //	|	stateful.watch(function(name, oldValue, value){
                        //	|		// this will be called on the set below
                        //	|	}
                        //	|	stateful.set(foo, 5);
                        //
                        //	set() may also be called with a hash of name/value pairs, ex:
                        //	|	myObj.set({
                        //	|		foo: "Howdy",
                        //	|		bar: 3
                        //	|	})
                        //	This is equivalent to calling set(foo, "Howdy") and set(bar, 3)

                        // If an object is used, iterate through object
                        if (typeof name === "object") {
                            for (var x in name) {
                                if (name.hasOwnProperty(x) && x != "_watchCallbacks") {
                                    this.set(x, name[x]);
                                }
                            }
                            return this;
                        }

                        var names = this._getAttrNames(name),
                            oldValue = this._get(name, names),
                            setter = this[names.s],
                            result;
                        if (typeof setter === "function") {
                            // use the explicit setter
                            result = setter.apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            // no setter so set attribute directly
                            this[name] = value;
                        }
                        if (this._watchCallbacks) {
                            var self = this;
                            // If setter returned a promise, wait for it to complete, otherwise call watches immediatly
                            when(result, function() {
                                self._watchCallbacks(name, oldValue, value);
                            });
                        }
                        return this; // dojo/Stateful
                    },
                    _changeAttrValue: function(name, value) {
                        // summary:
                        //		Internal helper for directly changing an attribute value.
                        //
                        // name: String
                        //		The property to set.
                        // value: Mixed
                        //		The value to set in the property.
                        //
                        // description:
                        //		Directly change the value of an attribute on an object, bypassing any 
                        //		accessor setter.  Also handles the calling of watch and emitting events. 
                        //		It is designed to be used by descendent class when there are two values 
                        //		of attributes that are linked, but calling .set() is not appropriate.

                        var oldValue = this.get(name);
                        this[name] = value;
                        if (this._watchCallbacks) {
                            this._watchCallbacks(name, oldValue, value);
                        }
                        return this; // dojo/Stateful
                    },
                    watch: function( /*String?*/ name, /*Function*/ callback) {
                        // summary:
                        //		Watches a property for changes
                        // name:
                        //		Indicates the property to watch. This is optional (the callback may be the
                        //		only parameter), and if omitted, all the properties will be watched
                        // returns:
                        //		An object handle for the watch. The unwatch method of this object
                        //		can be used to discontinue watching this property:
                        //		|	var watchHandle = obj.watch("foo", callback);
                        //		|	watchHandle.unwatch(); // callback won't be called now
                        // callback:
                        //		The function to execute when the property changes. This will be called after
                        //		the property has been changed. The callback will be called with the |this|
                        //		set to the instance, the first argument as the name of the property, the
                        //		second argument as the old value and the third argument as the new value.

                        var callbacks = this._watchCallbacks;
                        if (!callbacks) {
                            var self = this;
                            callbacks = this._watchCallbacks = function(name, oldValue, value, ignoreCatchall) {
                                var notify = function(propertyCallbacks) {
                                    if (propertyCallbacks) {
                                        propertyCallbacks = propertyCallbacks.slice();
                                        for (var i = 0, l = propertyCallbacks.length; i < l; i++) {
                                            propertyCallbacks[i].call(self, name, oldValue, value);
                                        }
                                    }
                                };
                                notify(callbacks['_' + name]);
                                if (!ignoreCatchall) {
                                    notify(callbacks["*"]); // the catch-all
                                }
                            }; // we use a function instead of an object so it will be ignored by JSON conversion
                        }
                        if (!callback && typeof name === "function") {
                            callback = name;
                            name = "*";
                        } else {
                            // prepend with dash to prevent name conflicts with function (like "name" property)
                            name = '_' + name;
                        }
                        var propertyCallbacks = callbacks[name];
                        if (typeof propertyCallbacks !== "object") {
                            propertyCallbacks = callbacks[name] = [];
                        }
                        propertyCallbacks.push(callback);

                        // TODO: Remove unwatch in 2.0
                        var handle = {};
                        handle.unwatch = handle.remove = function() {
                            var index = array.indexOf(propertyCallbacks, callback);
                            if (index > -1) {
                                propertyCallbacks.splice(index, 1);
                            }
                        };
                        return handle; //Object
                    }

                });

            });

        },
        'dijit/form/DateTextBox': function() {
            define("dijit/form/DateTextBox", [
                "dojo/_base/declare", // declare
                "../Calendar",
                "./_DateTimeTextBox"
            ], function(declare, Calendar, _DateTimeTextBox) {

                // module:
                //		dijit/form/DateTextBox

                return declare("dijit.form.DateTextBox", _DateTimeTextBox, {
                    // summary:
                    //		A validating, serializable, range-bound date text box with a drop down calendar
                    // example:
                    // |	new DateTextBox({value: new Date(2009, 0, 20)})
                    // example:
                    // |	<input data-dojo-type='dijit/form/DateTextBox' value='2009-01-20'>

                    baseClass: "dijitTextBox dijitComboBox dijitDateTextBox",
                    popupClass: Calendar,
                    _selector: "date",

                    // value: Date
                    //		The value of this widget as a JavaScript Date object, with only year/month/day specified.
                    //		If specified in markup, use the format specified in `stamp.fromISOString`.
                    //		set("value", ...) accepts either a Date object or a string.
                    value: new Date("") // value.toString()="NaN"
                });
            });

        },
        'dijit/layout/AccordionContainer': function() {
            require({
                cache: {
                    'url:dijit/layout/templates/AccordionButton.html': "<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\"presentation\">\n\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" data-dojo-attach-point='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\n\t\t<span role=\"presentation\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\n\t</div>\n</div>\n"
                }
            });
            define("dijit/layout/AccordionContainer", [
                "require",
                "dojo/_base/array", // array.forEach array.map
                "dojo/_base/declare", // declare
                "dojo/_base/event", // event.stop
                "dojo/_base/fx", // fx.Animation
                "dojo/dom", // dom.setSelectable
                "dojo/dom-attr", // domAttr.attr
                "dojo/dom-class", // domClass.remove
                "dojo/dom-construct", // domConstruct.place
                "dojo/dom-geometry",
                "dojo/keys", // keys
                "dojo/_base/lang", // lang.getObject lang.hitch
                "dojo/sniff", // has("ie") has("dijit-legacy-requires")
                "dojo/topic", // publish
                "../focus", // focus.focus()
                "../_base/manager", // manager.defaultDuration
                "dojo/ready",
                "../_Widget",
                "../_Container",
                "../_TemplatedMixin",
                "../_CssStateMixin",
                "./StackContainer",
                "./ContentPane",
                "dojo/text!./templates/AccordionButton.html"
            ], function(require, array, declare, event, fx, dom, domAttr, domClass, domConstruct, domGeometry,
                keys, lang, has, topic, focus, manager, ready,
                _Widget, _Container, _TemplatedMixin, _CssStateMixin, StackContainer, ContentPane, template) {

                // module:
                //		dijit/layout/AccordionContainer


                // Design notes:
                //
                // An AccordionContainer is a StackContainer, but each child (typically ContentPane)
                // is wrapped in a _AccordionInnerContainer.   This is hidden from the caller.
                //
                // The resulting markup will look like:
                //
                //	<div class=dijitAccordionContainer>
                //		<div class=dijitAccordionInnerContainer>	(one pane)
                //				<div class=dijitAccordionTitle>		(title bar) ... </div>
                //				<div class=dijtAccordionChildWrapper>   (content pane) </div>
                //		</div>
                //	</div>
                //
                // Normally the dijtAccordionChildWrapper is hidden for all but one child (the shown
                // child), so the space for the content pane is all the title bars + the one dijtAccordionChildWrapper,
                // which on claro has a 1px border plus a 2px bottom margin.
                //
                // During animation there are two dijtAccordionChildWrapper's shown, so we need
                // to compensate for that.


                var AccordionButton = declare("dijit.layout._AccordionButton", [_Widget, _TemplatedMixin, _CssStateMixin], {
                    // summary:
                    //		The title bar to click to open up an accordion pane.
                    //		Internal widget used by AccordionContainer.
                    // tags:
                    //		private

                    templateString: template,

                    // label: String
                    //		Title of the pane
                    label: "",
                    _setLabelAttr: {
                        node: "titleTextNode",
                        type: "innerHTML"
                    },

                    // title: String
                    //		Tooltip that appears on hover
                    title: "",
                    _setTitleAttr: {
                        node: "titleTextNode",
                        type: "attribute",
                        attribute: "title"
                    },

                    // iconClassAttr: String
                    //		CSS class for icon to left of label
                    iconClassAttr: "",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },

                    baseClass: "dijitAccordionTitle",

                    getParent: function() {
                        // summary:
                        //		Returns the AccordionContainer parent.
                        // tags:
                        //		private
                        return this.parent;
                    },

                    buildRendering: function() {
                        this.inherited(arguments);
                        var titleTextNodeId = this.id.replace(' ', '_');
                        domAttr.set(this.titleTextNode, "id", titleTextNodeId + "_title");
                        this.focusNode.setAttribute("aria-labelledby", domAttr.get(this.titleTextNode, "id"));
                        dom.setSelectable(this.domNode, false);
                    },

                    getTitleHeight: function() {
                        // summary:
                        //		Returns the height of the title dom node.
                        return domGeometry.getMarginSize(this.domNode).h; // Integer
                    },

                    // TODO: maybe the parent should set these methods directly rather than forcing the code
                    // into the button widget?
                    _onTitleClick: function() {
                        // summary:
                        //		Callback when someone clicks my title.
                        var parent = this.getParent();
                        parent.selectChild(this.contentWidget, true);
                        focus.focus(this.focusNode);
                    },

                    _onTitleKeyPress: function( /*Event*/ evt) {
                        return this.getParent()._onKeyPress(evt, this.contentWidget);
                    },

                    _setSelectedAttr: function( /*Boolean*/ isSelected) {
                        this._set("selected", isSelected);
                        this.focusNode.setAttribute("aria-expanded", isSelected ? "true" : "false");
                        this.focusNode.setAttribute("aria-selected", isSelected ? "true" : "false");
                        this.focusNode.setAttribute("tabIndex", isSelected ? "0" : "-1");
                    }
                });

                var AccordionInnerContainer = declare("dijit.layout._AccordionInnerContainer", [_Widget, _CssStateMixin], {
                    // summary:
                    //		Internal widget placed as direct child of AccordionContainer.containerNode.
                    //		When other widgets are added as children to an AccordionContainer they are wrapped in
                    //		this widget.

                    /*=====
                    		// buttonWidget: Function|String
                    		//		Class to use to instantiate title
                    		//		(Wish we didn't have a separate widget for just the title but maintaining it
                    		//		for backwards compatibility, is it worth it?)
                    		 buttonWidget: null,
                    =====*/

                    /*=====
                    		// contentWidget: dijit/_WidgetBase
                    		//		Pointer to the real child widget
                    		contentWidget: null,
                    =====*/

                    baseClass: "dijitAccordionInnerContainer",

                    // tell nested layout widget that we will take care of sizing
                    isLayoutContainer: true,

                    buildRendering: function() {
                        // Builds a template like:
                        //	<div class=dijitAccordionInnerContainer>
                        //		Button
                        //		<div class=dijitAccordionChildWrapper>
                        //			ContentPane
                        //		</div>
                        //	</div>

                        // Create wrapper div, placed where the child is now
                        this.domNode = domConstruct.place("<div class='" + this.baseClass +
                            "' role='presentation'>", this.contentWidget.domNode, "after");

                        // wrapper div's first child is the button widget (ie, the title bar)
                        var child = this.contentWidget,
                            cls = lang.isString(this.buttonWidget) ? lang.getObject(this.buttonWidget) : this.buttonWidget;
                        this.button = child._buttonWidget = (new cls({
                            contentWidget: child,
                            label: child.title,
                            title: child.tooltip,
                            dir: child.dir,
                            lang: child.lang,
                            textDir: child.textDir,
                            iconClass: child.iconClass,
                            id: child.id + "_button",
                            parent: this.parent
                        })).placeAt(this.domNode);

                        // and then the actual content widget (changing it from prior-sibling to last-child),
                        // wrapped by a <div class=dijitAccordionChildWrapper>
                        this.containerNode = domConstruct.place("<div class='dijitAccordionChildWrapper' style='display:none'>", this.domNode);
                        domConstruct.place(this.contentWidget.domNode, this.containerNode);
                    },

                    postCreate: function() {
                        this.inherited(arguments);

                        // Map changes in content widget's title etc. to changes in the button
                        var button = this.button;
                        this._contentWidgetWatches = [
                            this.contentWidget.watch('title', lang.hitch(this, function(name, oldValue, newValue) {
                                button.set("label", newValue);
                            })),
                            this.contentWidget.watch('tooltip', lang.hitch(this, function(name, oldValue, newValue) {
                                button.set("title", newValue);
                            })),
                            this.contentWidget.watch('iconClass', lang.hitch(this, function(name, oldValue, newValue) {
                                button.set("iconClass", newValue);
                            }))
                        ];
                    },

                    _setSelectedAttr: function( /*Boolean*/ isSelected) {
                        this._set("selected", isSelected);
                        this.button.set("selected", isSelected);
                        if (isSelected) {
                            var cw = this.contentWidget;
                            if (cw.onSelected) {
                                cw.onSelected();
                            }
                        }
                    },

                    startup: function() {
                        // Called by _Container.addChild()
                        this.contentWidget.startup();
                    },

                    destroy: function() {
                        this.button.destroyRecursive();

                        array.forEach(this._contentWidgetWatches || [], function(w) {
                            w.unwatch();
                        });

                        delete this.contentWidget._buttonWidget;
                        delete this.contentWidget._wrapperWidget;

                        this.inherited(arguments);
                    },

                    destroyDescendants: function( /*Boolean*/ preserveDom) {
                        // since getChildren isn't working for me, have to code this manually
                        this.contentWidget.destroyRecursive(preserveDom);
                    }
                });

                var AccordionContainer = declare("dijit.layout.AccordionContainer", StackContainer, {
                    // summary:
                    //		Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,
                    //		and switching between panes is visualized by sliding the other panes up/down.
                    // example:
                    //	|	<div data-dojo-type="dijit/layout/AccordionContainer">
                    //	|		<div data-dojo-type="dijit/layout/ContentPane" title="pane 1">
                    //	|		</div>
                    //	|		<div data-dojo-type="dijit/layout/ContentPane" title="pane 2">
                    //	|			<p>This is some text</p>
                    //	|		</div>
                    //	|	</div>

                    // duration: Integer
                    //		Amount of time (in ms) it takes to slide panes
                    duration: manager.defaultDuration,

                    // buttonWidget: [const] String
                    //		The name of the widget used to display the title of each pane
                    buttonWidget: AccordionButton,

                    /*=====
                    		// _verticalSpace: Number
                    		//		Pixels of space available for the open pane
                    		//		(my content box size minus the cumulative size of all the title bars)
                    		_verticalSpace: 0,
                    =====*/
                    baseClass: "dijitAccordionContainer",

                    buildRendering: function() {
                        this.inherited(arguments);
                        this.domNode.style.overflow = "hidden"; // TODO: put this in dijit.css
                        this.domNode.setAttribute("role", "tablist"); // TODO: put this in template
                    },

                    startup: function() {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);
                        if (this.selectedChildWidget) {
                            this.selectedChildWidget._wrapperWidget.set("selected", true);
                        }
                    },

                    layout: function() {
                        // Implement _LayoutWidget.layout() virtual method.
                        // Set the height of the open pane based on what room remains.

                        var openPane = this.selectedChildWidget;

                        if (!openPane) {
                            return;
                        }

                        // space taken up by title, plus wrapper div (with border/margin) for open pane
                        var wrapperDomNode = openPane._wrapperWidget.domNode,
                            wrapperDomNodeMargin = domGeometry.getMarginExtents(wrapperDomNode),
                            wrapperDomNodePadBorder = domGeometry.getPadBorderExtents(wrapperDomNode),
                            wrapperContainerNode = openPane._wrapperWidget.containerNode,
                            wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode),
                            wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode),
                            mySize = this._contentBox;

                        // get cumulative height of all the unselected title bars
                        var totalCollapsedHeight = 0;
                        array.forEach(this.getChildren(), function(child) {
                            if (child != openPane) {
                                // Using domGeometry.getMarginSize() rather than domGeometry.position() since claro has 1px bottom margin
                                // to separate accordion panes.  Not sure that works perfectly, it's probably putting a 1px
                                // margin below the bottom pane (even though we don't want one).
                                totalCollapsedHeight += domGeometry.getMarginSize(child._wrapperWidget.domNode).h;
                            }
                        });
                        this._verticalSpace = mySize.h - totalCollapsedHeight - wrapperDomNodeMargin.h -
                            wrapperDomNodePadBorder.h - wrapperContainerNodeMargin.h - wrapperContainerNodePadBorder.h -
                            openPane._buttonWidget.getTitleHeight();

                        // Memo size to make displayed child
                        this._containerContentBox = {
                            h: this._verticalSpace,
                            w: this._contentBox.w - wrapperDomNodeMargin.w - wrapperDomNodePadBorder.w -
                                wrapperContainerNodeMargin.w - wrapperContainerNodePadBorder.w
                        };

                        if (openPane) {
                            openPane.resize(this._containerContentBox);
                        }
                    },

                    _setupChild: function(child) {
                        // Overrides _LayoutWidget._setupChild().
                        // Put wrapper widget around the child widget, showing title

                        child._wrapperWidget = AccordionInnerContainer({
                            contentWidget: child,
                            buttonWidget: this.buttonWidget,
                            id: child.id + "_wrapper",
                            dir: child.dir,
                            lang: child.lang,
                            textDir: child.textDir,
                            parent: this
                        });

                        this.inherited(arguments);
                    },

                    addChild: function( /*dijit/_WidgetBase*/ child, /*Integer?*/ insertIndex) {
                        // Overrides _LayoutWidget.addChild().
                        if (this._started) {
                            // Adding a child to a started Accordion is complicated because children have
                            // wrapper widgets.  Default code path (calling this.inherited()) would add
                            // the new child inside another child's wrapper.

                            // First add in child as a direct child of this AccordionContainer
                            var refNode = this.containerNode;
                            if (insertIndex && typeof insertIndex == "number") {
                                var children = _Widget.prototype.getChildren.call(this); // get wrapper panes
                                if (children && children.length >= insertIndex) {
                                    refNode = children[insertIndex - 1].domNode;
                                    insertIndex = "after";
                                }
                            }
                            domConstruct.place(child.domNode, refNode, insertIndex);

                            if (!child._started) {
                                child.startup();
                            }

                            // Then stick the wrapper widget around the child widget
                            this._setupChild(child);

                            // Code below copied from StackContainer
                            topic.publish(this.id + "-addChild", child, insertIndex); // publish
                            this.layout();
                            if (!this.selectedChildWidget) {
                                this.selectChild(child);
                            }
                        } else {
                            // We haven't been started yet so just add in the child widget directly,
                            // and the wrapper will be created on startup()
                            this.inherited(arguments);
                        }
                    },

                    removeChild: function(child) {
                        // Overrides _LayoutWidget.removeChild().

                        // Destroy wrapper widget first, before StackContainer.getChildren() call.
                        // Replace wrapper widget with true child widget (ContentPane etc.).
                        // This step only happens if the AccordionContainer has been started; otherwise there's no wrapper.
                        if (child._wrapperWidget) {
                            domConstruct.place(child.domNode, child._wrapperWidget.domNode, "after");
                            child._wrapperWidget.destroy();
                            delete child._wrapperWidget;
                        }

                        domClass.remove(child.domNode, "dijitHidden");

                        this.inherited(arguments);
                    },

                    getChildren: function() {
                        // Overrides _Container.getChildren() to return content panes rather than internal AccordionInnerContainer panes
                        return array.map(this.inherited(arguments), function(child) {
                            return child.declaredClass == "dijit.layout._AccordionInnerContainer" ? child.contentWidget : child;
                        }, this);
                    },

                    destroy: function() {
                        if (this._animation) {
                            this._animation.stop();
                        }
                        array.forEach(this.getChildren(), function(child) {
                            // If AccordionContainer has been started, then each child has a wrapper widget which
                            // also needs to be destroyed.
                            if (child._wrapperWidget) {
                                child._wrapperWidget.destroy();
                            } else {
                                child.destroyRecursive();
                            }
                        });
                        this.inherited(arguments);
                    },

                    _showChild: function(child) {
                        // Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
                        child._wrapperWidget.containerNode.style.display = "block";
                        return this.inherited(arguments);
                    },

                    _hideChild: function(child) {
                        // Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
                        child._wrapperWidget.containerNode.style.display = "none";
                        this.inherited(arguments);
                    },

                    _transition: function( /*dijit/_WidgetBase?*/ newWidget, /*dijit/_WidgetBase?*/ oldWidget, /*Boolean*/ animate) {
                        // Overrides StackContainer._transition() to provide sliding of title bars etc.

                        if (has("ie") < 8) {
                            // workaround animation bugs by not animating; not worth supporting animation for IE6 & 7
                            animate = false;
                        }

                        if (this._animation) {
                            // there's an in-progress animation.  speedily end it so we can do the newly requested one
                            this._animation.stop(true);
                            delete this._animation;
                        }

                        var self = this;

                        if (newWidget) {
                            newWidget._wrapperWidget.set("selected", true);

                            var d = this._showChild(newWidget); // prepare widget to be slid in

                            // Size the new widget, in case this is the first time it's being shown,
                            // or I have been resized since the last time it was shown.
                            // Note that page must be visible for resizing to work.
                            if (this.doLayout && newWidget.resize) {
                                newWidget.resize(this._containerContentBox);
                            }
                        }

                        if (oldWidget) {
                            oldWidget._wrapperWidget.set("selected", false);
                            if (!animate) {
                                this._hideChild(oldWidget);
                            }
                        }

                        if (animate) {
                            var newContents = newWidget._wrapperWidget.containerNode,
                                oldContents = oldWidget._wrapperWidget.containerNode;

                            // During the animation we will be showing two dijitAccordionChildWrapper nodes at once,
                            // which on claro takes up 4px extra space (compared to stable AccordionContainer).
                            // Have to compensate for that by immediately shrinking the pane being closed.
                            var wrapperContainerNode = newWidget._wrapperWidget.containerNode,
                                wrapperContainerNodeMargin = domGeometry.getMarginExtents(wrapperContainerNode),
                                wrapperContainerNodePadBorder = domGeometry.getPadBorderExtents(wrapperContainerNode),
                                animationHeightOverhead = wrapperContainerNodeMargin.h + wrapperContainerNodePadBorder.h;

                            oldContents.style.height = (self._verticalSpace - animationHeightOverhead) + "px";

                            this._animation = new fx.Animation({
                                node: newContents,
                                duration: this.duration,
                                curve: [1, this._verticalSpace - animationHeightOverhead - 1],
                                onAnimate: function(value) {
                                    value = Math.floor(value); // avoid fractional values
                                    newContents.style.height = value + "px";
                                    oldContents.style.height = (self._verticalSpace - animationHeightOverhead - value) + "px";
                                },
                                onEnd: function() {
                                    delete self._animation;
                                    newContents.style.height = "auto";
                                    oldWidget._wrapperWidget.containerNode.style.display = "none";
                                    oldContents.style.height = "auto";
                                    self._hideChild(oldWidget);
                                }
                            });
                            this._animation.onStop = this._animation.onEnd;
                            this._animation.play();
                        }

                        return d; // If child has an href, promise that fires when the widget has finished loading
                    },

                    // note: we are treating the container as controller here
                    _onKeyPress: function( /*Event*/ e, /*dijit/_WidgetBase*/ fromTitle) {
                        // summary:
                        //		Handle keypress events
                        // description:
                        //		This is called from a handler on AccordionContainer.domNode
                        //		(setup in StackContainer), and is also called directly from
                        //		the click handler for accordion labels
                        if (this.disabled || e.altKey || !(fromTitle || e.ctrlKey)) {
                            return;
                        }
                        var c = e.charOrCode;
                        if ((fromTitle && (c == keys.LEFT_ARROW || c == keys.UP_ARROW)) ||
                            (e.ctrlKey && c == keys.PAGE_UP)) {
                            this._adjacent(false)._buttonWidget._onTitleClick();
                            event.stop(e);
                        } else if ((fromTitle && (c == keys.RIGHT_ARROW || c == keys.DOWN_ARROW)) ||
                            (e.ctrlKey && (c == keys.PAGE_DOWN || c == keys.TAB))) {
                            this._adjacent(true)._buttonWidget._onTitleClick();
                            event.stop(e);
                        }
                    }
                });

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/layout/AccordionPane"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                // For monkey patching
                AccordionContainer._InnerContainer = AccordionInnerContainer;
                AccordionContainer._Button = AccordionButton;

                return AccordionContainer;
            });

        },
        'dijit/form/ComboButton': function() {
            require({
                cache: {
                    'url:dijit/form/templates/ComboButton.html': "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tcellspacing='0' cellpadding='0' role=\"presentation\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonNode\" data-dojo-attach-point=\"buttonNode\" data-dojo-attach-event=\"ondijitclick:_onClick,onkeypress:_onButtonKeyPress\"\n\t\t><div id=\"${id}_button\" class=\"dijitReset dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><div class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitInline dijitButtonText\" id=\"${id}_label\" data-dojo-attach-point=\"containerNode\" role=\"presentation\"></div\n\t\t></div\n\t\t></td\n\t\t><td id=\"${id}_arrow\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\n\t\t\tdata-dojo-attach-point=\"_popupStateNode,focusNode,_buttonNode\"\n\t\t\tdata-dojo-attach-event=\"onkeypress:_onArrowKeyPress\"\n\t\t\ttitle=\"${optionsTitle}\"\n\t\t\trole=\"button\" aria-haspopup=\"true\"\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\n\t\t></td\n\t\t><td style=\"display:none !important;\"\n\t\t\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" data-dojo-attach-point=\"valueNode\" role=\"presentation\"\n\t\t/></td></tr></tbody\n></table>\n"
                }
            });
            define("dijit/form/ComboButton", [
                "dojo/_base/declare", // declare
                "dojo/_base/event", // event.stop
                "dojo/keys", // keys
                "../focus", // focus.focus()
                "./DropDownButton",
                "dojo/text!./templates/ComboButton.html"
            ], function(declare, event, keys, focus, DropDownButton, template) {

                // module:
                //		dijit/form/ComboButton

                return declare("dijit.form.ComboButton", DropDownButton, {
                    // summary:
                    //		A combination button and drop-down button.
                    //		Users can click one side to "press" the button, or click an arrow
                    //		icon to display the drop down.
                    //
                    // example:
                    // |	<button data-dojo-type="dijit/form/ComboButton" onClick="...">
                    // |		<span>Hello world</span>
                    // |		<div data-dojo-type="dijit/Menu">...</div>
                    // |	</button>
                    //
                    // example:
                    // |	var button1 = new ComboButton({label: "hello world", onClick: foo, dropDown: "myMenu"});
                    // |	dojo.body().appendChild(button1.domNode);
                    //

                    templateString: template,

                    // Map widget attributes to DOMNode attributes.
                    _setIdAttr: "", // override _FormWidgetMixin which puts id on the focusNode
                    _setTabIndexAttr: ["focusNode", "titleNode"],
                    _setTitleAttr: "titleNode",

                    // optionsTitle: String
                    //		Text that describes the options menu (accessibility)
                    optionsTitle: "",

                    baseClass: "dijitComboButton",

                    // Set classes like dijitButtonContentsHover or dijitArrowButtonActive depending on
                    // mouse action over specified node
                    cssStateNodes: {
                        "buttonNode": "dijitButtonNode",
                        "titleNode": "dijitButtonContents",
                        "_popupStateNode": "dijitDownArrowButton"
                    },

                    _focusedNode: null,

                    _onButtonKeyPress: function( /*Event*/ evt) {
                        // summary:
                        //		Handler for right arrow key when focus is on left part of button
                        if (evt.charOrCode == keys[this.isLeftToRight() ? "RIGHT_ARROW" : "LEFT_ARROW"]) {
                            focus.focus(this._popupStateNode);
                            event.stop(evt);
                        }
                    },

                    _onArrowKeyPress: function( /*Event*/ evt) {
                        // summary:
                        //		Handler for left arrow key when focus is on right part of button
                        if (evt.charOrCode == keys[this.isLeftToRight() ? "LEFT_ARROW" : "RIGHT_ARROW"]) {
                            focus.focus(this.titleNode);
                            event.stop(evt);
                        }
                    },

                    focus: function( /*String*/ position) {
                        // summary:
                        //		Focuses this widget to according to position, if specified,
                        //		otherwise on arrow node
                        // position:
                        //		"start" or "end"
                        if (!this.disabled) {
                            focus.focus(position == "start" ? this.titleNode : this._popupStateNode);
                        }
                    }
                });

            });

        },
        'url:dijit/templates/Calendar.html': "<table cellspacing=\"0\" cellpadding=\"0\" class=\"dijitCalendarContainer\" role=\"grid\" aria-labelledby=\"${id}_mddb ${id}_year\">\n\t<thead>\n\t\t<tr class=\"dijitReset dijitCalendarMonthContainer\" valign=\"top\">\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"decrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarDecrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"decreaseArrowNode\" class=\"dijitA11ySideArrow\">-</span>\n\t\t\t</th>\n\t\t\t<th class='dijitReset' colspan=\"5\">\n\t\t\t\t<div data-dojo-attach-point=\"monthNode\">\n\t\t\t\t</div>\n\t\t\t</th>\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"incrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarIncrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"increaseArrowNode\" class=\"dijitA11ySideArrow\">+</span>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr role=\"row\">\n\t\t\t${!dayCellsHtml}\n\t\t</tr>\n\t</thead>\n\t<tbody data-dojo-attach-point=\"dateRowsNode\" data-dojo-attach-event=\"onclick: _onDayClick\" class=\"dijitReset dijitCalendarBodyContainer\">\n\t\t\t${!dateRowsHtml}\n\t</tbody>\n\t<tfoot class=\"dijitReset dijitCalendarYearContainer\">\n\t\t<tr>\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"7\" role=\"presentation\">\n\t\t\t\t<div class=\"dijitCalendarYearLabel\">\n\t\t\t\t\t<span data-dojo-attach-point=\"previousYearLabelNode\" class=\"dijitInline dijitCalendarPreviousYear\" role=\"button\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"currentYearLabelNode\" class=\"dijitInline dijitCalendarSelectedYear\" role=\"button\" id=\"${id}_year\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"nextYearLabelNode\" class=\"dijitInline dijitCalendarNextYear\" role=\"button\"></span>\n\t\t\t\t</div>\n\t\t\t</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n",
        'hsbcwidget/FooterSearch': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "hsbcwidget/Search",
                    "dojo/query",
                    "dojo/on",
                    "dojo/dom-style",
                    "dojo/dom-class",
                    "dojo/dom",
                    "hsbccore/aria",
                    "dijit/focus"
                ],
                function(declare, _WidgetBase, Search, query, on, domStyle, domClass, dom, aria, focusUtil) {

                    return declare([_WidgetBase, Search], {
                        type: 'footer',
                        state: 'closed',
                        focusHandler: null,

                        postCreate: function() {
                            var self = this;

                            this._findNodes();
                            aria.setWrapper(this.domNode);

                            //Setup nodes
                            domStyle.set(this.formNode, 'display', 'none');

                            //Setup events
                            var timeout;

                            //Mouse
                            on(this.srchLinkNode, 'click', function(e) {
                                e.preventDefault();

                                if (self.state === 'open') {
                                    self.close();
                                } else {
                                    self.open();
                                }
                            });

                            //Inital state
                            this.close();
                        },

                        open: function() {
                            var self = this;

                            domClass.add(this.srchLinkNode, 'selected');
                            domStyle.set(this.formNode, 'display', 'block');
                            aria.show(this.formNode);
                            this.state = 'open';

                            if (!this.focusHandler) {
                                this.focusHandler = focusUtil.watch('curNode', function(name, oldValue, newValue) {
                                    if (!newValue) {
                                        self.close();
                                        return;
                                    }

                                    if (!dom.isDescendant(newValue, self.domNode)) {
                                        self.close();
                                        return;
                                    }
                                });
                            }

                        },

                        close: function() {
                            domClass.remove(this.srchLinkNode, 'selected');
                            domStyle.set(this.formNode, 'display', 'none');
                            aria.hide(this.formNode);
                            this.state = 'closed';

                            if (this.focusHandler) {
                                this.focusHandler.unwatch();
                                this.focusHandler = null;
                            }
                        }


                    });

                }
            );
        },
        'dijit/form/_AutoCompleterMixin': function() {
            define("dijit/form/_AutoCompleterMixin", [
                "dojo/data/util/filter", // patternToRegExp
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.get
                "dojo/_base/event", // event.stop
                "dojo/keys",
                "dojo/_base/lang", // lang.clone lang.hitch
                "dojo/query", // query
                "dojo/regexp", // regexp.escapeString
                "dojo/sniff", // has("ie")
                "dojo/string", // string.substitute
                "./DataList",
                "../registry", // registry.byId
                "./_TextBoxMixin", // defines _TextBoxMixin.selectInputText
                "./_SearchMixin"
            ], function(filter, declare, domAttr, event, keys, lang, query, regexp, has, string,
                DataList, registry, _TextBoxMixin, SearchMixin) {

                // module:
                //		dijit/form/_AutoCompleterMixin

                return declare("dijit.form._AutoCompleterMixin", SearchMixin, {
                    // summary:
                    //		A mixin that implements the base functionality for `dijit/form/ComboBox`/`dijit/form/FilteringSelect`
                    // description:
                    //		All widgets that mix in dijit/form/_AutoCompleterMixin must extend `dijit/form/_FormValueWidget`.
                    // tags:
                    //		protected

                    // item: Object
                    //		This is the item returned by the dojo/store/api/Store implementation that
                    //		provides the data for this ComboBox, it's the currently selected item.
                    item: null,

                    // autoComplete: Boolean
                    //		If user types in a partial string, and then tab out of the `<input>` box,
                    //		automatically copy the first entry displayed in the drop down list to
                    //		the `<input>` field
                    autoComplete: true,

                    // highlightMatch: String
                    //		One of: "first", "all" or "none".
                    //
                    //		If the ComboBox/FilteringSelect opens with the search results and the searched
                    //		string can be found, it will be highlighted.  If set to "all"
                    //		then will probably want to change `queryExpr` parameter to '*${0}*'
                    //
                    //		Highlighting is only performed when `labelType` is "text", so as to not
                    //		interfere with any HTML markup an HTML label might contain.
                    highlightMatch: "first",

                    // labelAttr: String?
                    //		The entries in the drop down list come from this attribute in the
                    //		dojo.data items.
                    //		If not specified, the searchAttr attribute is used instead.
                    labelAttr: "",

                    // labelType: String
                    //		Specifies how to interpret the labelAttr in the data store items.
                    //		Can be "html" or "text".
                    labelType: "text",

                    // Flags to _HasDropDown to limit height of drop down to make it fit in viewport
                    maxHeight: -1,

                    // For backwards compatibility let onClick events propagate, even clicks on the down arrow button
                    _stopClickEvents: false,

                    _getCaretPos: function( /*DomNode*/ element) {
                        // khtml 3.5.2 has selection* methods as does webkit nightlies from 2005-06-22
                        var pos = 0;
                        if (typeof(element.selectionStart) == "number") {
                            // FIXME: this is totally borked on Moz < 1.3. Any recourse?
                            pos = element.selectionStart;
                        } else if (has("ie")) {
                            // in the case of a mouse click in a popup being handled,
                            // then the win.doc.selection is not the textarea, but the popup
                            // var r = win.doc.selection.createRange();
                            // hack to get IE 6 to play nice. What a POS browser.
                            var tr = element.ownerDocument.selection.createRange().duplicate();
                            var ntr = element.createTextRange();
                            tr.move("character", 0);
                            ntr.move("character", 0);
                            try {
                                // If control doesn't have focus, you get an exception.
                                // Seems to happen on reverse-tab, but can also happen on tab (seems to be a race condition - only happens sometimes).
                                // There appears to be no workaround for this - googled for quite a while.
                                ntr.setEndPoint("EndToEnd", tr);
                                pos = String(ntr.text).replace(/\r/g, "").length;
                            } catch (e) {
                                // If focus has shifted, 0 is fine for caret pos.
                            }
                        }
                        return pos;
                    },

                    _setCaretPos: function( /*DomNode*/ element, /*Number*/ location) {
                        location = parseInt(location);
                        _TextBoxMixin.selectInputText(element, location, location);
                    },

                    _setDisabledAttr: function( /*Boolean*/ value) {
                        // Additional code to set disabled state of ComboBox node.
                        // Overrides _FormValueWidget._setDisabledAttr() or ValidationTextBox._setDisabledAttr().
                        this.inherited(arguments);
                        this.domNode.setAttribute("aria-disabled", value ? "true" : "false");
                    },

                    _onKey: function( /*Event*/ evt) {
                        // summary:
                        //		Handles keyboard events

                        if (evt.charCode >= 32) {
                            return;
                        } // alphanumeric reserved for searching

                        var key = evt.charCode || evt.keyCode;

                        // except for cutting/pasting case - ctrl + x/v
                        if (key == keys.ALT || key == keys.CTRL || key == keys.META || key == keys.SHIFT) {
                            return; // throw out spurious events
                        }

                        var pw = this.dropDown;
                        var highlighted = null;
                        this._abortQuery();

                        // _HasDropDown will do some of the work:
                        //
                        //	1. when drop down is not yet shown:
                        //		- if user presses the down arrow key, call loadDropDown()
                        //	2. when drop down is already displayed:
                        //		- on ESC key, call closeDropDown()
                        //		- otherwise, call dropDown.handleKey() to process the keystroke
                        this.inherited(arguments);

                        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
                            return;
                        } // don't process keys with modifiers  - but we want shift+TAB

                        if (this._opened) {
                            highlighted = pw.getHighlightedOption();
                        }
                        switch (key) {
                            case keys.PAGE_DOWN:
                            case keys.DOWN_ARROW:
                            case keys.PAGE_UP:
                            case keys.UP_ARROW:
                                // Keystroke caused ComboBox_menu to move to a different item.
                                // Copy new item to <input> box.
                                if (this._opened) {
                                    this._announceOption(highlighted);
                                }
                                event.stop(evt);
                                break;

                            case keys.ENTER:
                                // prevent submitting form if user presses enter. Also
                                // prevent accepting the value if either Next or Previous
                                // are selected
                                if (highlighted) {
                                    // only stop event on prev/next
                                    if (highlighted == pw.nextButton) {
                                        this._nextSearch(1);
                                        event.stop(evt); // prevent submit
                                        break;
                                    } else if (highlighted == pw.previousButton) {
                                        this._nextSearch(-1);
                                        event.stop(evt); // prevent submit
                                        break;
                                    }
                                    event.stop(evt); // prevent submit if ENTER was to choose an item
                                } else {
                                    // Update 'value' (ex: KY) according to currently displayed text
                                    this._setBlurValue(); // set value if needed
                                    this._setCaretPos(this.focusNode, this.focusNode.value.length); // move cursor to end and cancel highlighting
                                }
                                // fall through

                            case keys.TAB:
                                var newvalue = this.get('displayedValue');
                                //	if the user had More Choices selected fall into the
                                //	_onBlur handler
                                if (pw && (
                                        newvalue == pw._messages["previousMessage"] ||
                                        newvalue == pw._messages["nextMessage"])) {
                                    break;
                                }
                                if (highlighted) {
                                    this._selectOption(highlighted);
                                }
                                // fall through

                            case keys.ESCAPE:
                                if (this._opened) {
                                    this._lastQuery = null; // in case results come back later
                                    this.closeDropDown();
                                }
                                break;
                        }
                    },

                    _autoCompleteText: function( /*String*/ text) {
                        // summary:
                        //		Fill in the textbox with the first item from the drop down
                        //		list, and highlight the characters that were
                        //		auto-completed. For example, if user typed "CA" and the
                        //		drop down list appeared, the textbox would be changed to
                        //		"California" and "ifornia" would be highlighted.

                        var fn = this.focusNode;

                        // IE7: clear selection so next highlight works all the time
                        _TextBoxMixin.selectInputText(fn, fn.value.length);
                        // does text autoComplete the value in the textbox?
                        var caseFilter = this.ignoreCase ? 'toLowerCase' : 'substr';
                        if (text[caseFilter](0).indexOf(this.focusNode.value[caseFilter](0)) == 0) {
                            var cpos = this.autoComplete ? this._getCaretPos(fn) : fn.value.length;
                            // only try to extend if we added the last character at the end of the input
                            if ((cpos + 1) > fn.value.length) {
                                // only add to input node as we would overwrite Capitalisation of chars
                                // actually, that is ok
                                fn.value = text; //.substr(cpos);
                                // visually highlight the autocompleted characters
                                _TextBoxMixin.selectInputText(fn, cpos);
                            }
                        } else {
                            // text does not autoComplete; replace the whole value and highlight
                            fn.value = text;
                            _TextBoxMixin.selectInputText(fn);
                        }
                    },

                    _openResultList: function( /*Object*/ results, /*Object*/ query, /*Object*/ options) {
                        // summary:
                        //		Callback when a search completes.
                        // description:
                        //		1. generates drop-down list and calls _showResultList() to display it
                        //		2. if this result list is from user pressing "more choices"/"previous choices"
                        //			then tell screen reader to announce new option
                        var wasSelected = this.dropDown.getHighlightedOption();
                        this.dropDown.clearResultList();
                        if (!results.length && options.start == 0) { // if no results and not just the previous choices button
                            this.closeDropDown();
                            return;
                        }
                        this._nextSearch = this.dropDown.onPage = lang.hitch(this, function(direction) {
                            results.nextPage(direction !== -1);
                            this.focus();
                        });

                        // Fill in the textbox with the first item from the drop down list,
                        // and highlight the characters that were auto-completed. For
                        // example, if user typed "CA" and the drop down list appeared, the
                        // textbox would be changed to "California" and "ifornia" would be
                        // highlighted.

                        this.dropDown.createOptions(
                            results,
                            options,
                            lang.hitch(this, "_getMenuLabelFromItem")
                        );

                        // show our list (only if we have content, else nothing)
                        this._showResultList();

                        // #4091:
                        //		tell the screen reader that the paging callback finished by
                        //		shouting the next choice
                        if ("direction" in options) {
                            if (options.direction) {
                                this.dropDown.highlightFirstOption();
                            } else if (!options.direction) {
                                this.dropDown.highlightLastOption();
                            }
                            if (wasSelected) {
                                this._announceOption(this.dropDown.getHighlightedOption());
                            }
                        } else if (this.autoComplete && !this._prev_key_backspace
                            // when the user clicks the arrow button to show the full list,
                            // startSearch looks for "*".
                            // it does not make sense to autocomplete
                            // if they are just previewing the options available.
                            &&
                            !/^[*]+$/.test(query[this.searchAttr].toString())) {
                            this._announceOption(this.dropDown.containerNode.firstChild.nextSibling); // 1st real item
                        }
                    },

                    _showResultList: function() {
                        // summary:
                        //		Display the drop down if not already displayed, or if it is displayed, then
                        //		reposition it if necessary (reposition may be necessary if drop down's height changed).
                        this.closeDropDown(true);
                        this.openDropDown();
                        this.domNode.setAttribute("aria-expanded", "true");
                    },

                    loadDropDown: function( /*Function*/ /*===== callback =====*/ ) {
                        // Overrides _HasDropDown.loadDropDown().
                        // This is called when user has pressed button icon or pressed the down arrow key
                        // to open the drop down.
                        this._startSearchAll();
                    },

                    isLoaded: function() {
                        // signal to _HasDropDown that it needs to call loadDropDown() to load the
                        // drop down asynchronously before displaying it
                        return false;
                    },

                    closeDropDown: function() {
                        // Overrides _HasDropDown.closeDropDown().  Closes the drop down (assuming that it's open).
                        // This method is the callback when the user types ESC or clicking
                        // the button icon while the drop down is open.  It's also called by other code.
                        this._abortQuery();
                        if (this._opened) {
                            this.inherited(arguments);
                            this.domNode.setAttribute("aria-expanded", "false");
                            this.focusNode.removeAttribute("aria-activedescendant");
                        }
                    },

                    _setBlurValue: function() {
                        // if the user clicks away from the textbox OR tabs away, set the
                        // value to the textbox value
                        // #4617:
                        //		if value is now more choices or previous choices, revert
                        //		the value
                        var newvalue = this.get('displayedValue');
                        var pw = this.dropDown;
                        if (pw && (
                                newvalue == pw._messages["previousMessage"] ||
                                newvalue == pw._messages["nextMessage"]
                            )) {
                            this._setValueAttr(this._lastValueReported, true);
                        } else if (typeof this.item == "undefined") {
                            // Update 'value' (ex: KY) according to currently displayed text
                            this.item = null;
                            this.set('displayedValue', newvalue);
                        } else {
                            if (this.value != this._lastValueReported) {
                                this._handleOnChange(this.value, true);
                            }
                            this._refreshState();
                        }
                    },

                    _setItemAttr: function( /*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue) {
                        // summary:
                        //		Set the displayed valued in the input box, and the hidden value
                        //		that gets submitted, based on a dojo.data store item.
                        // description:
                        //		Users shouldn't call this function; they should be calling
                        //		set('item', value)
                        // tags:
                        //		private
                        var value = '';
                        if (item) {
                            if (!displayedValue) {
                                displayedValue = this.store._oldAPI ? // remove getValue() for 2.0 (old dojo.data API)
                                    this.store.getValue(item, this.searchAttr) : item[this.searchAttr];
                            }
                            value = this._getValueField() != this.searchAttr ? this.store.getIdentity(item) : displayedValue;
                        }
                        this.set('value', value, priorityChange, displayedValue, item);
                    },

                    _announceOption: function( /*Node*/ node) {
                        // summary:
                        //		a11y code that puts the highlighted option in the textbox.
                        //		This way screen readers will know what is happening in the
                        //		menu.

                        if (!node) {
                            return;
                        }
                        // pull the text value from the item attached to the DOM node
                        var newValue;
                        if (node == this.dropDown.nextButton ||
                            node == this.dropDown.previousButton) {
                            newValue = node.innerHTML;
                            this.item = undefined;
                            this.value = '';
                        } else {
                            var item = this.dropDown.items[node.getAttribute("item")];
                            newValue = (this.store._oldAPI ? // remove getValue() for 2.0 (old dojo.data API)
                                this.store.getValue(item, this.searchAttr) : item[this.searchAttr]).toString();
                            this.set('item', item, false, newValue);
                        }
                        // get the text that the user manually entered (cut off autocompleted text)
                        this.focusNode.value = this.focusNode.value.substring(0, this._lastInput.length);
                        // set up ARIA activedescendant
                        this.focusNode.setAttribute("aria-activedescendant", domAttr.get(node, "id"));
                        // autocomplete the rest of the option to announce change
                        this._autoCompleteText(newValue);
                    },

                    _selectOption: function( /*DomNode*/ target) {
                        // summary:
                        //		Menu callback function, called when an item in the menu is selected.
                        this.closeDropDown();
                        if (target) {
                            this._announceOption(target);
                        }
                        this._setCaretPos(this.focusNode, this.focusNode.value.length);
                        this._handleOnChange(this.value, true);
                    },

                    _startSearchAll: function() {
                        this._startSearch('');
                    },

                    _startSearchFromInput: function() {
                        this.item = undefined; // undefined means item needs to be set
                        this.inherited(arguments);
                    },

                    _startSearch: function( /*String*/ key) {
                        // summary:
                        //		Starts a search for elements matching key (key=="" means to return all items),
                        //		and calls _openResultList() when the search completes, to display the results.
                        if (!this.dropDown) {
                            var popupId = this.id + "_popup",
                                dropDownConstructor = lang.isString(this.dropDownClass) ?
                                lang.getObject(this.dropDownClass, false) : this.dropDownClass;
                            this.dropDown = new dropDownConstructor({
                                onChange: lang.hitch(this, this._selectOption),
                                id: popupId,
                                dir: this.dir,
                                textDir: this.textDir
                            });
                            this.focusNode.removeAttribute("aria-activedescendant");
                            this.textbox.setAttribute("aria-owns", popupId); // associate popup with textbox
                        }
                        this._lastInput = key; // Store exactly what was entered by the user.
                        this.inherited(arguments);
                    },

                    _getValueField: function() {
                        // summary:
                        //		Helper for postMixInProperties() to set this.value based on data inlined into the markup.
                        //		Returns the attribute name in the item (in dijit/form/_ComboBoxDataStore) to use as the value.
                        return this.searchAttr;
                    },

                    //////////// INITIALIZATION METHODS ///////////////////////////////////////

                    postMixInProperties: function() {
                        this.inherited(arguments);
                        if (!this.store) {
                            var srcNodeRef = this.srcNodeRef;
                            // if user didn't specify store, then assume there are option tags
                            this.store = new DataList({}, srcNodeRef);

                            // if there is no value set and there is an option list, set
                            // the value to the first value to be consistent with native Select
                            // Firefox and Safari set value
                            // IE6 and Opera set selectedIndex, which is automatically set
                            // by the selected attribute of an option tag
                            // IE6 does not set value, Opera sets value = selectedIndex
                            if (!("value" in this.params)) {
                                var item = (this.item = this.store.fetchSelectedItem());
                                if (item) {
                                    var valueField = this._getValueField();
                                    // remove getValue() for 2.0 (old dojo.data API)
                                    this.value = this.store._oldAPI ? this.store.getValue(item, valueField) : item[valueField];
                                }
                            }
                        }
                    },

                    postCreate: function() {
                        // summary:
                        //		Subclasses must call this method from their postCreate() methods
                        // tags:
                        //		protected

                        // find any associated label element and add to ComboBox node.
                        var label = query('label[for="' + this.id + '"]');
                        if (label.length) {
                            if (!label[0].id) {
                                label[0].id = this.id + "_label";
                            }
                            this.domNode.setAttribute("aria-labelledby", label[0].id);

                        }
                        this.inherited(arguments);
                        this.connect(this, "onSearch", "_openResultList");
                    },

                    _getMenuLabelFromItem: function( /*Item*/ item) {
                        var label = this.labelFunc(item, this.store),
                            labelType = this.labelType;
                        // If labelType is not "text" we don't want to screw any markup ot whatever.
                        if (this.highlightMatch != "none" && this.labelType == "text" && this._lastInput) {
                            label = this.doHighlight(label, this._lastInput);
                            labelType = "html";
                        }
                        return {
                            html: labelType == "html",
                            label: label
                        };
                    },

                    doHighlight: function( /*String*/ label, /*String*/ find) {
                        // summary:
                        //		Highlights the string entered by the user in the menu.  By default this
                        //		highlights the first occurrence found. Override this method
                        //		to implement your custom highlighting.
                        // tags:
                        //		protected

                        var
                            // Add (g)lobal modifier when this.highlightMatch == "all" and (i)gnorecase when this.ignoreCase == true
                            modifiers = (this.ignoreCase ? "i" : "") + (this.highlightMatch == "all" ? "g" : ""),
                            i = this.queryExpr.indexOf("${0}");
                        find = regexp.escapeString(find); // escape regexp special chars
                        //If < appears in label, and user presses t, we don't want to highlight the t in the escaped "&lt;"
                        //first find out every occurences of "find", wrap each occurence in a pair of "\uFFFF" characters (which
                        //should not appear in any string). then html escape the whole string, and replace '\uFFFF" with the
                        //HTML highlight markup. 
                        return this._escapeHtml(label.replace(
                            new RegExp((i == 0 ? "^" : "") + "(" + find + ")" + (i == (this.queryExpr.length - 4) ? "$" : ""), modifiers),
                            '\uFFFF$1\uFFFF')).replace(
                            /\uFFFF([^\uFFFF]+)\uFFFF/g, '<span class="dijitComboBoxHighlightMatch">$1</span>'
                        ); // returns String, (almost) valid HTML (entities encoded)
                    },

                    _escapeHtml: function( /*String*/ str) {
                        // TODO Should become dojo.html.entities(), when exists use instead
                        // summary:
                        //		Adds escape sequences for special characters in XML: `&<>"'`
                        str = String(str).replace(/&/gm, "&amp;").replace(/</gm, "&lt;")
                            .replace(/>/gm, "&gt;").replace(/"/gm, "&quot;"); //balance"
                        return str; // string
                    },

                    reset: function() {
                        // Overrides the _FormWidget.reset().
                        // Additionally reset the .item (to clean up).
                        this.item = null;
                        this.inherited(arguments);
                    },

                    labelFunc: function(item, store) {
                        // summary:
                        //		Computes the label to display based on the dojo.data store item.
                        // item: Object
                        //		The item from the store
                        // store: dojo/store/api/Store
                        //		The store.
                        // returns:
                        //		The label that the ComboBox should display
                        // tags:
                        //		private

                        // Use toString() because XMLStore returns an XMLItem whereas this
                        // method is expected to return a String (#9354).
                        // Remove getValue() for 2.0 (old dojo.data API)
                        return (store._oldAPI ? store.getValue(item, this.labelAttr || this.searchAttr) :
                            item[this.labelAttr || this.searchAttr]).toString(); // String
                    },

                    _setValueAttr: function( /*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue, /*item?*/ item) {
                        // summary:
                        //		Hook so set('value', value) works.
                        // description:
                        //		Sets the value of the select.
                        this._set("item", item || null); // value not looked up in store
                        if (value == null /* or undefined */ ) {
                            value = '';
                        } // null translates to blank
                        this.inherited(arguments);
                    },
                    _setTextDirAttr: function( /*String*/ textDir) {
                        // summary:
                        //		Setter for textDir, needed for the dropDown's textDir update.
                        // description:
                        //		Users shouldn't call this function; they should be calling
                        //		set('textDir', value)
                        // tags:
                        //		private
                        this.inherited(arguments);
                        // update the drop down also (_ComboBoxMenuMixin)
                        if (this.dropDown) {
                            this.dropDown._set("textDir", textDir);
                        }
                    }
                });
            });

        },
        'dojo/NodeList-traverse': function() {
            define("dojo/NodeList-traverse", ["./query", "./_base/lang", "./_base/array"], function(dquery, lang, array) {

                // module:
                //		dojo/NodeList-traverse

                /*=====
                return function(){
                	// summary:
                	//		Adds chainable methods to dojo.query() / NodeList instances for traversing the DOM
                };
                =====*/

                var NodeList = dquery.NodeList;

                lang.extend(NodeList, {
                    _buildArrayFromCallback: function( /*Function*/ callback) {
                        // summary:
                        //		builds a new array of possibly differing size based on the input list.
                        //		Since the returned array is likely of different size than the input array,
                        //		the array's map function cannot be used.
                        var ary = [];
                        for (var i = 0; i < this.length; i++) {
                            var items = callback.call(this[i], this[i], ary);
                            if (items) {
                                ary = ary.concat(items);
                            }
                        }
                        return ary; //Array
                    },

                    _getUniqueAsNodeList: function( /*Array*/ nodes) {
                        // summary:
                        //		given a list of nodes, make sure only unique
                        //		elements are returned as our NodeList object.
                        //		Does not call _stash().
                        var ary = [];
                        //Using for loop for better speed.
                        for (var i = 0, node; node = nodes[i]; i++) {
                            //Should be a faster way to do this. dojo.query has a private
                            //_zip function that may be inspirational, but there are pathways
                            //in query that force nozip?
                            if (node.nodeType == 1 && array.indexOf(ary, node) == -1) {
                                ary.push(node);
                            }
                        }
                        return this._wrap(ary, null, this._NodeListCtor); // dojo/NodeList
                    },

                    _getUniqueNodeListWithParent: function( /*Array*/ nodes, /*String*/ query) {
                        // summary:
                        //		gets unique element nodes, filters them further
                        //		with an optional query and then calls _stash to track parent NodeList.
                        var ary = this._getUniqueAsNodeList(nodes);
                        ary = (query ? dquery._filterResult(ary, query) : ary);
                        return ary._stash(this); // dojo/NodeList
                    },

                    _getRelatedUniqueNodes: function( /*String?*/ query, /*Function*/ callback) {
                        // summary:
                        //		cycles over all the nodes and calls a callback
                        //		to collect nodes for a possible inclusion in a result.
                        //		The callback will get two args: callback(node, ary),
                        //		where ary is the array being used to collect the nodes.
                        return this._getUniqueNodeListWithParent(this._buildArrayFromCallback(callback), query); // dojo/NodeList
                    },

                    children: function( /*String?*/ query) {
                        // summary:
                        //		Returns all immediate child elements for nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the child elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		all immediate child elements for the nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".container").children();
                        //		returns the four divs that are children of the container div.
                        //		Running this code:
                        //	|	dojo.query(".container").children(".red");
                        //		returns the two divs that have the class "red".
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            return lang._toArray(node.childNodes);
                        }); // dojo/NodeList
                    },

                    closest: function( /*String*/ query, /*String|DOMNode?*/ root) {
                        // summary:
                        //		Returns closest parent that matches query, including current node in this
                        //		dojo/NodeList if it matches the query.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // root:
                        //		If specified, query is relative to "root" rather than document body.
                        // returns:
                        //		the closest parent that matches the query, including the current
                        //		node in this dojo/NodeList if it matches the query.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        //	|		<div class="red">Red One</div>
                        //	|		Some Text
                        //	|		<div class="blue">Blue One</div>
                        //	|		<div class="red">Red Two</div>
                        //	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".red").closest(".container");
                        //		returns the div with class "container".
                        return this._getRelatedUniqueNodes(null, function(node, ary) {
                            do {
                                if (dquery._filterResult([node], query, root).length) {
                                    return node;
                                }
                            } while (node != root && (node = node.parentNode) && node.nodeType == 1);
                            return null; //To make rhino strict checking happy.
                        }); // dojo/NodeList
                    },

                    parent: function( /*String?*/ query) {
                        // summary:
                        //		Returns immediate parent elements for nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the parent elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		immediate parent elements for nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue first"><span class="text">Blue One</span></div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue"><span class="text">Blue Two</span></div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".text").parent();
                        //		returns the two divs with class "blue".
                        //		Running this code:
                        //	|	dojo.query(".text").parent(".first");
                        //		returns the one div with class "blue" and "first".
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            return node.parentNode;
                        }); // dojo/NodeList
                    },

                    parents: function( /*String?*/ query) {
                        // summary:
                        //		Returns all parent elements for nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the child elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		all parent elements for nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue first"><span class="text">Blue One</span></div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue"><span class="text">Blue Two</span></div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".text").parents();
                        //		returns the two divs with class "blue", the div with class "container",
                        // 	|	the body element and the html element.
                        //		Running this code:
                        //	|	dojo.query(".text").parents(".container");
                        //		returns the one div with class "container".
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            var pary = [];
                            while (node.parentNode) {
                                node = node.parentNode;
                                pary.push(node);
                            }
                            return pary;
                        }); // dojo/NodeList
                    },

                    siblings: function( /*String?*/ query) {
                        // summary:
                        //		Returns all sibling elements for nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the sibling elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		all sibling elements for nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue first">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".first").siblings();
                        //		returns the two divs with class "red" and the other div
                        // 	|	with class "blue" that does not have "first".
                        //		Running this code:
                        //	|	dojo.query(".first").siblings(".red");
                        //		returns the two div with class "red".
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            var pary = [];
                            var nodes = (node.parentNode && node.parentNode.childNodes);
                            for (var i = 0; i < nodes.length; i++) {
                                if (nodes[i] != node) {
                                    pary.push(nodes[i]);
                                }
                            }
                            return pary;
                        }); // dojo/NodeList
                    },

                    next: function( /*String?*/ query) {
                        // summary:
                        //		Returns the next element for nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the next elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		the next element for nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue first">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue last">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".first").next();
                        //		returns the div with class "red" and has innerHTML of "Red Two".
                        //		Running this code:
                        //	|	dojo.query(".last").next(".red");
                        //		does not return any elements.
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            var next = node.nextSibling;
                            while (next && next.nodeType != 1) {
                                next = next.nextSibling;
                            }
                            return next;
                        }); // dojo/NodeList
                    },

                    nextAll: function( /*String?*/ query) {
                        // summary:
                        //		Returns all sibling elements that come after the nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the sibling elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		all sibling elements that come after the nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue first">Blue One</div>
                        // 	|		<div class="red next">Red Two</div>
                        // 	|		<div class="blue next">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".first").nextAll();
                        //		returns the two divs with class of "next".
                        //		Running this code:
                        //	|	dojo.query(".first").nextAll(".red");
                        //		returns the one div with class "red" and innerHTML "Red Two".
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            var pary = [];
                            var next = node;
                            while ((next = next.nextSibling)) {
                                if (next.nodeType == 1) {
                                    pary.push(next);
                                }
                            }
                            return pary;
                        }); // dojo/NodeList
                    },

                    prev: function( /*String?*/ query) {
                        // summary:
                        //		Returns the previous element for nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the previous elements.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		the previous element for nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue first">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".first").prev();
                        //		returns the div with class "red" and has innerHTML of "Red One".
                        //		Running this code:
                        //	|	dojo.query(".first").prev(".blue");
                        //		does not return any elements.
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            var prev = node.previousSibling;
                            while (prev && prev.nodeType != 1) {
                                prev = prev.previousSibling;
                            }
                            return prev;
                        }); // dojo/NodeList
                    },

                    prevAll: function( /*String?*/ query) {
                        // summary:
                        //		Returns all sibling elements that come before the nodes in this dojo/NodeList.
                        //		Optionally takes a query to filter the sibling elements.
                        // description:
                        //		The returned nodes will be in reverse DOM order -- the first node in the list will
                        //		be the node closest to the original node/NodeList.
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // query:
                        //		a CSS selector.
                        // returns:
                        //		all sibling elements that come before the nodes in this dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red prev">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue prev">Blue One</div>
                        // 	|		<div class="red second">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".second").prevAll();
                        //		returns the two divs with class of "prev".
                        //		Running this code:
                        //	|	dojo.query(".first").prevAll(".red");
                        //		returns the one div with class "red prev" and innerHTML "Red One".
                        return this._getRelatedUniqueNodes(query, function(node, ary) {
                            var pary = [];
                            var prev = node;
                            while ((prev = prev.previousSibling)) {
                                if (prev.nodeType == 1) {
                                    pary.push(prev);
                                }
                            }
                            return pary;
                        }); // dojo/NodeList
                    },

                    andSelf: function() {
                        // summary:
                        //		Adds the nodes from the previous dojo/NodeList to the current dojo/NodeList.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red prev">Red One</div>
                        // 	|		Some Text
                        // 	|		<div class="blue prev">Blue One</div>
                        // 	|		<div class="red second">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".second").prevAll().andSelf();
                        //		returns the two divs with class of "prev", as well as the div with class "second".
                        return this.concat(this._parent); // dojo/NodeList
                    },

                    //Alternate methods for the :first/:last/:even/:odd pseudos.
                    first: function() {
                        // summary:
                        //		Returns the first node in this dojo/NodeList as a dojo/NodeList.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // returns:
                        //		the first node in this dojo/NodeList
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue first">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue last">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".blue").first();
                        //		returns the div with class "blue" and "first".
                        return this._wrap(((this[0] && [this[0]]) || []), this); // dojo/NodeList
                    },

                    last: function() {
                        // summary:
                        //		Returns the last node in this dojo/NodeList as a dojo/NodeList.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // returns:
                        //		the last node in this dojo/NodeList
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue first">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue last">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".blue").last();
                        //		returns the last div with class "blue",
                        return this._wrap((this.length ? [this[this.length - 1]] : []), this); // dojo/NodeList
                    },

                    even: function() {
                        // summary:
                        //		Returns the even nodes in this dojo/NodeList as a dojo/NodeList.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // returns:
                        //		the even nodes in this dojo/NodeList
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="interior red">Red One</div>
                        // 	|		<div class="interior blue">Blue One</div>
                        // 	|		<div class="interior red">Red Two</div>
                        // 	|		<div class="interior blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".interior").even();
                        //		returns the two divs with class "blue"
                        return this.filter(function(item, i) {
                            return i % 2 != 0;
                        }); // dojo/NodeList
                    },

                    odd: function() {
                        // summary:
                        //		Returns the odd nodes in this dojo/NodeList as a dojo/NodeList.
                        // description:
                        //		.end() can be used on the returned dojo/NodeList to get back to the
                        //		original dojo/NodeList.
                        // returns:
                        //		the odd nodes in this dojo/NodeList
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="interior red">Red One</div>
                        // 	|		<div class="interior blue">Blue One</div>
                        // 	|		<div class="interior red">Red Two</div>
                        // 	|		<div class="interior blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".interior").odd();
                        //		returns the two divs with class "red"
                        return this.filter(function(item, i) {
                            return i % 2 == 0;
                        }); // dojo/NodeList
                    }
                });

                return NodeList;
            });

        },
        'url:dijit/layout/templates/_ScrollingTabControllerButton.html': "<div data-dojo-attach-event=\"onclick:_onClick\" class=\"dijitTabInnerDiv dijitTabContent dijitButtonContents\"  data-dojo-attach-point=\"focusNode\">\n\t<img role=\"presentation\" alt=\"\" src=\"${_blankGif}\" class=\"dijitTabStripIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t<span data-dojo-attach-point=\"containerNode,titleNode\" class=\"dijitButtonText\"></span>\n</div>",
        'url:hsbcwidget/themes/ursula/templates/randCharChal.html': "<div class=\"securityDetails row\">\r\n    <div class=\"question clearfix jsQuestion\">\r\n       <p class=\"label\">${staticTemplateData.pleaseEnter}</p>\r\n        <div class=\"textinputSection jsInputWrapper\">\r\n            <div class=\"tooltip\">\r\n                <a class=\"tooltipTrigger\" id=\"jsTooltipRandCharChal\" href=\"javascript:;\">\r\n                    <img src=\"${staticTemplateData.tooltipImageSrc}\" alt=\"More Info\"/>\r\n                </a>\r\n                <div data-dojo-type=\"dijit/Tooltip\" data-dojo-props=\"connectId: 'jsTooltipRandCharChal', position: ['above']\">\r\n                    ${staticTemplateData.tooltipText}\r\n                </div>\r\n            </div>\r\n\r\n\t\t\t<div class=\"textInput\">\r\n\t\t\t\t<fieldset>\r\n\t\t\t\t<legend class=\"hidden\">Enter your password characters</legend>\r\n\t\t\t\t<label class=\"hidden\" for=\"pass1\">character 1</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass1\" id=\"pass1\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass1}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass2\">character 2</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass2\" id=\"pass2\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass2}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass3\">character 3</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass3\" id=\"pass3\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass3}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass4\">character 4</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass4\" id=\"pass4\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass4}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass5\">character 5</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass5\" id=\"pass5\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass5}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass6\">character 6</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass6\" id=\"pass6\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass6}\">\r\n\t\t\t\t<span class=\"dotted\">&hellip;</span>\r\n\t\t\t\t<label class=\"hidden\" for=\"pass7\">character 7</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass7\" id=\"pass7\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass7}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass8\">character 8</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass8\" id=\"pass8\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass8}\">\r\n\t\t\t\t</fieldset>\r\n\t\t\t\t<div><span class=\"mandatory\">*</span></div>\r\n\t\t\t\t<a href=\"${staticTemplateData.forgottenHref}\" title=\"${staticTemplateData.forgottenMsg}\" class=\"linkUnderline marginAdj\">${staticTemplateData.forgottenMsg}</a>\r\n\t\t\t</div>\r\n\t\t\t<div role=\"alert\" aria-hidden=\"false\" class=\"rValidationMsg ValidationMsgHide dijitTooltip dijitTooltipRight\">\r\n\t\t\t\t<div align=\"left\" class=\"dijitTooltipContainer dijitTooltipContents\">${staticTemplateData.validationMsg}</div>\r\n\t\t\t\t<div class=\"dijitTooltipConnector\"></div>\r\n\t\t\t</div>\r\n        </div>\r\n    </div>\r\n</div>",
        'hsbccore/aria': function() {
            define("hsbccore/aria", [
                "dojo/dom-attr"
            ], function(domAttr) {

                return {
                    setWrapper: function(node, relevant, live) {
                        relevant = relevant || 'all';
                        live = live || 'polite';

                        domAttr.set(node, {
                            'aria-relevant': relevant,
                            'aria-live': live
                        });
                    },

                    show: function(node) {
                        domAttr.set(node, 'aria-hidden', 'false');
                    },

                    hide: function(node) {
                        domAttr.set(node, 'aria-hidden', 'true');
                    }
                };
            });

        },
        'dijit/form/MappedTextBox': function() {
            define("dijit/form/MappedTextBox", [
                "dojo/_base/declare", // declare
                "dojo/dom-construct", // domConstruct.place
                "./ValidationTextBox"
            ], function(declare, domConstruct, ValidationTextBox) {

                // module:
                //		dijit/form/MappedTextBox

                return declare("dijit.form.MappedTextBox", ValidationTextBox, {
                    // summary:
                    //		A dijit/form/ValidationTextBox subclass which provides a base class for widgets that have
                    //		a visible formatted display value, and a serializable
                    //		value in a hidden input field which is actually sent to the server.
                    // description:
                    //		The visible display may
                    //		be locale-dependent and interactive.  The value sent to the server is stored in a hidden
                    //		input field which uses the `name` attribute declared by the original widget.  That value sent
                    //		to the server is defined by the dijit/form/MappedTextBox.serialize() method and is typically
                    //		locale-neutral.
                    // tags:
                    //		protected

                    postMixInProperties: function() {
                        this.inherited(arguments);

                        // we want the name attribute to go to the hidden <input>, not the displayed <input>,
                        // so override _FormWidget.postMixInProperties() setting of nameAttrSetting
                        this.nameAttrSetting = "";
                    },

                    // Override default behavior to assign name to focusNode
                    _setNameAttr: null,

                    serialize: function(val /*=====, options =====*/ ) {
                        // summary:
                        //		Overridable function used to convert the get('value') result to a canonical
                        //		(non-localized) string.  For example, will print dates in ISO format, and
                        //		numbers the same way as they are represented in javascript.
                        // val: anything
                        // options: Object?
                        // tags:
                        //		protected extension
                        return val.toString ? val.toString() : ""; // String
                    },

                    toString: function() {
                        // summary:
                        //		Returns widget as a printable string using the widget's value
                        // tags:
                        //		protected
                        var val = this.filter(this.get('value')); // call filter in case value is nonstring and filter has been customized
                        return val != null ? (typeof val == "string" ? val : this.serialize(val, this.constraints)) : ""; // String
                    },

                    validate: function() {
                        // Overrides `dijit/form/TextBox.validate`
                        this.valueNode.value = this.toString();
                        return this.inherited(arguments);
                    },

                    buildRendering: function() {
                        // Overrides `dijit/_TemplatedMixin/buildRendering`

                        this.inherited(arguments);

                        // Create a hidden <input> node with the serialized value used for submit
                        // (as opposed to the displayed value).
                        // Passing in name as markup rather than calling domConstruct.create() with an attrs argument
                        // to make query(input[name=...]) work on IE. (see #8660)
                        this.valueNode = domConstruct.place("<input type='hidden'" + (this.name ? ' name="' + this.name.replace(/"/g, "&quot;") + '"' : "") + "/>", this.textbox, "after");
                    },

                    reset: function() {
                        // Overrides `dijit/form/ValidationTextBox.reset` to
                        // reset the hidden textbox value to ''
                        this.valueNode.value = '';
                        this.inherited(arguments);
                    }
                });
            });

        },
        'dijit/form/ComboBoxMixin': function() {
            require({
                cache: {
                    'url:dijit/form/templates/DropDownBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/ComboBoxMixin", [
                "dojo/_base/declare", // declare
                "dojo/_base/Deferred",
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.mixin
                "dojo/store/util/QueryResults",
                "./_AutoCompleterMixin",
                "./_ComboBoxMenu",
                "../_HasDropDown",
                "dojo/text!./templates/DropDownBox.html"
            ], function(declare, Deferred, kernel, lang, QueryResults, _AutoCompleterMixin, _ComboBoxMenu, _HasDropDown, template) {


                // module:
                //		dijit/form/ComboBoxMixin

                return declare("dijit.form.ComboBoxMixin", [_HasDropDown, _AutoCompleterMixin], {
                    // summary:
                    //		Provides main functionality of ComboBox widget

                    // dropDownClass: [protected extension] Function String
                    //		Dropdown widget class used to select a date/time.
                    //		Subclasses should specify this.
                    dropDownClass: _ComboBoxMenu,

                    // hasDownArrow: Boolean
                    //		Set this textbox to have a down arrow button, to display the drop down list.
                    //		Defaults to true.
                    hasDownArrow: true,

                    templateString: template,

                    baseClass: "dijitTextBox dijitComboBox",

                    /*=====
                    // store: [const] dojo/store/api/Store|dojo/data/api/Read
                    //		Reference to data provider object used by this ComboBox.
                    //
                    //		Should be dojo/store/api/Store, but dojo/data/api/Read supported
                    //		for backwards compatibility.
                    store: null,
                    =====*/

                    // Set classes like dijitDownArrowButtonHover depending on
                    // mouse action over button node
                    cssStateNodes: {
                        "_buttonNode": "dijitDownArrowButton"
                    },

                    _setHasDownArrowAttr: function( /*Boolean*/ val) {
                        this._set("hasDownArrow", val);
                        this._buttonNode.style.display = val ? "" : "none";
                    },

                    _showResultList: function() {
                        // hide the tooltip
                        this.displayMessage("");
                        this.inherited(arguments);
                    },

                    _setStoreAttr: function(store) {
                        // For backwards-compatibility, accept dojo.data store in addition to dojo/store/api/Store.  Remove in 2.0.
                        if (!store.get) {
                            lang.mixin(store, {
                                _oldAPI: true,
                                get: function(id) {
                                    // summary:
                                    //		Retrieves an object by it's identity. This will trigger a fetchItemByIdentity.
                                    //		Like dojo/store/DataStore.get() except returns native item.
                                    var deferred = new Deferred();
                                    this.fetchItemByIdentity({
                                        identity: id,
                                        onItem: function(object) {
                                            deferred.resolve(object);
                                        },
                                        onError: function(error) {
                                            deferred.reject(error);
                                        }
                                    });
                                    return deferred.promise;
                                },
                                query: function(query, options) {
                                    // summary:
                                    //		Queries the store for objects.   Like dojo/store/DataStore.query()
                                    //		except returned Deferred contains array of native items.
                                    var deferred = new Deferred(function() {
                                        fetchHandle.abort && fetchHandle.abort();
                                    });
                                    deferred.total = new Deferred();
                                    var fetchHandle = this.fetch(lang.mixin({
                                        query: query,
                                        onBegin: function(count) {
                                            deferred.total.resolve(count);
                                        },
                                        onComplete: function(results) {
                                            deferred.resolve(results);
                                        },
                                        onError: function(error) {
                                            deferred.reject(error);
                                        }
                                    }, options));
                                    return QueryResults(deferred);
                                }
                            });
                        }
                        this._set("store", store);
                    },

                    postMixInProperties: function() {
                        // Since _setValueAttr() depends on this.store, _setStoreAttr() needs to execute first.
                        // Unfortunately, without special code, it ends up executing second.
                        var store = this.params.store || this.store;
                        if (store) {
                            this._setStoreAttr(store);
                        }

                        this.inherited(arguments);

                        // User may try to access this.store.getValue() etc.  in a custom labelFunc() function.
                        // It's not available with the new data store for handling inline <option> tags, so add it.
                        if (!this.params.store && !this.store._oldAPI) {
                            var clazz = this.declaredClass;
                            lang.mixin(this.store, {
                                getValue: function(item, attr) {
                                    kernel.deprecated(clazz + ".store.getValue(item, attr) is deprecated for builtin store.  Use item.attr directly", "", "2.0");
                                    return item[attr];
                                },
                                getLabel: function(item) {
                                    kernel.deprecated(clazz + ".store.getLabel(item) is deprecated for builtin store.  Use item.label directly", "", "2.0");
                                    return item.name;
                                },
                                fetch: function(args) {
                                    kernel.deprecated(clazz + ".store.fetch() is deprecated for builtin store.", "Use store.query()", "2.0");
                                    var shim = ["dojo/data/ObjectStore"]; // indirection so it doesn't get rolled into a build
                                    require(shim, lang.hitch(this, function(ObjectStore) {
                                        new ObjectStore({
                                            objectStore: this
                                        }).fetch(args);
                                    }));
                                }
                            });
                        }
                    }
                });
            });

        },
        'dijit/form/_TextBoxMixin': function() {
            define("dijit/form/_TextBoxMixin", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.byId
                "dojo/_base/event", // event.stop
                "dojo/keys", // keys.ALT keys.CAPS_LOCK keys.CTRL keys.META keys.SHIFT
                "dojo/_base/lang", // lang.mixin
                "dojo/on", // on
                "../main" // for exporting dijit._setSelectionRange, dijit.selectInputText
            ], function(array, declare, dom, event, keys, lang, on, dijit) {

                // module:
                //		dijit/form/_TextBoxMixin

                var _TextBoxMixin = declare("dijit.form._TextBoxMixin", null, {
                    // summary:
                    //		A mixin for textbox form input widgets

                    // trim: Boolean
                    //		Removes leading and trailing whitespace if true.  Default is false.
                    trim: false,

                    // uppercase: Boolean
                    //		Converts all characters to uppercase if true.  Default is false.
                    uppercase: false,

                    // lowercase: Boolean
                    //		Converts all characters to lowercase if true.  Default is false.
                    lowercase: false,

                    // propercase: Boolean
                    //		Converts the first character of each word to uppercase if true.
                    propercase: false,

                    // maxLength: String
                    //		HTML INPUT tag maxLength declaration.
                    maxLength: "",

                    // selectOnClick: [const] Boolean
                    //		If true, all text will be selected when focused with mouse
                    selectOnClick: false,

                    // placeHolder: String
                    //		Defines a hint to help users fill out the input field (as defined in HTML 5).
                    //		This should only contain plain text (no html markup).
                    placeHolder: "",

                    _getValueAttr: function() {
                        // summary:
                        //		Hook so get('value') works as we like.
                        // description:
                        //		For `dijit/form/TextBox` this basically returns the value of the `<input>`.
                        //
                        //		For `dijit/form/MappedTextBox` subclasses, which have both
                        //		a "displayed value" and a separate "submit value",
                        //		This treats the "displayed value" as the master value, computing the
                        //		submit value from it via this.parse().
                        return this.parse(this.get('displayedValue'), this.constraints);
                    },

                    _setValueAttr: function(value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue) {
                        // summary:
                        //		Hook so set('value', ...) works.
                        //
                        // description:
                        //		Sets the value of the widget to "value" which can be of
                        //		any type as determined by the widget.
                        //
                        // value:
                        //		The visual element value is also set to a corresponding,
                        //		but not necessarily the same, value.
                        //
                        // formattedValue:
                        //		If specified, used to set the visual element value,
                        //		otherwise a computed visual value is used.
                        //
                        // priorityChange:
                        //		If true, an onChange event is fired immediately instead of
                        //		waiting for the next blur event.

                        var filteredValue;
                        if (value !== undefined) {
                            // TODO: this is calling filter() on both the display value and the actual value.
                            // I added a comment to the filter() definition about this, but it should be changed.
                            filteredValue = this.filter(value);
                            if (typeof formattedValue != "string") {
                                if (filteredValue !== null && ((typeof filteredValue != "number") || !isNaN(filteredValue))) {
                                    formattedValue = this.filter(this.format(filteredValue, this.constraints));
                                } else {
                                    formattedValue = '';
                                }
                            }
                        }
                        if (formattedValue != null /* and !undefined */ && ((typeof formattedValue) != "number" || !isNaN(formattedValue)) && this.textbox.value != formattedValue) {
                            this.textbox.value = formattedValue;
                            this._set("displayedValue", this.get("displayedValue"));
                        }

                        if (this.textDir == "auto") {
                            this.applyTextDir(this.focusNode, formattedValue);
                        }

                        this.inherited(arguments, [filteredValue, priorityChange]);
                    },

                    // displayedValue: String
                    //		For subclasses like ComboBox where the displayed value
                    //		(ex: Kentucky) and the serialized value (ex: KY) are different,
                    //		this represents the displayed value.
                    //
                    //		Setting 'displayedValue' through set('displayedValue', ...)
                    //		updates 'value', and vice-versa.  Otherwise 'value' is updated
                    //		from 'displayedValue' periodically, like onBlur etc.
                    //
                    //		TODO: move declaration to MappedTextBox?
                    //		Problem is that ComboBox references displayedValue,
                    //		for benefit of FilteringSelect.
                    displayedValue: "",

                    _getDisplayedValueAttr: function() {
                        // summary:
                        //		Hook so get('displayedValue') works.
                        // description:
                        //		Returns the displayed value (what the user sees on the screen),
                        //		after filtering (ie, trimming spaces etc.).
                        //
                        //		For some subclasses of TextBox (like ComboBox), the displayed value
                        //		is different from the serialized value that's actually
                        //		sent to the server (see `dijit/form/ValidationTextBox.serialize()`)

                        // TODO: maybe we should update this.displayedValue on every keystroke so that we don't need
                        // this method
                        // TODO: this isn't really the displayed value when the user is typing
                        return this.filter(this.textbox.value);
                    },

                    _setDisplayedValueAttr: function( /*String*/ value) {
                        // summary:
                        //		Hook so set('displayedValue', ...) works.
                        // description:
                        //		Sets the value of the visual element to the string "value".
                        //		The widget value is also set to a corresponding,
                        //		but not necessarily the same, value.

                        if (value == null /* or undefined */ ) {
                            value = ''
                        } else if (typeof value != "string") {
                            value = String(value)
                        }

                        this.textbox.value = value;

                        // sets the serialized value to something corresponding to specified displayedValue
                        // (if possible), and also updates the textbox.value, for example converting "123"
                        // to "123.00"
                        this._setValueAttr(this.get('value'), undefined);

                        this._set("displayedValue", this.get('displayedValue'));

                        // textDir support
                        if (this.textDir == "auto") {
                            this.applyTextDir(this.focusNode, value);
                        }
                    },

                    format: function(value /*=====, constraints =====*/ ) {
                        // summary:
                        //		Replaceable function to convert a value to a properly formatted string.
                        // value: String
                        // constraints: Object
                        // tags:
                        //		protected extension
                        return value == null /* or undefined */ ? "" : (value.toString ? value.toString() : value);
                    },

                    parse: function(value /*=====, constraints =====*/ ) {
                        // summary:
                        //		Replaceable function to convert a formatted string to a value
                        // value: String
                        // constraints: Object
                        // tags:
                        //		protected extension

                        return value; // String
                    },

                    _refreshState: function() {
                        // summary:
                        //		After the user types some characters, etc., this method is
                        //		called to check the field for validity etc.  The base method
                        //		in `dijit/form/TextBox` does nothing, but subclasses override.
                        // tags:
                        //		protected
                    },

                    /*=====
                    onInput: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of various user data-input events.
                    	//		Return false to cancel the event and prevent it from being processed.
                    	// event:
                    	//		keydown | keypress | cut | paste | input
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onInput: function() {},

                    __skipInputEvent: false,
                    _onInput: function( /*Event*/ evt) {
                        // summary:
                        //		Called AFTER the input event has happened

                        // set text direction according to textDir that was defined in creation
                        if (this.textDir == "auto") {
                            this.applyTextDir(this.focusNode, this.focusNode.value);
                        }

                        this._processInput(evt);
                    },

                    _processInput: function( /*Event*/ evt) {
                        // summary:
                        //		Default action handler for user input events

                        this._refreshState();

                        // In case someone is watch()'ing for changes to displayedValue
                        this._set("displayedValue", this.get("displayedValue"));
                    },

                    postCreate: function() {
                        // setting the value here is needed since value="" in the template causes "undefined"
                        // and setting in the DOM (instead of the JS object) helps with form reset actions
                        this.textbox.setAttribute("value", this.textbox.value); // DOM and JS values should be the same

                        this.inherited(arguments);

                        // normalize input events to reduce spurious event processing
                        //	onkeydown: do not forward modifier keys
                        //		       set charOrCode to numeric keycode
                        //	onkeypress: do not forward numeric charOrCode keys (already sent through onkeydown)
                        //	onpaste & oncut: set charOrCode to 229 (IME)
                        //	oninput: if primary event not already processed, set charOrCode to 229 (IME), else do not forward
                        var handleEvent = function(e) {
                            var charOrCode;
                            if (e.type == "keydown") {
                                charOrCode = e.keyCode;
                                switch (charOrCode) { // ignore state keys
                                    case keys.SHIFT:
                                    case keys.ALT:
                                    case keys.CTRL:
                                    case keys.META:
                                    case keys.CAPS_LOCK:
                                    case keys.NUM_LOCK:
                                    case keys.SCROLL_LOCK:
                                        return;
                                }
                                if (!e.ctrlKey && !e.metaKey && !e.altKey) { // no modifiers
                                    switch (charOrCode) { // ignore location keys
                                        case keys.NUMPAD_0:
                                        case keys.NUMPAD_1:
                                        case keys.NUMPAD_2:
                                        case keys.NUMPAD_3:
                                        case keys.NUMPAD_4:
                                        case keys.NUMPAD_5:
                                        case keys.NUMPAD_6:
                                        case keys.NUMPAD_7:
                                        case keys.NUMPAD_8:
                                        case keys.NUMPAD_9:
                                        case keys.NUMPAD_MULTIPLY:
                                        case keys.NUMPAD_PLUS:
                                        case keys.NUMPAD_ENTER:
                                        case keys.NUMPAD_MINUS:
                                        case keys.NUMPAD_PERIOD:
                                        case keys.NUMPAD_DIVIDE:
                                            return;
                                    }
                                    if ((charOrCode >= 65 && charOrCode <= 90) || (charOrCode >= 48 && charOrCode <= 57) || charOrCode == keys.SPACE) {
                                        return; // keypress will handle simple non-modified printable keys
                                    }
                                    var named = false;
                                    for (var i in keys) {
                                        if (keys[i] === e.keyCode) {
                                            named = true;
                                            break;
                                        }
                                    }
                                    if (!named) {
                                        return;
                                    } // only allow named ones through
                                }
                            }
                            charOrCode = e.charCode >= 32 ? String.fromCharCode(e.charCode) : e.charCode;
                            if (!charOrCode) {
                                charOrCode = (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == keys.SPACE ? String.fromCharCode(e.keyCode) : e.keyCode;
                            }
                            if (!charOrCode) {
                                charOrCode = 229; // IME
                            }
                            if (e.type == "keypress") {
                                if (typeof charOrCode != "string") {
                                    return;
                                }
                                if ((charOrCode >= 'a' && charOrCode <= 'z') || (charOrCode >= 'A' && charOrCode <= 'Z') || (charOrCode >= '0' && charOrCode <= '9') || (charOrCode === ' ')) {
                                    if (e.ctrlKey || e.metaKey || e.altKey) {
                                        return;
                                    } // can only be stopped reliably in keydown
                                }
                            }
                            if (e.type == "input") {
                                if (this.__skipInputEvent) { // duplicate event
                                    this.__skipInputEvent = false;
                                    return;
                                }
                            } else {
                                this.__skipInputEvent = true;
                            }
                            // create fake event to set charOrCode and to know if preventDefault() was called
                            var faux = {
                                    faux: true
                                },
                                attr;
                            for (attr in e) {
                                if (attr != "layerX" && attr != "layerY") { // prevent WebKit warnings
                                    var v = e[attr];
                                    if (typeof v != "function" && typeof v != "undefined") {
                                        faux[attr] = v;
                                    }
                                }
                            }
                            lang.mixin(faux, {
                                charOrCode: charOrCode,
                                _wasConsumed: false,
                                preventDefault: function() {
                                    faux._wasConsumed = true;
                                    e.preventDefault();
                                },
                                stopPropagation: function() {
                                    e.stopPropagation();
                                }
                            });
                            // give web page author a chance to consume the event
                            //console.log(faux.type + ', charOrCode = (' + (typeof charOrCode) + ') ' + charOrCode + ', ctrl ' + !!faux.ctrlKey + ', alt ' + !!faux.altKey + ', meta ' + !!faux.metaKey + ', shift ' + !!faux.shiftKey);
                            if (this.onInput(faux) === false) { // return false means stop
                                faux.preventDefault();
                                faux.stopPropagation();
                            }
                            if (faux._wasConsumed) {
                                return;
                            } // if preventDefault was called
                            this.defer(function() {
                                this._onInput(faux);
                            }); // widget notification after key has posted
                        };
                        this.own(on(this.textbox, "keydown, keypress, paste, cut, input, compositionend", lang.hitch(this, handleEvent)));
                    },

                    _blankValue: '', // if the textbox is blank, what value should be reported
                    filter: function(val) {
                        // summary:
                        //		Auto-corrections (such as trimming) that are applied to textbox
                        //		value on blur or form submit.
                        // description:
                        //		For MappedTextBox subclasses, this is called twice
                        //
                        //		- once with the display value
                        //		- once the value as set/returned by set('value', ...)
                        //
                        //		and get('value'), ex: a Number for NumberTextBox.
                        //
                        //		In the latter case it does corrections like converting null to NaN.  In
                        //		the former case the NumberTextBox.filter() method calls this.inherited()
                        //		to execute standard trimming code in TextBox.filter().
                        //
                        //		TODO: break this into two methods in 2.0
                        //
                        // tags:
                        //		protected extension
                        if (val === null) {
                            return this._blankValue;
                        }
                        if (typeof val != "string") {
                            return val;
                        }
                        if (this.trim) {
                            val = lang.trim(val);
                        }
                        if (this.uppercase) {
                            val = val.toUpperCase();
                        }
                        if (this.lowercase) {
                            val = val.toLowerCase();
                        }
                        if (this.propercase) {
                            val = val.replace(/[^\s]+/g, function(word) {
                                return word.substring(0, 1).toUpperCase() + word.substring(1);
                            });
                        }
                        return val;
                    },

                    _setBlurValue: function() {
                        this._setValueAttr(this.get('value'), true);
                    },

                    _onBlur: function(e) {
                        if (this.disabled) {
                            return;
                        }
                        this._setBlurValue();
                        this.inherited(arguments);
                    },

                    _isTextSelected: function() {
                        return this.textbox.selectionStart != this.textbox.selectionEnd;
                    },

                    _onFocus: function( /*String*/ by) {
                        if (this.disabled || this.readOnly) {
                            return;
                        }

                        // Select all text on focus via click if nothing already selected.
                        // Since mouse-up will clear the selection, need to defer selection until after mouse-up.
                        // Don't do anything on focus by tabbing into the widget since there's no associated mouse-up event.
                        if (this.selectOnClick && by == "mouse") {
                            this._selectOnClickHandle = this.connect(this.domNode, "onmouseup", function() {
                                // Only select all text on first click; otherwise users would have no way to clear
                                // the selection.
                                this.disconnect(this._selectOnClickHandle);
                                this._selectOnClickHandle = null;

                                // Check if the user selected some text manually (mouse-down, mouse-move, mouse-up)
                                // and if not, then select all the text
                                if (!this._isTextSelected()) {
                                    _TextBoxMixin.selectInputText(this.textbox);
                                }
                            });
                            // in case the mouseup never comes
                            this.defer(function() {
                                if (this._selectOnClickHandle) {
                                    this.disconnect(this._selectOnClickHandle);
                                    this._selectOnClickHandle = null;
                                }
                            }, 500); // if mouseup not received soon, then treat it as some gesture
                        }
                        // call this.inherited() before refreshState(), since this.inherited() will possibly scroll the viewport
                        // (to scroll the TextBox into view), which will affect how _refreshState() positions the tooltip
                        this.inherited(arguments);

                        this._refreshState();
                    },

                    reset: function() {
                        // Overrides `dijit/_FormWidget/reset()`.
                        // Additionally resets the displayed textbox value to ''
                        this.textbox.value = '';
                        this.inherited(arguments);
                    },

                    _setTextDirAttr: function( /*String*/ textDir) {
                        // summary:
                        //		Setter for textDir.
                        // description:
                        //		Users shouldn't call this function; they should be calling
                        //		set('textDir', value)
                        // tags:
                        //		private

                        // only if new textDir is different from the old one
                        // and on widgets creation.
                        if (!this._created ||
                            this.textDir != textDir) {
                            this._set("textDir", textDir);
                            // so the change of the textDir will take place immediately.
                            this.applyTextDir(this.focusNode, this.focusNode.value);
                        }
                    }
                });


                _TextBoxMixin._setSelectionRange = dijit._setSelectionRange = function( /*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop) {
                    if (element.setSelectionRange) {
                        element.setSelectionRange(start, stop);
                    }
                };

                _TextBoxMixin.selectInputText = dijit.selectInputText = function( /*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop) {
                    // summary:
                    //		Select text in the input element argument, from start (default 0), to stop (default end).

                    // TODO: use functions in _editor/selection.js?
                    element = dom.byId(element);
                    if (isNaN(start)) {
                        start = 0;
                    }
                    if (isNaN(stop)) {
                        stop = element.value ? element.value.length : 0;
                    }
                    try {
                        element.focus();
                        _TextBoxMixin._setSelectionRange(element, start, stop);
                    } catch (e) { /* squelch random errors (esp. on IE) from unexpected focus changes or DOM nodes being hidden */ }
                };

                return _TextBoxMixin;
            });

        },
        'dojo/Evented': function() {
            define("dojo/Evented", ["./aspect", "./on"], function(aspect, on) {
                // module:
                //		dojo/Evented

                "use strict";
                var after = aspect.after;

                function Evented() {
                    // summary:
                    //		A class that can be used as a mixin or base class,
                    //		to add on() and emit() methods to a class
                    //		for listening for events and emitting events:
                    //
                    //		|	define(["dojo/Evented"], function(Evented){
                    //		|		var EventedWidget = dojo.declare([Evented, dijit._Widget], {...});
                    //		|		widget = new EventedWidget();
                    //		|		widget.on("open", function(event){
                    //		|		... do something with event
                    //		|	 });
                    //		|
                    //		|	widget.emit("open", {name:"some event", ...});
                }
                Evented.prototype = {
                    on: function(type, listener) {
                        return on.parse(this, type, listener, function(target, type) {
                            return after(target, 'on' + type, listener, true);
                        });
                    },
                    emit: function(type, event) {
                        var args = [this];
                        args.push.apply(args, arguments);
                        return on.emit.apply(on, args);
                    }
                };
                return Evented;
            });

        },
        'dijit/form/SimpleTextarea': function() {
            define("dijit/form/SimpleTextarea", [
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.add
                "dojo/sniff", // has("ie") has("opera")
                "./TextBox"
            ], function(declare, domClass, has, TextBox) {

                // module:
                //		dijit/form/SimpleTextarea


                return declare("dijit.form.SimpleTextarea", TextBox, {
                    // summary:
                    //		A simple textarea that degrades, and responds to
                    //		minimal LayoutContainer usage, and works with dijit/form/Form.
                    //		Doesn't automatically size according to input, like Textarea.
                    //
                    // example:
                    //	|	<textarea data-dojo-type="dijit/form/SimpleTextarea" name="foo" value="bar" rows=30 cols=40></textarea>
                    //
                    // example:
                    //	|	new SimpleTextarea({ rows:20, cols:30 }, "foo");

                    baseClass: "dijitTextBox dijitTextArea",

                    // rows: Number
                    //		The number of rows of text.
                    rows: "3",

                    // rows: Number
                    //		The number of characters per line.
                    cols: "20",

                    templateString: "<textarea ${!nameAttrSetting} data-dojo-attach-point='focusNode,containerNode,textbox' autocomplete='off'></textarea>",

                    postMixInProperties: function() {
                        // Copy value from srcNodeRef, unless user specified a value explicitly (or there is no srcNodeRef)
                        // TODO: parser will handle this in 2.0
                        if (!this.value && this.srcNodeRef) {
                            this.value = this.srcNodeRef.value;
                        }
                        this.inherited(arguments);
                    },

                    buildRendering: function() {
                        this.inherited(arguments);
                        if (has("ie") && this.cols) { // attribute selectors is not supported in IE6
                            domClass.add(this.textbox, "dijitTextAreaCols");
                        }
                    },

                    filter: function( /*String*/ value) {
                        // Override TextBox.filter to deal with newlines... specifically (IIRC) this is for IE which writes newlines
                        // as \r\n instead of just \n
                        if (value) {
                            value = value.replace(/\r/g, "");
                        }
                        return this.inherited(arguments);
                    },

                    _onInput: function( /*Event?*/ e) {
                        // Override TextBox._onInput() to enforce maxLength restriction
                        if (this.maxLength) {
                            var maxLength = parseInt(this.maxLength);
                            var value = this.textbox.value.replace(/\r/g, '');
                            var overflow = value.length - maxLength;
                            if (overflow > 0) {
                                var textarea = this.textbox;
                                if (textarea.selectionStart) {
                                    var pos = textarea.selectionStart;
                                    var cr = 0;
                                    if (has("opera")) {
                                        cr = (this.textbox.value.substring(0, pos).match(/\r/g) || []).length;
                                    }
                                    this.textbox.value = value.substring(0, pos - overflow - cr) + value.substring(pos - cr);
                                    textarea.setSelectionRange(pos - overflow, pos - overflow);
                                } else if (this.ownerDocument.selection) { //IE
                                    textarea.focus();
                                    var range = this.ownerDocument.selection.createRange();
                                    // delete overflow characters
                                    range.moveStart("character", -overflow);
                                    range.text = '';
                                    // show cursor
                                    range.select();
                                }
                            }
                        }
                        this.inherited(arguments);
                    }
                });

            });

        },
        'url:dijit/layout/templates/_TabButton.html': "<div role=\"presentation\" data-dojo-attach-point=\"titleNode,innerDiv,tabContent\" class=\"dijitTabInner dijitTabContent\">\n\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" data-dojo-attach-point='iconNode'/>\n\t<span data-dojo-attach-point='containerNode,focusNode' class='tabLabel'></span>\n\t<span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" data-dojo-attach-point='closeNode'\n\t\t  role=\"presentation\">\n\t\t<span data-dojo-attach-point='closeText' class='dijitTabCloseText'>[x]</span\n\t\t\t\t></span>\n</div>\n",
        'dijit/PopupMenuItem': function() {
            define("dijit/PopupMenuItem", [
                "dojo/_base/declare", // declare
                "dojo/dom-style", // domStyle.set
                "dojo/query", // query
                "./registry", // registry.byNode
                "./MenuItem",
                "./hccss"
            ], function(declare, domStyle, query, registry, MenuItem) {

                // module:
                //		dijit/PopupMenuItem

                return declare("dijit.PopupMenuItem", MenuItem, {
                    // summary:
                    //		An item in a Menu that spawn a drop down (usually a drop down menu)

                    _fillContent: function() {
                        // summary:
                        //		When Menu is declared in markup, this code gets the menu label and
                        //		the popup widget from the srcNodeRef.
                        // description:
                        //		srcNodeRefinnerHTML contains both the menu item text and a popup widget
                        //		The first part holds the menu item text and the second part is the popup
                        // example:
                        // |	<div data-dojo-type="dijit/PopupMenuItem">
                        // |		<span>pick me</span>
                        // |		<popup> ... </popup>
                        // |	</div>
                        // tags:
                        //		protected

                        if (this.srcNodeRef) {
                            var nodes = query("*", this.srcNodeRef);
                            this.inherited(arguments, [nodes[0]]);

                            // save pointer to srcNode so we can grab the drop down widget after it's instantiated
                            this.dropDownContainer = this.srcNodeRef;
                        }
                    },

                    startup: function() {
                        if (this._started) {
                            return;
                        }
                        this.inherited(arguments);

                        // we didn't copy the dropdown widget from the this.srcNodeRef, so it's in no-man's
                        // land now.  move it to win.doc.body.
                        if (!this.popup) {
                            var node = query("[widgetId]", this.dropDownContainer)[0];
                            this.popup = registry.byNode(node);
                        }
                        this.ownerDocumentBody.appendChild(this.popup.domNode);
                        this.popup.startup();

                        this.popup.domNode.style.display = "none";
                        if (this.arrowWrapper) {
                            domStyle.set(this.arrowWrapper, "visibility", "");
                        }
                        this.focusNode.setAttribute("aria-haspopup", "true");
                    },

                    destroyDescendants: function( /*Boolean*/ preserveDom) {
                        if (this.popup) {
                            // Destroy the popup, unless it's already been destroyed.  This can happen because
                            // the popup is a direct child of <body> even though it's logically my child.
                            if (!this.popup._destroyed) {
                                this.popup.destroyRecursive(preserveDom);
                            }
                            delete this.popup;
                        }
                        this.inherited(arguments);
                    }
                });
            });

        },
        'dojo/hccss': function() {
            define([
                "require", // require.toUrl
                "./_base/config", // config.blankGif
                "./dom-class", // domClass.add
                "./dom-style", // domStyle.getComputedStyle
                "./has",
                "./ready", // ready
                "./_base/window" // win.body
            ], function(require, config, domClass, domStyle, has, ready, win) {

                // module:
                //		dojo/hccss

                /*=====
                return function(){
                	// summary:
                	//		Test if computer is in high contrast mode (i.e. if browser is not displaying background images).
                	//		Defines `has("highcontrast")` and sets `dj_a11y` CSS class on `<body>` if machine is in high contrast mode.
                	//		Returns `has()` method;
                };
                =====*/

                // Has() test for when background images aren't displayed.  Don't call has("highcontrast") before dojo/domReady!.
                has.add("highcontrast", function() {
                    // note: if multiple documents, doesn't matter which one we use
                    var div = win.doc.createElement("div");
                    div.style.cssText = "border: 1px solid; border-color:red green; position: absolute; height: 5px; top: -999px;" +
                        "background-image: url(" + (config.blankGif || require.toUrl("./resources/blank.gif")) + ");";
                    win.body().appendChild(div);

                    var cs = domStyle.getComputedStyle(div),
                        bkImg = cs.backgroundImage,
                        hc = (cs.borderTopColor == cs.borderRightColor) ||
                        (bkImg && (bkImg == "none" || bkImg == "url(invalid-url:)"));

                    if (has("ie") < 8) {
                        div.outerHTML = ""; // prevent mixed-content warning, see http://support.microsoft.com/kb/925014
                    } else {
                        win.body().removeChild(div);
                    }

                    return hc;
                });

                // Priority is 90 to run ahead of parser priority of 100.   For 2.0, remove the ready() call and instead
                // change this module to depend on dojo/domReady!
                ready(90, function() {
                    if (has("highcontrast")) {
                        domClass.add(win.body(), "dj_a11y");
                    }
                });

                return has;
            });

        },
        'dijit/form/RadioButton': function() {
            define("dijit/form/RadioButton", [
                "dojo/_base/declare", // declare
                "./CheckBox",
                "./_RadioButtonMixin"
            ], function(declare, CheckBox, _RadioButtonMixin) {

                // module:
                //		dijit/form/RadioButton

                return declare("dijit.form.RadioButton", [CheckBox, _RadioButtonMixin], {
                    // summary:
                    //		Same as an HTML radio, but with fancy styling.

                    baseClass: "dijitRadio"
                });
            });

        },
        'url:hsbcwidget/themes/ursula/templates/AlertBox.html': "<div role=\"alert\" class=\"alertBox\">\r\n    <div class=\"alertBoxInner\" >\r\n    <span class=\"hidden\" aria-hidden=\"false\" data-dojo-attach-point=\"titleNode\">Alert Box</span> \r\n      <div data-dojo-attach-point=\"containerNode\"><br/></div>\r\n    </div>\r\n</div>",
        'hsbccore/dom-util': function() {
            /** 
            @module hsbc-mixins
            */
            /**
            Miscellaneous helper functions.

            @class _UtilMixin
            */
            define("hsbccore/dom-util", [
                "dojo/dom-style"
            ], function(domStyle) {
                return {

                    /**
                    Returns true if the supplied DOM node or any of its ancestors are visible, false if not.  
                    @method isVisible
                    @param {DOMNode} node the DOM node to inspect
                    @return {Boolean} A flag representing whether the supplied node is visible, or not. 
                    */
                    isVisible: function(node) {
                        var tmpNode = node,
                            computedStyle,
                            visible = true;

                        while (tmpNode && tmpNode.tagName !== 'BODY') {
                            computedStyle = domStyle.getComputedStyle(tmpNode);
                            if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden') {
                                visible = false;
                                break;
                            }
                            tmpNode = tmpNode.parentNode;
                        }
                        return visible;
                    }
                };
            });

        },
        'dojo/aspect': function() {
            define("dojo/aspect", [], function() {

                // module:
                //		dojo/aspect

                "use strict";
                var undefined, nextId = 0;

                function advise(dispatcher, type, advice, receiveArguments) {
                    var previous = dispatcher[type];
                    var around = type == "around";
                    var signal;
                    if (around) {
                        var advised = advice(function() {
                            return previous.advice(this, arguments);
                        });
                        signal = {
                            remove: function() {
                                signal.cancelled = true;
                            },
                            advice: function(target, args) {
                                return signal.cancelled ?
                                    previous.advice(target, args) : // cancelled, skip to next one
                                    advised.apply(target, args); // called the advised function
                            }
                        };
                    } else {
                        // create the remove handler
                        signal = {
                            remove: function() {
                                var previous = signal.previous;
                                var next = signal.next;
                                if (!next && !previous) {
                                    delete dispatcher[type];
                                } else {
                                    if (previous) {
                                        previous.next = next;
                                    } else {
                                        dispatcher[type] = next;
                                    }
                                    if (next) {
                                        next.previous = previous;
                                    }
                                }
                            },
                            id: nextId++,
                            advice: advice,
                            receiveArguments: receiveArguments
                        };
                    }
                    if (previous && !around) {
                        if (type == "after") {
                            // add the listener to the end of the list
                            var next = previous;
                            while (next) {
                                previous = next;
                                next = next.next;
                            }
                            previous.next = signal;
                            signal.previous = previous;
                        } else if (type == "before") {
                            // add to beginning
                            dispatcher[type] = signal;
                            signal.next = previous;
                            previous.previous = signal;
                        }
                    } else {
                        // around or first one just replaces
                        dispatcher[type] = signal;
                    }
                    return signal;
                }

                function aspect(type) {
                    return function(target, methodName, advice, receiveArguments) {
                        var existing = target[methodName],
                            dispatcher;
                        if (!existing || existing.target != target) {
                            // no dispatcher in place
                            target[methodName] = dispatcher = function() {
                                var executionId = nextId;
                                // before advice
                                var args = arguments;
                                var before = dispatcher.before;
                                while (before) {
                                    args = before.advice.apply(this, args) || args;
                                    before = before.next;
                                }
                                // around advice
                                if (dispatcher.around) {
                                    var results = dispatcher.around.advice(this, args);
                                }
                                // after advice
                                var after = dispatcher.after;
                                while (after && after.id < executionId) {
                                    if (after.receiveArguments) {
                                        var newResults = after.advice.apply(this, args);
                                        // change the return value only if a new value was returned
                                        results = newResults === undefined ? results : newResults;
                                    } else {
                                        results = after.advice.call(this, results, args);
                                    }
                                    after = after.next;
                                }
                                return results;
                            };
                            if (existing) {
                                dispatcher.around = {
                                    advice: function(target, args) {
                                        return existing.apply(target, args);
                                    }
                                };
                            }
                            dispatcher.target = target;
                        }
                        var results = advise((dispatcher || existing), type, advice, receiveArguments);
                        advice = null;
                        return results;
                    };
                }

                // TODOC: after/before/around return object

                var after = aspect("after");
                /*=====
                after = function(target, methodName, advice, receiveArguments){
                	// summary:
                	//		The "after" export of the aspect module is a function that can be used to attach
                	//		"after" advice to a method. This function will be executed after the original method
                	//		is executed. By default the function will be called with a single argument, the return
                	//		value of the original method, or the the return value of the last executed advice (if a previous one exists).
                	//		The fourth (optional) argument can be set to true to so the function receives the original
                	//		arguments (from when the original method was called) rather than the return value.
                	//		If there are multiple "after" advisors, they are executed in the order they were registered.
                	// target: Object
                	//		This is the target object
                	// methodName: String
                	//		This is the name of the method to attach to.
                	// advice: Function
                	//		This is function to be called after the original method
                	// receiveArguments: Boolean?
                	//		If this is set to true, the advice function receives the original arguments (from when the original mehtod
                	//		was called) rather than the return value of the original/previous method.
                	// returns:
                	//		A signal object that can be used to cancel the advice. If remove() is called on this signal object, it will
                	//		stop the advice function from being executed.
                };
                =====*/

                var before = aspect("before");
                /*=====
                before = function(target, methodName, advice){
                	// summary:
                	//		The "before" export of the aspect module is a function that can be used to attach
                	//		"before" advice to a method. This function will be executed before the original method
                	//		is executed. This function will be called with the arguments used to call the method.
                	//		This function may optionally return an array as the new arguments to use to call
                	//		the original method (or the previous, next-to-execute before advice, if one exists).
                	//		If the before method doesn't return anything (returns undefined) the original arguments
                	//		will be preserved.
                	//		If there are multiple "before" advisors, they are executed in the reverse order they were registered.
                	// target: Object
                	//		This is the target object
                	// methodName: String
                	//		This is the name of the method to attach to.
                	// advice: Function
                	//		This is function to be called before the original method
                };
                =====*/

                var around = aspect("around");
                /*=====
                 around = function(target, methodName, advice){
                	// summary:
                	//		The "around" export of the aspect module is a function that can be used to attach
                	//		"around" advice to a method. The advisor function is immediately executed when
                	//		the around() is called, is passed a single argument that is a function that can be
                	//		called to continue execution of the original method (or the next around advisor).
                	//		The advisor function should return a function, and this function will be called whenever
                	//		the method is called. It will be called with the arguments used to call the method.
                	//		Whatever this function returns will be returned as the result of the method call (unless after advise changes it).
                	// example:
                	//		If there are multiple "around" advisors, the most recent one is executed first,
                	//		which can then delegate to the next one and so on. For example:
                	//		|	around(obj, "foo", function(originalFoo){
                	//		|		return function(){
                	//		|			var start = new Date().getTime();
                	//		|			var results = originalFoo.apply(this, arguments); // call the original
                	//		|			var end = new Date().getTime();
                	//		|			console.log("foo execution took " + (end - start) + " ms");
                	//		|			return results;
                	//		|		};
                	//		|	});
                	// target: Object
                	//		This is the target object
                	// methodName: String
                	//		This is the name of the method to attach to.
                	// advice: Function
                	//		This is function to be called around the original method
                };
                =====*/

                return {
                    // summary:
                    //		provides aspect oriented programming functionality, allowing for
                    //		one to add before, around, or after advice on existing methods.
                    // example:
                    //	|	define(["dojo/aspect"], function(aspect){
                    //	|		var signal = aspect.after(targetObject, "methodName", function(someArgument){
                    //	|			this will be called when targetObject.methodName() is called, after the original function is called
                    //	|		});
                    //
                    // example:
                    //	The returned signal object can be used to cancel the advice.
                    //	|	signal.remove(); // this will stop the advice from being executed anymore
                    //	|	aspect.before(targetObject, "methodName", function(someArgument){
                    //	|		// this will be called when targetObject.methodName() is called, before the original function is called
                    //	|	 });

                    before: before,
                    around: around,
                    after: after
                };
            });

        },
        'dojo/_base/window': function() {
            define("dojo/_base/window", ["./kernel", "./lang", "../sniff"], function(dojo, lang, has) {
                // module:
                //		dojo/_base/window

                var ret = {
                    // summary:
                    //		API to save/set/restore the global/document scope.

                    global: dojo.global,
                    /*=====
                     global: {
                    	 // summary:
                    	 //		Alias for the current window. 'global' can be modified
                    	 //		for temporary context shifting. See also withGlobal().
                    	 // description:
                    	 //		Use this rather than referring to 'window' to ensure your code runs
                    	 //		correctly in managed contexts.
                     },
                     =====*/

                    doc: this["document"] || null,
                    /*=====
                    doc: {
                    	// summary:
                    	//		Alias for the current document. 'doc' can be modified
                    	//		for temporary context shifting. See also withDoc().
                    	// description:
                    	//		Use this rather than referring to 'window.document' to ensure your code runs
                    	//		correctly in managed contexts.
                    	// example:
                    	//	|	n.appendChild(dojo.doc.createElement('div'));
                    },
                    =====*/

                    body: function( /*Document?*/ doc) {
                        // summary:
                        //		Return the body element of the specified document or of dojo/_base/window::doc.
                        // example:
                        //	|	win.body().appendChild(dojo.doc.createElement('div'));

                        // Note: document.body is not defined for a strict xhtml document
                        // Would like to memoize this, but dojo.doc can change vi dojo.withDoc().
                        doc = doc || dojo.doc;
                        return doc.body || doc.getElementsByTagName("body")[0]; // Node
                    },

                    setContext: function( /*Object*/ globalObject, /*DocumentElement*/ globalDocument) {
                        // summary:
                        //		changes the behavior of many core Dojo functions that deal with
                        //		namespace and DOM lookup, changing them to work in a new global
                        //		context (e.g., an iframe). The varibles dojo.global and dojo.doc
                        //		are modified as a result of calling this function and the result of
                        //		`dojo.body()` likewise differs.
                        dojo.global = ret.global = globalObject;
                        dojo.doc = ret.doc = globalDocument;
                    },

                    withGlobal: function( /*Object*/ globalObject,
                        /*Function*/
                        callback,
                        /*Object?*/
                        thisObject,
                        /*Array?*/
                        cbArguments) {
                        // summary:
                        //		Invoke callback with globalObject as dojo.global and
                        //		globalObject.document as dojo.doc.
                        // description:
                        //		Invoke callback with globalObject as dojo.global and
                        //		globalObject.document as dojo.doc. If provided, globalObject
                        //		will be executed in the context of object thisObject
                        //		When callback() returns or throws an error, the dojo.global
                        //		and dojo.doc will be restored to its previous state.

                        var oldGlob = dojo.global;
                        try {
                            dojo.global = ret.global = globalObject;
                            return ret.withDoc.call(null, globalObject.document, callback, thisObject, cbArguments);
                        } finally {
                            dojo.global = ret.global = oldGlob;
                        }
                    },

                    withDoc: function( /*DocumentElement*/ documentObject,
                        /*Function*/
                        callback,
                        /*Object?*/
                        thisObject,
                        /*Array?*/
                        cbArguments) {
                        // summary:
                        //		Invoke callback with documentObject as dojo/_base/window::doc.
                        // description:
                        //		Invoke callback with documentObject as dojo/_base/window::doc. If provided,
                        //		callback will be executed in the context of object thisObject
                        //		When callback() returns or throws an error, the dojo/_base/window::doc will
                        //		be restored to its previous state.

                        var oldDoc = ret.doc,
                            oldQ = has("quirks"),
                            oldIE = has("ie"),
                            isIE, mode, pwin;

                        try {
                            dojo.doc = ret.doc = documentObject;
                            // update dojo.isQuirks and the value of the has feature "quirks".
                            // remove setting dojo.isQuirks and dojo.isIE for 2.0
                            dojo.isQuirks = has.add("quirks", dojo.doc.compatMode == "BackCompat", true, true); // no need to check for QuirksMode which was Opera 7 only

                            if (has("ie")) {
                                if ((pwin = documentObject.parentWindow) && pwin.navigator) {
                                    // re-run IE detection logic and update dojo.isIE / has("ie")
                                    // (the only time parentWindow/navigator wouldn't exist is if we were not
                                    // passed an actual legitimate document object)
                                    isIE = parseFloat(pwin.navigator.appVersion.split("MSIE ")[1]) || undefined;
                                    mode = documentObject.documentMode;
                                    if (mode && mode != 5 && Math.floor(isIE) != mode) {
                                        isIE = mode;
                                    }
                                    dojo.isIE = has.add("ie", isIE, true, true);
                                }
                            }

                            if (thisObject && typeof callback == "string") {
                                callback = thisObject[callback];
                            }

                            return callback.apply(thisObject, cbArguments || []);
                        } finally {
                            dojo.doc = ret.doc = oldDoc;
                            dojo.isQuirks = has.add("quirks", oldQ, true, true);
                            dojo.isIE = has.add("ie", oldIE, true, true);
                        }
                    }
                };

                1 && lang.mixin(dojo, ret);

                return ret;

            });

        },
        'url:hsbcwidget/themes/ursula/templates/Lightbox.html': "<div tabindex=\"0\" role=\"dialog\">\r\n    <div style=\"display: none;\" class=\"lightbox\" data-dojo-attach-point=\"lightboxNode\">\r\n        <button tabindex=\"0\" class=\"close jsClose\" data-dojo-attach-point=\"closeButton\">close</button>\r\n        <div data-dojo-attach-point=\"innerNode\" class=\"lightboxInner1\">\r\n            <div data-dojo-attach-point=\"containerNode\" class=\"lightboxInner2\"></div>\r\n        </div>\r\n    </div>\r\n    <div style=\"display: none;\" class=\"overlay\" data-dojo-attach-point=\"overlayNode\"></div>\r\n</div>",
        'dijit/main': function() {
            define("dijit/main", [
                "dojo/_base/kernel"
            ], function(dojo) {
                // module:
                //		dijit/main

                /*=====
                return {
                	// summary:
                	//		The dijit package main module.
                	//		Deprecated.   Users should access individual modules (ex: dijit/registry) directly.
                };
                =====*/

                return dojo.dijit;
            });

        },
        'dojo/NodeList-dom': function() {
            define(["./_base/kernel", "./query", "./_base/array", "./_base/lang", "./dom-class", "./dom-construct", "./dom-geometry", "./dom-attr", "./dom-style"], function(dojo, query, array, lang, domCls, domCtr, domGeom, domAttr, domStyle) {

                // module:
                //		dojo/NodeList-dom.js

                /*=====
                 return function(){
                	 // summary:
                	 //		Adds DOM related methods to NodeList, and returns NodeList constructor.
                 };
                 =====*/

                var magicGuard = function(a) {
                    // summary:
                    //		the guard function for dojo.attr() and dojo.style()
                    return a.length == 1 && (typeof a[0] == "string"); // inline'd type check
                };

                var orphan = function(node) {
                    // summary:
                    //		function to orphan nodes
                    var p = node.parentNode;
                    if (p) {
                        p.removeChild(node);
                    }
                };
                // FIXME: should we move orphan() to dojo.html?

                var NodeList = query.NodeList,
                    awc = NodeList._adaptWithCondition,
                    aafe = NodeList._adaptAsForEach,
                    aam = NodeList._adaptAsMap;

                function getSet(module) {
                    return function(node, name, value) {
                        if (arguments.length == 2) {
                            return module[typeof name == "string" ? "get" : "set"](node, name);
                        }
                        // setter
                        return module.set(node, name, value);
                    };
                }

                lang.extend(NodeList, {
                    _normalize: function( /*String||Element||Object||NodeList*/ content, /*DOMNode?*/ refNode) {
                        // summary:
                        //		normalizes data to an array of items to insert.
                        // description:
                        //		If content is an object, it can have special properties "template" and
                        //		"parse". If "template" is defined, then the template value is run through
                        //		dojo.string.substitute (if dojo/string.substitute() has been dojo.required elsewhere),
                        //		or if templateFunc is a function on the content, that function will be used to
                        //		transform the template into a final string to be used for for passing to dojo/dom-construct.toDom().
                        //		If content.parse is true, then it is remembered for later, for when the content
                        //		nodes are inserted into the DOM. At that point, the nodes will be parsed for widgets
                        //		(if dojo.parser has been dojo.required elsewhere).

                        //Wanted to just use a DocumentFragment, but for the array/NodeList
                        //case that meant using cloneNode, but we may not want that.
                        //Cloning should only happen if the node operations span
                        //multiple refNodes. Also, need a real array, not a NodeList from the
                        //DOM since the node movements could change those NodeLists.

                        var parse = content.parse === true;

                        //Do we have an object that needs to be run through a template?
                        if (typeof content.template == "string") {
                            var templateFunc = content.templateFunc || (dojo.string && dojo.string.substitute);
                            content = templateFunc ? templateFunc(content.template, content) : content;
                        }

                        var type = (typeof content);
                        if (type == "string" || type == "number") {
                            content = domCtr.toDom(content, (refNode && refNode.ownerDocument));
                            if (content.nodeType == 11) {
                                //DocumentFragment. It cannot handle cloneNode calls, so pull out the children.
                                content = lang._toArray(content.childNodes);
                            } else {
                                content = [content];
                            }
                        } else if (!lang.isArrayLike(content)) {
                            content = [content];
                        } else if (!lang.isArray(content)) {
                            //To get to this point, content is array-like, but
                            //not an array, which likely means a DOM NodeList. Convert it now.
                            content = lang._toArray(content);
                        }

                        //Pass around the parse info
                        if (parse) {
                            content._runParse = true;
                        }
                        return content; //Array
                    },

                    _cloneNode: function( /*DOMNode*/ node) {
                        // summary:
                        //		private utility to clone a node. Not very interesting in the vanilla
                        //		dojo/NodeList case, but delegates could do interesting things like
                        //		clone event handlers if that is derivable from the node.
                        return node.cloneNode(true);
                    },

                    _place: function( /*Array*/ ary, /*DOMNode*/ refNode, /*String*/ position, /*Boolean*/ useClone) {
                        // summary:
                        //		private utility to handle placing an array of nodes relative to another node.
                        // description:
                        //		Allows for cloning the nodes in the array, and for
                        //		optionally parsing widgets, if ary._runParse is true.

                        //Avoid a disallowed operation if trying to do an innerHTML on a non-element node.
                        if (refNode.nodeType != 1 && position == "only") {
                            return;
                        }
                        var rNode = refNode,
                            tempNode;

                        //Always cycle backwards in case the array is really a
                        //DOM NodeList and the DOM operations take it out of the live collection.
                        var length = ary.length;
                        for (var i = length - 1; i >= 0; i--) {
                            var node = (useClone ? this._cloneNode(ary[i]) : ary[i]);

                            //If need widget parsing, use a temp node, instead of waiting after inserting into
                            //real DOM because we need to start widget parsing at one node up from current node,
                            //which could cause some already parsed widgets to be parsed again.
                            if (ary._runParse && dojo.parser && dojo.parser.parse) {
                                if (!tempNode) {
                                    tempNode = rNode.ownerDocument.createElement("div");
                                }
                                tempNode.appendChild(node);
                                dojo.parser.parse(tempNode);
                                node = tempNode.firstChild;
                                while (tempNode.firstChild) {
                                    tempNode.removeChild(tempNode.firstChild);
                                }
                            }

                            if (i == length - 1) {
                                domCtr.place(node, rNode, position);
                            } else {
                                rNode.parentNode.insertBefore(node, rNode);
                            }
                            rNode = node;
                        }
                    },


                    position: aam(domGeom.position),
                    /*=====
                    position: function(){
                    	// summary:
                    	//		Returns border-box objects (x/y/w/h) of all elements in a node list
                    	//		as an Array (*not* a NodeList). Acts like `dojo.position`, though
                    	//		assumes the node passed is each node in this list.

                    	return dojo.map(this, dojo.position); // Array
                    },
                    =====*/

                    attr: awc(getSet(domAttr), magicGuard),
                    /*=====
                    attr: function(property, value){
                    	// summary:
                    	//		gets or sets the DOM attribute for every element in the
                    	//		NodeList. See also `dojo.attr`
                    	// property: String
                    	//		the attribute to get/set
                    	// value: String?
                    	//		optional. The value to set the property to
                    	// returns:
                    	//		if no value is passed, the result is an array of attribute values
                    	//		If a value is passed, the return is this NodeList
                    	// example:
                    	//		Make all nodes with a particular class focusable:
                    	//	|	dojo.query(".focusable").attr("tabIndex", -1);
                    	// example:
                    	//		Disable a group of buttons:
                    	//	|	dojo.query("button.group").attr("disabled", true);
                    	// example:
                    	//		innerHTML can be assigned or retrieved as well:
                    	//	|	// get the innerHTML (as an array) for each list item
                    	//	|	var ih = dojo.query("li.replaceable").attr("innerHTML");
                    	return; // dojo/NodeList|Array
                    },
                    =====*/

                    style: awc(getSet(domStyle), magicGuard),
                    /*=====
                    style: function(property, value){
                    	// summary:
                    	//		gets or sets the CSS property for every element in the NodeList
                    	// property: String
                    	//		the CSS property to get/set, in JavaScript notation
                    	//		("lineHieght" instead of "line-height")
                    	// value: String?
                    	//		optional. The value to set the property to
                    	// returns:
                    	//		if no value is passed, the result is an array of strings.
                    	//		If a value is passed, the return is this NodeList
                    	return; // dojo/NodeList
                    	return; // Array
                    },
                    =====*/

                    addClass: aafe(domCls.add),
                    /*=====
                    addClass: function(className){
                    	// summary:
                    	//		adds the specified class to every node in the list
                    	// className: String|Array
                    	//		A String class name to add, or several space-separated class names,
                    	//		or an array of class names.
                    	return; // dojo/NodeList
                    },
                    =====*/

                    removeClass: aafe(domCls.remove),
                    /*=====
                    removeClass: function(className){
                    	// summary:
                    	//		removes the specified class from every node in the list
                    	// className: String|Array?
                    	//		An optional String class name to remove, or several space-separated
                    	//		class names, or an array of class names. If omitted, all class names
                    	//		will be deleted.
                    	// returns:
                    	//		this list
                    	return; // dojo/NodeList
                    },
                    =====*/

                    toggleClass: aafe(domCls.toggle),
                    /*=====
                    toggleClass: function(className, condition){
                    	// summary:
                    	//		Adds a class to node if not present, or removes if present.
                    	//		Pass a boolean condition if you want to explicitly add or remove.
                    	// condition: Boolean?
                    	//		If passed, true means to add the class, false means to remove.
                    	// className: String
                    	//		the CSS class to add
                    	return; // dojo/NodeList
                    },
                    =====*/

                    replaceClass: aafe(domCls.replace),
                    /*=====
                    replaceClass: function(addClassStr, removeClassStr){
                    	// summary:
                    	//		Replaces one or more classes on a node if not present.
                    	//		Operates more quickly than calling `removeClass()` and `addClass()`
                    	// addClassStr: String|Array
                    	//		A String class name to add, or several space-separated class names,
                    	//		or an array of class names.
                    	// removeClassStr: String|Array?
                    	//		A String class name to remove, or several space-separated class names,
                    	//		or an array of class names.
                    	return; // dojo/NodeList
                     },
                     =====*/

                    empty: aafe(domCtr.empty),
                    /*=====
                    empty: function(){
                    	// summary:
                    	//		clears all content from each node in the list. Effectively
                    	//		equivalent to removing all child nodes from every item in
                    	//		the list.
                    	return this.forEach("item.innerHTML='';"); // dojo/NodeList
                    	// FIXME: should we be checking for and/or disposing of widgets below these nodes?
                    },
                    =====*/

                    removeAttr: aafe(domAttr.remove),
                    /*=====
                     removeAttr: function(name){
                    	// summary:
                    	//		Removes an attribute from each node in the list.
                    	// name: String
                    	//		the name of the attribute to remove
                    	return;		// dojo/NodeList
                    },
                    =====*/

                    marginBox: aam(domGeom.getMarginBox),
                    /*=====
                    marginBox: function(){
                    	// summary:
                    	//		Returns margin-box size of nodes
                     	return; // dojo/NodeList
                     },
                     =====*/

                    // FIXME: connectPublisher()? connectRunOnce()?

                    /*
                    destroy: function(){
                    	// summary:
                    	//		destroys every item in the list.
                    	this.forEach(d.destroy);
                    	// FIXME: should we be checking for and/or disposing of widgets below these nodes?
                    },
                    */

                    place: function( /*String||Node*/ queryOrNode, /*String*/ position) {
                        // summary:
                        //		places elements of this node list relative to the first element matched
                        //		by queryOrNode. Returns the original NodeList. See: `dojo.place`
                        // queryOrNode:
                        //		may be a string representing any valid CSS3 selector or a DOM node.
                        //		In the selector case, only the first matching element will be used
                        //		for relative positioning.
                        // position:
                        //		can be one of:
                        //
                        //		-	"last" (default)
                        //		-	"first"
                        //		-	"before"
                        //		-	"after"
                        //		-	"only"
                        //		-	"replace"
                        //
                        //		or an offset in the childNodes property
                        var item = query(queryOrNode)[0];
                        return this.forEach(function(node) {
                            domCtr.place(node, item, position);
                        }); // dojo/NodeList
                    },

                    orphan: function( /*String?*/ filter) {
                        // summary:
                        //		removes elements in this list that match the filter
                        //		from their parents and returns them as a new NodeList.
                        // filter:
                        //		CSS selector like ".foo" or "div > span"
                        // returns:
                        //		NodeList containing the orphaned elements
                        return (filter ? query._filterResult(this, filter) : this).forEach(orphan); // dojo/NodeList
                    },

                    adopt: function( /*String||Array||DomNode*/ queryOrListOrNode, /*String?*/ position) {
                        // summary:
                        //		places any/all elements in queryOrListOrNode at a
                        //		position relative to the first element in this list.
                        //		Returns a dojo/NodeList of the adopted elements.
                        // queryOrListOrNode:
                        //		a DOM node or a query string or a query result.
                        //		Represents the nodes to be adopted relative to the
                        //		first element of this NodeList.
                        // position:
                        //		can be one of:
                        //
                        //		-	"last" (default)
                        //		-	"first"
                        //		-	"before"
                        //		-	"after"
                        //		-	"only"
                        //		-	"replace"
                        //
                        //		or an offset in the childNodes property
                        return query(queryOrListOrNode).place(this[0], position)._stash(this); // dojo/NodeList
                    },

                    // FIXME: do we need this?
                    query: function( /*String*/ queryStr) {
                        // summary:
                        //		Returns a new list whose members match the passed query,
                        //		assuming elements of the current NodeList as the root for
                        //		each search.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo">
                        //	|		<p>
                        //	|			bacon is tasty, <span>dontcha think?</span>
                        //	|		</p>
                        //	|	</div>
                        //	|	<div id="bar">
                        //	|		<p>great comedians may not be funny <span>in person</span></p>
                        //	|	</div>
                        //		If we are presented with the following definition for a NodeList:
                        //	|	var l = new NodeList(dojo.byId("foo"), dojo.byId("bar"));
                        //		it's possible to find all span elements under paragraphs
                        //		contained by these elements with this sub-query:
                        //	|	var spans = l.query("p span");

                        // FIXME: probably slow
                        if (!queryStr) {
                            return this;
                        }
                        var ret = new NodeList;
                        this.map(function(node) {
                            // FIXME: why would we ever get undefined here?
                            query(queryStr, node).forEach(function(subNode) {
                                if (subNode !== undefined) {
                                    ret.push(subNode);
                                }
                            });
                        });
                        return ret._stash(this); // dojo/NodeList
                    },

                    filter: function( /*String|Function*/ filter) {
                        // summary:
                        //		"masks" the built-in javascript filter() method (supported
                        //		in Dojo via `dojo.filter`) to support passing a simple
                        //		string filter in addition to supporting filtering function
                        //		objects.
                        // filter:
                        //		If a string, a CSS rule like ".thinger" or "div > span".
                        // example:
                        //		"regular" JS filter syntax as exposed in dojo.filter:
                        //		|	dojo.query("*").filter(function(item){
                        //		|		// highlight every paragraph
                        //		|		return (item.nodeName == "p");
                        //		|	}).style("backgroundColor", "yellow");
                        // example:
                        //		the same filtering using a CSS selector
                        //		|	dojo.query("*").filter("p").styles("backgroundColor", "yellow");

                        var a = arguments,
                            items = this,
                            start = 0;
                        if (typeof filter == "string") { // inline'd type check
                            items = query._filterResult(this, a[0]);
                            if (a.length == 1) {
                                // if we only got a string query, pass back the filtered results
                                return items._stash(this); // dojo/NodeList
                            }
                            // if we got a callback, run it over the filtered items
                            start = 1;
                        }
                        return this._wrap(array.filter(items, a[start], a[start + 1]), this); // dojo/NodeList
                    },

                    /*
                    // FIXME: should this be "copyTo" and include parenting info?
                    clone: function(){
                    	// summary:
                    	//		creates node clones of each element of this list
                    	//		and returns a new list containing the clones
                    },
                    */

                    addContent: function( /*String||DomNode||Object||dojo/NodeList*/ content, /*String||Integer?*/ position) {
                        // summary:
                        //		add a node, NodeList or some HTML as a string to every item in the
                        //		list.  Returns the original list.
                        // description:
                        //		a copy of the HTML content is added to each item in the
                        //		list, with an optional position argument. If no position
                        //		argument is provided, the content is appended to the end of
                        //		each item.
                        // content:
                        //		DOM node, HTML in string format, a NodeList or an Object. If a DOM node or
                        //		NodeList, the content will be cloned if the current NodeList has more than one
                        //		element. Only the DOM nodes are cloned, no event handlers. If it is an Object,
                        //		it should be an object with at "template" String property that has the HTML string
                        //		to insert. If dojo.string has already been dojo.required, then dojo.string.substitute
                        //		will be used on the "template" to generate the final HTML string. Other allowed
                        //		properties on the object are: "parse" if the HTML
                        //		string should be parsed for widgets (dojo.require("dojo.parser") to get that
                        //		option to work), and "templateFunc" if a template function besides dojo.string.substitute
                        //		should be used to transform the "template".
                        // position:
                        //		can be one of:
                        //
                        //		-	"last"||"end" (default)
                        //		-	"first||"start"
                        //		-	"before"
                        //		-	"after"
                        //		-	"replace" (replaces nodes in this NodeList with new content)
                        //		-	"only" (removes other children of the nodes so new content is the only child)
                        //
                        //		or an offset in the childNodes property
                        // example:
                        //		appends content to the end if the position is omitted
                        //	|	dojo.query("h3 > p").addContent("hey there!");
                        // example:
                        //		add something to the front of each element that has a
                        //		"thinger" property:
                        //	|	dojo.query("[thinger]").addContent("...", "first");
                        // example:
                        //		adds a header before each element of the list
                        //	|	dojo.query(".note").addContent("<h4>NOTE:</h4>", "before");
                        // example:
                        //		add a clone of a DOM node to the end of every element in
                        //		the list, removing it from its existing parent.
                        //	|	dojo.query(".note").addContent(dojo.byId("foo"));
                        // example:
                        //		Append nodes from a templatized string.
                        // |	dojo.require("dojo.string");
                        // |	dojo.query(".note").addContent({
                        // |		template: '<b>${id}: </b><span>${name}</span>',
                        // |		id: "user332",
                        // |		name: "Mr. Anderson"
                        // |	});
                        // example:
                        //		Append nodes from a templatized string that also has widgets parsed.
                        // |	dojo.require("dojo.string");
                        // |	dojo.require("dojo.parser");
                        // |	var notes = dojo.query(".note").addContent({
                        // |		template: '<button dojoType="dijit/form/Button">${text}</button>',
                        // |		parse: true,
                        // |		text: "Send"
                        // |	});
                        content = this._normalize(content, this[0]);
                        for (var i = 0, node;
                            (node = this[i]); i++) {
                            this._place(content, node, position, i > 0);
                        }
                        return this; // dojo/NodeList
                    }
                });

                return NodeList;
            });

        },
        'dojo/_base/event': function() {
            define("dojo/_base/event", ["./kernel", "../on", "../has", "../dom-geometry"], function(dojo, on, has, dom) {
                // module:
                //		dojo/_base/event

                if (on._fixEvent) {
                    var fixEvent = on._fixEvent;
                    on._fixEvent = function(evt, se) {
                        // add some additional normalization for back-compat, this isn't in on.js because it is somewhat more expensive
                        evt = fixEvent(evt, se);
                        if (evt) {
                            dom.normalizeEvent(evt);
                        }
                        return evt;
                    };
                }

                var ret = {
                    // summary:
                    //		This module defines dojo DOM event API.   Usually you should use dojo/on, and evt.stopPropagation() +
                    //		evt.preventDefault(), rather than this module.

                    fix: function( /*Event*/ evt, /*DOMNode*/ sender) {
                        // summary:
                        //		normalizes properties on the event object including event
                        //		bubbling methods, keystroke normalization, and x/y positions
                        // evt: Event
                        //		native event object
                        // sender: DOMNode
                        //		node to treat as "currentTarget"
                        if (on._fixEvent) {
                            return on._fixEvent(evt, sender);
                        }
                        return evt; // Event
                    },

                    stop: function( /*Event*/ evt) {
                        // summary:
                        //		prevents propagation and clobbers the default action of the
                        //		passed event
                        // evt: Event
                        //		The event object. If omitted, window.event is used on IE.
                        if (has("dom-addeventlistener") || (evt && evt.preventDefault)) {
                            evt.preventDefault();
                            evt.stopPropagation();
                        } else {
                            evt = evt || window.event;
                            evt.cancelBubble = true;
                            on._preventDefault.call(evt);
                        }
                    }
                };

                if (1) {
                    dojo.fixEvent = ret.fix;
                    dojo.stopEvent = ret.stop;
                }

                return ret;
            });

        },
        'dojo/errors/create': function() {
            define(["../_base/lang"], function(lang) {
                return function(name, ctor, base, props) {
                    base = base || Error;

                    var ErrorCtor = function(message) {
                        if (base === Error) {
                            if (Error.captureStackTrace) {
                                Error.captureStackTrace(this, ErrorCtor);
                            }

                            // Error.call() operates on the returned error
                            // object rather than operating on |this|
                            var err = Error.call(this, message),
                                prop;

                            // Copy own properties from err to |this|
                            for (prop in err) {
                                if (err.hasOwnProperty(prop)) {
                                    this[prop] = err[prop];
                                }
                            }

                            // messsage is non-enumerable in ES5
                            this.message = message;
                            // stack is non-enumerable in at least Firefox
                            this.stack = err.stack;
                        } else {
                            base.apply(this, arguments);
                        }
                        if (ctor) {
                            ctor.apply(this, arguments);
                        }
                    };

                    ErrorCtor.prototype = lang.delegate(base.prototype, props);
                    ErrorCtor.prototype.name = name;
                    ErrorCtor.prototype.constructor = ErrorCtor;

                    return ErrorCtor;
                };
            });

        },
        'dijit/_OnDijitClickMixin': function() {
            define("dijit/_OnDijitClickMixin", [
                "dojo/on",
                "dojo/_base/array", // array.forEach
                "dojo/keys", // keys.ENTER keys.SPACE
                "dojo/_base/declare", // declare
                "dojo/has", // has("dom-addeventlistener")
                "dojo/_base/unload", // unload.addOnWindowUnload
                "dojo/_base/window", // win.doc.addEventListener win.doc.attachEvent win.doc.detachEvent
                "./a11yclick"
            ], function(on, array, keys, declare, has, unload, win, a11yclick) {

                // module:
                //		dijit/_OnDijitClickMixin

                var ret = declare("dijit._OnDijitClickMixin", null, {
                    connect: function(
                        /*Object|null*/
                        obj,
                        /*String|Function*/
                        event,
                        /*String|Function*/
                        method) {
                        // summary:
                        //		Connects specified obj/event to specified method of this object
                        //		and registers for disconnect() on widget destroy.
                        // description:
                        //		Provide widget-specific analog to connect.connect, except with the
                        //		implicit use of this widget as the target object.
                        //		This version of connect also provides a special "ondijitclick"
                        //		event which triggers on a click or space or enter keyup.
                        //		Events connected with `this.connect` are disconnected upon
                        //		destruction.
                        // returns:
                        //		A handle that can be passed to `disconnect` in order to disconnect before
                        //		the widget is destroyed.
                        // example:
                        //	|	var btn = new Button();
                        //	|	// when foo.bar() is called, call the listener we're going to
                        //	|	// provide in the scope of btn
                        //	|	btn.connect(foo, "bar", function(){
                        //	|		console.debug(this.toString());
                        //	|	});
                        // tags:
                        //		protected

                        return this.inherited(arguments, [obj, event == "ondijitclick" ? a11yclick : event, method]);
                    }
                });

                ret.a11yclick = a11yclick; // back compat

                return ret;
            });

        },
        'app/main_logon': function() {
            define([
                "dojo/parser",
                "./nls",
                "dojo/dom-attr",
                "hsbcwidget/ext!/saas/Components/resource/jsbundle/logon/nls/logon.js?aggregationRequired",
                //Leave a gap for not returning items
                "dojo/uacss",
                "dojo/domReady!"
            ], function(parser, nls, domAttr, logon) {

                nls.replace({
                    nls: logon
                });

                //Determine which page controller to use.
                //The parse here is purely for demonstration purposes only

                parser.parse().then(function(instances) {

                    var bodyNode = document.body,
                        controllerMid = domAttr.get(bodyNode, 'data-page-controller') || 'app/controllers/_AppController',
                        args = domAttr.get(bodyNode, 'data-page-args') || '';
                    /*jshint -W054 */
                    args = new Function('return { ' + args + ' }')();
                    args.i18n = logon;

                    /*jshint +W054 */

                    require([controllerMid], function(Controller) {
                        new Controller(args);
                    });
                });
            });
        },
        'dojo/selector/acme': function() {
            define([
                "../dom", "../sniff", "../_base/array", "../_base/lang", "../_base/window"
            ], function(dom, has, array, lang, win) {

                // module:
                //		dojo/selector/acme

                /*
                	acme architectural overview:

                		acme is a relatively full-featured CSS3 query library. It is
                		designed to take any valid CSS3 selector and return the nodes matching
                		the selector. To do this quickly, it processes queries in several
                		steps, applying caching where profitable.

                		The steps (roughly in reverse order of the way they appear in the code):
                			1.) check to see if we already have a "query dispatcher"
                				- if so, use that with the given parameterization. Skip to step 4.
                			2.) attempt to determine which branch to dispatch the query to:
                				- JS (optimized DOM iteration)
                				- native (FF3.1+, Safari 3.1+, IE 8+)
                			3.) tokenize and convert to executable "query dispatcher"
                				- this is where the lion's share of the complexity in the
                					system lies. In the DOM version, the query dispatcher is
                					assembled as a chain of "yes/no" test functions pertaining to
                					a section of a simple query statement (".blah:nth-child(odd)"
                					but not "div div", which is 2 simple statements). Individual
                					statement dispatchers are cached (to prevent re-definition)
                					as are entire dispatch chains (to make re-execution of the
                					same query fast)
                			4.) the resulting query dispatcher is called in the passed scope
                					(by default the top-level document)
                				- for DOM queries, this results in a recursive, top-down
                					evaluation of nodes based on each simple query section
                				- for native implementations, this may mean working around spec
                					bugs. So be it.
                			5.) matched nodes are pruned to ensure they are unique (if necessary)
                */


                ////////////////////////////////////////////////////////////////////////
                // Toolkit aliases
                ////////////////////////////////////////////////////////////////////////

                // if you are extracting acme for use in your own system, you will
                // need to provide these methods and properties. No other porting should be
                // necessary, save for configuring the system to use a class other than
                // dojo/NodeList as the return instance instantiator
                var trim = lang.trim;
                var each = array.forEach;

                var getDoc = function() {
                    return win.doc;
                };
                // NOTE(alex): the spec is idiotic. CSS queries should ALWAYS be case-sensitive, but nooooooo
                var cssCaseBug = (getDoc().compatMode) == "BackCompat";

                ////////////////////////////////////////////////////////////////////////
                // Global utilities
                ////////////////////////////////////////////////////////////////////////


                var specials = ">~+";

                // global thunk to determine whether we should treat the current query as
                // case sensitive or not. This switch is flipped by the query evaluator
                // based on the document passed as the context to search.
                var caseSensitive = false;

                // how high?
                var yesman = function() {
                    return true;
                };

                ////////////////////////////////////////////////////////////////////////
                // Tokenizer
                ////////////////////////////////////////////////////////////////////////

                var getQueryParts = function(query) {
                    // summary:
                    //		state machine for query tokenization
                    // description:
                    //		instead of using a brittle and slow regex-based CSS parser,
                    //		acme implements an AST-style query representation. This
                    //		representation is only generated once per query. For example,
                    //		the same query run multiple times or under different root nodes
                    //		does not re-parse the selector expression but instead uses the
                    //		cached data structure. The state machine implemented here
                    //		terminates on the last " " (space) character and returns an
                    //		ordered array of query component structures (or "parts"). Each
                    //		part represents an operator or a simple CSS filtering
                    //		expression. The structure for parts is documented in the code
                    //		below.


                    // NOTE:
                    //		this code is designed to run fast and compress well. Sacrifices
                    //		to readability and maintainability have been made.  Your best
                    //		bet when hacking the tokenizer is to put The Donnas on *really*
                    //		loud (may we recommend their "Spend The Night" release?) and
                    //		just assume you're gonna make mistakes. Keep the unit tests
                    //		open and run them frequently. Knowing is half the battle ;-)
                    if (specials.indexOf(query.slice(-1)) >= 0) {
                        // if we end with a ">", "+", or "~", that means we're implicitly
                        // searching all children, so make it explicit
                        query += " * ";
                    } else {
                        // if you have not provided a terminator, one will be provided for
                        // you...
                        query += " ";
                    }

                    var ts = function( /*Integer*/ s, /*Integer*/ e) {
                        // trim and slice.

                        // take an index to start a string slice from and an end position
                        // and return a trimmed copy of that sub-string
                        return trim(query.slice(s, e));
                    };

                    // the overall data graph of the full query, as represented by queryPart objects
                    var queryParts = [];


                    // state keeping vars
                    var inBrackets = -1,
                        inParens = -1,
                        inMatchFor = -1,
                        inPseudo = -1,
                        inClass = -1,
                        inId = -1,
                        inTag = -1,
                        currentQuoteChar,
                        lc = "",
                        cc = "",
                        pStart;

                    // iteration vars
                    var x = 0, // index in the query
                        ql = query.length,
                        currentPart = null, // data structure representing the entire clause
                        _cp = null; // the current pseudo or attr matcher

                    // several temporary variables are assigned to this structure during a
                    // potential sub-expression match:
                    //		attr:
                    //			a string representing the current full attribute match in a
                    //			bracket expression
                    //		type:
                    //			if there's an operator in a bracket expression, this is
                    //			used to keep track of it
                    //		value:
                    //			the internals of parenthetical expression for a pseudo. for
                    //			:nth-child(2n+1), value might be "2n+1"

                    var endTag = function() {
                        // called when the tokenizer hits the end of a particular tag name.
                        // Re-sets state variables for tag matching and sets up the matcher
                        // to handle the next type of token (tag or operator).
                        if (inTag >= 0) {
                            var tv = (inTag == x) ? null : ts(inTag, x); // .toLowerCase();
                            currentPart[(specials.indexOf(tv) < 0) ? "tag" : "oper"] = tv;
                            inTag = -1;
                        }
                    };

                    var endId = function() {
                        // called when the tokenizer might be at the end of an ID portion of a match
                        if (inId >= 0) {
                            currentPart.id = ts(inId, x).replace(/\\/g, "");
                            inId = -1;
                        }
                    };

                    var endClass = function() {
                        // called when the tokenizer might be at the end of a class name
                        // match. CSS allows for multiple classes, so we augment the
                        // current item with another class in its list
                        if (inClass >= 0) {
                            currentPart.classes.push(ts(inClass + 1, x).replace(/\\/g, ""));
                            inClass = -1;
                        }
                    };

                    var endAll = function() {
                        // at the end of a simple fragment, so wall off the matches
                        endId();
                        endTag();
                        endClass();
                    };

                    var endPart = function() {
                        endAll();
                        if (inPseudo >= 0) {
                            currentPart.pseudos.push({
                                name: ts(inPseudo + 1, x)
                            });
                        }
                        // hint to the selector engine to tell it whether or not it
                        // needs to do any iteration. Many simple selectors don't, and
                        // we can avoid significant construction-time work by advising
                        // the system to skip them
                        currentPart.loops = (
                            currentPart.pseudos.length ||
                            currentPart.attrs.length ||
                            currentPart.classes.length);

                        currentPart.oquery = currentPart.query = ts(pStart, x); // save the full expression as a string


                        // otag/tag are hints to suggest to the system whether or not
                        // it's an operator or a tag. We save a copy of otag since the
                        // tag name is cast to upper-case in regular HTML matches. The
                        // system has a global switch to figure out if the current
                        // expression needs to be case sensitive or not and it will use
                        // otag or tag accordingly
                        currentPart.otag = currentPart.tag = (currentPart["oper"]) ? null : (currentPart.tag || "*");

                        if (currentPart.tag) {
                            // if we're in a case-insensitive HTML doc, we likely want
                            // the toUpperCase when matching on element.tagName. If we
                            // do it here, we can skip the string op per node
                            // comparison
                            currentPart.tag = currentPart.tag.toUpperCase();
                        }

                        // add the part to the list
                        if (queryParts.length && (queryParts[queryParts.length - 1].oper)) {
                            // operators are always infix, so we remove them from the
                            // list and attach them to the next match. The evaluator is
                            // responsible for sorting out how to handle them.
                            currentPart.infixOper = queryParts.pop();
                            currentPart.query = currentPart.infixOper.query + " " + currentPart.query;
                            /*
                            console.debug(	"swapping out the infix",
                            				currentPart.infixOper,
                            				"and attaching it to",
                            				currentPart);
                            */
                        }
                        queryParts.push(currentPart);

                        currentPart = null;
                    };

                    // iterate over the query, character by character, building up a
                    // list of query part objects
                    for (; lc = cc, cc = query.charAt(x), x < ql; x++) {
                        //		cc: the current character in the match
                        //		lc: the last character (if any)

                        // someone is trying to escape something, so don't try to match any
                        // fragments. We assume we're inside a literal.
                        if (lc == "\\") {
                            continue;
                        }
                        if (!currentPart) { // a part was just ended or none has yet been created
                            // NOTE: I hate all this alloc, but it's shorter than writing tons of if's
                            pStart = x;
                            //	rules describe full CSS sub-expressions, like:
                            //		#someId
                            //		.className:first-child
                            //	but not:
                            //		thinger > div.howdy[type=thinger]
                            //	the indidual components of the previous query would be
                            //	split into 3 parts that would be represented a structure like:
                            //		[
                            //			{
                            //				query: "thinger",
                            //				tag: "thinger",
                            //			},
                            //			{
                            //				query: "div.howdy[type=thinger]",
                            //				classes: ["howdy"],
                            //				infixOper: {
                            //					query: ">",
                            //					oper: ">",
                            //				}
                            //			},
                            //		]
                            currentPart = {
                                query: null, // the full text of the part's rule
                                pseudos: [], // CSS supports multiple pseud-class matches in a single rule
                                attrs: [], // CSS supports multi-attribute match, so we need an array
                                classes: [], // class matches may be additive, e.g.: .thinger.blah.howdy
                                tag: null, // only one tag...
                                oper: null, // ...or operator per component. Note that these wind up being exclusive.
                                id: null, // the id component of a rule
                                getTag: function() {
                                    return caseSensitive ? this.otag : this.tag;
                                }
                            };

                            // if we don't have a part, we assume we're going to start at
                            // the beginning of a match, which should be a tag name. This
                            // might fault a little later on, but we detect that and this
                            // iteration will still be fine.
                            inTag = x;
                        }

                        // Skip processing all quoted characters.
                        // If we are inside quoted text then currentQuoteChar stores the character that began the quote,
                        // thus that character that will end it.
                        if (currentQuoteChar) {
                            if (cc == currentQuoteChar) {
                                currentQuoteChar = null;
                            }
                            continue;
                        } else if (cc == "'" || cc == '"') {
                            currentQuoteChar = cc;
                            continue;
                        }

                        if (inBrackets >= 0) {
                            // look for a the close first
                            if (cc == "]") { // if we're in a [...] clause and we end, do assignment
                                if (!_cp.attr) {
                                    // no attribute match was previously begun, so we
                                    // assume this is an attribute existence match in the
                                    // form of [someAttributeName]
                                    _cp.attr = ts(inBrackets + 1, x);
                                } else {
                                    // we had an attribute already, so we know that we're
                                    // matching some sort of value, as in [attrName=howdy]
                                    _cp.matchFor = ts((inMatchFor || inBrackets + 1), x);
                                }
                                var cmf = _cp.matchFor;
                                if (cmf) {
                                    // try to strip quotes from the matchFor value. We want
                                    // [attrName=howdy] to match the same
                                    //	as [attrName = 'howdy' ]
                                    if ((cmf.charAt(0) == '"') || (cmf.charAt(0) == "'")) {
                                        _cp.matchFor = cmf.slice(1, -1);
                                    }
                                }
                                // remove backslash escapes from an attribute match, since DOM
                                // querying will get attribute values without backslashes
                                if (_cp.matchFor) {
                                    _cp.matchFor = _cp.matchFor.replace(/\\/g, "");
                                }

                                // end the attribute by adding it to the list of attributes.
                                currentPart.attrs.push(_cp);
                                _cp = null; // necessary?
                                inBrackets = inMatchFor = -1;
                            } else if (cc == "=") {
                                // if the last char was an operator prefix, make sure we
                                // record it along with the "=" operator.
                                var addToCc = ("|~^$*".indexOf(lc) >= 0) ? lc : "";
                                _cp.type = addToCc + cc;
                                _cp.attr = ts(inBrackets + 1, x - addToCc.length);
                                inMatchFor = x + 1;
                            }
                            // now look for other clause parts
                        } else if (inParens >= 0) {
                            // if we're in a parenthetical expression, we need to figure
                            // out if it's attached to a pseudo-selector rule like
                            // :nth-child(1)
                            if (cc == ")") {
                                if (inPseudo >= 0) {
                                    _cp.value = ts(inParens + 1, x);
                                }
                                inPseudo = inParens = -1;
                            }
                        } else if (cc == "#") {
                            // start of an ID match
                            endAll();
                            inId = x + 1;
                        } else if (cc == ".") {
                            // start of a class match
                            endAll();
                            inClass = x;
                        } else if (cc == ":") {
                            // start of a pseudo-selector match
                            endAll();
                            inPseudo = x;
                        } else if (cc == "[") {
                            // start of an attribute match.
                            endAll();
                            inBrackets = x;
                            // provide a new structure for the attribute match to fill-in
                            _cp = {
                                /*=====
                                attr: null, type: null, matchFor: null
                                =====*/
                            };
                        } else if (cc == "(") {
                            // we really only care if we've entered a parenthetical
                            // expression if we're already inside a pseudo-selector match
                            if (inPseudo >= 0) {
                                // provide a new structure for the pseudo match to fill-in
                                _cp = {
                                    name: ts(inPseudo + 1, x),
                                    value: null
                                };
                                currentPart.pseudos.push(_cp);
                            }
                            inParens = x;
                        } else if (
                            (cc == " ") &&
                            // if it's a space char and the last char is too, consume the
                            // current one without doing more work
                            (lc != cc)
                        ) {
                            endPart();
                        }
                    }
                    return queryParts;
                };


                ////////////////////////////////////////////////////////////////////////
                // DOM query infrastructure
                ////////////////////////////////////////////////////////////////////////

                var agree = function(first, second) {
                    // the basic building block of the yes/no chaining system. agree(f1,
                    // f2) generates a new function which returns the boolean results of
                    // both of the passed functions to a single logical-anded result. If
                    // either are not passed, the other is used exclusively.
                    if (!first) {
                        return second;
                    }
                    if (!second) {
                        return first;
                    }

                    return function() {
                        return first.apply(window, arguments) && second.apply(window, arguments);
                    };
                };

                var getArr = function(i, arr) {
                    // helps us avoid array alloc when we don't need it
                    var r = arr || []; // FIXME: should this be 'new d._NodeListCtor()' ?
                    if (i) {
                        r.push(i);
                    }
                    return r;
                };

                var _isElement = function(n) {
                    return (1 == n.nodeType);
                };

                // FIXME: need to coalesce _getAttr with defaultGetter
                var blank = "";
                var _getAttr = function(elem, attr) {
                    if (!elem) {
                        return blank;
                    }
                    if (attr == "class") {
                        return elem.className || blank;
                    }
                    if (attr == "for") {
                        return elem.htmlFor || blank;
                    }
                    if (attr == "style") {
                        return elem.style.cssText || blank;
                    }
                    return (caseSensitive ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
                };

                var attrs = {
                    "*=": function(attr, value) {
                        return function(elem) {
                            // E[foo*="bar"]
                            //		an E element whose "foo" attribute value contains
                            //		the substring "bar"
                            return (_getAttr(elem, attr).indexOf(value) >= 0);
                        };
                    },
                    "^=": function(attr, value) {
                        // E[foo^="bar"]
                        //		an E element whose "foo" attribute value begins exactly
                        //		with the string "bar"
                        return function(elem) {
                            return (_getAttr(elem, attr).indexOf(value) == 0);
                        };
                    },
                    "$=": function(attr, value) {
                        // E[foo$="bar"]
                        //		an E element whose "foo" attribute value ends exactly
                        //		with the string "bar"
                        return function(elem) {
                            var ea = " " + _getAttr(elem, attr);
                            var lastIndex = ea.lastIndexOf(value);
                            return lastIndex > -1 && (lastIndex == (ea.length - value.length));
                        };
                    },
                    "~=": function(attr, value) {
                        // E[foo~="bar"]
                        //		an E element whose "foo" attribute value is a list of
                        //		space-separated values, one of which is exactly equal
                        //		to "bar"

                        // return "[contains(concat(' ',@"+attr+",' '), ' "+ value +" ')]";
                        var tval = " " + value + " ";
                        return function(elem) {
                            var ea = " " + _getAttr(elem, attr) + " ";
                            return (ea.indexOf(tval) >= 0);
                        };
                    },
                    "|=": function(attr, value) {
                        // E[hreflang|="en"]
                        //		an E element whose "hreflang" attribute has a
                        //		hyphen-separated list of values beginning (from the
                        //		left) with "en"
                        var valueDash = value + "-";
                        return function(elem) {
                            var ea = _getAttr(elem, attr);
                            return (
                                (ea == value) ||
                                (ea.indexOf(valueDash) == 0)
                            );
                        };
                    },
                    "=": function(attr, value) {
                        return function(elem) {
                            return (_getAttr(elem, attr) == value);
                        };
                    }
                };

                // avoid testing for node type if we can. Defining this in the negative
                // here to avoid negation in the fast path.
                var _noNES = (typeof getDoc().firstChild.nextElementSibling == "undefined");
                var _ns = !_noNES ? "nextElementSibling" : "nextSibling";
                var _ps = !_noNES ? "previousElementSibling" : "previousSibling";
                var _simpleNodeTest = (_noNES ? _isElement : yesman);

                var _lookLeft = function(node) {
                    // look left
                    while (node = node[_ps]) {
                        if (_simpleNodeTest(node)) {
                            return false;
                        }
                    }
                    return true;
                };

                var _lookRight = function(node) {
                    // look right
                    while (node = node[_ns]) {
                        if (_simpleNodeTest(node)) {
                            return false;
                        }
                    }
                    return true;
                };

                var getNodeIndex = function(node) {
                    var root = node.parentNode;
                    root = root.nodeType != 7 ? root : root.nextSibling; // PROCESSING_INSTRUCTION_NODE
                    var i = 0,
                        tret = root.children || root.childNodes,
                        ci = (node["_i"] || node.getAttribute("_i") || -1),
                        cl = (root["_l"] || (typeof root.getAttribute !== "undefined" ? root.getAttribute("_l") : -1));

                    if (!tret) {
                        return -1;
                    }
                    var l = tret.length;

                    // we calculate the parent length as a cheap way to invalidate the
                    // cache. It's not 100% accurate, but it's much more honest than what
                    // other libraries do
                    if (cl == l && ci >= 0 && cl >= 0) {
                        // if it's legit, tag and release
                        return ci;
                    }

                    // else re-key things
                    if (has("ie") && typeof root.setAttribute !== "undefined") {
                        root.setAttribute("_l", l);
                    } else {
                        root["_l"] = l;
                    }
                    ci = -1;
                    for (var te = root["firstElementChild"] || root["firstChild"]; te; te = te[_ns]) {
                        if (_simpleNodeTest(te)) {
                            if (has("ie")) {
                                te.setAttribute("_i", ++i);
                            } else {
                                te["_i"] = ++i;
                            }
                            if (node === te) {
                                // NOTE:
                                //	shortcutting the return at this step in indexing works
                                //	very well for benchmarking but we avoid it here since
                                //	it leads to potential O(n^2) behavior in sequential
                                //	getNodexIndex operations on a previously un-indexed
                                //	parent. We may revisit this at a later time, but for
                                //	now we just want to get the right answer more often
                                //	than not.
                                ci = i;
                            }
                        }
                    }
                    return ci;
                };

                var isEven = function(elem) {
                    return !((getNodeIndex(elem)) % 2);
                };

                var isOdd = function(elem) {
                    return ((getNodeIndex(elem)) % 2);
                };

                var pseudos = {
                    "checked": function(name, condition) {
                        return function(elem) {
                            return !!("checked" in elem ? elem.checked : elem.selected);
                        };
                    },
                    "disabled": function(name, condition) {
                        return function(elem) {
                            return elem.disabled;
                        };
                    },
                    "enabled": function(name, condition) {
                        return function(elem) {
                            return !elem.disabled;
                        };
                    },
                    "first-child": function() {
                        return _lookLeft;
                    },
                    "last-child": function() {
                        return _lookRight;
                    },
                    "only-child": function(name, condition) {
                        return function(node) {
                            return _lookLeft(node) && _lookRight(node);
                        };
                    },
                    "empty": function(name, condition) {
                        return function(elem) {
                            // DomQuery and jQuery get this wrong, oddly enough.
                            // The CSS 3 selectors spec is pretty explicit about it, too.
                            var cn = elem.childNodes;
                            var cnl = elem.childNodes.length;
                            // if(!cnl){ return true; }
                            for (var x = cnl - 1; x >= 0; x--) {
                                var nt = cn[x].nodeType;
                                if ((nt === 1) || (nt == 3)) {
                                    return false;
                                }
                            }
                            return true;
                        };
                    },
                    "contains": function(name, condition) {
                        var cz = condition.charAt(0);
                        if (cz == '"' || cz == "'") { //remove quote
                            condition = condition.slice(1, -1);
                        }
                        return function(elem) {
                            return (elem.innerHTML.indexOf(condition) >= 0);
                        };
                    },
                    "not": function(name, condition) {
                        var p = getQueryParts(condition)[0];
                        var ignores = {
                            el: 1
                        };
                        if (p.tag != "*") {
                            ignores.tag = 1;
                        }
                        if (!p.classes.length) {
                            ignores.classes = 1;
                        }
                        var ntf = getSimpleFilterFunc(p, ignores);
                        return function(elem) {
                            return (!ntf(elem));
                        };
                    },
                    "nth-child": function(name, condition) {
                        var pi = parseInt;
                        // avoid re-defining function objects if we can
                        if (condition == "odd") {
                            return isOdd;
                        } else if (condition == "even") {
                            return isEven;
                        }
                        // FIXME: can we shorten this?
                        if (condition.indexOf("n") != -1) {
                            var tparts = condition.split("n", 2);
                            var pred = tparts[0] ? ((tparts[0] == '-') ? -1 : pi(tparts[0])) : 1;
                            var idx = tparts[1] ? pi(tparts[1]) : 0;
                            var lb = 0,
                                ub = -1;
                            if (pred > 0) {
                                if (idx < 0) {
                                    idx = (idx % pred) && (pred + (idx % pred));
                                } else if (idx > 0) {
                                    if (idx >= pred) {
                                        lb = idx - idx % pred;
                                    }
                                    idx = idx % pred;
                                }
                            } else if (pred < 0) {
                                pred *= -1;
                                // idx has to be greater than 0 when pred is negative;
                                // shall we throw an error here?
                                if (idx > 0) {
                                    ub = idx;
                                    idx = idx % pred;
                                }
                            }
                            if (pred > 0) {
                                return function(elem) {
                                    var i = getNodeIndex(elem);
                                    return (i >= lb) && (ub < 0 || i <= ub) && ((i % pred) == idx);
                                };
                            } else {
                                condition = idx;
                            }
                        }
                        var ncount = pi(condition);
                        return function(elem) {
                            return (getNodeIndex(elem) == ncount);
                        };
                    }
                };

                var defaultGetter = (has("ie") && (has("ie") < 9 || has("quirks"))) ? function(cond) {
                    var clc = cond.toLowerCase();
                    if (clc == "class") {
                        cond = "className";
                    }
                    return function(elem) {
                        return (caseSensitive ? elem.getAttribute(cond) : elem[cond] || elem[clc]);
                    };
                } : function(cond) {
                    return function(elem) {
                        return (elem && elem.getAttribute && elem.hasAttribute(cond));
                    };
                };

                var getSimpleFilterFunc = function(query, ignores) {
                    // generates a node tester function based on the passed query part. The
                    // query part is one of the structures generated by the query parser
                    // when it creates the query AST. The "ignores" object specifies which
                    // (if any) tests to skip, allowing the system to avoid duplicating
                    // work where it may have already been taken into account by other
                    // factors such as how the nodes to test were fetched in the first
                    // place
                    if (!query) {
                        return yesman;
                    }
                    ignores = ignores || {};

                    var ff = null;

                    if (!("el" in ignores)) {
                        ff = agree(ff, _isElement);
                    }

                    if (!("tag" in ignores)) {
                        if (query.tag != "*") {
                            ff = agree(ff, function(elem) {
                                return (elem && ((caseSensitive ? elem.tagName : elem.tagName.toUpperCase()) == query.getTag()));
                            });
                        }
                    }

                    if (!("classes" in ignores)) {
                        each(query.classes, function(cname, idx, arr) {
                            // get the class name
                            /*
                            var isWildcard = cname.charAt(cname.length-1) == "*";
                            if(isWildcard){
                            	cname = cname.substr(0, cname.length-1);
                            }
                            // I dislike the regex thing, even if memoized in a cache, but it's VERY short
                            var re = new RegExp("(?:^|\\s)" + cname + (isWildcard ? ".*" : "") + "(?:\\s|$)");
                            */
                            var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
                            ff = agree(ff, function(elem) {
                                return re.test(elem.className);
                            });
                            ff.count = idx;
                        });
                    }

                    if (!("pseudos" in ignores)) {
                        each(query.pseudos, function(pseudo) {
                            var pn = pseudo.name;
                            if (pseudos[pn]) {
                                ff = agree(ff, pseudos[pn](pn, pseudo.value));
                            }
                        });
                    }

                    if (!("attrs" in ignores)) {
                        each(query.attrs, function(attr) {
                            var matcher;
                            var a = attr.attr;
                            // type, attr, matchFor
                            if (attr.type && attrs[attr.type]) {
                                matcher = attrs[attr.type](a, attr.matchFor);
                            } else if (a.length) {
                                matcher = defaultGetter(a);
                            }
                            if (matcher) {
                                ff = agree(ff, matcher);
                            }
                        });
                    }

                    if (!("id" in ignores)) {
                        if (query.id) {
                            ff = agree(ff, function(elem) {
                                return (!!elem && (elem.id == query.id));
                            });
                        }
                    }

                    if (!ff) {
                        if (!("default" in ignores)) {
                            ff = yesman;
                        }
                    }
                    return ff;
                };

                var _nextSibling = function(filterFunc) {
                    return function(node, ret, bag) {
                        while (node = node[_ns]) {
                            if (_noNES && (!_isElement(node))) {
                                continue;
                            }
                            if (
                                (!bag || _isUnique(node, bag)) &&
                                filterFunc(node)
                            ) {
                                ret.push(node);
                            }
                            break;
                        }
                        return ret;
                    };
                };

                var _nextSiblings = function(filterFunc) {
                    return function(root, ret, bag) {
                        var te = root[_ns];
                        while (te) {
                            if (_simpleNodeTest(te)) {
                                if (bag && !_isUnique(te, bag)) {
                                    break;
                                }
                                if (filterFunc(te)) {
                                    ret.push(te);
                                }
                            }
                            te = te[_ns];
                        }
                        return ret;
                    };
                };

                // get an array of child *elements*, skipping text and comment nodes
                var _childElements = function(filterFunc) {
                    filterFunc = filterFunc || yesman;
                    return function(root, ret, bag) {
                        // get an array of child elements, skipping text and comment nodes
                        var te, x = 0,
                            tret = root.children || root.childNodes;
                        while (te = tret[x++]) {
                            if (
                                _simpleNodeTest(te) &&
                                (!bag || _isUnique(te, bag)) &&
                                (filterFunc(te, x))
                            ) {
                                ret.push(te);
                            }
                        }
                        return ret;
                    };
                };

                // test to see if node is below root
                var _isDescendant = function(node, root) {
                    var pn = node.parentNode;
                    while (pn) {
                        if (pn == root) {
                            break;
                        }
                        pn = pn.parentNode;
                    }
                    return !!pn;
                };

                var _getElementsFuncCache = {};

                var getElementsFunc = function(query) {
                    var retFunc = _getElementsFuncCache[query.query];
                    // if we've got a cached dispatcher, just use that
                    if (retFunc) {
                        return retFunc;
                    }
                    // else, generate a new on

                    // NOTE:
                    //		this function returns a function that searches for nodes and
                    //		filters them.  The search may be specialized by infix operators
                    //		(">", "~", or "+") else it will default to searching all
                    //		descendants (the " " selector). Once a group of children is
                    //		found, a test function is applied to weed out the ones we
                    //		don't want. Many common cases can be fast-pathed. We spend a
                    //		lot of cycles to create a dispatcher that doesn't do more work
                    //		than necessary at any point since, unlike this function, the
                    //		dispatchers will be called every time. The logic of generating
                    //		efficient dispatchers looks like this in pseudo code:
                    //
                    //		# if it's a purely descendant query (no ">", "+", or "~" modifiers)
                    //		if infixOperator == " ":
                    //			if only(id):
                    //				return def(root):
                    //					return d.byId(id, root);
                    //
                    //			elif id:
                    //				return def(root):
                    //					return filter(d.byId(id, root));
                    //
                    //			elif cssClass && getElementsByClassName:
                    //				return def(root):
                    //					return filter(root.getElementsByClassName(cssClass));
                    //
                    //			elif only(tag):
                    //				return def(root):
                    //					return root.getElementsByTagName(tagName);
                    //
                    //			else:
                    //				# search by tag name, then filter
                    //				return def(root):
                    //					return filter(root.getElementsByTagName(tagName||"*"));
                    //
                    //		elif infixOperator == ">":
                    //			# search direct children
                    //			return def(root):
                    //				return filter(root.children);
                    //
                    //		elif infixOperator == "+":
                    //			# search next sibling
                    //			return def(root):
                    //				return filter(root.nextElementSibling);
                    //
                    //		elif infixOperator == "~":
                    //			# search rightward siblings
                    //			return def(root):
                    //				return filter(nextSiblings(root));

                    var io = query.infixOper;
                    var oper = (io ? io.oper : "");
                    // the default filter func which tests for all conditions in the query
                    // part. This is potentially inefficient, so some optimized paths may
                    // re-define it to test fewer things.
                    var filterFunc = getSimpleFilterFunc(query, {
                        el: 1
                    });
                    var qt = query.tag;
                    var wildcardTag = ("*" == qt);
                    var ecs = getDoc()["getElementsByClassName"];

                    if (!oper) {
                        // if there's no infix operator, then it's a descendant query. ID
                        // and "elements by class name" variants can be accelerated so we
                        // call them out explicitly:
                        if (query.id) {
                            // testing shows that the overhead of yesman() is acceptable
                            // and can save us some bytes vs. re-defining the function
                            // everywhere.
                            filterFunc = (!query.loops && wildcardTag) ?
                                yesman :
                                getSimpleFilterFunc(query, {
                                    el: 1,
                                    id: 1
                                });

                            retFunc = function(root, arr) {
                                var te = dom.byId(query.id, (root.ownerDocument || root));
                                if (!te || !filterFunc(te)) {
                                    return;
                                }
                                if (9 == root.nodeType) { // if root's a doc, we just return directly
                                    return getArr(te, arr);
                                } else { // otherwise check ancestry
                                    if (_isDescendant(te, root)) {
                                        return getArr(te, arr);
                                    }
                                }
                            };
                        } else if (
                            ecs &&
                            // isAlien check. Workaround for Prototype.js being totally evil/dumb.
                            /\{\s*\[native code\]\s*\}/.test(String(ecs)) &&
                            query.classes.length &&
                            !cssCaseBug
                        ) {
                            // it's a class-based query and we've got a fast way to run it.

                            // ignore class and ID filters since we will have handled both
                            filterFunc = getSimpleFilterFunc(query, {
                                el: 1,
                                classes: 1,
                                id: 1
                            });
                            var classesString = query.classes.join(" ");
                            retFunc = function(root, arr, bag) {
                                var ret = getArr(0, arr),
                                    te, x = 0;
                                var tret = root.getElementsByClassName(classesString);
                                while ((te = tret[x++])) {
                                    if (filterFunc(te, root) && _isUnique(te, bag)) {
                                        ret.push(te);
                                    }
                                }
                                return ret;
                            };

                        } else if (!wildcardTag && !query.loops) {
                            // it's tag only. Fast-path it.
                            retFunc = function(root, arr, bag) {
                                var ret = getArr(0, arr),
                                    te, x = 0;
                                var tag = query.getTag(),
                                    tret = tag ? root.getElementsByTagName(tag) : [];
                                while ((te = tret[x++])) {
                                    if (_isUnique(te, bag)) {
                                        ret.push(te);
                                    }
                                }
                                return ret;
                            };
                        } else {
                            // the common case:
                            //		a descendant selector without a fast path. By now it's got
                            //		to have a tag selector, even if it's just "*" so we query
                            //		by that and filter
                            filterFunc = getSimpleFilterFunc(query, {
                                el: 1,
                                tag: 1,
                                id: 1
                            });
                            retFunc = function(root, arr, bag) {
                                var ret = getArr(0, arr),
                                    te, x = 0;
                                // we use getTag() to avoid case sensitivity issues
                                var tag = query.getTag(),
                                    tret = tag ? root.getElementsByTagName(tag) : [];
                                while ((te = tret[x++])) {
                                    if (filterFunc(te, root) && _isUnique(te, bag)) {
                                        ret.push(te);
                                    }
                                }
                                return ret;
                            };
                        }
                    } else {
                        // the query is scoped in some way. Instead of querying by tag we
                        // use some other collection to find candidate nodes
                        var skipFilters = {
                            el: 1
                        };
                        if (wildcardTag) {
                            skipFilters.tag = 1;
                        }
                        filterFunc = getSimpleFilterFunc(query, skipFilters);
                        if ("+" == oper) {
                            retFunc = _nextSibling(filterFunc);
                        } else if ("~" == oper) {
                            retFunc = _nextSiblings(filterFunc);
                        } else if (">" == oper) {
                            retFunc = _childElements(filterFunc);
                        }
                    }
                    // cache it and return
                    return _getElementsFuncCache[query.query] = retFunc;
                };

                var filterDown = function(root, queryParts) {
                    // NOTE:
                    //		this is the guts of the DOM query system. It takes a list of
                    //		parsed query parts and a root and finds children which match
                    //		the selector represented by the parts
                    var candidates = getArr(root),
                        qp, x, te, qpl = queryParts.length,
                        bag, ret;

                    for (var i = 0; i < qpl; i++) {
                        ret = [];
                        qp = queryParts[i];
                        x = candidates.length - 1;
                        if (x > 0) {
                            // if we have more than one root at this level, provide a new
                            // hash to use for checking group membership but tell the
                            // system not to post-filter us since we will already have been
                            // guaranteed to be unique
                            bag = {};
                            ret.nozip = true;
                        }
                        var gef = getElementsFunc(qp);
                        for (var j = 0;
                            (te = candidates[j]); j++) {
                            // for every root, get the elements that match the descendant
                            // selector, adding them to the "ret" array and filtering them
                            // via membership in this level's bag. If there are more query
                            // parts, then this level's return will be used as the next
                            // level's candidates
                            gef(te, ret, bag);
                        }
                        if (!ret.length) {
                            break;
                        }
                        candidates = ret;
                    }
                    return ret;
                };

                ////////////////////////////////////////////////////////////////////////
                // the query runner
                ////////////////////////////////////////////////////////////////////////

                // these are the primary caches for full-query results. The query
                // dispatcher functions are generated then stored here for hash lookup in
                // the future
                var _queryFuncCacheDOM = {},
                    _queryFuncCacheQSA = {};

                // this is the second level of splitting, from full-length queries (e.g.,
                // "div.foo .bar") into simple query expressions (e.g., ["div.foo",
                // ".bar"])
                var getStepQueryFunc = function(query) {
                    var qparts = getQueryParts(trim(query));

                    // if it's trivial, avoid iteration and zipping costs
                    if (qparts.length == 1) {
                        // we optimize this case here to prevent dispatch further down the
                        // chain, potentially slowing things down. We could more elegantly
                        // handle this in filterDown(), but it's slower for simple things
                        // that need to be fast (e.g., "#someId").
                        var tef = getElementsFunc(qparts[0]);
                        return function(root) {
                            var r = tef(root, []);
                            if (r) {
                                r.nozip = true;
                            }
                            return r;
                        };
                    }

                    // otherwise, break it up and return a runner that iterates over the parts recursively
                    return function(root) {
                        return filterDown(root, qparts);
                    };
                };

                // NOTES:
                //	* we can't trust QSA for anything but document-rooted queries, so
                //	  caching is split into DOM query evaluators and QSA query evaluators
                //	* caching query results is dirty and leak-prone (or, at a minimum,
                //	  prone to unbounded growth). Other toolkits may go this route, but
                //	  they totally destroy their own ability to manage their memory
                //	  footprint. If we implement it, it should only ever be with a fixed
                //	  total element reference # limit and an LRU-style algorithm since JS
                //	  has no weakref support. Caching compiled query evaluators is also
                //	  potentially problematic, but even on large documents the size of the
                //	  query evaluators is often < 100 function objects per evaluator (and
                //	  LRU can be applied if it's ever shown to be an issue).
                //	* since IE's QSA support is currently only for HTML documents and even
                //	  then only in IE 8's "standards mode", we have to detect our dispatch
                //	  route at query time and keep 2 separate caches. Ugg.

                // we need to determine if we think we can run a given query via
                // querySelectorAll or if we'll need to fall back on DOM queries to get
                // there. We need a lot of information about the environment and the query
                // to make the determination (e.g. does it support QSA, does the query in
                // question work in the native QSA impl, etc.).

                // IE QSA queries may incorrectly include comment nodes, so we throw the
                // zipping function into "remove" comments mode instead of the normal "skip
                // it" which every other QSA-clued browser enjoys
                var noZip = has("ie") ? "commentStrip" : "nozip";

                var qsa = "querySelectorAll";
                var qsaAvail = !!getDoc()[qsa];

                //Don't bother with n+3 type of matches, IE complains if we modify those.
                var infixSpaceRe = /\\[>~+]|n\+\d|([^ \\])?([>~+])([^ =])?/g;
                var infixSpaceFunc = function(match, pre, ch, post) {
                    return ch ? (pre ? pre + " " : "") + ch + (post ? " " + post : "") : /*n+3*/ match;
                };

                //Don't apply the infixSpaceRe to attribute value selectors
                var attRe = /([^[]*)([^\]]*])?/g;
                var attFunc = function(match, nonAtt, att) {
                    return nonAtt.replace(infixSpaceRe, infixSpaceFunc) + (att || "");
                };
                var getQueryFunc = function(query, forceDOM) {
                    //Normalize query. The CSS3 selectors spec allows for omitting spaces around
                    //infix operators, >, ~ and +
                    //Do the work here since detection for spaces is used as a simple "not use QSA"
                    //test below.
                    query = query.replace(attRe, attFunc);

                    if (qsaAvail) {
                        // if we've got a cached variant and we think we can do it, run it!
                        var qsaCached = _queryFuncCacheQSA[query];
                        if (qsaCached && !forceDOM) {
                            return qsaCached;
                        }
                    }

                    // else if we've got a DOM cached variant, assume that we already know
                    // all we need to and use it
                    var domCached = _queryFuncCacheDOM[query];
                    if (domCached) {
                        return domCached;
                    }

                    // TODO:
                    //		today we're caching DOM and QSA branches separately so we
                    //		recalc useQSA every time. If we had a way to tag root+query
                    //		efficiently, we'd be in good shape to do a global cache.

                    var qcz = query.charAt(0);
                    var nospace = (-1 == query.indexOf(" "));

                    // byId searches are wicked fast compared to QSA, even when filtering
                    // is required
                    if ((query.indexOf("#") >= 0) && (nospace)) {
                        forceDOM = true;
                    }

                    var useQSA = (
                        qsaAvail && (!forceDOM) &&
                        // as per CSS 3, we can't currently start w/ combinator:
                        //		http://www.w3.org/TR/css3-selectors/#w3cselgrammar
                        (specials.indexOf(qcz) == -1) &&
                        // IE's QSA impl sucks on pseudos
                        (!has("ie") || (query.indexOf(":") == -1)) &&

                        (!(cssCaseBug && (query.indexOf(".") >= 0))) &&

                        // FIXME:
                        //		need to tighten up browser rules on ":contains" and "|=" to
                        //		figure out which aren't good
                        //		Latest webkit (around 531.21.8) does not seem to do well with :checked on option
                        //		elements, even though according to spec, selected options should
                        //		match :checked. So go nonQSA for it:
                        //		http://bugs.dojotoolkit.org/ticket/5179
                        (query.indexOf(":contains") == -1) && (query.indexOf(":checked") == -1) &&
                        (query.indexOf("|=") == -1) // some browsers don't grok it
                    );

                    // TODO:
                    //		if we've got a descendant query (e.g., "> .thinger" instead of
                    //		just ".thinger") in a QSA-able doc, but are passed a child as a
                    //		root, it should be possible to give the item a synthetic ID and
                    //		trivially rewrite the query to the form "#synid > .thinger" to
                    //		use the QSA branch


                    if (useQSA) {
                        var tq = (specials.indexOf(query.charAt(query.length - 1)) >= 0) ?
                            (query + " *") : query;
                        return _queryFuncCacheQSA[query] = function(root) {
                            try {
                                // the QSA system contains an egregious spec bug which
                                // limits us, effectively, to only running QSA queries over
                                // entire documents.  See:
                                //		http://ejohn.org/blog/thoughts-on-queryselectorall/
                                //	despite this, we can also handle QSA runs on simple
                                //	selectors, but we don't want detection to be expensive
                                //	so we're just checking for the presence of a space char
                                //	right now. Not elegant, but it's cheaper than running
                                //	the query parser when we might not need to
                                if (!((9 == root.nodeType) || nospace)) {
                                    throw "";
                                }
                                var r = root[qsa](tq);
                                // skip expensive duplication checks and just wrap in a NodeList
                                r[noZip] = true;
                                return r;
                            } catch (e) {
                                // else run the DOM branch on this query, ensuring that we
                                // default that way in the future
                                return getQueryFunc(query, true)(root);
                            }
                        };
                    } else {
                        // DOM branch
                        var parts = query.match(/([^\s,](?:"(?:\\.|[^"])+"|'(?:\\.|[^'])+'|[^,])*)/g);
                        return _queryFuncCacheDOM[query] = ((parts.length < 2) ?
                            // if not a compound query (e.g., ".foo, .bar"), cache and return a dispatcher
                            getStepQueryFunc(query) :
                            // if it *is* a complex query, break it up into its
                            // constituent parts and return a dispatcher that will
                            // merge the parts when run
                            function(root) {
                                var pindex = 0, // avoid array alloc for every invocation
                                    ret = [],
                                    tp;
                                while ((tp = parts[pindex++])) {
                                    ret = ret.concat(getStepQueryFunc(tp)(root));
                                }
                                return ret;
                            }
                        );
                    }
                };

                var _zipIdx = 0;

                // NOTE:
                //		this function is Moo inspired, but our own impl to deal correctly
                //		with XML in IE
                var _nodeUID = has("ie") ? function(node) {
                        if (caseSensitive) {
                            // XML docs don't have uniqueID on their nodes
                            return (node.getAttribute("_uid") || node.setAttribute("_uid", ++_zipIdx) || _zipIdx);

                        } else {
                            return node.uniqueID;
                        }
                    } :
                    function(node) {
                        return (node._uid || (node._uid = ++_zipIdx));
                    };

                // determine if a node in is unique in a "bag". In this case we don't want
                // to flatten a list of unique items, but rather just tell if the item in
                // question is already in the bag. Normally we'd just use hash lookup to do
                // this for us but IE's DOM is busted so we can't really count on that. On
                // the upside, it gives us a built in unique ID function.
                var _isUnique = function(node, bag) {
                    if (!bag) {
                        return 1;
                    }
                    var id = _nodeUID(node);
                    if (!bag[id]) {
                        return bag[id] = 1;
                    }
                    return 0;
                };

                // attempt to efficiently determine if an item in a list is a dupe,
                // returning a list of "uniques", hopefully in document order
                var _zipIdxName = "_zipIdx";
                var _zip = function(arr) {
                    if (arr && arr.nozip) {
                        return arr;
                    }
                    var ret = [];
                    if (!arr || !arr.length) {
                        return ret;
                    }
                    if (arr[0]) {
                        ret.push(arr[0]);
                    }
                    if (arr.length < 2) {
                        return ret;
                    }

                    _zipIdx++;

                    // we have to fork here for IE and XML docs because we can't set
                    // expandos on their nodes (apparently). *sigh*
                    var x, te;
                    if (has("ie") && caseSensitive) {
                        var szidx = _zipIdx + "";
                        arr[0].setAttribute(_zipIdxName, szidx);
                        for (x = 1; te = arr[x]; x++) {
                            if (arr[x].getAttribute(_zipIdxName) != szidx) {
                                ret.push(te);
                            }
                            te.setAttribute(_zipIdxName, szidx);
                        }
                    } else if (has("ie") && arr.commentStrip) {
                        try {
                            for (x = 1; te = arr[x]; x++) {
                                if (_isElement(te)) {
                                    ret.push(te);
                                }
                            }
                        } catch (e) { /* squelch */ }
                    } else {
                        if (arr[0]) {
                            arr[0][_zipIdxName] = _zipIdx;
                        }
                        for (x = 1; te = arr[x]; x++) {
                            if (arr[x][_zipIdxName] != _zipIdx) {
                                ret.push(te);
                            }
                            te[_zipIdxName] = _zipIdx;
                        }
                    }
                    return ret;
                };

                // the main executor
                var query = function( /*String*/ query, /*String|DOMNode?*/ root) {
                    // summary:
                    //		Returns nodes which match the given CSS3 selector, searching the
                    //		entire document by default but optionally taking a node to scope
                    //		the search by. Returns an array.
                    // description:
                    //		dojo.query() is the swiss army knife of DOM node manipulation in
                    //		Dojo. Much like Prototype's "$$" (bling-bling) function or JQuery's
                    //		"$" function, dojo.query provides robust, high-performance
                    //		CSS-based node selector support with the option of scoping searches
                    //		to a particular sub-tree of a document.
                    //
                    //		Supported Selectors:
                    //		--------------------
                    //
                    //		acme supports a rich set of CSS3 selectors, including:
                    //
                    //		- class selectors (e.g., `.foo`)
                    //		- node type selectors like `span`
                    //		- ` ` descendant selectors
                    //		- `>` child element selectors
                    //		- `#foo` style ID selectors
                    //		- `*` universal selector
                    //		- `~`, the preceded-by sibling selector
                    //		- `+`, the immediately preceded-by sibling selector
                    //		- attribute queries:
                    //			- `[foo]` attribute presence selector
                    //			- `[foo='bar']` attribute value exact match
                    //			- `[foo~='bar']` attribute value list item match
                    //			- `[foo^='bar']` attribute start match
                    //			- `[foo$='bar']` attribute end match
                    //			- `[foo*='bar']` attribute substring match
                    //		- `:first-child`, `:last-child`, and `:only-child` positional selectors
                    //		- `:empty` content emtpy selector
                    //		- `:checked` pseudo selector
                    //		- `:nth-child(n)`, `:nth-child(2n+1)` style positional calculations
                    //		- `:nth-child(even)`, `:nth-child(odd)` positional selectors
                    //		- `:not(...)` negation pseudo selectors
                    //
                    //		Any legal combination of these selectors will work with
                    //		`dojo.query()`, including compound selectors ("," delimited).
                    //		Very complex and useful searches can be constructed with this
                    //		palette of selectors and when combined with functions for
                    //		manipulation presented by dojo/NodeList, many types of DOM
                    //		manipulation operations become very straightforward.
                    //
                    //		Unsupported Selectors:
                    //		----------------------
                    //
                    //		While dojo.query handles many CSS3 selectors, some fall outside of
                    //		what's reasonable for a programmatic node querying engine to
                    //		handle. Currently unsupported selectors include:
                    //
                    //		- namespace-differentiated selectors of any form
                    //		- all `::` pseduo-element selectors
                    //		- certain pseudo-selectors which don't get a lot of day-to-day use:
                    //			- `:root`, `:lang()`, `:target`, `:focus`
                    //		- all visual and state selectors:
                    //			- `:root`, `:active`, `:hover`, `:visited`, `:link`,
                    //				  `:enabled`, `:disabled`
                    //			- `:*-of-type` pseudo selectors
                    //
                    //		dojo.query and XML Documents:
                    //		-----------------------------
                    //
                    //		`dojo.query` (as of dojo 1.2) supports searching XML documents
                    //		in a case-sensitive manner. If an HTML document is served with
                    //		a doctype that forces case-sensitivity (e.g., XHTML 1.1
                    //		Strict), dojo.query() will detect this and "do the right
                    //		thing". Case sensitivity is dependent upon the document being
                    //		searched and not the query used. It is therefore possible to
                    //		use case-sensitive queries on strict sub-documents (iframes,
                    //		etc.) or XML documents while still assuming case-insensitivity
                    //		for a host/root document.
                    //
                    //		Non-selector Queries:
                    //		---------------------
                    //
                    //		If something other than a String is passed for the query,
                    //		`dojo.query` will return a new `dojo/NodeList` instance
                    //		constructed from that parameter alone and all further
                    //		processing will stop. This means that if you have a reference
                    //		to a node or NodeList, you can quickly construct a new NodeList
                    //		from the original by calling `dojo.query(node)` or
                    //		`dojo.query(list)`.
                    //
                    // query:
                    //		The CSS3 expression to match against. For details on the syntax of
                    //		CSS3 selectors, see <http://www.w3.org/TR/css3-selectors/#selectors>
                    // root:
                    //		A DOMNode (or node id) to scope the search from. Optional.
                    // returns: Array
                    // example:
                    //		search the entire document for elements with the class "foo":
                    //	|	dojo.query(".foo");
                    //		these elements will match:
                    //	|	<span class="foo"></span>
                    //	|	<span class="foo bar"></span>
                    //	|	<p class="thud foo"></p>
                    // example:
                    //		search the entire document for elements with the classes "foo" *and* "bar":
                    //	|	dojo.query(".foo.bar");
                    //		these elements will match:
                    //	|	<span class="foo bar"></span>
                    //		while these will not:
                    //	|	<span class="foo"></span>
                    //	|	<p class="thud foo"></p>
                    // example:
                    //		find `<span>` elements which are descendants of paragraphs and
                    //		which have a "highlighted" class:
                    //	|	dojo.query("p span.highlighted");
                    //		the innermost span in this fragment matches:
                    //	|	<p class="foo">
                    //	|		<span>...
                    //	|			<span class="highlighted foo bar">...</span>
                    //	|		</span>
                    //	|	</p>
                    // example:
                    //		set an "odd" class on all odd table rows inside of the table
                    //		`#tabular_data`, using the `>` (direct child) selector to avoid
                    //		affecting any nested tables:
                    //	|	dojo.query("#tabular_data > tbody > tr:nth-child(odd)").addClass("odd");
                    // example:
                    //		remove all elements with the class "error" from the document
                    //		and store them in a list:
                    //	|	var errors = dojo.query(".error").orphan();
                    // example:
                    //		add an onclick handler to every submit button in the document
                    //		which causes the form to be sent via Ajax instead:
                    //	|	dojo.query("input[type='submit']").onclick(function(e){
                    //	|		dojo.stopEvent(e); // prevent sending the form
                    //	|		var btn = e.target;
                    //	|		dojo.xhrPost({
                    //	|			form: btn.form,
                    //	|			load: function(data){
                    //	|				// replace the form with the response
                    //	|				var div = dojo.doc.createElement("div");
                    //	|				dojo.place(div, btn.form, "after");
                    //	|				div.innerHTML = data;
                    //	|				dojo.style(btn.form, "display", "none");
                    //	|			}
                    //	|		});
                    //	|	});

                    root = root || getDoc();

                    // throw the big case sensitivity switch
                    var od = root.ownerDocument || root; // root is either Document or a node inside the document
                    caseSensitive = (od.createElement("div").tagName === "div");

                    // NOTE:
                    //		adding "true" as the 2nd argument to getQueryFunc is useful for
                    //		testing the DOM branch without worrying about the
                    //		behavior/performance of the QSA branch.
                    var r = getQueryFunc(query)(root);

                    // FIXME:
                    //		need to investigate this branch WRT #8074 and #8075
                    if (r && r.nozip) {
                        return r;
                    }
                    return _zip(r); // dojo/NodeList
                };
                query.filter = function( /*Node[]*/ nodeList, /*String*/ filter, /*String|DOMNode?*/ root) {
                    // summary:
                    //		function for filtering a NodeList based on a selector, optimized for simple selectors
                    var tmpNodeList = [],
                        parts = getQueryParts(filter),
                        filterFunc =
                        (parts.length == 1 && !/[^\w#\.]/.test(filter)) ?
                        getSimpleFilterFunc(parts[0]) :
                        function(node) {
                            return array.indexOf(query(filter, dom.byId(root)), node) != -1;
                        };
                    for (var x = 0, te; te = nodeList[x]; x++) {
                        if (filterFunc(te)) {
                            tmpNodeList.push(te);
                        }
                    }
                    return tmpNodeList;
                };
                return query;
            });

        },
        'dojo/dnd/autoscroll': function() {
            define(["../_base/lang", "../sniff", "../_base/window", "../dom-geometry", "../dom-style", "../window"],
                function(lang, has, win, domGeom, domStyle, winUtils) {

                    // module:
                    //		dojo/dnd/autoscroll

                    var exports = {
                        // summary:
                        //		Used by dojo/dnd/Manager to scroll document or internal node when the user
                        //		drags near the edge of the viewport or a scrollable node
                    };
                    lang.setObject("dojo.dnd.autoscroll", exports);

                    exports.getViewport = winUtils.getBox;

                    exports.V_TRIGGER_AUTOSCROLL = 32;
                    exports.H_TRIGGER_AUTOSCROLL = 32;

                    exports.V_AUTOSCROLL_VALUE = 16;
                    exports.H_AUTOSCROLL_VALUE = 16;

                    // These are set by autoScrollStart().
                    // Set to default values in case autoScrollStart() isn't called. (back-compat, remove for 2.0)
                    var viewport,
                        doc = win.doc,
                        maxScrollTop = Infinity,
                        maxScrollLeft = Infinity;

                    exports.autoScrollStart = function(d) {
                        // summary:
                        //		Called at the start of a drag.
                        // d: Document
                        //		The document of the node being dragged.

                        doc = d;
                        viewport = winUtils.getBox(doc);

                        // Save height/width of document at start of drag, before it gets distorted by a user dragging an avatar past
                        // the document's edge
                        var html = win.body(doc).parentNode;
                        maxScrollTop = Math.max(html.scrollHeight - viewport.h, 0);
                        maxScrollLeft = Math.max(html.scrollWidth - viewport.w, 0); // usually 0
                    };

                    exports.autoScroll = function(e) {
                        // summary:
                        //		a handler for mousemove and touchmove events, which scrolls the window, if
                        //		necessary
                        // e: Event
                        //		mousemove/touchmove event

                        // FIXME: needs more docs!
                        var v = viewport || winUtils.getBox(doc), // getBox() call for back-compat, in case autoScrollStart() wasn't called
                            html = win.body(doc).parentNode,
                            dx = 0,
                            dy = 0;
                        if (e.clientX < exports.H_TRIGGER_AUTOSCROLL) {
                            dx = -exports.H_AUTOSCROLL_VALUE;
                        } else if (e.clientX > v.w - exports.H_TRIGGER_AUTOSCROLL) {
                            dx = Math.min(exports.H_AUTOSCROLL_VALUE, maxScrollLeft - html.scrollLeft); // don't scroll past edge of doc
                        }
                        if (e.clientY < exports.V_TRIGGER_AUTOSCROLL) {
                            dy = -exports.V_AUTOSCROLL_VALUE;
                        } else if (e.clientY > v.h - exports.V_TRIGGER_AUTOSCROLL) {
                            dy = Math.min(exports.V_AUTOSCROLL_VALUE, maxScrollTop - html.scrollTop); // don't scroll past edge of doc
                        }
                        window.scrollBy(dx, dy);
                    };

                    exports._validNodes = {
                        "div": 1,
                        "p": 1,
                        "td": 1
                    };
                    exports._validOverflow = {
                        "auto": 1,
                        "scroll": 1
                    };

                    exports.autoScrollNodes = function(e) {
                        // summary:
                        //		a handler for mousemove and touchmove events, which scrolls the first available
                        //		Dom element, it falls back to exports.autoScroll()
                        // e: Event
                        //		mousemove/touchmove event

                        // FIXME: needs more docs!

                        var b, t, w, h, rx, ry, dx = 0,
                            dy = 0,
                            oldLeft, oldTop;

                        for (var n = e.target; n;) {
                            if (n.nodeType == 1 && (n.tagName.toLowerCase() in exports._validNodes)) {
                                var s = domStyle.getComputedStyle(n),
                                    overflow = (s.overflow.toLowerCase() in exports._validOverflow),
                                    overflowX = (s.overflowX.toLowerCase() in exports._validOverflow),
                                    overflowY = (s.overflowY.toLowerCase() in exports._validOverflow);
                                if (overflow || overflowX || overflowY) {
                                    b = domGeom.getContentBox(n, s);
                                    t = domGeom.position(n, true);
                                }
                                // overflow-x
                                if (overflow || overflowX) {
                                    w = Math.min(exports.H_TRIGGER_AUTOSCROLL, b.w / 2);
                                    rx = e.pageX - t.x;
                                    if (has("webkit") || has("opera")) {
                                        // FIXME: this code should not be here, it should be taken into account
                                        // either by the event fixing code, or the domGeom.position()
                                        // FIXME: this code doesn't work on Opera 9.5 Beta
                                        rx += win.body().scrollLeft;
                                    }
                                    dx = 0;
                                    if (rx > 0 && rx < b.w) {
                                        if (rx < w) {
                                            dx = -w;
                                        } else if (rx > b.w - w) {
                                            dx = w;
                                        }
                                        oldLeft = n.scrollLeft;
                                        n.scrollLeft = n.scrollLeft + dx;
                                    }
                                }
                                // overflow-y
                                if (overflow || overflowY) {
                                    //console.log(b.l, b.t, t.x, t.y, n.scrollLeft, n.scrollTop);
                                    h = Math.min(exports.V_TRIGGER_AUTOSCROLL, b.h / 2);
                                    ry = e.pageY - t.y;
                                    if (has("webkit") || has("opera")) {
                                        // FIXME: this code should not be here, it should be taken into account
                                        // either by the event fixing code, or the domGeom.position()
                                        // FIXME: this code doesn't work on Opera 9.5 Beta
                                        ry += win.body().scrollTop;
                                    }
                                    dy = 0;
                                    if (ry > 0 && ry < b.h) {
                                        if (ry < h) {
                                            dy = -h;
                                        } else if (ry > b.h - h) {
                                            dy = h;
                                        }
                                        oldTop = n.scrollTop;
                                        n.scrollTop = n.scrollTop + dy;
                                    }
                                }
                                if (dx || dy) {
                                    return;
                                }
                            }
                            try {
                                n = n.parentNode;
                            } catch (x) {
                                n = null;
                            }
                        }
                        exports.autoScroll(e);
                    };

                    return exports;

                });

        },
        'dijit/form/_RadioButtonMixin': function() {
            define("dijit/form/_RadioButtonMixin", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/_base/event", // event.stop
                "dojo/_base/lang", // lang.hitch
                "dojo/query", // query
                "../registry" // registry.getEnclosingWidget
            ], function(array, declare, domAttr, event, lang, query, registry) {

                // module:
                //		dijit/form/_RadioButtonMixin

                return declare("dijit.form._RadioButtonMixin", null, {
                    // summary:
                    //		Mixin to provide widget functionality for an HTML radio button

                    // type: [private] String
                    //		type attribute on `<input>` node.
                    //		Users should not change this value.
                    type: "radio",

                    _getRelatedWidgets: function() {
                        // Private function needed to help iterate over all radio buttons in a group.
                        var ary = [];
                        query("input[type=radio]", this.focusNode.form || this.ownerDocument).forEach( // can't use name= since query doesn't support [] in the name
                            lang.hitch(this, function(inputNode) {
                                if (inputNode.name == this.name && inputNode.form == this.focusNode.form) {
                                    var widget = registry.getEnclosingWidget(inputNode);
                                    if (widget) {
                                        ary.push(widget);
                                    }
                                }
                            })
                        );
                        return ary;
                    },

                    _setCheckedAttr: function( /*Boolean*/ value) {
                        // If I am being checked then have to deselect currently checked radio button
                        this.inherited(arguments);
                        if (!this._created) {
                            return;
                        }
                        if (value) {
                            array.forEach(this._getRelatedWidgets(), lang.hitch(this, function(widget) {
                                if (widget != this && widget.checked) {
                                    widget.set('checked', false);
                                }
                            }));
                        }
                    },

                    _getSubmitValue: function( /*String*/ value) {
                        return value === null ? "on" : value;
                    },

                    _onClick: function( /*Event*/ e) {
                        if (this.checked || this.disabled) { // nothing to do
                            event.stop(e);
                            return false;
                        }
                        if (this.readOnly) { // ignored by some browsers so we have to resync the DOM elements with widget values
                            event.stop(e);
                            array.forEach(this._getRelatedWidgets(), lang.hitch(this, function(widget) {
                                domAttr.set(this.focusNode || this.domNode, 'checked', widget.checked);
                            }));
                            return false;
                        }
                        return this.inherited(arguments);
                    }
                });
            });

        },
        'dojo/dnd/TimedMoveable': function() {
            define(["../_base/declare", "./Moveable" /*=====, "./Mover" =====*/ ], function(declare, Moveable /*=====, Mover =====*/ ) {
                // module:
                //		dojo/dnd/TimedMoveable

                /*=====
                var __TimedMoveableArgs = declare([Moveable.__MoveableArgs], {
                	// timeout: Number
                	//		delay move by this number of ms,
                	//		accumulating position changes during the timeout
                	timeout: 0
                });
                =====*/

                // precalculate long expressions
                var oldOnMove = Moveable.prototype.onMove;

                return declare("dojo.dnd.TimedMoveable", Moveable, {
                    // summary:
                    //		A specialized version of Moveable to support an FPS throttling.
                    //		This class puts an upper restriction on FPS, which may reduce
                    //		the CPU load. The additional parameter "timeout" regulates
                    //		the delay before actually moving the moveable object.

                    // object attributes (for markup)
                    timeout: 40, // in ms, 40ms corresponds to 25 fps

                    constructor: function(node, params) {
                        // summary:
                        //		an object that makes a node moveable with a timer
                        // node: Node||String
                        //		a node (or node's id) to be moved
                        // params: __TimedMoveableArgs
                        //		object with additional parameters.

                        // sanitize parameters
                        if (!params) {
                            params = {};
                        }
                        if (params.timeout && typeof params.timeout == "number" && params.timeout >= 0) {
                            this.timeout = params.timeout;
                        }
                    },

                    onMoveStop: function( /*Mover*/ mover) {
                        if (mover._timer) {
                            // stop timer
                            clearTimeout(mover._timer);
                            // reflect the last received position
                            oldOnMove.call(this, mover, mover._leftTop);
                        }
                        Moveable.prototype.onMoveStop.apply(this, arguments);
                    },
                    onMove: function( /*Mover*/ mover, /*Object*/ leftTop) {
                        mover._leftTop = leftTop;
                        if (!mover._timer) {
                            var _t = this; // to avoid using dojo.hitch()
                            mover._timer = setTimeout(function() {
                                // we don't have any pending requests
                                mover._timer = null;
                                // reflect the last received position
                                oldOnMove.call(_t, mover, mover._leftTop);
                            }, this.timeout);
                        }
                    }
                });
            });

        },
        'dojo/dom-class': function() {
            define(["./_base/lang", "./_base/array", "./dom"], function(lang, array, dom) {
                // module:
                //		dojo/dom-class

                var className = "className";

                /* Part I of classList-based implementation is preserved here for posterity
                var classList = "classList";
                has.add("dom-classList", function(){
                	return classList in document.createElement("p");
                });
                */

                // =============================
                // (CSS) Class Functions
                // =============================

                var cls, // exports object
                    spaces = /\s+/,
                    a1 = [""];

                function str2array(s) {
                    if (typeof s == "string" || s instanceof String) {
                        if (s && !spaces.test(s)) {
                            a1[0] = s;
                            return a1;
                        }
                        var a = s.split(spaces);
                        if (a.length && !a[0]) {
                            a.shift();
                        }
                        if (a.length && !a[a.length - 1]) {
                            a.pop();
                        }
                        return a;
                    }
                    // assumed to be an array
                    if (!s) {
                        return [];
                    }
                    return array.filter(s, function(x) {
                        return x;
                    });
                }

                /* Part II of classList-based implementation is preserved here for posterity
                if(has("dom-classList")){
                	// new classList version
                	cls = {
                		contains: function containsClass(node, classStr){
                			var clslst = classStr && dom.byId(node)[classList];
                			return clslst && clslst.contains(classStr); // Boolean
                		},

                		add: function addClass(node, classStr){
                			node = dom.byId(node);
                			classStr = str2array(classStr);
                			for(var i = 0, len = classStr.length; i < len; ++i){
                				node[classList].add(classStr[i]);
                			}
                		},

                		remove: function removeClass(node, classStr){
                			node = dom.byId(node);
                			if(classStr === undefined){
                				node[className] = "";
                			}else{
                				classStr = str2array(classStr);
                				for(var i = 0, len = classStr.length; i < len; ++i){
                					node[classList].remove(classStr[i]);
                				}
                			}
                		},

                		replace: function replaceClass(node, addClassStr, removeClassStr){
                			node = dom.byId(node);
                			if(removeClassStr === undefined){
                				node[className] = "";
                			}else{
                				removeClassStr = str2array(removeClassStr);
                				for(var i = 0, len = removeClassStr.length; i < len; ++i){
                					node[classList].remove(removeClassStr[i]);
                				}
                			}
                			addClassStr = str2array(addClassStr);
                			for(i = 0, len = addClassStr.length; i < len; ++i){
                				node[classList].add(addClassStr[i]);
                			}
                		},

                		toggle: function toggleClass(node, classStr, condition){
                			node = dom.byId(node);
                			if(condition === undefined){
                				classStr = str2array(classStr);
                				for(var i = 0, len = classStr.length; i < len; ++i){
                					node[classList].toggle(classStr[i]);
                				}
                			}else{
                				cls[condition ? "add" : "remove"](node, classStr);
                			}
                			return condition;   // Boolean
                		}
                	}
                }
                */

                // regular DOM version
                var fakeNode = {}; // for effective replacement
                cls = {
                    // summary:
                    //		This module defines the core dojo DOM class API.

                    contains: function containsClass( /*DomNode|String*/ node, /*String*/ classStr) {
                        // summary:
                        //		Returns whether or not the specified classes are a portion of the
                        //		class list currently applied to the node.
                        // node: String|DOMNode
                        //		String ID or DomNode reference to check the class for.
                        // classStr: String
                        //		A string class name to look for.
                        // example:
                        //		Do something if a node with id="someNode" has class="aSillyClassName" present
                        //	|	if(dojo.hasClass("someNode","aSillyClassName")){ ... }

                        return ((" " + dom.byId(node)[className] + " ").indexOf(" " + classStr + " ") >= 0); // Boolean
                    },

                    add: function addClass( /*DomNode|String*/ node, /*String|Array*/ classStr) {
                        // summary:
                        //		Adds the specified classes to the end of the class list on the
                        //		passed node. Will not re-apply duplicate classes.
                        //
                        // node: String|DOMNode
                        //		String ID or DomNode reference to add a class string too
                        //
                        // classStr: String|Array
                        //		A String class name to add, or several space-separated class names,
                        //		or an array of class names.
                        //
                        // example:
                        //		Add a class to some node:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.add("someNode", "anewClass");
                        //	|	});
                        //
                        // example:
                        //		Add two classes at once:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.add("someNode", "firstClass secondClass");
                        //	|	});
                        //
                        // example:
                        //		Add two classes at once (using array):
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.add("someNode", ["firstClass", "secondClass"]);
                        //	|	});
                        //
                        // example:
                        //		Available in `dojo/NodeList` for multiple additions
                        //	|	require(["dojo/query"], function(query){
                        //	|		query("ul > li").addClass("firstLevel");
                        //	|	});

                        node = dom.byId(node);
                        classStr = str2array(classStr);
                        var cls = node[className],
                            oldLen;
                        cls = cls ? " " + cls + " " : " ";
                        oldLen = cls.length;
                        for (var i = 0, len = classStr.length, c; i < len; ++i) {
                            c = classStr[i];
                            if (c && cls.indexOf(" " + c + " ") < 0) {
                                cls += c + " ";
                            }
                        }
                        if (oldLen < cls.length) {
                            node[className] = cls.substr(1, cls.length - 2);
                        }
                    },

                    remove: function removeClass( /*DomNode|String*/ node, /*String|Array?*/ classStr) {
                        // summary:
                        //		Removes the specified classes from node. No `contains()`
                        //		check is required.
                        //
                        // node: String|DOMNode
                        //		String ID or DomNode reference to remove the class from.
                        //
                        // classStr: String|Array
                        //		An optional String class name to remove, or several space-separated
                        //		class names, or an array of class names. If omitted, all class names
                        //		will be deleted.
                        //
                        // example:
                        //		Remove a class from some node:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.remove("someNode", "firstClass");
                        //	|	});
                        //
                        // example:
                        //		Remove two classes from some node:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.remove("someNode", "firstClass secondClass");
                        //	|	});
                        //
                        // example:
                        //		Remove two classes from some node (using array):
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.remove("someNode", ["firstClass", "secondClass"]);
                        //	|	});
                        //
                        // example:
                        //		Remove all classes from some node:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.remove("someNode");
                        //	|	});
                        //
                        // example:
                        //		Available in `dojo/NodeList` for multiple removal
                        //	|	require(["dojo/query"], function(query){
                        //	|		query("ul > li").removeClass("foo");
                        //	|	});

                        node = dom.byId(node);
                        var cls;
                        if (classStr !== undefined) {
                            classStr = str2array(classStr);
                            cls = " " + node[className] + " ";
                            for (var i = 0, len = classStr.length; i < len; ++i) {
                                cls = cls.replace(" " + classStr[i] + " ", " ");
                            }
                            cls = lang.trim(cls);
                        } else {
                            cls = "";
                        }
                        if (node[className] != cls) {
                            node[className] = cls;
                        }
                    },

                    replace: function replaceClass( /*DomNode|String*/ node, /*String|Array*/ addClassStr, /*String|Array?*/ removeClassStr) {
                        // summary:
                        //		Replaces one or more classes on a node if not present.
                        //		Operates more quickly than calling dojo.removeClass and dojo.addClass
                        //
                        // node: String|DOMNode
                        //		String ID or DomNode reference to remove the class from.
                        //
                        // addClassStr: String|Array
                        //		A String class name to add, or several space-separated class names,
                        //		or an array of class names.
                        //
                        // removeClassStr: String|Array?
                        //		A String class name to remove, or several space-separated class names,
                        //		or an array of class names.
                        //
                        // example:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.replace("someNode", "add1 add2", "remove1 remove2");
                        //	|	});
                        //
                        // example:
                        //	Replace all classes with addMe
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.replace("someNode", "addMe");
                        //	|	});
                        //
                        // example:
                        //	Available in `dojo/NodeList` for multiple toggles
                        //	|	require(["dojo/query"], function(query){
                        //	|		query(".findMe").replaceClass("addMe", "removeMe");
                        //	|	});

                        node = dom.byId(node);
                        fakeNode[className] = node[className];
                        cls.remove(fakeNode, removeClassStr);
                        cls.add(fakeNode, addClassStr);
                        if (node[className] !== fakeNode[className]) {
                            node[className] = fakeNode[className];
                        }
                    },

                    toggle: function toggleClass( /*DomNode|String*/ node, /*String|Array*/ classStr, /*Boolean?*/ condition) {
                        // summary:
                        //		Adds a class to node if not present, or removes if present.
                        //		Pass a boolean condition if you want to explicitly add or remove.
                        //		Returns the condition that was specified directly or indirectly.
                        //
                        // node: String|DOMNode
                        //		String ID or DomNode reference to toggle a class string
                        //
                        // classStr: String|Array
                        //		A String class name to toggle, or several space-separated class names,
                        //		or an array of class names.
                        //
                        // condition:
                        //		If passed, true means to add the class, false means to remove.
                        //		Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.
                        //
                        // example:
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.toggle("someNode", "hovered");
                        //	|	});
                        //
                        // example:
                        //		Forcefully add a class
                        //	|	require(["dojo/dom-class"], function(domClass){
                        //	|		domClass.toggle("someNode", "hovered", true);
                        //	|	});
                        //
                        // example:
                        //		Available in `dojo/NodeList` for multiple toggles
                        //	|	require(["dojo/query"], function(query){
                        //	|		query(".toggleMe").toggleClass("toggleMe");
                        //	|	});

                        node = dom.byId(node);
                        if (condition === undefined) {
                            classStr = str2array(classStr);
                            for (var i = 0, len = classStr.length, c; i < len; ++i) {
                                c = classStr[i];
                                cls[cls.contains(node, c) ? "remove" : "add"](node, c);
                            }
                        } else {
                            cls[condition ? "add" : "remove"](node, classStr);
                        }
                        return condition; // Boolean
                    }
                };

                return cls;
            });

        },
        'dojo/_base/sniff': function() {
            define(["./kernel", "./lang", "../sniff"], function(dojo, lang, has) {
                // module:
                //		dojo/_base/sniff

                /*=====
                return {
                	// summary:
                	//		Deprecated.   New code should use dojo/sniff.
                	//		This module populates the dojo browser version sniffing properties like dojo.isIE.
                };
                =====*/

                if (!1) {
                    return has;
                }

                // no idea what this is for, or if it's used
                dojo._name = "browser";

                lang.mixin(dojo, {
                    // isBrowser: Boolean
                    //		True if the client is a web-browser
                    isBrowser: true,

                    // isFF: Number|undefined
                    //		Version as a Number if client is FireFox. undefined otherwise. Corresponds to
                    //		major detected FireFox version (1.5, 2, 3, etc.)
                    isFF: has("ff"),

                    // isIE: Number|undefined
                    //		Version as a Number if client is MSIE(PC). undefined otherwise. Corresponds to
                    //		major detected IE version (6, 7, 8, etc.)
                    isIE: has("ie"),

                    // isKhtml: Number|undefined
                    //		Version as a Number if client is a KHTML browser. undefined otherwise. Corresponds to major
                    //		detected version.
                    isKhtml: has("khtml"),

                    // isWebKit: Number|undefined
                    //		Version as a Number if client is a WebKit-derived browser (Konqueror,
                    //		Safari, Chrome, etc.). undefined otherwise.
                    isWebKit: has("webkit"),

                    // isMozilla: Number|undefined
                    //		Version as a Number if client is a Mozilla-based browser (Firefox,
                    //		SeaMonkey). undefined otherwise. Corresponds to major detected version.
                    isMozilla: has("mozilla"),
                    // isMoz: Number|undefined
                    //		Version as a Number if client is a Mozilla-based browser (Firefox,
                    //		SeaMonkey). undefined otherwise. Corresponds to major detected version.
                    isMoz: has("mozilla"),

                    // isOpera: Number|undefined
                    //		Version as a Number if client is Opera. undefined otherwise. Corresponds to
                    //		major detected version.
                    isOpera: has("opera"),

                    // isSafari: Number|undefined
                    //		Version as a Number if client is Safari or iPhone. undefined otherwise.
                    isSafari: has("safari"),

                    // isChrome: Number|undefined
                    //		Version as a Number if client is Chrome browser. undefined otherwise.
                    isChrome: has("chrome"),

                    // isMac: Boolean
                    //		True if the client runs on Mac
                    isMac: has("mac"),

                    // isIos: Boolean
                    //		True if client is iPhone, iPod, or iPad
                    isIos: has("ios"),

                    // isAndroid: Number|undefined
                    //		Version as a Number if client is android browser. undefined otherwise.
                    isAndroid: has("android"),

                    // isWii: Boolean
                    //		True if client is Wii
                    isWii: has("wii"),

                    // isQuirks: Boolean
                    //		Page is in quirks mode.
                    isQuirks: has("quirks"),

                    // isAir: Boolean
                    //		True if client is Adobe Air
                    isAir: has("air")
                });


                dojo.locale = dojo.locale || (has("ie") ? navigator.userLanguage : navigator.language).toLowerCase();

                return has;
            });

        },
        'dojo/NodeList-fx': function() {
            define(["./query", "./_base/lang", "./_base/connect", "./_base/fx", "./fx"],
                function(query, lang, connectLib, baseFx, coreFx) {

                    // module:
                    //		dojo/NodeList-fx

                    /*=====
                    return function(){
                    	// summary:
                    	//		Adds dojo.fx animation support to dojo.query() by extending the NodeList class
                    	//		with additional FX functions.  NodeList is the array-like object used to hold query results.
                    };
                    =====*/

                    var NodeList = query.NodeList;

                    lang.extend(NodeList, {
                        _anim: function(obj, method, args) {
                            args = args || {};
                            var a = coreFx.combine(
                                this.map(function(item) {
                                    var tmpArgs = {
                                        node: item
                                    };
                                    lang.mixin(tmpArgs, args);
                                    return obj[method](tmpArgs);
                                })
                            );
                            return args.auto ? a.play() && this : a; // dojo/_base/fx.Animation|dojo/NodeList
                        },

                        wipeIn: function(args) {
                            // summary:
                            //		wipe in all elements of this NodeList via `dojo/fx.wipeIn()`
                            //
                            // args: Object?
                            //		Additional dojo/_base/fx.Animation arguments to mix into this set with the addition of
                            //		an `auto` parameter.
                            //
                            // returns: dojo/_base/fx.Animation|dojo/NodeList
                            //		A special args member `auto` can be passed to automatically play the animation.
                            //		If args.auto is present, the original dojo/NodeList will be returned for further
                            //		chaining. Otherwise the dojo/_base/fx.Animation instance is returned and must be .play()'ed
                            //
                            // example:
                            //		Fade in all tables with class "blah":
                            //		|	dojo.query("table.blah").wipeIn().play();
                            //
                            // example:
                            //		Utilizing `auto` to get the NodeList back:
                            //		|	dojo.query(".titles").wipeIn({ auto:true }).onclick(someFunction);
                            //
                            return this._anim(coreFx, "wipeIn", args); // dojo/_base/fx.Animation|dojo/NodeList
                        },

                        wipeOut: function(args) {
                            // summary:
                            //		wipe out all elements of this NodeList via `dojo/fx.wipeOut()`
                            //
                            // args: Object?
                            //		Additional dojo/_base/fx.Animation arguments to mix into this set with the addition of
                            //		an `auto` parameter.
                            //
                            // returns: dojo/_base/fx.Animation|dojo/NodeList
                            //		A special args member `auto` can be passed to automatically play the animation.
                            //		If args.auto is present, the original dojo/NodeList will be returned for further
                            //		chaining. Otherwise the dojo/_base/fx.Animation instance is returned and must be .play()'ed
                            //
                            // example:
                            //		Wipe out all tables with class "blah":
                            //		|	dojo.query("table.blah").wipeOut().play();
                            return this._anim(coreFx, "wipeOut", args); // dojo/_base/fx.Animation|dojo/NodeList
                        },

                        slideTo: function(args) {
                            // summary:
                            //		slide all elements of the node list to the specified place via `dojo/fx.slideTo()`
                            //
                            // args: Object?
                            //		Additional dojo/_base/fx.Animation arguments to mix into this set with the addition of
                            //		an `auto` parameter.
                            //
                            // returns: dojo/_base/fx.Animation|dojo/NodeList
                            //		A special args member `auto` can be passed to automatically play the animation.
                            //		If args.auto is present, the original dojo/NodeList will be returned for further
                            //		chaining. Otherwise the dojo/_base/fx.Animation instance is returned and must be .play()'ed
                            //
                            // example:
                            //		|	Move all tables with class "blah" to 300/300:
                            //		|	dojo.query("table.blah").slideTo({
                            //		|		left: 40,
                            //		|		top: 50
                            //		|	}).play();
                            return this._anim(coreFx, "slideTo", args); // dojo/_base/fx.Animation|dojo/NodeList
                        },


                        fadeIn: function(args) {
                            // summary:
                            //		fade in all elements of this NodeList via `dojo.fadeIn`
                            //
                            // args: Object?
                            //		Additional dojo/_base/fx.Animation arguments to mix into this set with the addition of
                            //		an `auto` parameter.
                            //
                            // returns: dojo/_base/fx.Animation|dojo/NodeList
                            //		A special args member `auto` can be passed to automatically play the animation.
                            //		If args.auto is present, the original dojo/NodeList will be returned for further
                            //		chaining. Otherwise the dojo/_base/fx.Animation instance is returned and must be .play()'ed
                            //
                            // example:
                            //		Fade in all tables with class "blah":
                            //		|	dojo.query("table.blah").fadeIn().play();
                            return this._anim(baseFx, "fadeIn", args); // dojo/_base/fx.Animation|dojo/NodeList
                        },

                        fadeOut: function(args) {
                            // summary:
                            //		fade out all elements of this NodeList via `dojo.fadeOut`
                            //
                            // args: Object?
                            //		Additional dojo/_base/fx.Animation arguments to mix into this set with the addition of
                            //		an `auto` parameter.
                            //
                            // returns: dojo/_base/fx.Animation|dojo/NodeList
                            //		A special args member `auto` can be passed to automatically play the animation.
                            //		If args.auto is present, the original dojo/NodeList will be returned for further
                            //		chaining. Otherwise the dojo/_base/fx.Animation instance is returned and must be .play()'ed
                            //
                            // example:
                            //		Fade out all elements with class "zork":
                            //		|	dojo.query(".zork").fadeOut().play();
                            // example:
                            //		Fade them on a delay and do something at the end:
                            //		|	var fo = dojo.query(".zork").fadeOut();
                            //		|	dojo.connect(fo, "onEnd", function(){ /*...*/ });
                            //		|	fo.play();
                            // example:
                            //		Using `auto`:
                            //		|	dojo.query("li").fadeOut({ auto:true }).filter(filterFn).forEach(doit);
                            //
                            return this._anim(baseFx, "fadeOut", args); // dojo/_base/fx.Animation|dojo/NodeList
                        },

                        animateProperty: function(args) {
                            // summary:
                            //		Animate all elements of this NodeList across the properties specified.
                            //		syntax identical to `dojo.animateProperty`
                            //
                            // args: Object?
                            //		Additional dojo/_base/fx.Animation arguments to mix into this set with the addition of
                            //		an `auto` parameter.
                            //
                            // returns: dojo/_base/fx.Animation|dojo/NodeList
                            //		A special args member `auto` can be passed to automatically play the animation.
                            //		If args.auto is present, the original dojo/NodeList will be returned for further
                            //		chaining. Otherwise the dojo/_base/fx.Animation instance is returned and must be .play()'ed
                            //
                            // example:
                            //	|	dojo.query(".zork").animateProperty({
                            //	|		duration: 500,
                            //	|		properties: {
                            //	|			color:		{ start: "black", end: "white" },
                            //	|			left:		{ end: 300 }
                            //	|		}
                            //	|	}).play();
                            //
                            // example:
                            //	|	dojo.query(".grue").animateProperty({
                            //	|		auto:true,
                            //	|		properties: {
                            //	|			height:240
                            //	|		}
                            //	|	}).onclick(handler);
                            return this._anim(baseFx, "animateProperty", args); // dojo/_base/fx.Animation|dojo/NodeList
                        },

                        anim: function( /*Object*/ properties,
                            /*Integer?*/
                            duration,
                            /*Function?*/
                            easing,
                            /*Function?*/
                            onEnd,
                            /*Integer?*/
                            delay) {
                            // summary:
                            //		Animate one or more CSS properties for all nodes in this list.
                            //		The returned animation object will already be playing when it
                            //		is returned. See the docs for `dojo.anim` for full details.
                            // properties: Object
                            //		the properties to animate. does NOT support the `auto` parameter like other
                            //		NodeList-fx methods.
                            // duration: Integer?
                            //		Optional. The time to run the animations for
                            // easing: Function?
                            //		Optional. The easing function to use.
                            // onEnd: Function?
                            //		A function to be called when the animation ends
                            // delay:
                            //		how long to delay playing the returned animation
                            // example:
                            //		Another way to fade out:
                            //	|	dojo.query(".thinger").anim({ opacity: 0 });
                            // example:
                            //		animate all elements with the "thigner" class to a width of 500
                            //		pixels over half a second
                            //	|	dojo.query(".thinger").anim({ width: 500 }, 700);
                            var canim = coreFx.combine(
                                this.map(function(item) {
                                    return baseFx.animateProperty({
                                        node: item,
                                        properties: properties,
                                        duration: duration || 350,
                                        easing: easing
                                    });
                                })
                            );
                            if (onEnd) {
                                connectLib.connect(canim, "onEnd", onEnd);
                            }
                            return canim.play(delay || 0); // dojo/_base/fx.Animation
                        }
                    });

                    return NodeList;
                });

        },
        'hsbcwidget/countrySelector': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/text!hsbcwidget/themes/ursula/templates/countrySelectorTabs.html",
                    "dojo/query",
                    "dojo/_base/array",
                    "dojo/dom-prop",
                    "dojo/dom-style",
                    "dojo/dom-class",
                    "dojo/dom-attr",
                    "dojo/on",
                    "dojo/NodeList-fx",
                    "dijit/focus",
                    "dojox/dtl",
                    "dojox/dtl/Context",
                    "dojo/NodeList-traverse"
                ],
                function(declare, _WidgetBase, tabsTemplate, query, array, domProp, domStyle, domClass, domAttr, on, nodeListFx, focusUtil, dtl) {

                    return declare("hsbcwidget.CountrySelector", [_WidgetBase], {
                        tabsTemplate: tabsTemplate,

                        postCreate: function() {
                            this.inherited(arguments);

                            this.tabsNode = query('.tabsNode:first', this.domNode)[0];
                            this.regionsNode = query('.regions:first', this.domNode)[0];

                            domStyle.set(this.domNode, 'display', 'none');
                        },

                        renderTabs: function() {
                            var self = this,
                                data = {
                                    tabs: []
                                };;

                            this.regionNodes = query('.region', this.regionsNode);

                            array.forEach(this.regionNodes, function(regionNode, i) {
                                var headerNode = query('h2', regionNode)[0],
                                    d = {};

                                d['class'] = domProp.get(regionNode, 'id');
                                d['text'] = headerNode.innerHTML;
                                d['title'] = d['text'];

                                data.tabs.push(d);

                                domStyle.set(headerNode, 'display', 'none');

                                if (i !== 0) {
                                    domStyle.set(regionNode, 'display', 'none');
                                    domAttr.set(regionNode, 'aria-hidden', 'true');
                                } else {
                                    domClass.add(regionNode, 'activeRegion');
                                    domAttr.set(regionNode, 'aria-hidden', 'false');
                                }
                            });

                            var dtlTemplate = new dtl.Template(this.tabsTemplate),
                                context = new dtl.Context(data),
                                rendered = dtlTemplate.render(context);

                            this.tabsNode.innerHTML = rendered;
                            this.tabListNodes = query('li', this.tabsNode);
                            domClass.add(this.tabListNodes[0], 'selected');

                            on(this.tabsNode, 'a:click', function(e) {
                                e.preventDefault();

                                self.changeRegion(this);
                            });
                        },

                        changeRegion: function(node) {
                            var region = domAttr.get(node, 'data-region'),
                                oldRegionNode = this.regionNodes.filter('.activeRegion')[0],
                                newRegionNode = this.regionNodes.filter('#' + region)[0];

                            if (oldRegionNode !== newRegionNode) {
                                this.tabListNodes.removeClass('selected');
                                var listNode = query(node).parent('li')[0];
                                domClass.add(listNode, 'selected');

                                domStyle.set(oldRegionNode, 'display', 'none');
                                domClass.remove(oldRegionNode, 'activeRegion');
                                domAttr.set(oldRegionNode, 'aria-hidden', 'true');

                                domStyle.set(newRegionNode, 'display', '');
                                domClass.add(newRegionNode, 'activeRegion');
                                domAttr.set(newRegionNode, 'aria-hidden', 'false');
                            }

                            focusUtil.focus(query('a:first', newRegionNode)[0]);

                        }
                    });

                }
            );
        },
        'dijit/form/_ListMouseMixin': function() {
            define("dijit/form/_ListMouseMixin", [
                "dojo/_base/declare", // declare
                "dojo/mouse",
                "dojo/on",
                "dojo/touch",
                "./_ListBase"
            ], function(declare, mouse, on, touch, _ListBase) {

                // module:
                //		dijit/form/_ListMouseMixin

                return declare("dijit.form._ListMouseMixin", _ListBase, {
                    // summary:
                    //		a Mixin to handle mouse or touch events for a focus-less menu
                    //		Abstract methods that must be defined externally:
                    //
                    //		- onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)
                    // tags:
                    //		private

                    postCreate: function() {
                        this.inherited(arguments);

                        this.own(on(this.domNode, touch.press, function(evt) {
                            evt.preventDefault();
                        })); // prevent focus shift on list scrollbar press

                        this._listConnect(touch.press, "_onMouseDown");
                        this._listConnect(touch.release, "_onMouseUp");
                        this._listConnect(mouse.enter, "_onMouseOver");
                        this._listConnect(mouse.leave, "_onMouseOut");
                    },

                    _onMouseDown: function( /*Event*/ evt, /*DomNode*/ target) {
                        if (this._hoveredNode) {
                            this.onUnhover(this._hoveredNode);
                            this._hoveredNode = null;
                        }
                        this._isDragging = true;
                        this._setSelectedAttr(target);
                    },

                    _onMouseUp: function( /*Event*/ evt, /*DomNode*/ target) {
                        this._isDragging = false;
                        var selectedNode = this.selected;
                        var hoveredNode = this._hoveredNode;
                        if (selectedNode && target == selectedNode) {
                            this.onClick(selectedNode);
                        } else if (hoveredNode && target == hoveredNode) { // drag to select
                            this._setSelectedAttr(hoveredNode);
                            this.onClick(hoveredNode);
                        }
                    },

                    _onMouseOut: function( /*Event*/ evt, /*DomNode*/ target) {
                        if (this._hoveredNode) {
                            this.onUnhover(this._hoveredNode);
                            this._hoveredNode = null;
                        }
                        if (this._isDragging) {
                            this._cancelDrag = (new Date()).getTime() + 1000; // cancel in 1 second if no _onMouseOver fires
                        }
                    },

                    _onMouseOver: function( /*Event*/ evt, /*DomNode*/ target) {
                        if (this._cancelDrag) {
                            var time = (new Date()).getTime();
                            if (time > this._cancelDrag) {
                                this._isDragging = false;
                            }
                            this._cancelDrag = null;
                        }
                        this._hoveredNode = target;
                        this.onHover(target);
                        if (this._isDragging) {
                            this._setSelectedAttr(target);
                        }
                    }
                });

            });

        },
        'dojo/has': function() {
            define(["require", "module"], function(require, module) {
                // module:
                //		dojo/has
                // summary:
                //		Defines the has.js API and several feature tests used by dojo.
                // description:
                //		This module defines the has API as described by the project has.js with the following additional features:
                //
                //		- the has test cache is exposed at has.cache.
                //		- the method has.add includes a forth parameter that controls whether or not existing tests are replaced
                //		- the loader's has cache may be optionally copied into this module's has cahce.
                //
                //		This module adopted from https://github.com/phiggins42/has.js; thanks has.js team!

                // try to pull the has implementation from the loader; both the dojo loader and bdLoad provide one
                // if using a foreign loader, then the has cache may be initialized via the config object for this module
                // WARNING: if a foreign loader defines require.has to be something other than the has.js API, then this implementation fail
                var has = require.has || function() {};
                if (!1) {
                    var
                        isBrowser =
                        // the most fundamental decision: are we in the browser?
                        typeof window != "undefined" &&
                        typeof location != "undefined" &&
                        typeof document != "undefined" &&
                        window.location == location && window.document == document,

                        // has API variables
                        global = this,
                        doc = isBrowser && document,
                        element = doc && doc.createElement("DiV"),
                        cache = (module.config && module.config()) || {};

                    has = function(name) {
                        // summary:
                        //		Return the current value of the named feature.
                        //
                        // name: String|Integer
                        //		The name (if a string) or identifier (if an integer) of the feature to test.
                        //
                        // description:
                        //		Returns the value of the feature named by name. The feature must have been
                        //		previously added to the cache by has.add.

                        return typeof cache[name] == "function" ? (cache[name] = cache[name](global, doc, element)) : cache[name]; // Boolean
                    };

                    has.cache = cache;

                    has.add = function(name, test, now, force) {
                        // summary:
                        //	 	Register a new feature test for some named feature.
                        // name: String|Integer
                        //	 	The name (if a string) or identifier (if an integer) of the feature to test.
                        // test: Function
                        //		 A test function to register. If a function, queued for testing until actually
                        //		 needed. The test function should return a boolean indicating
                        //	 	the presence of a feature or bug.
                        // now: Boolean?
                        //		 Optional. Omit if `test` is not a function. Provides a way to immediately
                        //		 run the test and cache the result.
                        // force: Boolean?
                        //	 	Optional. If the test already exists and force is truthy, then the existing
                        //	 	test will be replaced; otherwise, add does not replace an existing test (that
                        //	 	is, by default, the first test advice wins).
                        // example:
                        //		A redundant test, testFn with immediate execution:
                        //	|	has.add("javascript", function(){ return true; }, true);
                        //
                        // example:
                        //		Again with the redundantness. You can do this in your tests, but we should
                        //		not be doing this in any internal has.js tests
                        //	|	has.add("javascript", true);
                        //
                        // example:
                        //		Three things are passed to the testFunction. `global`, `document`, and a generic element
                        //		from which to work your test should the need arise.
                        //	|	has.add("bug-byid", function(g, d, el){
                        //	|		// g	== global, typically window, yadda yadda
                        //	|		// d	== document object
                        //	|		// el == the generic element. a `has` element.
                        //	|		return false; // fake test, byid-when-form-has-name-matching-an-id is slightly longer
                        //	|	});

                        (typeof cache[name] == "undefined" || force) && (cache[name] = test);
                        return now && has(name);
                    };

                    // since we're operating under a loader that doesn't provide a has API, we must explicitly initialize
                    // has as it would have otherwise been initialized by the dojo loader; use has.add to the builder
                    // can optimize these away iff desired
                    1 || has.add("host-browser", isBrowser);
                    1 || has.add("dom", isBrowser);
                    1 || has.add("dojo-dom-ready-api", 1);
                    1 || has.add("dojo-sniff", 1);
                }

                if (1) {
                    // Common application level tests
                    has.add("dom-addeventlistener", !!document.addEventListener);
                    has.add("touch", "ontouchstart" in document);
                    // I don't know if any of these tests are really correct, just a rough guess
                    has.add("device-width", screen.availWidth || innerWidth);

                    // Tests for DOMNode.attributes[] behavior:
                    //	 - dom-attributes-explicit - attributes[] only lists explicitly user specified attributes
                    //	 - dom-attributes-specified-flag (IE8) - need to check attr.specified flag to skip attributes user didn't specify
                    //	 - Otherwise, in IE6-7. attributes[] will list hundreds of values, so need to do outerHTML to get attrs instead.
                    var form = document.createElement("form");
                    has.add("dom-attributes-explicit", form.attributes.length == 0); // W3C
                    has.add("dom-attributes-specified-flag", form.attributes.length > 0 && form.attributes.length < 40); // IE8
                }

                has.clearElement = function(element) {
                    // summary:
                    //	 Deletes the contents of the element passed to test functions.
                    element.innerHTML = "";
                    return element;
                };

                has.normalize = function(id, toAbsMid) {
                    // summary:
                    //	 Resolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s).
                    //
                    // toAbsMid: Function
                    //	 Resolves a relative module id into an absolute module id
                    var
                        tokens = id.match(/[\?:]|[^:\?]*/g),
                        i = 0,
                        get = function(skip) {
                            var term = tokens[i++];
                            if (term == ":") {
                                // empty string module name, resolves to 0
                                return 0;
                            } else {
                                // postfixed with a ? means it is a feature to branch on, the term is the name of the feature
                                if (tokens[i++] == "?") {
                                    if (!skip && has(term)) {
                                        // matched the feature, get the first value from the options
                                        return get();
                                    } else {
                                        // did not match, get the second value, passing over the first
                                        get(true);
                                        return get(skip);
                                    }
                                }
                                // a module
                                return term || 0;
                            }
                        };
                    id = get();
                    return id && toAbsMid(id);
                };

                has.load = function(id, parentRequire, loaded) {
                    // summary:
                    //		Conditional loading of AMD modules based on a has feature test value.
                    // id: String
                    //		Gives the resolved module id to load.
                    // parentRequire: Function
                    //		The loader require function with respect to the module that contained the plugin resource in it's
                    //		dependency list.
                    // loaded: Function
                    //	 Callback to loader that consumes result of plugin demand.

                    if (id) {
                        parentRequire([id], loaded);
                    } else {
                        loaded();
                    }
                };

                return has;
            });

        },
        'dojo/cookie': function() {
            define(["./_base/kernel", "./regexp"], function(dojo, regexp) {

                // module:
                //		dojo/cookie

                /*=====
                var __cookieProps = {
                	// expires: Date|String|Number?
                	//		If a number, the number of days from today at which the cookie
                	//		will expire. If a date, the date past which the cookie will expire.
                	//		If expires is in the past, the cookie will be deleted.
                	//		If expires is omitted or is 0, the cookie will expire when the browser closes.
                	// path: String?
                	//		The path to use for the cookie.
                	// domain: String?
                	//		The domain to use for the cookie.
                	// secure: Boolean?
                	//		Whether to only send the cookie on secure connections
                };
                =====*/


                dojo.cookie = function( /*String*/ name, /*String?*/ value, /*__cookieProps?*/ props) {
                    // summary:
                    //		Get or set a cookie.
                    // description:
                    //		If one argument is passed, returns the value of the cookie
                    //		For two or more arguments, acts as a setter.
                    // name:
                    //		Name of the cookie
                    // value:
                    //		Value for the cookie
                    // props:
                    //		Properties for the cookie
                    // example:
                    //		set a cookie with the JSON-serialized contents of an object which
                    //		will expire 5 days from now:
                    //	|	require(["dojo/cookie", "dojo/json"], function(cookie, json){
                    //	|		cookie("configObj", json.stringify(config, {expires: 5 }));
                    //	|	});
                    //
                    // example:
                    //		de-serialize a cookie back into a JavaScript object:
                    //	|	require(["dojo/cookie", "dojo/json"], function(cookie, json){
                    //	|		config = json.parse(cookie("configObj"));
                    //	|	});
                    //
                    // example:
                    //		delete a cookie:
                    //	|	require(["dojo/cookie"], function(cookie){
                    //	|		cookie("configObj", null, {expires: -1});
                    //	|	});
                    var c = document.cookie,
                        ret;
                    if (arguments.length == 1) {
                        var matches = c.match(new RegExp("(?:^|; )" + regexp.escapeString(name) + "=([^;]*)"));
                        ret = matches ? decodeURIComponent(matches[1]) : undefined;
                    } else {
                        props = props || {};
                        // FIXME: expires=0 seems to disappear right away, not on close? (FF3)  Change docs?
                        var exp = props.expires;
                        if (typeof exp == "number") {
                            var d = new Date();
                            d.setTime(d.getTime() + exp * 24 * 60 * 60 * 1000);
                            exp = props.expires = d;
                        }
                        if (exp && exp.toUTCString) {
                            props.expires = exp.toUTCString();
                        }

                        value = encodeURIComponent(value);
                        var updatedCookie = name + "=" + value,
                            propName;
                        for (propName in props) {
                            updatedCookie += "; " + propName;
                            var propValue = props[propName];
                            if (propValue !== true) {
                                updatedCookie += "=" + propValue;
                            }
                        }
                        document.cookie = updatedCookie;
                    }
                    return ret; // String|undefined
                };

                dojo.cookie.isSupported = function() {
                    // summary:
                    //		Use to determine if the current browser supports cookies or not.
                    //
                    //		Returns true if user allows cookies.
                    //		Returns false if user doesn't allow cookies.

                    if (!("cookieEnabled" in navigator)) {
                        this("__djCookieTest__", "CookiesAllowed");
                        navigator.cookieEnabled = this("__djCookieTest__") == "CookiesAllowed";
                        if (navigator.cookieEnabled) {
                            this("__djCookieTest__", "", {
                                expires: -1
                            });
                        }
                    }
                    return navigator.cookieEnabled;
                };

                return dojo.cookie;
            });

        },
        'dojo/cache': function() {
            define(["./_base/kernel", "./text"], function(dojo) {
                // module:
                //		dojo/cache

                // dojo.cache is defined in dojo/text
                return dojo.cache;
            });

        },
        'url:dijit/form/templates/DropDownBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n",
        'hsbcwidget/Tabs': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/dom",
                    "dojo/has",
                    "dijit/focus",
                    "dojo/on",
                    "dojo/dom-class",
                    "dojo/dom-attr",
                    "dojo/ready",
                    "dojo/_base/lang"
                ],
                function(declare, _WidgetBase, query, dom, has, focusUtil, on, domClass, domAttr, ready, lang) {

                    return declare([_WidgetBase], {
                        setSkipNode: false,
                        postCreate: function() {
                            this.inherited(arguments);
                            this.processSkipNode();
                            ready(lang.hitch(this, function() {
                                this.processSkipNode();
                            }));
                        },

                        processSkipNode: function() {
                            if (!this.setSkipNode) {
                                var skipNode = query('#skip', this.domNode)[0];

                                if (skipNode) {
                                    on(skipNode, 'focus', function(e) {
                                        domClass.remove(skipNode, "skip");
                                        if (has("ie") <= 7) {
                                            domClass.add(node, 'ieSkip');
                                        }
                                    });

                                    on(skipNode, 'blur', function(e) {
                                        if (has("ie") <= 7) {
                                            domClass.remove(node, 'ieSkip');
                                        }
                                        domClass.add(skipNode, "skip");

                                    });

                                    on(skipNode, 'click', lang.hitch(this, function(e) {
                                        e.preventDefault();

                                        domClass.add(skipNode, "skip");
                                        var skipToNode = query('#innerPage a:first')[0];
                                        domAttr.set(skipToNode, "tabIndex", 0);
                                        focusUtil.focus(skipToNode);
                                    }));

                                    this.setSkipNode = true;
                                }

                            }
                        }

                    });

                }
            );
        },
        'dojo/request/util': function() {
            define("dojo/request/util", [
                'exports',
                '../errors/RequestError',
                '../errors/CancelError',
                '../Deferred',
                '../io-query',
                '../_base/array',
                '../_base/lang'
            ], function(exports, RequestError, CancelError, Deferred, ioQuery, array, lang) {
                exports.deepCopy = function deepCopy(target, source) {
                    for (var name in source) {
                        var tval = target[name],
                            sval = source[name];
                        if (tval !== sval) {
                            if (tval && typeof tval === 'object' && sval && typeof sval === 'object') {
                                exports.deepCopy(tval, sval);
                            } else {
                                target[name] = sval;
                            }
                        }
                    }
                    return target;
                };

                exports.deepCreate = function deepCreate(source, properties) {
                    properties = properties || {};
                    var target = lang.delegate(source),
                        name, value;

                    for (name in source) {
                        value = source[name];

                        if (value && typeof value === 'object') {
                            target[name] = exports.deepCreate(value, properties[name]);
                        }
                    }
                    return exports.deepCopy(target, properties);
                };

                var freeze = Object.freeze || function(obj) {
                    return obj;
                };

                function okHandler(response) {
                    return freeze(response);
                }

                exports.deferred = function deferred(response, cancel, isValid, isReady, handleResponse, last) {
                    var def = new Deferred(function(reason) {
                        cancel && cancel(def, response);

                        if (!reason || !(reason instanceof RequestError) && !(reason instanceof CancelError)) {
                            return new CancelError('Request canceled', response);
                        }
                        return reason;
                    });

                    def.response = response;
                    def.isValid = isValid;
                    def.isReady = isReady;
                    def.handleResponse = handleResponse;

                    function errHandler(error) {
                        error.response = response;
                        throw error;
                    }
                    var responsePromise = def.then(okHandler).otherwise(errHandler);

                    if (exports.notify) {
                        responsePromise.then(
                            lang.hitch(exports.notify, 'emit', 'load'),
                            lang.hitch(exports.notify, 'emit', 'error')
                        );
                    }

                    var dataPromise = responsePromise.then(function(response) {
                        return response.data || response.text;
                    });

                    var promise = freeze(lang.delegate(dataPromise, {
                        response: responsePromise
                    }));


                    if (last) {
                        def.then(function(response) {
                            last.call(def, response);
                        }, function(error) {
                            last.call(def, response, error);
                        });
                    }

                    def.promise = promise;
                    def.then = promise.then;

                    return def;
                };

                exports.addCommonMethods = function addCommonMethods(provider, methods) {
                    array.forEach(methods || ['GET', 'POST', 'PUT', 'DELETE'], function(method) {
                        provider[(method === 'DELETE' ? 'DEL' : method).toLowerCase()] = function(url, options) {
                            options = lang.delegate(options || {});
                            options.method = method;
                            return provider(url, options);
                        };
                    });
                };

                exports.parseArgs = function parseArgs(url, options, skipData) {
                    var data = options.data,
                        query = options.query;

                    if (data && !skipData) {
                        if (typeof data === 'object') {
                            options.data = ioQuery.objectToQuery(data);
                        }
                    }

                    if (query) {
                        if (typeof query === 'object') {
                            query = ioQuery.objectToQuery(query);
                        }
                        if (options.preventCache) {
                            query += (query ? '&' : '') + 'request.preventCache=' + (+(new Date));
                        }
                    } else if (options.preventCache) {
                        query = 'request.preventCache=' + (+(new Date));
                    }

                    if (url && query) {
                        url += (~url.indexOf('?') ? '&' : '?') + query;
                    }

                    return {
                        url: url,
                        options: options,
                        getHeader: function(headerName) {
                            return null;
                        }
                    };
                };

                exports.checkStatus = function(stat) {
                    stat = stat || 0;
                    return (stat >= 200 && stat < 300) || // allow any 2XX response code
                        stat === 304 || // or, get it out of the cache
                        stat === 1223 || // or, Internet Explorer mangled the status code
                        !stat; // or, we're Titanium/browser chrome/chrome extension requesting a local file
                };
            });

        },
        'url:dijit/form/templates/Button.html': "<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\n/></span>\n",
        'dojo/_base/url': function() {
            define(["./kernel"], function(dojo) {
                // module:
                //		dojo/url

                var
                    ore = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"),
                    ire = new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$"),
                    _Url = function() {
                        var n = null,
                            _a = arguments,
                            uri = [_a[0]];
                        // resolve uri components relative to each other
                        for (var i = 1; i < _a.length; i++) {
                            if (!_a[i]) {
                                continue;
                            }

                            // Safari doesn't support this.constructor so we have to be explicit
                            // FIXME: Tracked (and fixed) in Webkit bug 3537.
                            //		http://bugs.webkit.org/show_bug.cgi?id=3537
                            var relobj = new _Url(_a[i] + ""),
                                uriobj = new _Url(uri[0] + "");

                            if (
                                relobj.path == "" &&
                                !relobj.scheme &&
                                !relobj.authority &&
                                !relobj.query
                            ) {
                                if (relobj.fragment != n) {
                                    uriobj.fragment = relobj.fragment;
                                }
                                relobj = uriobj;
                            } else if (!relobj.scheme) {
                                relobj.scheme = uriobj.scheme;

                                if (!relobj.authority) {
                                    relobj.authority = uriobj.authority;

                                    if (relobj.path.charAt(0) != "/") {
                                        var path = uriobj.path.substring(0,
                                            uriobj.path.lastIndexOf("/") + 1) + relobj.path;

                                        var segs = path.split("/");
                                        for (var j = 0; j < segs.length; j++) {
                                            if (segs[j] == ".") {
                                                // flatten "./" references
                                                if (j == segs.length - 1) {
                                                    segs[j] = "";
                                                } else {
                                                    segs.splice(j, 1);
                                                    j--;
                                                }
                                            } else if (j > 0 && !(j == 1 && segs[0] == "") &&
                                                segs[j] == ".." && segs[j - 1] != "..") {
                                                // flatten "../" references
                                                if (j == (segs.length - 1)) {
                                                    segs.splice(j, 1);
                                                    segs[j - 1] = "";
                                                } else {
                                                    segs.splice(j - 1, 2);
                                                    j -= 2;
                                                }
                                            }
                                        }
                                        relobj.path = segs.join("/");
                                    }
                                }
                            }

                            uri = [];
                            if (relobj.scheme) {
                                uri.push(relobj.scheme, ":");
                            }
                            if (relobj.authority) {
                                uri.push("//", relobj.authority);
                            }
                            uri.push(relobj.path);
                            if (relobj.query) {
                                uri.push("?", relobj.query);
                            }
                            if (relobj.fragment) {
                                uri.push("#", relobj.fragment);
                            }
                        }

                        this.uri = uri.join("");

                        // break the uri into its main components
                        var r = this.uri.match(ore);

                        this.scheme = r[2] || (r[1] ? "" : n);
                        this.authority = r[4] || (r[3] ? "" : n);
                        this.path = r[5]; // can never be undefined
                        this.query = r[7] || (r[6] ? "" : n);
                        this.fragment = r[9] || (r[8] ? "" : n);

                        if (this.authority != n) {
                            // server based naming authority
                            r = this.authority.match(ire);

                            this.user = r[3] || n;
                            this.password = r[4] || n;
                            this.host = r[6] || r[7]; // ipv6 || ipv4
                            this.port = r[9] || n;
                        }
                    };
                _Url.prototype.toString = function() {
                    return this.uri;
                };

                return dojo._Url = _Url;
            });

        },
        'url:dijit/templates/MenuItem.html': "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n",
        'dojo/domReady': function() {
            define(['./has'], function(has) {
                var global = this,
                    doc = document,
                    readyStates = {
                        'loaded': 1,
                        'complete': 1
                    },
                    fixReadyState = typeof doc.readyState != "string",
                    ready = !!readyStates[doc.readyState];

                // For FF <= 3.5
                if (fixReadyState) {
                    doc.readyState = "loading";
                }

                if (!ready) {
                    var readyQ = [],
                        tests = [],
                        detectReady = function(evt) {
                            evt = evt || global.event;
                            if (ready || (evt.type == "readystatechange" && !readyStates[doc.readyState])) {
                                return;
                            }
                            ready = 1;

                            // For FF <= 3.5
                            if (fixReadyState) {
                                doc.readyState = "complete";
                            }

                            while (readyQ.length) {
                                (readyQ.shift())(doc);
                            }
                        },
                        on = function(node, event) {
                            node.addEventListener(event, detectReady, false);
                            readyQ.push(function() {
                                node.removeEventListener(event, detectReady, false);
                            });
                        };

                    if (!has("dom-addeventlistener")) {
                        on = function(node, event) {
                            event = "on" + event;
                            node.attachEvent(event, detectReady);
                            readyQ.push(function() {
                                node.detachEvent(event, detectReady);
                            });
                        };

                        var div = doc.createElement("div");
                        try {
                            if (div.doScroll && global.frameElement === null) {
                                // the doScroll test is only useful if we're in the top-most frame
                                tests.push(function() {
                                    // Derived with permission from Diego Perini's IEContentLoaded
                                    // http://javascript.nwbox.com/IEContentLoaded/
                                    try {
                                        div.doScroll("left");
                                        return 1;
                                    } catch (e) {}
                                });
                            }
                        } catch (e) {}
                    }

                    on(doc, "DOMContentLoaded");
                    on(global, "load");

                    if ("onreadystatechange" in doc) {
                        on(doc, "readystatechange");
                    } else if (!fixReadyState) {
                        // if the ready state property exists and there's
                        // no readystatechange event, poll for the state
                        // to change
                        tests.push(function() {
                            return readyStates[doc.readyState];
                        });
                    }

                    if (tests.length) {
                        var poller = function() {
                            if (ready) {
                                return;
                            }
                            var i = tests.length;
                            while (i--) {
                                if (tests[i]()) {
                                    detectReady("poller");
                                    return;
                                }
                            }
                            setTimeout(poller, 30);
                        };
                        poller();
                    }
                }

                function domReady(callback) {
                    // summary:
                    //		Plugin to delay require()/define() callback from firing until the DOM has finished loading.
                    if (ready) {
                        callback(doc);
                    } else {
                        readyQ.push(callback);
                    }
                }
                domReady.load = function(id, req, load) {
                    domReady(load);
                };

                return domReady;
            });

        },
        'dojo/text': function() {
            define(["./_base/kernel", "require", "./has", "./_base/xhr"], function(dojo, require, has, xhr) {
                // module:
                //		dojo/text

                var getText;
                if (1) {
                    getText = function(url, sync, load) {
                        xhr("GET", {
                            url: url,
                            sync: !!sync,
                            load: load,
                            headers: dojo.config.textPluginHeaders || {}
                        });
                    };
                } else {
                    // TODOC: only works for dojo AMD loader
                    if (require.getText) {
                        getText = require.getText;
                    } else {
                        console.error("dojo/text plugin failed to load because loader does not support getText");
                    }
                }

                var
                    theCache = {},

                    strip = function(text) {
                        //Strips <?xml ...?> declarations so that external SVG and XML
                        //documents can be added to a document without worry. Also, if the string
                        //is an HTML document, only the part inside the body tag is returned.
                        if (text) {
                            text = text.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, "");
                            var matches = text.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
                            if (matches) {
                                text = matches[1];
                            }
                        } else {
                            text = "";
                        }
                        return text;
                    },

                    notFound = {},

                    pending = {};

                dojo.cache = function( /*String||Object*/ module, /*String*/ url, /*String||Object?*/ value) {
                    // summary:
                    //		A getter and setter for storing the string content associated with the
                    //		module and url arguments.
                    // description:
                    //		If module is a string that contains slashes, then it is interpretted as a fully
                    //		resolved path (typically a result returned by require.toUrl), and url should not be
                    //		provided. This is the preferred signature. If module is a string that does not
                    //		contain slashes, then url must also be provided and module and url are used to
                    //		call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated.
                    //		If value is specified, the cache value for the moduleUrl will be set to
                    //		that value. Otherwise, dojo.cache will fetch the moduleUrl and store it
                    //		in its internal cache and return that cached value for the URL. To clear
                    //		a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the
                    //		the URL contents, only modules on the same domain of the page can use this capability.
                    //		The build system can inline the cache values though, to allow for xdomain hosting.
                    // module: String||Object
                    //		If a String with slashes, a fully resolved path; if a String without slashes, the
                    //		module name to use for the base part of the URL, similar to module argument
                    //		to `dojo.moduleUrl`. If an Object, something that has a .toString() method that
                    //		generates a valid path for the cache item. For example, a dojo._Url object.
                    // url: String
                    //		The rest of the path to append to the path derived from the module argument. If
                    //		module is an object, then this second argument should be the "value" argument instead.
                    // value: String||Object?
                    //		If a String, the value to use in the cache for the module/url combination.
                    //		If an Object, it can have two properties: value and sanitize. The value property
                    //		should be the value to use in the cache, and sanitize can be set to true or false,
                    //		to indicate if XML declarations should be removed from the value and if the HTML
                    //		inside a body tag in the value should be extracted as the real value. The value argument
                    //		or the value property on the value argument are usually only used by the build system
                    //		as it inlines cache content.
                    // example:
                    //		To ask dojo.cache to fetch content and store it in the cache (the dojo["cache"] style
                    //		of call is used to avoid an issue with the build system erroneously trying to intern
                    //		this example. To get the build system to intern your dojo.cache calls, use the
                    //		"dojo.cache" style of call):
                    //		| //If template.html contains "<h1>Hello</h1>" that will be
                    //		| //the value for the text variable.
                    //		| var text = dojo["cache"]("my.module", "template.html");
                    // example:
                    //		To ask dojo.cache to fetch content and store it in the cache, and sanitize the input
                    //		 (the dojo["cache"] style of call is used to avoid an issue with the build system
                    //		erroneously trying to intern this example. To get the build system to intern your
                    //		dojo.cache calls, use the "dojo.cache" style of call):
                    //		| //If template.html contains "<html><body><h1>Hello</h1></body></html>", the
                    //		| //text variable will contain just "<h1>Hello</h1>".
                    //		| var text = dojo["cache"]("my.module", "template.html", {sanitize: true});
                    // example:
                    //		Same example as previous, but demonstrates how an object can be passed in as
                    //		the first argument, then the value argument can then be the second argument.
                    //		| //If template.html contains "<html><body><h1>Hello</h1></body></html>", the
                    //		| //text variable will contain just "<h1>Hello</h1>".
                    //		| var text = dojo["cache"](new dojo._Url("my/module/template.html"), {sanitize: true});

                    //	 * (string string [value]) => (module, url, value)
                    //	 * (object [value])        => (module, value), url defaults to ""
                    //
                    //	 * if module is an object, then it must be convertable to a string
                    //	 * (module, url) module + (url ? ("/" + url) : "") must be a legal argument to require.toUrl
                    //	 * value may be a string or an object; if an object then may have the properties "value" and/or "sanitize"
                    var key;
                    if (typeof module == "string") {
                        if (/\//.test(module)) {
                            // module is a version 1.7+ resolved path
                            key = module;
                            value = url;
                        } else {
                            // module is a version 1.6- argument to dojo.moduleUrl
                            key = require.toUrl(module.replace(/\./g, "/") + (url ? ("/" + url) : ""));
                        }
                    } else {
                        key = module + "";
                        value = url;
                    }
                    var
                        val = (value != undefined && typeof value != "string") ? value.value : value,
                        sanitize = value && value.sanitize;

                    if (typeof val == "string") {
                        //We have a string, set cache value
                        theCache[key] = val;
                        return sanitize ? strip(val) : val;
                    } else if (val === null) {
                        //Remove cached value
                        delete theCache[key];
                        return null;
                    } else {
                        //Allow cache values to be empty strings. If key property does
                        //not exist, fetch it.
                        if (!(key in theCache)) {
                            getText(key, true, function(text) {
                                theCache[key] = text;
                            });
                        }
                        return sanitize ? strip(theCache[key]) : theCache[key];
                    }
                };

                return {
                    // summary:
                    //		This module implements the dojo/text! plugin and the dojo.cache API.
                    // description:
                    //		We choose to include our own plugin to leverage functionality already contained in dojo
                    //		and thereby reduce the size of the plugin compared to various foreign loader implementations.
                    //		Also, this allows foreign AMD loaders to be used without their plugins.
                    //
                    //		CAUTION: this module is designed to optionally function synchronously to support the dojo v1.x synchronous
                    //		loader. This feature is outside the scope of the CommonJS plugins specification.

                    // the dojo/text caches it's own resources because of dojo.cache
                    dynamic: true,

                    normalize: function(id, toAbsMid) {
                        // id is something like (path may be relative):
                        //
                        //	 "path/to/text.html"
                        //	 "path/to/text.html!strip"
                        var parts = id.split("!"),
                            url = parts[0];
                        return (/^\./.test(url) ? toAbsMid(url) : url) + (parts[1] ? "!" + parts[1] : "");
                    },

                    load: function(id, require, load) {
                        // id: String
                        //		Path to the resource.
                        // require: Function
                        //		Object that include the function toUrl with given id returns a valid URL from which to load the text.
                        // load: Function
                        //		Callback function which will be called, when the loading finished.

                        // id is something like (path is always absolute):
                        //
                        //	 "path/to/text.html"
                        //	 "path/to/text.html!strip"
                        var
                            parts = id.split("!"),
                            stripFlag = parts.length > 1,
                            absMid = parts[0],
                            url = require.toUrl(parts[0]),
                            requireCacheUrl = "url:" + url,
                            text = notFound,
                            finish = function(text) {
                                load(stripFlag ? strip(text) : text);
                            };
                        if (absMid in theCache) {
                            text = theCache[absMid];
                        } else if (requireCacheUrl in require.cache) {
                            text = require.cache[requireCacheUrl];
                        } else if (url in theCache) {
                            text = theCache[url];
                        }
                        if (text === notFound) {
                            if (pending[url]) {
                                pending[url].push(finish);
                            } else {
                                var pendingList = pending[url] = [finish];
                                getText(url, !require.async, function(text) {
                                    theCache[absMid] = theCache[url] = text;
                                    for (var i = 0; i < pendingList.length;) {
                                        pendingList[i++](text);
                                    }
                                    delete pending[url];
                                });
                            }
                        } else {
                            finish(text);
                        }
                    }
                };

            });


        },
        'url:dijit/form/templates/CheckBox.html': "<div class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><input\n\t \t${!nameAttrSetting} type=\"${type}\" ${checkedAttrSetting}\n\t\tclass=\"dijitReset dijitCheckBoxInput\"\n\t\tdata-dojo-attach-point=\"focusNode\"\n\t \tdata-dojo-attach-event=\"onclick:_onClick\"\n/></div>\n",
        'dojo/dom': function() {
            define(["./sniff", "./_base/lang", "./_base/window"],
                function(has, lang, win) {
                    // module:
                    //		dojo/dom

                    // FIXME: need to add unit tests for all the semi-public methods

                    if (has("ie") <= 7) {
                        try {
                            document.execCommand("BackgroundImageCache", false, true);
                        } catch (e) {
                            // sane browsers don't have cache "issues"
                        }
                    }

                    // =============================
                    // DOM Functions
                    // =============================

                    // the result object
                    var dom = {
                        // summary:
                        //		This module defines the core dojo DOM API.
                    };

                    if (has("ie")) {
                        dom.byId = function(id, doc) {
                            if (typeof id != "string") {
                                return id;
                            }
                            var _d = doc || win.doc,
                                te = id && _d.getElementById(id);
                            // attributes.id.value is better than just id in case the
                            // user has a name=id inside a form
                            if (te && (te.attributes.id.value == id || te.id == id)) {
                                return te;
                            } else {
                                var eles = _d.all[id];
                                if (!eles || eles.nodeName) {
                                    eles = [eles];
                                }
                                // if more than 1, choose first with the correct id
                                var i = 0;
                                while ((te = eles[i++])) {
                                    if ((te.attributes && te.attributes.id && te.attributes.id.value == id) || te.id == id) {
                                        return te;
                                    }
                                }
                            }
                        };
                    } else {
                        dom.byId = function(id, doc) {
                            // inline'd type check.
                            // be sure to return null per documentation, to match IE branch.
                            return ((typeof id == "string") ? (doc || win.doc).getElementById(id) : id) || null; // DOMNode
                        };
                    }
                    /*=====
                     dom.byId = function(id, doc){
                    	 // summary:
                    	 //		Returns DOM node with matching `id` attribute or falsy value (ex: null or undefined)
                    	 //		if not found.  If `id` is a DomNode, this function is a no-op.
                    	 //
                    	 // id: String|DOMNode
                    	 //		A string to match an HTML id attribute or a reference to a DOM Node
                    	 //
                    	 // doc: Document?
                    	 //		Document to work in. Defaults to the current value of
                    	 //		dojo.doc.  Can be used to retrieve
                    	 //		node references from other documents.
                    	 //
                    	 // example:
                    	 //		Look up a node by ID:
                    	 //	|	var n = dojo.byId("foo");
                    	 //
                    	 // example:
                    	 //		Check if a node exists, and use it.
                    	 //	|	var n = dojo.byId("bar");
                    	 //	|	if(n){ doStuff() ... }
                    	 //
                    	 // example:
                    	 //		Allow string or DomNode references to be passed to a custom function:
                    	 //	|	var foo = function(nodeOrId){
                    	 //	|		nodeOrId = dojo.byId(nodeOrId);
                    	 //	|		// ... more stuff
                    	 //	|	}
                     };
                     =====*/

                    dom.isDescendant = function( /*DOMNode|String*/ node, /*DOMNode|String*/ ancestor) {
                        // summary:
                        //		Returns true if node is a descendant of ancestor
                        // node: DOMNode|String
                        //		string id or node reference to test
                        // ancestor: DOMNode|String
                        //		string id or node reference of potential parent to test against
                        //
                        // example:
                        //		Test is node id="bar" is a descendant of node id="foo"
                        //	|	if(dojo.isDescendant("bar", "foo")){ ... }

                        try {
                            node = dom.byId(node);
                            ancestor = dom.byId(ancestor);
                            while (node) {
                                if (node == ancestor) {
                                    return true; // Boolean
                                }
                                node = node.parentNode;
                            }
                        } catch (e) { /* squelch, return false */ }
                        return false; // Boolean
                    };


                    // TODO: do we need this function in the base?

                    dom.setSelectable = function( /*DOMNode|String*/ node, /*Boolean*/ selectable) {
                        // summary:
                        //		Enable or disable selection on a node
                        // node: DOMNode|String
                        //		id or reference to node
                        // selectable: Boolean
                        //		state to put the node in. false indicates unselectable, true
                        //		allows selection.
                        // example:
                        //		Make the node id="bar" unselectable
                        //	|	dojo.setSelectable("bar");
                        // example:
                        //		Make the node id="bar" selectable
                        //	|	dojo.setSelectable("bar", true);

                        node = dom.byId(node);
                        if (has("mozilla")) {
                            node.style.MozUserSelect = selectable ? "" : "none";
                        } else if (has("khtml") || has("webkit")) {
                            node.style.KhtmlUserSelect = selectable ? "auto" : "none";
                        } else if (has("ie")) {
                            var v = (node.unselectable = selectable ? "" : "on"),
                                cs = node.getElementsByTagName("*"),
                                i = 0,
                                l = cs.length;
                            for (; i < l; ++i) {
                                cs.item(i).unselectable = v;
                            }
                        }
                        //FIXME: else?  Opera?
                    };

                    return dom;
                });

        },
        'url:hsbcwidget/themes/ursula/templates/randCharChalLogon.html': "<div class=\"securityDetails row\">\r\n    <div class=\"question clearfix containerStyle17 jsQuestion questionGroupButtom\">\r\n    <h4 class=\"FontRed\">${staticTemplateData.pleaseEnter} </h4>\r\n        <p class=\"label\">${staticTemplateData.enterPassword}</p>\r\n        <div class=\"textinputSection jsInputWrapper\">\r\n\r\n\t\t\t<div class=\"textInput\">\r\n<fieldset>\r\n\t\t\t\t<legend class=\"hidden\">${staticTemplateData.rcc_accessiblity_enter_characters}</legend>\r\n\t\t\t\t<label class=\"hidden\" for=\"pass1\">${staticTemplateData.rcc_accessiblity_char_1}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass1\" id=\"pass1\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass1}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass2\">${staticTemplateData.rcc_accessiblity_char_2}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass2\" id=\"pass2\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass2}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass3\">${staticTemplateData.rcc_accessiblity_char_3}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass3\" id=\"pass3\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass3}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass4\">${staticTemplateData.rcc_accessiblity_char_4}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass4\" id=\"pass4\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass4}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass5\">${staticTemplateData.rcc_accessiblity_char_5}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass5\" id=\"pass5\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass5}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass6\">${staticTemplateData.rcc_accessiblity_char_6}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass6\" id=\"pass6\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass6}\">\r\n\t\t\t\t<span class=\"dotted\">&hellip;</span>\r\n\t\t\t\t<label class=\"hidden\" for=\"pass7\">${staticTemplateData.rcc_accessiblity_char_second_last}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass7\" id=\"pass7\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass7}\">\r\n\t\t\t\t<label class=\"hidden\" for=\"pass8\">${staticTemplateData.rcc_accessiblity_char_last}</label>\r\n\t\t\t\t<input type=\"password\" value=\"\" name=\"pass8\" id=\"pass8\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass8}\">\r\n\t\t\t\t</fieldset>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<a href=\"${staticTemplateData.forgottenHref}\" title=\"\" class=\"linkUnderline marginAdj\">${staticTemplateData.forgottenMsg}</a>\r\n\t\t\t\t<a href=\"${staticTemplateData.ResetHref}\" title=\"\" class=\"linkUnderline marginAdj\">${staticTemplateData.ResetMsg}</a>\r\n\t\t\t</div>\r\n\t\t\t<div role=\"alert\" aria-hidden=\"false\" class=\"rValidationMsg ValidationMsgHide dijitTooltip dijitTooltipRight RCCTooltipWidth\">\r\n\t\t\t\t<div align=\"left\"  class=\"dijitTooltipContainer dijitTooltipContents\">${staticTemplateData.validationMsg}</div>\r\n\t\t\t\t<div class=\"dijitTooltipConnector\"></div>\r\n\t\t\t</div>\r\n        </div>\r\n    </div>\r\n</div>",
        'dojo/cldr/nls/gregorian': function() {
            define({
                root:

                //begin v1.x content
                {
                    "months-format-narrow": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12"
                    ],
                    "quarters-standAlone-narrow": [
                        "1",
                        "2",
                        "3",
                        "4"
                    ],
                    "field-weekday": "Day of the Week",
                    "dateFormatItem-yQQQ": "y QQQ",
                    "dateFormatItem-yMEd": "E, y-M-d",
                    "dateFormatItem-MMMEd": "E MMM d",
                    "eraNarrow": [
                        "BCE",
                        "CE"
                    ],
                    "dateTimeFormats-appendItem-Day-Of-Week": "{0} {1}",
                    "dateFormat-long": "y MMMM d",
                    "months-format-wide": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12"
                    ],
                    "dateTimeFormat-medium": "{1} {0}",
                    "dayPeriods-format-wide-pm": "PM",
                    "dateFormat-full": "EEEE, y MMMM dd",
                    "dateFormatItem-Md": "M-d",
                    "dayPeriods-format-abbr-am": "AM",
                    "dateTimeFormats-appendItem-Second": "{0} ({2}: {1})",
                    "dateFormatItem-yMd": "y-M-d",
                    "field-era": "Era",
                    "dateFormatItem-yM": "y-M",
                    "months-standAlone-wide": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12"
                    ],
                    "timeFormat-short": "HH:mm",
                    "quarters-format-wide": [
                        "Q1",
                        "Q2",
                        "Q3",
                        "Q4"
                    ],
                    "timeFormat-long": "HH:mm:ss z",
                    "field-year": "Year",
                    "dateFormatItem-yMMM": "y MMM",
                    "dateFormatItem-yQ": "y Q",
                    "dateTimeFormats-appendItem-Era": "{0} {1}",
                    "field-hour": "Hour",
                    "months-format-abbr": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12"
                    ],
                    "timeFormat-full": "HH:mm:ss zzzz",
                    "dateTimeFormats-appendItem-Week": "{0} ({2}: {1})",
                    "field-day-relative+0": "Today",
                    "field-day-relative+1": "Tomorrow",
                    "dateFormatItem-H": "HH",
                    "months-standAlone-abbr": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12"
                    ],
                    "quarters-format-abbr": [
                        "Q1",
                        "Q2",
                        "Q3",
                        "Q4"
                    ],
                    "quarters-standAlone-wide": [
                        "Q1",
                        "Q2",
                        "Q3",
                        "Q4"
                    ],
                    "dateFormatItem-M": "L",
                    "days-standAlone-wide": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "timeFormat-medium": "HH:mm:ss",
                    "dateFormatItem-Hm": "HH:mm",
                    "quarters-standAlone-abbr": [
                        "Q1",
                        "Q2",
                        "Q3",
                        "Q4"
                    ],
                    "eraAbbr": [
                        "BCE",
                        "CE"
                    ],
                    "field-minute": "Minute",
                    "field-dayperiod": "Dayperiod",
                    "days-standAlone-abbr": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "dateFormatItem-d": "d",
                    "dateFormatItem-ms": "mm:ss",
                    "quarters-format-narrow": [
                        "1",
                        "2",
                        "3",
                        "4"
                    ],
                    "field-day-relative+-1": "Yesterday",
                    "dateFormatItem-h": "h a",
                    "dateTimeFormat-long": "{1} {0}",
                    "dayPeriods-format-narrow-am": "AM",
                    "dateFormatItem-MMMd": "MMM d",
                    "dateFormatItem-MEd": "E, M-d",
                    "dateTimeFormat-full": "{1} {0}",
                    "field-day": "Day",
                    "days-format-wide": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "field-zone": "Zone",
                    "dateTimeFormats-appendItem-Day": "{0} ({2}: {1})",
                    "dateFormatItem-y": "y",
                    "months-standAlone-narrow": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12"
                    ],
                    "dateFormatItem-hm": "h:mm a",
                    "dateTimeFormats-appendItem-Year": "{0} {1}",
                    "dateTimeFormats-appendItem-Hour": "{0} ({2}: {1})",
                    "dayPeriods-format-abbr-pm": "PM",
                    "days-format-abbr": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "dateFormatItem-yMMMd": "y MMM d",
                    "eraNames": [
                        "BCE",
                        "CE"
                    ],
                    "days-format-narrow": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "days-standAlone-narrow": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "dateFormatItem-MMM": "LLL",
                    "field-month": "Month",
                    "dateTimeFormats-appendItem-Quarter": "{0} ({2}: {1})",
                    "dayPeriods-format-wide-am": "AM",
                    "dateTimeFormats-appendItem-Month": "{0} ({2}: {1})",
                    "dateTimeFormats-appendItem-Minute": "{0} ({2}: {1})",
                    "dateFormat-short": "yyyy-MM-dd",
                    "field-second": "Second",
                    "dateFormatItem-yMMMEd": "E, y MMM d",
                    "dateFormatItem-Ed": "d E",
                    "dateTimeFormats-appendItem-Timezone": "{0} {1}",
                    "field-week": "Week",
                    "dateFormat-medium": "y MMM d",
                    "dayPeriods-format-narrow-pm": "PM",
                    "dateTimeFormat-short": "{1} {0}",
                    "dateFormatItem-Hms": "HH:mm:ss",
                    "dateFormatItem-hms": "h:mm:ss a"
                }
                //end v1.x content
                ,
                "aa": true,
                "af": true,
                "agq": true,
                "ak": true,
                "am": true,
                "ar": true,
                "ar-dz": true,
                "ar-jo": true,
                "ar-lb": true,
                "ar-ma": true,
                "ar-sy": true,
                "ar-tn": true,
                "as": true,
                "asa": true,
                "az": true,
                "az-cyrl": true,
                "bas": true,
                "be": true,
                "bem": true,
                "bez": true,
                "bg": true,
                "bm": true,
                "bn": true,
                "bn-in": true,
                "bo": true,
                "br": true,
                "brx": true,
                "bs": true,
                "byn": true,
                "ca": true,
                "cgg": true,
                "chr": true,
                "cs": true,
                "cy": true,
                "da": true,
                "dav": true,
                "de": true,
                "de-at": true,
                "dje": true,
                "dua": true,
                "dyo": true,
                "dz": true,
                "ebu": true,
                "ee": true,
                "el": true,
                "en": true,
                "en-au": true,
                "en-be": true,
                "en-bw": true,
                "en-bz": true,
                "en-ca": true,
                "en-dsrt": true,
                "en-gb": true,
                "en-hk": true,
                "en-ie": true,
                "en-in": true,
                "en-mt": true,
                "en-nz": true,
                "en-pk": true,
                "en-sg": true,
                "en-za": true,
                "en-zw": true,
                "eo": true,
                "es": true,
                "es-419": true,
                "es-ar": true,
                "es-cl": true,
                "es-co": true,
                "es-ec": true,
                "es-gt": true,
                "es-hn": true,
                "es-pa": true,
                "es-pe": true,
                "es-pr": true,
                "es-us": true,
                "et": true,
                "eu": true,
                "ewo": true,
                "fa": true,
                "fa-af": true,
                "ff": true,
                "fi": true,
                "fil": true,
                "fo": true,
                "fr": true,
                "fr-be": true,
                "fr-ca": true,
                "fr-ch": true,
                "fur": true,
                "ga": true,
                "gd": true,
                "gl": true,
                "gsw": true,
                "gu": true,
                "guz": true,
                "gv": true,
                "ha": true,
                "haw": true,
                "he": true,
                "hi": true,
                "hr": true,
                "hu": true,
                "hy": true,
                "id": true,
                "ig": true,
                "ii": true,
                "is": true,
                "it": true,
                "it-ch": true,
                "ja": true,
                "jmc": true,
                "ka": true,
                "kab": true,
                "kam": true,
                "kde": true,
                "kea": true,
                "khq": true,
                "ki": true,
                "kk": true,
                "kl": true,
                "kln": true,
                "km": true,
                "kn": true,
                "ko": true,
                "kok": true,
                "ksb": true,
                "ksf": true,
                "ksh": true,
                "kw": true,
                "lag": true,
                "lg": true,
                "ln": true,
                "lt": true,
                "lu": true,
                "luo": true,
                "luy": true,
                "lv": true,
                "mas": true,
                "mer": true,
                "mfe": true,
                "mg": true,
                "mk": true,
                "ml": true,
                "mo": true,
                "mr": true,
                "ms": true,
                "ms-bn": true,
                "mt": true,
                "mua": true,
                "my": true,
                "naq": true,
                "nb": true,
                "nd": true,
                "ne": true,
                "ne-in": true,
                "nl": true,
                "nl-be": true,
                "nmg": true,
                "nn": true,
                "nus": true,
                "nyn": true,
                "om": true,
                "or": true,
                "pa": true,
                "pa-arab": true,
                "pa-pk": true,
                "pl": true,
                "ps": true,
                "pt": true,
                "pt-pt": true,
                "rm": true,
                "rn": true,
                "ro": true,
                "rof": true,
                "ru": true,
                "ru-ua": true,
                "rw": true,
                "rwk": true,
                "sah": true,
                "saq": true,
                "sbp": true,
                "se": true,
                "seh": true,
                "ses": true,
                "sg": true,
                "sh": true,
                "shi": true,
                "shi-tfng": true,
                "si": true,
                "sk": true,
                "sl": true,
                "sn": true,
                "so": true,
                "sq": true,
                "sr": true,
                "sr-cyrl-ba": true,
                "sr-latn": true,
                "sr-latn-me": true,
                "ssy": true,
                "sv": true,
                "sv-fi": true,
                "sw": true,
                "swc": true,
                "ta": true,
                "te": true,
                "teo": true,
                "th": true,
                "ti": true,
                "ti-er": true,
                "to": true,
                "tr": true,
                "tzm": true,
                "uk": true,
                "ur": true,
                "uz": true,
                "uz-latn": true,
                "vai": true,
                "vai-latn": true,
                "vi": true,
                "vun": true,
                "wae": true,
                "xog": true,
                "yav": true,
                "yo": true,
                "zh": true,
                "zh-hans-hk": true,
                "zh-hans-mo": true,
                "zh-hans-sg": true,
                "zh-hant": true,
                "zh-hant-hk": true,
                "zh-hant-mo": true,
                "zh-hk": true,
                "zh-mo": true,
                "zh-tw": true,
                "zu": true
            });
        },
        'dojo/keys': function() {
            define("dojo/keys", ["./_base/kernel", "./sniff"], function(dojo, has) {

                // module:
                //		dojo/keys

                return dojo.keys = {
                    // summary:
                    //		Definitions for common key values.  Client code should test keyCode against these named constants,
                    //		as the actual codes can vary by browser.

                    BACKSPACE: 8,
                    TAB: 9,
                    CLEAR: 12,
                    ENTER: 13,
                    SHIFT: 16,
                    CTRL: 17,
                    ALT: 18,
                    META: has("webkit") ? 91 : 224, // the apple key on macs
                    PAUSE: 19,
                    CAPS_LOCK: 20,
                    ESCAPE: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT_ARROW: 37,
                    UP_ARROW: 38,
                    RIGHT_ARROW: 39,
                    DOWN_ARROW: 40,
                    INSERT: 45,
                    DELETE: 46,
                    HELP: 47,
                    LEFT_WINDOW: 91,
                    RIGHT_WINDOW: 92,
                    SELECT: 93,
                    NUMPAD_0: 96,
                    NUMPAD_1: 97,
                    NUMPAD_2: 98,
                    NUMPAD_3: 99,
                    NUMPAD_4: 100,
                    NUMPAD_5: 101,
                    NUMPAD_6: 102,
                    NUMPAD_7: 103,
                    NUMPAD_8: 104,
                    NUMPAD_9: 105,
                    NUMPAD_MULTIPLY: 106,
                    NUMPAD_PLUS: 107,
                    NUMPAD_ENTER: 108,
                    NUMPAD_MINUS: 109,
                    NUMPAD_PERIOD: 110,
                    NUMPAD_DIVIDE: 111,
                    F1: 112,
                    F2: 113,
                    F3: 114,
                    F4: 115,
                    F5: 116,
                    F6: 117,
                    F7: 118,
                    F8: 119,
                    F9: 120,
                    F10: 121,
                    F11: 122,
                    F12: 123,
                    F13: 124,
                    F14: 125,
                    F15: 126,
                    NUM_LOCK: 144,
                    SCROLL_LOCK: 145,
                    UP_DPAD: 175,
                    DOWN_DPAD: 176,
                    LEFT_DPAD: 177,
                    RIGHT_DPAD: 178,
                    // virtual key mapping
                    copyKey: has("mac") && !has("air") ? (has("safari") ? 91 : 224) : 17
                };
            });

        },
        'dojo/uacss': function() {
            define("dojo/uacss", ["./dom-geometry", "./_base/lang", "./ready", "./sniff", "./_base/window"],
                function(geometry, lang, ready, has, baseWindow) {

                    // module:
                    //		dojo/uacss

                    /*=====
                    return {
                    	// summary:
                    	//		Applies pre-set CSS classes to the top-level HTML node, based on:
                    	//
                    	//		- browser (ex: dj_ie)
                    	//		- browser version (ex: dj_ie6)
                    	//		- box model (ex: dj_contentBox)
                    	//		- text direction (ex: dijitRtl)
                    	//
                    	//		In addition, browser, browser version, and box model are
                    	//		combined with an RTL flag when browser text is RTL. ex: dj_ie-rtl.
                    	//
                    	//		Returns the has() method.
                    };
                    =====*/

                    var
                        html = baseWindow.doc.documentElement,
                        ie = has("ie"),
                        opera = has("opera"),
                        maj = Math.floor,
                        ff = has("ff"),
                        boxModel = geometry.boxModel.replace(/-/, ''),

                        classes = {
                            "dj_ie": ie,
                            "dj_ie6": maj(ie) == 6,
                            "dj_ie7": maj(ie) == 7,
                            "dj_ie8": maj(ie) == 8,
                            "dj_ie9": maj(ie) == 9,
                            "dj_quirks": has("quirks"),
                            "dj_iequirks": ie && has("quirks"),

                            // NOTE: Opera not supported by dijit
                            "dj_opera": opera,

                            "dj_khtml": has("khtml"),

                            "dj_webkit": has("webkit"),
                            "dj_safari": has("safari"),
                            "dj_chrome": has("chrome"),

                            "dj_gecko": has("mozilla"),
                            "dj_ff3": maj(ff) == 3
                        }; // no dojo unsupported browsers

                    classes["dj_" + boxModel] = true;

                    // apply browser, browser version, and box model class names
                    var classStr = "";
                    for (var clz in classes) {
                        if (classes[clz]) {
                            classStr += clz + " ";
                        }
                    }
                    html.className = lang.trim(html.className + " " + classStr);

                    // If RTL mode, then add dj_rtl flag plus repeat existing classes with -rtl extension.
                    // We can't run the code below until the <body> tag has loaded (so we can check for dir=rtl).
                    // priority is 90 to run ahead of parser priority of 100
                    ready(90, function() {
                        if (!geometry.isBodyLtr()) {
                            var rtlClassStr = "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl ");
                            html.className = lang.trim(html.className + " " + rtlClassStr + "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl "));
                        }
                    });
                    return has;
                });

        },
        'dijit/Tooltip': function() {
            require({
                cache: {
                    'url:dijit/templates/Tooltip.html': "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n></div>\n"
                }
            });
            define("dijit/Tooltip", [
                "dojo/_base/array", // array.forEach array.indexOf array.map
                "dojo/_base/declare", // declare
                "dojo/_base/fx", // fx.fadeIn fx.fadeOut
                "dojo/dom", // dom.byId
                "dojo/dom-class", // domClass.add
                "dojo/dom-geometry", // domGeometry.position
                "dojo/dom-style", // domStyle.set, domStyle.get
                "dojo/_base/lang", // lang.hitch lang.isArrayLike
                "dojo/mouse",
                "dojo/on",
                "dojo/sniff", // has("ie")
                "./_base/manager", // manager.defaultDuration
                "./place",
                "./_Widget",
                "./_TemplatedMixin",
                "./BackgroundIframe",
                "dojo/text!./templates/Tooltip.html",
                "./main" // sets dijit.showTooltip etc. for back-compat
            ], function(array, declare, fx, dom, domClass, domGeometry, domStyle, lang, mouse, on, has,
                manager, place, _Widget, _TemplatedMixin, BackgroundIframe, template, dijit) {

                // module:
                //		dijit/Tooltip


                // TODO: Tooltip should really share more positioning code with TooltipDialog, like:
                //		- the orient() method
                //		- the connector positioning code in show()
                //		- the dijitTooltip[Dialog] class
                //
                // The problem is that Tooltip's implementation supplies it's own <iframe> and interacts directly
                // with dijit/place, rather than going through dijit/popup like TooltipDialog and other popups (ex: Menu).

                var MasterTooltip = declare("dijit._MasterTooltip", [_Widget, _TemplatedMixin], {
                    // summary:
                    //		Internal widget that holds the actual tooltip markup,
                    //		which occurs once per page.
                    //		Called by Tooltip widgets which are just containers to hold
                    //		the markup
                    // tags:
                    //		protected

                    // duration: Integer
                    //		Milliseconds to fade in/fade out
                    duration: manager.defaultDuration,

                    templateString: template,

                    postCreate: function() {
                        this.ownerDocumentBody.appendChild(this.domNode);

                        this.bgIframe = new BackgroundIframe(this.domNode);

                        // Setup fade-in and fade-out functions.
                        this.fadeIn = fx.fadeIn({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, "_onShow")
                        });
                        this.fadeOut = fx.fadeOut({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, "_onHide")
                        });
                    },

                    show: function(innerHTML, aroundNode, position, rtl, textDir) {
                        // summary:
                        //		Display tooltip w/specified contents to right of specified node
                        //		(To left if there's no space on the right, or if rtl == true)
                        // innerHTML: String
                        //		Contents of the tooltip
                        // aroundNode: DomNode|dijit/place.__Rectangle
                        //		Specifies that tooltip should be next to this node / area
                        // position: String[]?
                        //		List of positions to try to position tooltip (ex: ["right", "above"])
                        // rtl: Boolean?
                        //		Corresponds to `WidgetBase.dir` attribute, where false means "ltr" and true
                        //		means "rtl"; specifies GUI direction, not text direction.
                        // textDir: String?
                        //		Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.


                        if (this.aroundNode && this.aroundNode === aroundNode && this.containerNode.innerHTML == innerHTML) {
                            return;
                        }

                        if (this.fadeOut.status() == "playing") {
                            // previous tooltip is being hidden; wait until the hide completes then show new one
                            this._onDeck = arguments;
                            return;
                        }
                        this.containerNode.innerHTML = innerHTML;

                        if (textDir) {
                            this.set("textDir", textDir);
                        }

                        this.containerNode.align = rtl ? "right" : "left"; //fix the text alignment

                        var pos = place.around(this.domNode, aroundNode,
                            position && position.length ? position : Tooltip.defaultPosition, !rtl, lang.hitch(this, "orient"));

                        // Position the tooltip connector for middle alignment.
                        // This could not have been done in orient() since the tooltip wasn't positioned at that time.
                        var aroundNodeCoords = pos.aroundNodePos;
                        if (pos.corner.charAt(0) == 'M' && pos.aroundCorner.charAt(0) == 'M') {
                            this.connectorNode.style.top = aroundNodeCoords.y + ((aroundNodeCoords.h - this.connectorNode.offsetHeight) >> 1) - pos.y + "px";
                            this.connectorNode.style.left = "";
                        } else if (pos.corner.charAt(1) == 'M' && pos.aroundCorner.charAt(1) == 'M') {
                            this.connectorNode.style.left = aroundNodeCoords.x + ((aroundNodeCoords.w - this.connectorNode.offsetWidth) >> 1) - pos.x + "px";
                        } else {
                            // Not *-centered, but just above/below/after/before
                            this.connectorNode.style.left = "";
                            this.connectorNode.style.top = "";
                        }

                        // show it
                        domStyle.set(this.domNode, "opacity", 0);
                        this.fadeIn.play();
                        this.isShowingNow = true;
                        this.aroundNode = aroundNode;
                    },

                    orient: function( /*DomNode*/ node, /*String*/ aroundCorner, /*String*/ tooltipCorner, /*Object*/ spaceAvailable, /*Object*/ aroundNodeCoords) {
                        // summary:
                        //		Private function to set CSS for tooltip node based on which position it's in.
                        //		This is called by the dijit popup code.   It will also reduce the tooltip's
                        //		width to whatever width is available
                        // tags:
                        //		protected

                        this.connectorNode.style.top = ""; //reset to default

                        var heightAvailable = spaceAvailable.h,
                            widthAvailable = spaceAvailable.w;

                        node.className = "dijitTooltip " + {
                            "MR-ML": "dijitTooltipRight",
                            "ML-MR": "dijitTooltipLeft",
                            "TM-BM": "dijitTooltipAbove",
                            "BM-TM": "dijitTooltipBelow",
                            "BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
                            "TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
                            "BR-TR": "dijitTooltipBelow dijitTooltipABRight",
                            "TR-BR": "dijitTooltipAbove dijitTooltipABRight",
                            "BR-BL": "dijitTooltipRight",
                            "BL-BR": "dijitTooltipLeft"
                        }[aroundCorner + "-" + tooltipCorner];

                        // reset width; it may have been set by orient() on a previous tooltip show()
                        this.domNode.style.width = "auto";

                        // Reduce tooltip's width to the amount of width available, so that it doesn't overflow screen.
                        // Note that sometimes widthAvailable is negative, but we guard against setting style.width to a
                        // negative number since that causes an exception on IE.
                        var size = domGeometry.position(this.domNode);
                        if (has("ie") == 9) {
                            // workaround strange IE9 bug where setting width to offsetWidth causes words to wrap
                            size.w += 2;
                        }

                        var width = Math.min((Math.max(widthAvailable, 1)), size.w);

                        domGeometry.setMarginBox(this.domNode, {
                            w: width
                        });

                        // Reposition the tooltip connector.
                        if (tooltipCorner.charAt(0) == 'B' && aroundCorner.charAt(0) == 'B') {
                            var bb = domGeometry.position(node);
                            var tooltipConnectorHeight = this.connectorNode.offsetHeight;
                            if (bb.h > heightAvailable) {
                                // The tooltip starts at the top of the page and will extend past the aroundNode
                                var aroundNodePlacement = heightAvailable - ((aroundNodeCoords.h + tooltipConnectorHeight) >> 1);
                                this.connectorNode.style.top = aroundNodePlacement + "px";
                                this.connectorNode.style.bottom = "";
                            } else {
                                // Align center of connector with center of aroundNode, except don't let bottom
                                // of connector extend below bottom of tooltip content, or top of connector
                                // extend past top of tooltip content
                                this.connectorNode.style.bottom = Math.min(
                                    Math.max(aroundNodeCoords.h / 2 - tooltipConnectorHeight / 2, 0),
                                    bb.h - tooltipConnectorHeight) + "px";
                                this.connectorNode.style.top = "";
                            }
                        } else {
                            // reset the tooltip back to the defaults
                            this.connectorNode.style.top = "";
                            this.connectorNode.style.bottom = "";
                        }

                        return Math.max(0, size.w - widthAvailable);
                    },

                    _onShow: function() {
                        // summary:
                        //		Called at end of fade-in operation
                        // tags:
                        //		protected
                        if (has("ie")) {
                            // the arrow won't show up on a node w/an opacity filter
                            this.domNode.style.filter = "";
                        }
                    },

                    hide: function(aroundNode) {
                        // summary:
                        //		Hide the tooltip

                        if (this._onDeck && this._onDeck[1] == aroundNode) {
                            // this hide request is for a show() that hasn't even started yet;
                            // just cancel the pending show()
                            this._onDeck = null;
                        } else if (this.aroundNode === aroundNode) {
                            // this hide request is for the currently displayed tooltip
                            this.fadeIn.stop();
                            this.isShowingNow = false;
                            this.aroundNode = null;
                            this.fadeOut.play();
                        } else {
                            // just ignore the call, it's for a tooltip that has already been erased
                        }
                    },

                    _onHide: function() {
                        // summary:
                        //		Called at end of fade-out operation
                        // tags:
                        //		protected

                        this.domNode.style.cssText = ""; // to position offscreen again
                        this.containerNode.innerHTML = "";
                        if (this._onDeck) {
                            // a show request has been queued up; do it now
                            this.show.apply(this, this._onDeck);
                            this._onDeck = null;
                        }
                    },

                    _setAutoTextDir: function( /*Object*/ node) {
                        // summary:
                        //		Resolve "auto" text direction for children nodes
                        // tags:
                        //		private

                        this.applyTextDir(node, has("ie") ? node.outerText : node.textContent);
                        array.forEach(node.children, function(child) {
                            this._setAutoTextDir(child);
                        }, this);
                    },

                    _setTextDirAttr: function( /*String*/ textDir) {
                        // summary:
                        //		Setter for textDir.
                        // description:
                        //		Users shouldn't call this function; they should be calling
                        //		set('textDir', value)
                        // tags:
                        //		private

                        this._set("textDir", textDir);

                        if (textDir == "auto") {
                            this._setAutoTextDir(this.containerNode);
                        } else {
                            this.containerNode.dir = this.textDir;
                        }
                    }
                });

                dijit.showTooltip = function(innerHTML, aroundNode, position, rtl, textDir) {
                    // summary:
                    //		Static method to display tooltip w/specified contents in specified position.
                    //		See description of dijit/Tooltip.defaultPosition for details on position parameter.
                    //		If position is not specified then dijit/Tooltip.defaultPosition is used.
                    // innerHTML: String
                    //		Contents of the tooltip
                    // aroundNode: place.__Rectangle
                    //		Specifies that tooltip should be next to this node / area
                    // position: String[]?
                    //		List of positions to try to position tooltip (ex: ["right", "above"])
                    // rtl: Boolean?
                    //		Corresponds to `WidgetBase.dir` attribute, where false means "ltr" and true
                    //		means "rtl"; specifies GUI direction, not text direction.
                    // textDir: String?
                    //		Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.

                    // After/before don't work, but for back-compat convert them to the working after-centered, before-centered.
                    // Possibly remove this in 2.0.   Alternately, get before/after to work.
                    if (position) {
                        position = array.map(position, function(val) {
                            return {
                                after: "after-centered",
                                before: "before-centered"
                            }[val] || val;
                        });
                    }

                    if (!Tooltip._masterTT) {
                        dijit._masterTT = Tooltip._masterTT = new MasterTooltip();
                    }
                    return Tooltip._masterTT.show(innerHTML, aroundNode, position, rtl, textDir);
                };

                dijit.hideTooltip = function(aroundNode) {
                    // summary:
                    //		Static method to hide the tooltip displayed via showTooltip()
                    return Tooltip._masterTT && Tooltip._masterTT.hide(aroundNode);
                };

                var Tooltip = declare("dijit.Tooltip", _Widget, {
                    // summary:
                    //		Pops up a tooltip (a help message) when you hover over a node.
                    //		Also provides static show() and hide() methods that can be used without instantiating a dijit/Tooltip.

                    // label: String
                    //		Text to display in the tooltip.
                    //		Specified as innerHTML when creating the widget from markup.
                    label: "",

                    // showDelay: Integer
                    //		Number of milliseconds to wait after hovering over/focusing on the object, before
                    //		the tooltip is displayed.
                    showDelay: 400,

                    // connectId: String|String[]|DomNode|DomNode[]
                    //		Id of domNode(s) to attach the tooltip to.
                    //		When user hovers over specified dom node(s), the tooltip will appear.
                    connectId: [],

                    // position: String[]
                    //		See description of `dijit/Tooltip.defaultPosition` for details on position parameter.
                    position: [],

                    // selector: String?
                    //		CSS expression to apply this Tooltip to descendants of connectIds, rather than to
                    //		the nodes specified by connectIds themselves.    Useful for applying a Tooltip to
                    //		a range of rows in a table, tree, etc.   Use in conjunction with getContent() parameter.
                    //		Ex: connectId: myTable, selector: "tr", getContent: function(node){ return ...; }
                    //
                    //		The application must require() an appropriate level of dojo/query to handle the selector.
                    selector: "",

                    // TODO: in 2.0 remove support for multiple connectIds.   selector gives the same effect.
                    // So, change connectId to a "", remove addTarget()/removeTarget(), etc.

                    _setConnectIdAttr: function( /*String|String[]}DomNode|DomNode[]*/ newId) {
                        // summary:
                        //		Connect to specified node(s)

                        // Remove connections to old nodes (if there are any)
                        array.forEach(this._connections || [], function(nested) {
                            array.forEach(nested, function(handle) {
                                handle.remove();
                            });
                        }, this);

                        // Make array of id's to connect to, excluding entries for nodes that don't exist yet, see startup()
                        this._connectIds = array.filter(lang.isArrayLike(newId) ? newId : (newId ? [newId] : []),
                            function(id) {
                                return dom.byId(id, this.ownerDocument);
                            }, this);

                        // Make connections
                        this._connections = array.map(this._connectIds, function(id) {
                            var node = dom.byId(id, this.ownerDocument),
                                selector = this.selector,
                                delegatedEvent = selector ?
                                function(eventType) {
                                    return on.selector(selector, eventType);
                                } :
                                function(eventType) {
                                    return eventType;
                                },
                                self = this;
                            return [
                                on(node, delegatedEvent(mouse.enter), function() {
                                    self._onHover(this);
                                }),
                                on(node, delegatedEvent("focusin"), function() {
                                    self._onHover(this);
                                }),
                                on(node, delegatedEvent(mouse.leave), lang.hitch(self, "_onUnHover")),
                                on(node, delegatedEvent("focusout"), lang.hitch(self, "_onUnHover"))
                            ];
                        }, this);

                        this._set("connectId", newId);
                    },

                    addTarget: function( /*OomNode|String*/ node) {
                        // summary:
                        //		Attach tooltip to specified node if it's not already connected

                        // TODO: remove in 2.0 and just use set("connectId", ...) interface

                        var id = node.id || node;
                        if (array.indexOf(this._connectIds, id) == -1) {
                            this.set("connectId", this._connectIds.concat(id));
                        }
                    },

                    removeTarget: function( /*DomNode|String*/ node) {
                        // summary:
                        //		Detach tooltip from specified node

                        // TODO: remove in 2.0 and just use set("connectId", ...) interface

                        var id = node.id || node, // map from DOMNode back to plain id string
                            idx = array.indexOf(this._connectIds, id);
                        if (idx >= 0) {
                            // remove id (modifies original this._connectIds but that's OK in this case)
                            this._connectIds.splice(idx, 1);
                            this.set("connectId", this._connectIds);
                        }
                    },

                    buildRendering: function() {
                        this.inherited(arguments);
                        domClass.add(this.domNode, "dijitTooltipData");
                    },

                    startup: function() {
                        this.inherited(arguments);

                        // If this tooltip was created in a template, or for some other reason the specified connectId[s]
                        // didn't exist during the widget's initialization, then connect now.
                        var ids = this.connectId;
                        array.forEach(lang.isArrayLike(ids) ? ids : [ids], this.addTarget, this);
                    },

                    getContent: function( /*DomNode*/ node) {
                        // summary:
                        //		User overridable function that return the text to display in the tooltip.
                        // tags:
                        //		extension
                        return this.label || this.domNode.innerHTML;
                    },

                    _onHover: function( /*DomNode*/ target) {
                        // summary:
                        //		Despite the name of this method, it actually handles both hover and focus
                        //		events on the target node, setting a timer to show the tooltip.
                        // tags:
                        //		private
                        if (!this._showTimer) {
                            this._showTimer = this.defer(function() {
                                this.open(target);
                            }, this.showDelay);
                        }
                    },

                    _onUnHover: function() {
                        // summary:
                        //		Despite the name of this method, it actually handles both mouseleave and blur
                        //		events on the target node, hiding the tooltip.
                        // tags:
                        //		private

                        if (this._showTimer) {
                            this._showTimer.remove();
                            delete this._showTimer;
                        }
                        this.close();
                    },

                    open: function( /*DomNode*/ target) {
                        // summary:
                        //		Display the tooltip; usually not called directly.
                        // tags:
                        //		private

                        if (this._showTimer) {
                            this._showTimer.remove();
                            delete this._showTimer;
                        }

                        var content = this.getContent(target);
                        if (!content) {
                            return;
                        }
                        Tooltip.show(content, target, this.position, !this.isLeftToRight(), this.textDir);

                        this._connectNode = target; // _connectNode means "tooltip currently displayed for this node"
                        this.onShow(target, this.position);
                    },

                    close: function() {
                        // summary:
                        //		Hide the tooltip or cancel timer for show of tooltip
                        // tags:
                        //		private

                        if (this._connectNode) {
                            // if tooltip is currently shown
                            Tooltip.hide(this._connectNode);
                            delete this._connectNode;
                            this.onHide();
                        }
                        if (this._showTimer) {
                            // if tooltip is scheduled to be shown (after a brief delay)
                            this._showTimer.remove();
                            delete this._showTimer;
                        }
                    },

                    onShow: function( /*===== target, position =====*/ ) {
                        // summary:
                        //		Called when the tooltip is shown
                        // tags:
                        //		callback
                    },

                    onHide: function() {
                        // summary:
                        //		Called when the tooltip is hidden
                        // tags:
                        //		callback
                    },

                    destroy: function() {
                        this.close();

                        // Remove connections manually since they aren't registered to be removed by _WidgetBase
                        array.forEach(this._connections || [], function(nested) {
                            array.forEach(nested, function(handle) {
                                handle.remove();
                            });
                        }, this);

                        this.inherited(arguments);
                    }
                });

                Tooltip._MasterTooltip = MasterTooltip; // for monkey patching
                Tooltip.show = dijit.showTooltip; // export function through module return value
                Tooltip.hide = dijit.hideTooltip; // export function through module return value

                Tooltip.defaultPosition = ["after-centered", "before-centered"];

                /*=====
                lang.mixin(Tooltip, {
                	 // defaultPosition: String[]
                	 //		This variable controls the position of tooltips, if the position is not specified to
                	 //		the Tooltip widget or *TextBox widget itself.  It's an array of strings with the values
                	 //		possible for `dijit/place.around()`.   The recommended values are:
                	 //
                	 //		- before-centered: centers tooltip to the left of the anchor node/widget, or to the right
                	 //		  in the case of RTL scripts like Hebrew and Arabic
                	 //		- after-centered: centers tooltip to the right of the anchor node/widget, or to the left
                	 //		  in the case of RTL scripts like Hebrew and Arabic
                	 //		- above-centered: tooltip is centered above anchor node
                	 //		- below-centered: tooltip is centered above anchor node
                	 //
                	 //		The list is positions is tried, in order, until a position is found where the tooltip fits
                	 //		within the viewport.
                	 //
                	 //		Be careful setting this parameter.  A value of "above-centered" may work fine until the user scrolls
                	 //		the screen so that there's no room above the target node.   Nodes with drop downs, like
                	 //		DropDownButton or FilteringSelect, are especially problematic, in that you need to be sure
                	 //		that the drop down and tooltip don't overlap, even when the viewport is scrolled so that there
                	 //		is only room below (or above) the target node, but not both.
                 });
                =====*/
                return Tooltip;
            });

        },
        'dojo/string': function() {
            define([
                "./_base/kernel", // kernel.global
                "./_base/lang"
            ], function(kernel, lang) {

                // module:
                //		dojo/string

                var string = {
                    // summary:
                    //		String utilities for Dojo
                };
                lang.setObject("dojo.string", string);

                string.rep = function( /*String*/ str, /*Integer*/ num) {
                    // summary:
                    //		Efficiently replicate a string `n` times.
                    // str:
                    //		the string to replicate
                    // num:
                    //		number of times to replicate the string

                    if (num <= 0 || !str) {
                        return "";
                    }

                    var buf = [];
                    for (;;) {
                        if (num & 1) {
                            buf.push(str);
                        }
                        if (!(num >>= 1)) {
                            break;
                        }
                        str += str;
                    }
                    return buf.join(""); // String
                };

                string.pad = function( /*String*/ text, /*Integer*/ size, /*String?*/ ch, /*Boolean?*/ end) {
                    // summary:
                    //		Pad a string to guarantee that it is at least `size` length by
                    //		filling with the character `ch` at either the start or end of the
                    //		string. Pads at the start, by default.
                    // text:
                    //		the string to pad
                    // size:
                    //		length to provide padding
                    // ch:
                    //		character to pad, defaults to '0'
                    // end:
                    //		adds padding at the end if true, otherwise pads at start
                    // example:
                    //	|	// Fill the string to length 10 with "+" characters on the right.  Yields "Dojo++++++".
                    //	|	string.pad("Dojo", 10, "+", true);

                    if (!ch) {
                        ch = '0';
                    }
                    var out = String(text),
                        pad = string.rep(ch, Math.ceil((size - out.length) / ch.length));
                    return end ? out + pad : pad + out; // String
                };

                string.substitute = function( /*String*/ template,
                    /*Object|Array*/
                    map,
                    /*Function?*/
                    transform,
                    /*Object?*/
                    thisObject) {
                    // summary:
                    //		Performs parameterized substitutions on a string. Throws an
                    //		exception if any parameter is unmatched.
                    // template:
                    //		a string with expressions in the form `${key}` to be replaced or
                    //		`${key:format}` which specifies a format function. keys are case-sensitive.
                    // map:
                    //		hash to search for substitutions
                    // transform:
                    //		a function to process all parameters before substitution takes
                    //		place, e.g. mylib.encodeXML
                    // thisObject:
                    //		where to look for optional format function; default to the global
                    //		namespace
                    // example:
                    //		Substitutes two expressions in a string from an Array or Object
                    //	|	// returns "File 'foo.html' is not found in directory '/temp'."
                    //	|	// by providing substitution data in an Array
                    //	|	string.substitute(
                    //	|		"File '${0}' is not found in directory '${1}'.",
                    //	|		["foo.html","/temp"]
                    //	|	);
                    //	|
                    //	|	// also returns "File 'foo.html' is not found in directory '/temp'."
                    //	|	// but provides substitution data in an Object structure.  Dotted
                    //	|	// notation may be used to traverse the structure.
                    //	|	string.substitute(
                    //	|		"File '${name}' is not found in directory '${info.dir}'.",
                    //	|		{ name: "foo.html", info: { dir: "/temp" } }
                    //	|	);
                    // example:
                    //		Use a transform function to modify the values:
                    //	|	// returns "file 'foo.html' is not found in directory '/temp'."
                    //	|	string.substitute(
                    //	|		"${0} is not found in ${1}.",
                    //	|		["foo.html","/temp"],
                    //	|		function(str){
                    //	|			// try to figure out the type
                    //	|			var prefix = (str.charAt(0) == "/") ? "directory": "file";
                    //	|			return prefix + " '" + str + "'";
                    //	|		}
                    //	|	);
                    // example:
                    //		Use a formatter
                    //	|	// returns "thinger -- howdy"
                    //	|	string.substitute(
                    //	|		"${0:postfix}", ["thinger"], null, {
                    //	|			postfix: function(value, key){
                    //	|				return value + " -- howdy";
                    //	|			}
                    //	|		}
                    //	|	);

                    thisObject = thisObject || kernel.global;
                    transform = transform ?
                        lang.hitch(thisObject, transform) : function(v) {
                            return v;
                        };

                    return template.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,
                        function(match, key, format) {
                            var value = lang.getObject(key, false, map);
                            if (format) {
                                value = lang.getObject(format, false, thisObject).call(thisObject, value, key);
                            }
                            return transform(value, key).toString();
                        }); // String
                };

                string.trim = String.prototype.trim ?
                    lang.trim : // aliasing to the native function
                    function(str) {
                        str = str.replace(/^\s+/, '');
                        for (var i = str.length - 1; i >= 0; i--) {
                            if (/\S/.test(str.charAt(i))) {
                                str = str.substring(0, i + 1);
                                break;
                            }
                        }
                        return str;
                    };

                /*=====
                 string.trim = function(str){
                	 // summary:
                	 //		Trims whitespace from both sides of the string
                	 // str: String
                	 //		String to be trimmed
                	 // returns: String
                	 //		Returns the trimmed string
                	 // description:
                	 //		This version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript).
                	 //		The short yet performant version of this function is dojo.trim(),
                	 //		which is part of Dojo base.  Uses String.prototype.trim instead, if available.
                	 return "";	// String
                 };
                 =====*/

                return string;
            });

        },
        'url:dijit/templates/MenuSeparator.html': "<tr class=\"dijitMenuSeparator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>",
        'dojox/dtl/Context': function() {
            define("dojox/dtl/Context", [
                "dojo/_base/lang",
                "./_base"
            ], function(lang, dd) {
                dd.Context = lang.extend(function( /*Object*/ dict) {
                        // summary:
                        //		Represents a runtime context used by DTL templates.
                        this._this = {};
                        dd._Context.call(this, dict); // TODO: huh?
                    }, dd._Context.prototype, // TODO: huh?
                    {
                        getKeys: function() {
                            // summary:
                            //		Returns the set of keys exported by this context.
                            var keys = [];
                            for (var key in this) {
                                if (this.hasOwnProperty(key) && key != "_this") {
                                    keys.push(key);
                                }
                            }
                            return keys;
                        },
                        extend: function( /*dojox/dtl/Context|Object*/ obj) {
                            // summary:
                            //		Returns a clone of this context object, with the items from the passed objecct mixed in.
                            // obj:
                            //		The object to extend.
                            return lang.delegate(this, obj);
                        },
                        filter: function( /*dojox/dtl/Context|Object|String...*/ filter) {
                            // summary:
                            //		Returns a clone of this context, only containing the items defined in the filter.
                            var context = new dd.Context();
                            var keys = [];
                            var i, arg;
                            if (filter instanceof dd.Context) {
                                keys = filter.getKeys();
                            } else if (typeof filter == "object") {
                                for (var key in filter) {
                                    keys.push(key);
                                }
                            } else {
                                for (i = 0; arg = arguments[i]; i++) {
                                    if (typeof arg == "string") {
                                        keys.push(arg);
                                    }
                                }
                            }

                            for (i = 0, key; key = keys[i]; i++) {
                                context[key] = this[key];
                            }

                            return context;
                        },
                        setThis: function( /*Object*/ scope) {
                            // summary:
                            //		Sets the object on which to perform operations. 
                            // scope:
                            //		the this ref.
                            this._this = scope;
                        },
                        getThis: function() {
                            // summary:
                            //		Gets the object on which to perform operations. 
                            return this._this;
                        },
                        hasKey: function( /*String*/ key) {
                            // summary:
                            //		Indicates whether the specified key is defined on this context.
                            // key:
                            //		The key to look up.
                            if (this._getter) {
                                var got = this._getter(key);
                                if (typeof got != "undefined") {
                                    return true;
                                }
                            }

                            if (typeof this[key] != "undefined") {
                                return true;
                            }

                            return false;
                        }
                    });
                return dd.Context;
            });
        },
        'dijit/form/DropDownButton': function() {
            require({
                cache: {
                    'url:dijit/form/templates/DropDownButton.html': "<span class=\"dijit dijitReset dijitInline\"\n\t><span class='dijitReset dijitInline dijitButtonNode'\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" data-dojo-attach-point=\"_buttonNode\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"focusNode,titleNode,_arrowWrapperNode\"\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\n\t\t\t\tdata-dojo-attach-point=\"iconNode\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode,_popupStateNode\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-point=\"valueNode\"\n/></span>\n"
                }
            });
            define("dijit/form/DropDownButton", [
                "dojo/_base/declare", // declare
                "dojo/_base/lang", // hitch
                "dojo/query", // query
                "../registry", // registry.byNode
                "../popup", // dijit.popup2.hide
                "./Button",
                "../_Container",
                "../_HasDropDown",
                "dojo/text!./templates/DropDownButton.html"
            ], function(declare, lang, query, registry, popup, Button, _Container, _HasDropDown, template) {

                // module:
                //		dijit/form/DropDownButton


                return declare("dijit.form.DropDownButton", [Button, _Container, _HasDropDown], {
                    // summary:
                    //		A button with a drop down
                    //
                    // example:
                    // |	<button data-dojo-type="dijit/form/DropDownButton">
                    // |		Hello world
                    // |		<div data-dojo-type="dijit/Menu">...</div>
                    // |	</button>
                    //
                    // example:
                    // |	var button1 = new DropDownButton({ label: "hi", dropDown: new dijit.Menu(...) });
                    // |	win.body().appendChild(button1);
                    //

                    baseClass: "dijitDropDownButton",

                    templateString: template,

                    _fillContent: function() {
                        // Overrides Button._fillContent().
                        //
                        // My inner HTML contains both the button contents and a drop down widget, like
                        // <DropDownButton>  <span>push me</span>  <Menu> ... </Menu> </DropDownButton>
                        // The first node is assumed to be the button content. The widget is the popup.

                        if (this.srcNodeRef) { // programatically created buttons might not define srcNodeRef
                            //FIXME: figure out how to filter out the widget and use all remaining nodes as button
                            //	content, not just nodes[0]
                            var nodes = query("*", this.srcNodeRef);
                            this.inherited(arguments, [nodes[0]]);

                            // save pointer to srcNode so we can grab the drop down widget after it's instantiated
                            this.dropDownContainer = this.srcNodeRef;
                        }
                    },

                    startup: function() {
                        if (this._started) {
                            return;
                        }

                        // the child widget from srcNodeRef is the dropdown widget.  Insert it in the page DOM,
                        // make it invisible, and store a reference to pass to the popup code.
                        if (!this.dropDown && this.dropDownContainer) {
                            var dropDownNode = query("[widgetId]", this.dropDownContainer)[0];
                            this.dropDown = registry.byNode(dropDownNode);
                            delete this.dropDownContainer;
                        }
                        if (this.dropDown) {
                            popup.hide(this.dropDown);
                        }

                        this.inherited(arguments);
                    },

                    isLoaded: function() {
                        // Returns whether or not we are loaded - if our dropdown has an href,
                        // then we want to check that.
                        var dropDown = this.dropDown;
                        return (!!dropDown && (!dropDown.href || dropDown.isLoaded));
                    },

                    loadDropDown: function( /*Function*/ callback) {
                        // Default implementation assumes that drop down already exists,
                        // but hasn't loaded it's data (ex: ContentPane w/href).
                        // App must override if the drop down is lazy-created.
                        var dropDown = this.dropDown;
                        var handler = dropDown.on("load", lang.hitch(this, function() {
                            handler.remove();
                            callback();
                        }));
                        dropDown.refresh(); // tell it to load
                    },

                    isFocusable: function() {
                        // Overridden so that focus is handled by the _HasDropDown mixin, not by
                        // the _FormWidget mixin.
                        return this.inherited(arguments) && !this._mouseDown;
                    }
                });

            });

        },
        'dijit/form/_FormValueMixin': function() {
            define("dijit/form/_FormValueMixin", [
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/keys", // keys.ESCAPE
                "dojo/sniff", // has("ie"), has("quirks")
                "./_FormWidgetMixin"
            ], function(declare, domAttr, keys, has, _FormWidgetMixin) {

                // module:
                //		dijit/form/_FormValueMixin

                return declare("dijit.form._FormValueMixin", _FormWidgetMixin, {
                    // summary:
                    //		Mixin for widgets corresponding to native HTML elements such as `<input>` or `<select>`
                    //		that have user changeable values.
                    // description:
                    //		Each _FormValueMixin represents a single input value, and has a (possibly hidden) `<input>` element,
                    //		to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)
                    //		works as expected.

                    // readOnly: Boolean
                    //		Should this widget respond to user input?
                    //		In markup, this is specified as "readOnly".
                    //		Similar to disabled except readOnly form values are submitted.
                    readOnly: false,

                    _setReadOnlyAttr: function( /*Boolean*/ value) {
                        domAttr.set(this.focusNode, 'readOnly', value);
                        this.focusNode.setAttribute("aria-readonly", value);
                        this._set("readOnly", value);
                    },

                    postCreate: function() {
                        this.inherited(arguments);

                        if (has("ie")) { // IE won't stop the event with keypress
                            this.connect(this.focusNode || this.domNode, "onkeydown", this._onKeyDown);
                        }
                        // Update our reset value if it hasn't yet been set (because this.set()
                        // is only called when there *is* a value)
                        if (this._resetValue === undefined) {
                            this._lastValueReported = this._resetValue = this.value;
                        }
                    },

                    _setValueAttr: function( /*anything*/ newValue, /*Boolean?*/ priorityChange) {
                        // summary:
                        //		Hook so set('value', value) works.
                        // description:
                        //		Sets the value of the widget.
                        //		If the value has changed, then fire onChange event, unless priorityChange
                        //		is specified as null (or false?)
                        this._handleOnChange(newValue, priorityChange);
                    },

                    _handleOnChange: function( /*anything*/ newValue, /*Boolean?*/ priorityChange) {
                        // summary:
                        //		Called when the value of the widget has changed.  Saves the new value in this.value,
                        //		and calls onChange() if appropriate.   See _FormWidget._handleOnChange() for details.
                        this._set("value", newValue);
                        this.inherited(arguments);
                    },

                    undo: function() {
                        // summary:
                        //		Restore the value to the last value passed to onChange
                        this._setValueAttr(this._lastValueReported, false);
                    },

                    reset: function() {
                        // summary:
                        //		Reset the widget's value to what it was at initialization time
                        this._hasBeenBlurred = false;
                        this._setValueAttr(this._resetValue, true);
                    },

                    _onKeyDown: function(e) {
                        if (e.keyCode == keys.ESCAPE && !(e.ctrlKey || e.altKey || e.metaKey)) {
                            if (has("ie") < 9 || (has("ie") && has("quirks"))) {
                                e.preventDefault(); // default behavior needs to be stopped here since keypress is too late
                                var node = e.srcElement,
                                    te = node.ownerDocument.createEventObject();
                                te.keyCode = keys.ESCAPE;
                                te.shiftKey = e.shiftKey;
                                node.fireEvent('onkeypress', te);
                            }
                        }
                    }
                });
            });

        },
        'dijit/form/_FormWidgetMixin': function() {
            define("dijit/form/_FormWidgetMixin", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/dom-style", // domStyle.get
                "dojo/_base/lang", // lang.hitch lang.isArray
                "dojo/mouse", // mouse.isLeft
                "dojo/sniff", // has("webkit")
                "dojo/window", // winUtils.scrollIntoView
                "../a11y" // a11y.hasDefaultTabStop
            ], function(array, declare, domAttr, domStyle, lang, mouse, has, winUtils, a11y) {

                // module:
                //		dijit/form/_FormWidgetMixin

                return declare("dijit.form._FormWidgetMixin", null, {
                    // summary:
                    //		Mixin for widgets corresponding to native HTML elements such as `<checkbox>` or `<button>`,
                    //		which can be children of a `<form>` node or a `dijit/form/Form` widget.
                    //
                    // description:
                    //		Represents a single HTML element.
                    //		All these widgets should have these attributes just like native HTML input elements.
                    //		You can set them during widget construction or afterwards, via `dijit/_WidgetBase.set()`.
                    //
                    //		They also share some common methods.

                    // name: [const] String
                    //		Name used when submitting form; same as "name" attribute or plain HTML elements
                    name: "",

                    // alt: String
                    //		Corresponds to the native HTML `<input>` element's attribute.
                    alt: "",

                    // value: String
                    //		Corresponds to the native HTML `<input>` element's attribute.
                    value: "",

                    // type: [const] String
                    //		Corresponds to the native HTML `<input>` element's attribute.
                    type: "text",

                    // tabIndex: String
                    //		Order fields are traversed when user hits the tab key
                    tabIndex: "0",
                    _setTabIndexAttr: "focusNode", // force copy even when tabIndex default value, needed since Button is <span>

                    // disabled: Boolean
                    //		Should this widget respond to user input?
                    //		In markup, this is specified as "disabled='disabled'", or just "disabled".
                    disabled: false,

                    // intermediateChanges: Boolean
                    //		Fires onChange for each value change or only on demand
                    intermediateChanges: false,

                    // scrollOnFocus: Boolean
                    //		On focus, should this widget scroll into view?
                    scrollOnFocus: true,

                    // Override _WidgetBase mapping id to this.domNode, needs to be on focusNode so <label> etc.
                    // works with screen reader
                    _setIdAttr: "focusNode",

                    _setDisabledAttr: function( /*Boolean*/ value) {
                        this._set("disabled", value);
                        domAttr.set(this.focusNode, 'disabled', value);
                        if (this.valueNode) {
                            domAttr.set(this.valueNode, 'disabled', value);
                        }
                        this.focusNode.setAttribute("aria-disabled", value ? "true" : "false");

                        if (value) {
                            // reset these, because after the domNode is disabled, we can no longer receive
                            // mouse related events, see #4200
                            this._set("hovering", false);
                            this._set("active", false);

                            // clear tab stop(s) on this widget's focusable node(s)  (ComboBox has two focusable nodes)
                            var attachPointNames = "tabIndex" in this.attributeMap ? this.attributeMap.tabIndex :
                                ("_setTabIndexAttr" in this) ? this._setTabIndexAttr : "focusNode";
                            array.forEach(lang.isArray(attachPointNames) ? attachPointNames : [attachPointNames], function(attachPointName) {
                                var node = this[attachPointName];
                                // complex code because tabIndex=-1 on a <div> doesn't work on FF
                                if (has("webkit") || a11y.hasDefaultTabStop(node)) { // see #11064 about webkit bug
                                    node.setAttribute('tabIndex', "-1");
                                } else {
                                    node.removeAttribute('tabIndex');
                                }
                            }, this);
                        } else {
                            if (this.tabIndex != "") {
                                this.set('tabIndex', this.tabIndex);
                            }
                        }
                    },

                    _onFocus: function( /*String*/ by) {
                        // If user clicks on the widget, even if the mouse is released outside of it,
                        // this widget's focusNode should get focus (to mimic native browser hehavior).
                        // Browsers often need help to make sure the focus via mouse actually gets to the focusNode.
                        if (by == "mouse" && this.isFocusable()) {
                            // IE exhibits strange scrolling behavior when refocusing a node so only do it when !focused.
                            var focusConnector = this.connect(this.focusNode, "onfocus", function() {
                                this.disconnect(mouseUpConnector);
                                this.disconnect(focusConnector);
                            });
                            // Set a global event to handle mouseup, so it fires properly
                            // even if the cursor leaves this.domNode before the mouse up event.
                            var mouseUpConnector = this.connect(this.ownerDocumentBody, "onmouseup", function() {
                                this.disconnect(mouseUpConnector);
                                this.disconnect(focusConnector);
                                // if here, then the mousedown did not focus the focusNode as the default action
                                if (this.focused) {
                                    this.focus();
                                }
                            });
                        }
                        if (this.scrollOnFocus) {
                            this.defer(function() {
                                winUtils.scrollIntoView(this.domNode);
                            }); // without defer, the input caret position can change on mouse click
                        }
                        this.inherited(arguments);
                    },

                    isFocusable: function() {
                        // summary:
                        //		Tells if this widget is focusable or not.  Used internally by dijit.
                        // tags:
                        //		protected
                        return !this.disabled && this.focusNode && (domStyle.get(this.domNode, "display") != "none");
                    },

                    focus: function() {
                        // summary:
                        //		Put focus on this widget
                        if (!this.disabled && this.focusNode.focus) {
                            try {
                                this.focusNode.focus();
                            } catch (e) {} /*squelch errors from hidden nodes*/
                        }
                    },

                    compare: function( /*anything*/ val1, /*anything*/ val2) {
                        // summary:
                        //		Compare 2 values (as returned by get('value') for this widget).
                        // tags:
                        //		protected
                        if (typeof val1 == "number" && typeof val2 == "number") {
                            return (isNaN(val1) && isNaN(val2)) ? 0 : val1 - val2;
                        } else if (val1 > val2) {
                            return 1;
                        } else if (val1 < val2) {
                            return -1;
                        } else {
                            return 0;
                        }
                    },

                    onChange: function( /*===== newValue =====*/ ) {
                        // summary:
                        //		Callback when this widget's value is changed.
                        // tags:
                        //		callback
                    },

                    // _onChangeActive: [private] Boolean
                    //		Indicates that changes to the value should call onChange() callback.
                    //		This is false during widget initialization, to avoid calling onChange()
                    //		when the initial value is set.
                    _onChangeActive: false,

                    _handleOnChange: function( /*anything*/ newValue, /*Boolean?*/ priorityChange) {
                        // summary:
                        //		Called when the value of the widget is set.  Calls onChange() if appropriate
                        // newValue:
                        //		the new value
                        // priorityChange:
                        //		For a slider, for example, dragging the slider is priorityChange==false,
                        //		but on mouse up, it's priorityChange==true.  If intermediateChanges==false,
                        //		onChange is only called form priorityChange=true events.
                        // tags:
                        //		private
                        if (this._lastValueReported == undefined && (priorityChange === null || !this._onChangeActive)) {
                            // this block executes not for a change, but during initialization,
                            // and is used to store away the original value (or for ToggleButton, the original checked state)
                            this._resetValue = this._lastValueReported = newValue;
                        }
                        this._pendingOnChange = this._pendingOnChange ||
                            (typeof newValue != typeof this._lastValueReported) ||
                            (this.compare(newValue, this._lastValueReported) != 0);
                        if ((this.intermediateChanges || priorityChange || priorityChange === undefined) && this._pendingOnChange) {
                            this._lastValueReported = newValue;
                            this._pendingOnChange = false;
                            if (this._onChangeActive) {
                                if (this._onChangeHandle) {
                                    this._onChangeHandle.remove();
                                }
                                // defer allows hidden value processing to run and
                                // also the onChange handler can safely adjust focus, etc
                                this._onChangeHandle = this.defer(
                                    function() {
                                        this._onChangeHandle = null;
                                        this.onChange(newValue);
                                    }); // try to collapse multiple onChange's fired faster than can be processed
                            }
                        }
                    },

                    create: function() {
                        // Overrides _Widget.create()
                        this.inherited(arguments);
                        this._onChangeActive = true;
                    },

                    destroy: function() {
                        if (this._onChangeHandle) { // destroy called before last onChange has fired
                            this._onChangeHandle.remove();
                            this.onChange(this._lastValueReported);
                        }
                        this.inherited(arguments);
                    }
                });

            });

        },
        'dijit/a11yclick': function() {
            define("dijit/a11yclick", [
                "dojo/on",
                "dojo/_base/array", // array.forEach
                "dojo/keys", // keys.ENTER keys.SPACE
                "dojo/_base/declare", // declare
                "dojo/has", // has("dom-addeventlistener")
                "dojo/_base/unload", // unload.addOnWindowUnload
                "dojo/_base/window" // win.doc.addEventListener win.doc.attachEvent win.doc.detachEvent
            ], function(on, array, keys, declare, has, unload, win) {

                // module:
                //		dijit/a11yclick

                // Keep track of where the last keydown event was, to help avoid generating
                // spurious ondijitclick events when:
                // 1. focus is on a <button> or <a>
                // 2. user presses then releases the ENTER key
                // 3. onclick handler fires and shifts focus to another node, with an ondijitclick handler
                // 4. onkeyup event fires, causing the ondijitclick handler to fire
                var lastKeyDownNode = null;
                if (has("dom-addeventlistener")) {
                    win.doc.addEventListener('keydown', function(evt) {
                        lastKeyDownNode = evt.target;
                    }, true);
                } else {
                    // Fallback path for IE6-8
                    (function() {
                        var keydownCallback = function(evt) {
                            lastKeyDownNode = evt.srcElement;
                        };
                        win.doc.attachEvent('onkeydown', keydownCallback);
                        unload.addOnWindowUnload(function() {
                            win.doc.detachEvent('onkeydown', keydownCallback);
                        });
                    })();
                }

                function clickKey( /*Event*/ e) {
                    return (e.keyCode === keys.ENTER || e.keyCode === keys.SPACE) &&
                        !e.ctrlKey && !e.shiftKey && !e.altKey && !e.metaKey;
                }

                return function(node, listener) {
                    // summary:
                    //		Custom a11yclick (a.k.a. ondijitclick) event
                    //		which triggers on a mouse click, touch, or space/enter keyup.

                    if (/input|button/i.test(node.nodeName)) {
                        // pass through, the browser already generates click event on SPACE/ENTER key
                        return on(node, "click", listener);
                    } else {
                        // Don't fire the click event unless both the keydown and keyup occur on this node.
                        // Avoids problems where focus shifted to this node or away from the node on keydown,
                        // either causing this node to process a stray keyup event, or causing another node
                        // to get a stray keyup event.

                        var handles = [
                            on(node, "keydown", function(e) {
                                //console.log(this.id + ": onkeydown, e.target = ", e.target, ", lastKeyDownNode was ", lastKeyDownNode, ", equality is ", (e.target === lastKeyDownNode));
                                if (clickKey(e)) {
                                    // needed on IE for when focus changes between keydown and keyup - otherwise dropdown menus do not work
                                    lastKeyDownNode = e.target;

                                    // Prevent viewport scrolling on space key in IE<9.
                                    // (Reproducible on test_Button.html on any of the first dijit/form/Button examples)
                                    e.preventDefault();
                                }
                            }),

                            on(node, "keyup", function(e) {
                                //console.log(this.id + ": onkeyup, e.target = ", e.target, ", lastKeyDownNode was ", lastKeyDownNode, ", equality is ", (e.target === lastKeyDownNode));
                                if (clickKey(e) && e.target == lastKeyDownNode) { // === breaks greasemonkey
                                    //need reset here or have problems in FF when focus returns to trigger element after closing popup/alert
                                    lastKeyDownNode = null;
                                    on.emit(e.target, "click", {
                                        cancelable: true,
                                        bubbles: true
                                    });
                                }
                            }),

                            on(node, "click", function(e) {
                                // catch mouse clicks, plus the on.emit() calls from above and below
                                listener.call(this, e);
                            })
                        ];

                        if (has("touch")) {
                            // touchstart-->touchend will automatically generate a click event, but there are problems
                            // on iOS after focus has been programatically shifted (#14604, #14918), so setup a failsafe
                            // if click doesn't fire naturally.

                            var clickTimer;
                            handles.push(
                                on(node, "touchend", function(e) {
                                    var target = e.target;
                                    clickTimer = setTimeout(function() {
                                        clickTimer = null;
                                        on.emit(target, "click", {
                                            cancelable: true,
                                            bubbles: true
                                        });
                                    }, 600);
                                }),
                                on(node, "click", function(e) {
                                    // If browser generates a click naturally, clear the timer to fire a synthetic click event
                                    if (clickTimer) {
                                        clearTimeout(clickTimer);
                                    }
                                })
                                // TODO: if the touchstart and touchend were <100ms apart, and then there's another touchstart
                                // event <300ms after the touchend event, then clear the synthetic click timer, because user
                                // is doing a zoom.   Alternately monitor screen.deviceXDPI (or something similar) to see if
                                // zoom level has changed.
                            );
                        }

                        return {
                            remove: function() {
                                array.forEach(handles, function(h) {
                                    h.remove();
                                });
                                if (clickTimer) {
                                    clearTimeout(clickTimer);
                                    clickTimer = null;
                                }
                            }
                        };
                    }
                };

                return ret;
            });

        },
        'hsbcwidget/form/CustomSelect': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/dom-construct",
                    "dojo/dom-geometry",
                    "dojo/dom-style",
                    "dojo/on",
                    "dojo/dom-class",
                    "dojo/dom-prop"
                ],
                function(declare, _WidgetBase, query, domConstruct, domGeom, domStyle, on, domClass, domProp) {

                    return declare([_WidgetBase], {
                        overlayClass: 'select-overlay',
                        calculateSize: false,

                        buildRendering: function() {
                            this.inherited(arguments);

                            this.selectNode = query('select', this.domNode)[0];
                            domClass.add(this.selectNode, 'replaced');

                            this.overlayNode = domConstruct.toDom('<div role="presentation" aria-hidden="true" class="' + this.overlayClass + '"><div class="inner"><span class="value"></span><span class="arrow"></span></div></div>');
                            this.overlayNode = domConstruct.place(this.overlayNode, this.selectNode, 'after');

                            this.innerNode = query('.inner', this.overlayNode)[0];
                            this.valueNode = query('.value', this.innerNode)[0];
                            this.arrowNode = query('.arrow', this.innerNode)[0];

                            this.optionNodes = query('option', this.selectNode);

                            //Set Overlay size
                            if (this.calculateSize === true) {
                                domGeom.setContentSize(this.overlayNode, domGeom.position(this.selectNode));
                            }
                        },

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this;

                            //Setup events
                            on(this.selectNode, 'focus', function(e) {
                                domClass.add(self.overlayNode, 'focused');
                            });

                            on(this.selectNode, 'blur', function(e) {
                                domClass.remove(self.overlayNode, 'focused');
                            });

                            on(this.selectNode, 'change', function(e) {
                                self.update();
                            });

                            //needed as FF doesn't fire change event
                            //until select is blurred.
                            on(this.selectNode, 'keyup', function(e) {
                                self.update();
                            });

                            //Custom Events
                            on(this.domNode, 'enable:customselect', function(e) {
                                self.enable();
                            });

                            on(this.domNode, 'disable:customselect', function(e) {
                                self.disable();
                            });

                            //Inital setup
                            this.update();
                        },

                        update: function() {
                            var index = domProp.get(this.selectNode, 'selectedIndex');

                            this.valueNode.innerHTML = this.optionNodes[index].innerHTML;
                        },

                        enable: function() {
                            domProp.set(this.selectNode, 'disabled');
                            domClass.remove(this.overlayNode, 'disabled');
                        },

                        disable: function() {
                            domProp.set(this.selectNode, 'disabled', 'true');
                            domClass.add(this.overlayNode, 'disabled');
                        }
                    });

                }
            );
        },
        'dojo/request/handlers': function() {
            define([
                '../json',
                '../_base/kernel',
                '../_base/array',
                '../has'
            ], function(JSON, kernel, array, has) {
                has.add('activex', typeof ActiveXObject !== 'undefined');

                var handleXML;
                if (has('activex')) {
                    // GUIDs obtained from http://msdn.microsoft.com/en-us/library/ms757837(VS.85).aspx
                    var dp = [
                        'Msxml2.DOMDocument.6.0',
                        'Msxml2.DOMDocument.4.0',
                        'MSXML2.DOMDocument.3.0',
                        'MSXML.DOMDocument' // 2.0
                    ];

                    handleXML = function(response) {
                        var result = response.data;

                        if (!result || !result.documentElement) {
                            var text = response.text;
                            array.some(dp, function(p) {
                                try {
                                    var dom = new ActiveXObject(p);
                                    dom.async = false;
                                    dom.loadXML(text);
                                    result = dom;
                                } catch (e) {
                                    return false;
                                }
                                return true;
                            });
                        }

                        return result;
                    };
                }

                var handlers = {
                    'javascript': function(response) {
                        return kernel.eval(response.text || '');
                    },
                    'json': function(response) {
                        return JSON.parse(response.text || null);
                    },
                    'xml': handleXML
                };

                function handle(response) {
                    var handler = handlers[response.options.handleAs];

                    response.data = handler ? handler(response) : (response.data || response.text);

                    return response;
                }

                handle.register = function(name, handler) {
                    handlers[name] = handler;
                };

                return handle;
            });

        },
        'dojo/date': function() {
            define(["./has", "./_base/lang"], function(has, lang) {
                // module:
                //		dojo/date

                var date = {
                    // summary:
                    //		Date manipulation utilities
                };

                date.getDaysInMonth = function( /*Date*/ dateObject) {
                    // summary:
                    //		Returns the number of days in the month used by dateObject
                    var month = dateObject.getMonth();
                    var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    if (month == 1 && date.isLeapYear(dateObject)) {
                        return 29;
                    } // Number
                    return days[month]; // Number
                };

                date.isLeapYear = function( /*Date*/ dateObject) {
                    // summary:
                    //		Determines if the year of the dateObject is a leap year
                    // description:
                    //		Leap years are years with an additional day YYYY-02-29, where the
                    //		year number is a multiple of four with the following exception: If
                    //		a year is a multiple of 100, then it is only a leap year if it is
                    //		also a multiple of 400. For example, 1900 was not a leap year, but
                    //		2000 is one.

                    var year = dateObject.getFullYear();
                    return !(year % 400) || (!(year % 4) && !!(year % 100)); // Boolean
                };

                // FIXME: This is not localized
                date.getTimezoneName = function( /*Date*/ dateObject) {
                    // summary:
                    //		Get the user's time zone as provided by the browser
                    // dateObject:
                    //		Needed because the timezone may vary with time (daylight savings)
                    // description:
                    //		Try to get time zone info from toString or toLocaleString method of
                    //		the Date object -- UTC offset is not a time zone.  See
                    //		http://www.twinsun.com/tz/tz-link.htm Note: results may be
                    //		inconsistent across browsers.

                    var str = dateObject.toString(); // Start looking in toString
                    var tz = ''; // The result -- return empty string if nothing found
                    var match;

                    // First look for something in parentheses -- fast lookup, no regex
                    var pos = str.indexOf('(');
                    if (pos > -1) {
                        tz = str.substring(++pos, str.indexOf(')'));
                    } else {
                        // If at first you don't succeed ...
                        // If IE knows about the TZ, it appears before the year
                        // Capital letters or slash before a 4-digit year
                        // at the end of string
                        var pat = /([A-Z\/]+) \d{4}$/;
                        if ((match = str.match(pat))) {
                            tz = match[1];
                        } else {
                            // Some browsers (e.g. Safari) glue the TZ on the end
                            // of toLocaleString instead of putting it in toString
                            str = dateObject.toLocaleString();
                            // Capital letters or slash -- end of string,
                            // after space
                            pat = / ([A-Z\/]+)$/;
                            if ((match = str.match(pat))) {
                                tz = match[1];
                            }
                        }
                    }

                    // Make sure it doesn't somehow end up return AM or PM
                    return (tz == 'AM' || tz == 'PM') ? '' : tz; // String
                };

                // Utility methods to do arithmetic calculations with Dates

                date.compare = function( /*Date*/ date1, /*Date?*/ date2, /*String?*/ portion) {
                    // summary:
                    //		Compare two date objects by date, time, or both.
                    // description:
                    //		Returns 0 if equal, positive if a > b, else negative.
                    // date1:
                    //		Date object
                    // date2:
                    //		Date object.  If not specified, the current Date is used.
                    // portion:
                    //		A string indicating the "date" or "time" portion of a Date object.
                    //		Compares both "date" and "time" by default.  One of the following:
                    //		"date", "time", "datetime"

                    // Extra step required in copy for IE - see #3112
                    date1 = new Date(+date1);
                    date2 = new Date(+(date2 || new Date()));

                    if (portion == "date") {
                        // Ignore times and compare dates.
                        date1.setHours(0, 0, 0, 0);
                        date2.setHours(0, 0, 0, 0);
                    } else if (portion == "time") {
                        // Ignore dates and compare times.
                        date1.setFullYear(0, 0, 0);
                        date2.setFullYear(0, 0, 0);
                    }

                    if (date1 > date2) {
                        return 1;
                    } // int
                    if (date1 < date2) {
                        return -1;
                    } // int
                    return 0; // int
                };

                date.add = function( /*Date*/ date, /*String*/ interval, /*int*/ amount) {
                    // summary:
                    //		Add to a Date in intervals of different size, from milliseconds to years
                    // date: Date
                    //		Date object to start with
                    // interval:
                    //		A string representing the interval.  One of the following:
                    //		"year", "month", "day", "hour", "minute", "second",
                    //		"millisecond", "quarter", "week", "weekday"
                    // amount:
                    //		How much to add to the date.

                    var sum = new Date(+date); // convert to Number before copying to accomodate IE (#3112)
                    var fixOvershoot = false;
                    var property = "Date";

                    switch (interval) {
                        case "day":
                            break;
                        case "weekday":
                            //i18n FIXME: assumes Saturday/Sunday weekend, but this is not always true.  see dojo/cldr/supplemental

                            // Divide the increment time span into weekspans plus leftover days
                            // e.g., 8 days is one 5-day weekspan / and two leftover days
                            // Can't have zero leftover days, so numbers divisible by 5 get
                            // a days value of 5, and the remaining days make up the number of weeks
                            var days, weeks;
                            var mod = amount % 5;
                            if (!mod) {
                                days = (amount > 0) ? 5 : -5;
                                weeks = (amount > 0) ? ((amount - 5) / 5) : ((amount + 5) / 5);
                            } else {
                                days = mod;
                                weeks = parseInt(amount / 5);
                            }
                            // Get weekday value for orig date param
                            var strt = date.getDay();
                            // Orig date is Sat / positive incrementer
                            // Jump over Sun
                            var adj = 0;
                            if (strt == 6 && amount > 0) {
                                adj = 1;
                            } else if (strt == 0 && amount < 0) {
                                // Orig date is Sun / negative incrementer
                                // Jump back over Sat
                                adj = -1;
                            }
                            // Get weekday val for the new date
                            var trgt = strt + days;
                            // New date is on Sat or Sun
                            if (trgt == 0 || trgt == 6) {
                                adj = (amount > 0) ? 2 : -2;
                            }
                            // Increment by number of weeks plus leftover days plus
                            // weekend adjustments
                            amount = (7 * weeks) + days + adj;
                            break;
                        case "year":
                            property = "FullYear";
                            // Keep increment/decrement from 2/29 out of March
                            fixOvershoot = true;
                            break;
                        case "week":
                            amount *= 7;
                            break;
                        case "quarter":
                            // Naive quarter is just three months
                            amount *= 3;
                            // fallthrough...
                        case "month":
                            // Reset to last day of month if you overshoot
                            fixOvershoot = true;
                            property = "Month";
                            break;
                            //		case "hour":
                            //		case "minute":
                            //		case "second":
                            //		case "millisecond":
                        default:
                            property = "UTC" + interval.charAt(0).toUpperCase() + interval.substring(1) + "s";
                    }

                    if (property) {
                        sum["set" + property](sum["get" + property]() + amount);
                    }

                    if (fixOvershoot && (sum.getDate() < date.getDate())) {
                        sum.setDate(0);
                    }

                    return sum; // Date
                };

                date.difference = function( /*Date*/ date1, /*Date?*/ date2, /*String?*/ interval) {
                    // summary:
                    //		Get the difference in a specific unit of time (e.g., number of
                    //		months, weeks, days, etc.) between two dates, rounded to the
                    //		nearest integer.
                    // date1:
                    //		Date object
                    // date2:
                    //		Date object.  If not specified, the current Date is used.
                    // interval:
                    //		A string representing the interval.  One of the following:
                    //		"year", "month", "day", "hour", "minute", "second",
                    //		"millisecond", "quarter", "week", "weekday"
                    //
                    //		Defaults to "day".

                    date2 = date2 || new Date();
                    interval = interval || "day";
                    var yearDiff = date2.getFullYear() - date1.getFullYear();
                    var delta = 1; // Integer return value

                    switch (interval) {
                        case "quarter":
                            var m1 = date1.getMonth();
                            var m2 = date2.getMonth();
                            // Figure out which quarter the months are in
                            var q1 = Math.floor(m1 / 3) + 1;
                            var q2 = Math.floor(m2 / 3) + 1;
                            // Add quarters for any year difference between the dates
                            q2 += (yearDiff * 4);
                            delta = q2 - q1;
                            break;
                        case "weekday":
                            var days = Math.round(date.difference(date1, date2, "day"));
                            var weeks = parseInt(date.difference(date1, date2, "week"));
                            var mod = days % 7;

                            // Even number of weeks
                            if (mod == 0) {
                                days = weeks * 5;
                            } else {
                                // Weeks plus spare change (< 7 days)
                                var adj = 0;
                                var aDay = date1.getDay();
                                var bDay = date2.getDay();

                                weeks = parseInt(days / 7);
                                mod = days % 7;
                                // Mark the date advanced by the number of
                                // round weeks (may be zero)
                                var dtMark = new Date(date1);
                                dtMark.setDate(dtMark.getDate() + (weeks * 7));
                                var dayMark = dtMark.getDay();

                                // Spare change days -- 6 or less
                                if (days > 0) {
                                    switch (true) {
                                        // Range starts on Sat
                                        case aDay == 6:
                                            adj = -1;
                                            break;
                                            // Range starts on Sun
                                        case aDay == 0:
                                            adj = 0;
                                            break;
                                            // Range ends on Sat
                                        case bDay == 6:
                                            adj = -1;
                                            break;
                                            // Range ends on Sun
                                        case bDay == 0:
                                            adj = -2;
                                            break;
                                            // Range contains weekend
                                        case (dayMark + mod) > 5:
                                            adj = -2;
                                    }
                                } else if (days < 0) {
                                    switch (true) {
                                        // Range starts on Sat
                                        case aDay == 6:
                                            adj = 0;
                                            break;
                                            // Range starts on Sun
                                        case aDay == 0:
                                            adj = 1;
                                            break;
                                            // Range ends on Sat
                                        case bDay == 6:
                                            adj = 2;
                                            break;
                                            // Range ends on Sun
                                        case bDay == 0:
                                            adj = 1;
                                            break;
                                            // Range contains weekend
                                        case (dayMark + mod) < 0:
                                            adj = 2;
                                    }
                                }
                                days += adj;
                                days -= (weeks * 2);
                            }
                            delta = days;
                            break;
                        case "year":
                            delta = yearDiff;
                            break;
                        case "month":
                            delta = (date2.getMonth() - date1.getMonth()) + (yearDiff * 12);
                            break;
                        case "week":
                            // Truncate instead of rounding
                            // Don't use Math.floor -- value may be negative
                            delta = parseInt(date.difference(date1, date2, "day") / 7);
                            break;
                        case "day":
                            delta /= 24;
                            // fallthrough
                        case "hour":
                            delta /= 60;
                            // fallthrough
                        case "minute":
                            delta /= 60;
                            // fallthrough
                        case "second":
                            delta /= 1000;
                            // fallthrough
                        case "millisecond":
                            delta *= date2.getTime() - date1.getTime();
                    }

                    // Round for fractional values and DST leaps
                    return Math.round(delta); // Number (integer)
                };

                // Don't use setObject() because it may overwrite dojo/date/stamp (if that has already been loaded)
                1 && lang.mixin(lang.getObject("dojo.date", true), date);

                return date;
            });

        },
        'dijit/Destroyable': function() {
            define("dijit/Destroyable", [
                "dojo/_base/array", // array.forEach array.map
                "dojo/aspect",
                "dojo/_base/declare"
            ], function(array, aspect, declare) {

                // module:
                //		dijit/Destroyable

                return declare("dijit.Destroyable", null, {
                    // summary:
                    //		Mixin to track handles and release them when instance is destroyed.
                    // description:
                    //		Call this.own(...) on list of handles (returned from dojo/aspect, dojo/on,
                    //		dojo/Stateful::watch, or any class (including widgets) with a destroyRecursive() or destroy() method.
                    //		Then call destroy() later to destroy this instance and release the resources.

                    destroy: function( /*Boolean*/ preserveDom) {
                        // summary:
                        //		Destroy this class, releasing any resources registered via own().
                        this._destroyed = true;
                    },

                    own: function() {
                        // summary:
                        //		Track specified handles and remove/destroy them when this instance is destroyed, unless they were
                        //		already removed/destroyed manually.
                        // tags:
                        //		protected
                        // returns:
                        //		The array of specified handles, so you can do for example:
                        //	|		var handle = this.own(on(...))[0];

                        array.forEach(arguments, function(handle) {
                            var destroyMethodName =
                                "destroyRecursive" in handle ? "destroyRecursive" : // remove "destroyRecursive" for 2.0
                                "destroy" in handle ? "destroy" :
                                "remove";

                            // When this.destroy() is called, destroy handle.  Since I'm using aspect.before(),
                            // the handle will be destroyed before a subclass's destroy() method starts running, before it calls
                            // this.inherited() or even if it doesn't call this.inherited() at all.  If that's an issue, make an
                            // onDestroy() method and connect to that instead.
                            var odh = aspect.before(this, "destroy", function(preserveDom) {
                                handle[destroyMethodName](preserveDom);
                            });

                            // If handle is destroyed manually before this.destroy() is called, remove the listener set directly above.
                            // This callback will also unnecessarily run when handle.destroyMethodName() is called from this.destroy(),
                            // but that's OK except maybe for performance.
                            aspect.after(handle, destroyMethodName, function() {
                                odh.remove();
                            }, true);
                        }, this);

                        return arguments; // handle
                    }
                });

            });

        },
        'url:hsbcwidget/themes/ursula/templates/randCharChal2.html': "<div class=\"securityDetails row\">\r\n    <div class=\"question clearfix containerStyle17 jsQuestion questionGroupButtom\">\r\n     <h4 class=\"headingStyle03 headingStyle03Font FontRed\">${staticTemplateData.pleaseEnter} </h4>\r\n        <p class=\"label\">${staticTemplateData.enterPassword}</p>\r\n        <div class=\"textinputSection jsInputWrapper\">\r\n                        <div class=\"textInput\">\r\n<fieldset>\r\n                                <legend class=\"hidden\">${staticTemplateData.rcc_accessiblity_enter_characters}</legend>\r\n                                 <label class=\"hidden\" for=\"pass1\">${staticTemplateData.rcc_accessiblity_char_1}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass1\" id=\"pass1\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass1}\">\r\n                                <label class=\"hidden\" for=\"pass2\">${staticTemplateData.rcc_accessiblity_char_2}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass2\" id=\"pass2\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass2}\">\r\n                                <label class=\"hidden\" for=\"pass3\">${staticTemplateData.rcc_accessiblity_char_3}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass3\" id=\"pass3\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass3}\">\r\n                                <label class=\"hidden\" for=\"pass4\">${staticTemplateData.rcc_accessiblity_char_4}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass4\" id=\"pass4\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass4}\">\r\n                                <label class=\"hidden\" for=\"pass5\">${staticTemplateData.rcc_accessiblity_char_5}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass5\" id=\"pass5\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass5}\">\r\n                                <label class=\"hidden\" for=\"pass6\">${staticTemplateData.rcc_accessiblity_char_6}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass6\" id=\"pass6\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass6}\">\r\n                                <span class=\"dotted\">&hellip;</span>\r\n                                <label class=\"hidden\" for=\"pass7\">${staticTemplateData.rcc_accessiblity_char_second_last}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass7\" id=\"pass7\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass7}\">\r\n                                <label class=\"hidden\" for=\"pass8\">${staticTemplateData.rcc_accessiblity_char_last}</label>\r\n                                <input type=\"password\" value=\"\" name=\"pass8\" id=\"pass8\" class=\"smallestInput\" disabled=\"disabled\" maxlength=\"1\" title=\"${staticTemplateData.pass8}\">\r\n                                </fieldset>\r\n                        </div>\r\n                        \t\t\t<div role=\"alert\" aria-hidden=\"false\" class=\"rValidationMsg ValidationMsgHide dijitTooltip dijitTooltipRight RCCTooltipWidth\">\r\n\t\t\t\t\t\t\t<div align=\"left\"  class=\"dijitTooltipContainer dijitTooltipContents\">${staticTemplateData.validationMsg}</div>\r\n\t\t\t\t\t\t\t<div class=\"dijitTooltipConnector\"></div>\r\n\t\t\t</div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n",
        'dijit/layout/_ContentPaneResizeMixin': function() {
            define("dijit/layout/_ContentPaneResizeMixin", [
                "dojo/_base/array", // array.filter array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.contains domClass.toggle
                "dojo/dom-geometry", // domGeometry.contentBox domGeometry.marginBox
                "dojo/dom-style",
                "dojo/_base/lang", // lang.mixin
                "dojo/query", // query
                "dojo/sniff", // has("ie")
                "../registry", // registry.byId
                "../Viewport",
                "./utils" // marginBox2contextBox
            ], function(array, declare, domClass, domGeometry, domStyle, lang, query, has,
                registry, Viewport, layoutUtils) {

                // module:
                //		dijit/layout/_ContentPaneResizeMixin


                return declare("dijit.layout._ContentPaneResizeMixin", null, {
                    // summary:
                    //		Resize() functionality of ContentPane.   If there's a single layout widget
                    //		child then it will call resize() with the same dimensions as the ContentPane.
                    //		Otherwise just calls resize on each child.
                    //
                    //		Also implements basic startup() functionality, where starting the parent
                    //		will start the children

                    // doLayout: Boolean
                    //		- false - don't adjust size of children
                    //		- true - if there is a single visible child widget, set it's size to however big the ContentPane is
                    doLayout: true,

                    // isLayoutContainer: [protected] Boolean
                    //		Indicates that this widget will call resize() on it's child widgets
                    //		when they become visible.
                    isLayoutContainer: true,

                    startup: function() {
                        // summary:
                        //		See `dijit/layout/_LayoutWidget.startup()` for description.
                        //		Although ContentPane doesn't extend _LayoutWidget, it does implement
                        //		the same API.

                        if (this._started) {
                            return;
                        }

                        var parent = this.getParent();
                        this._childOfLayoutWidget = parent && parent.isLayoutContainer;

                        // I need to call resize() on my child/children (when I become visible), unless
                        // I'm the child of a layout widget in which case my parent will call resize() on me and I'll do it then.
                        this._needLayout = !this._childOfLayoutWidget;

                        this.inherited(arguments);

                        if (this._isShown()) {
                            this._onShow();
                        }

                        if (!this._childOfLayoutWidget) {
                            // Since my parent isn't a layout container, and my style *may be* width=height=100%
                            // or something similar (either set directly or via a CSS class),
                            // monitor when viewport size changes so that I can re-layout.
                            // This is more for subclasses of ContentPane than ContentPane itself, although it
                            // could be useful for a ContentPane if it has a single child widget inheriting ContentPane's size.
                            this.own(Viewport.on("resize", lang.hitch(this, "resize")));
                        }
                    },

                    _checkIfSingleChild: function() {
                        // summary:
                        //		Test if we have exactly one visible widget as a child,
                        //		and if so assume that we are a container for that widget,
                        //		and should propagate startup() and resize() calls to it.
                        //		Skips over things like data stores since they aren't visible.

                        var candidateWidgets = [],
                            otherVisibleNodes = false;

                        query("> *", this.containerNode).some(function(node) {
                            var widget = registry.byNode(node);
                            if (widget && widget.resize) {
                                candidateWidgets.push(widget);
                            } else if (node.offsetHeight) {
                                otherVisibleNodes = true;
                            }
                        });

                        this._singleChild = candidateWidgets.length == 1 && !otherVisibleNodes ?
                            candidateWidgets[0] : null;

                        // So we can set overflow: hidden to avoid a safari bug w/scrollbars showing up (#9449)
                        domClass.toggle(this.containerNode, this.baseClass + "SingleChild", !!this._singleChild);
                    },

                    resize: function(changeSize, resultSize) {
                        // summary:
                        //		See `dijit/layout/_LayoutWidget.resize()` for description.
                        //		Although ContentPane doesn't extend _LayoutWidget, it does implement
                        //		the same API.

                        this._resizeCalled = true;

                        this._scheduleLayout(changeSize, resultSize);
                    },

                    _scheduleLayout: function(changeSize, resultSize) {
                        // summary:
                        //		Resize myself, and call resize() on each of my child layout widgets, either now
                        //		(if I'm currently visible) or when I become visible
                        if (this._isShown()) {
                            this._layout(changeSize, resultSize);
                        } else {
                            this._needLayout = true;
                            this._changeSize = changeSize;
                            this._resultSize = resultSize;
                        }
                    },

                    _layout: function(changeSize, resultSize) {
                        // summary:
                        //		Resize myself according to optional changeSize/resultSize parameters, like a layout widget.
                        //		Also, since I am an isLayoutContainer widget, each of my children expects me to
                        //		call resize() or layout() on it.
                        //
                        //		Should be called on initialization and also whenever we get new content
                        //		(from an href, or from set('content', ...))... but deferred until
                        //		the ContentPane is visible

                        delete this._needLayout;

                        // For the TabContainer --> BorderContainer --> ContentPane case, _onShow() is
                        // never called directly, so resize() is our trigger to do the initial href download (see [20099]).
                        // However, don't load href for closed TitlePanes.
                        if (!this._wasShown && this.open !== false) {
                            this._onShow();
                        }

                        // Set margin box size, unless it wasn't specified, in which case use current size.
                        if (changeSize) {
                            domGeometry.setMarginBox(this.domNode, changeSize);
                        }

                        // Compute content box size of containerNode in case we [later] need to size our single child.
                        var cn = this.containerNode;
                        if (cn === this.domNode) {
                            // If changeSize or resultSize was passed to this method and this.containerNode ==
                            // this.domNode then we can compute the content-box size without querying the node,
                            // which is more reliable (similar to LayoutWidget.resize) (see for example #9449).
                            var mb = resultSize || {};
                            lang.mixin(mb, changeSize || {}); // changeSize overrides resultSize
                            if (!("h" in mb) || !("w" in mb)) {
                                mb = lang.mixin(domGeometry.getMarginBox(cn), mb); // just use domGeometry.setMarginBox() to fill in missing values
                            }
                            this._contentBox = layoutUtils.marginBox2contentBox(cn, mb);
                        } else {
                            this._contentBox = domGeometry.getContentBox(cn);
                        }

                        this._layoutChildren();
                    },

                    _layoutChildren: function() {
                        // Call _checkIfSingleChild() again in case app has manually mucked w/the content
                        // of the ContentPane (rather than changing it through the set("content", ...) API.
                        if (this.doLayout) {
                            this._checkIfSingleChild();
                        }

                        if (this._singleChild && this._singleChild.resize) {
                            var cb = this._contentBox || domGeometry.getContentBox(this.containerNode);

                            // note: if widget has padding this._contentBox will have l and t set,
                            // but don't pass them to resize() or it will doubly-offset the child
                            this._singleChild.resize({
                                w: cb.w,
                                h: cb.h
                            });
                        } else {
                            // All my child widgets are independently sized (rather than matching my size),
                            // but I still need to call resize() on each child to make it layout.
                            array.forEach(this.getChildren(), function(widget) {
                                if (widget.resize) {
                                    widget.resize();
                                }
                            });
                        }
                    },

                    _isShown: function() {
                        // summary:
                        //		Returns true if the content is currently shown.
                        // description:
                        //		If I am a child of a layout widget then it actually returns true if I've ever been visible,
                        //		not whether I'm currently visible, since that's much faster than tracing up the DOM/widget
                        //		tree every call, and at least solves the performance problem on page load by deferring loading
                        //		hidden ContentPanes until they are first shown

                        if (this._childOfLayoutWidget) {
                            // If we are TitlePane, etc - we return that only *IF* we've been resized
                            if (this._resizeCalled && "open" in this) {
                                return this.open;
                            }
                            return this._resizeCalled;
                        } else if ("open" in this) {
                            return this.open; // for TitlePane, etc.
                        } else {
                            var node = this.domNode,
                                parent = this.domNode.parentNode;
                            return (node.style.display != 'none') && (node.style.visibility != 'hidden') && !domClass.contains(node, "dijitHidden") &&
                                parent && parent.style && (parent.style.display != 'none');
                        }
                    },

                    _onShow: function() {
                        // summary:
                        //		Called when the ContentPane is made visible
                        // description:
                        //		For a plain ContentPane, this is called on initialization, from startup().
                        //		If the ContentPane is a hidden pane of a TabContainer etc., then it's
                        //		called whenever the pane is made visible.
                        //
                        //		Does layout/resize of child widget(s)

                        // Need to keep track of whether ContentPane has been shown (which is different than
                        // whether or not it's currently visible).
                        this._wasShown = true;

                        if (this._needLayout) {
                            // If a layout has been scheduled for when we become visible, do it now
                            this._layout(this._changeSize, this._resultSize);
                        }

                        this.inherited(arguments);
                    }
                });

            });

        },
        'dijit/WidgetSet': function() {
            define("dijit/WidgetSet", [
                "dojo/_base/array", // array.forEach array.map
                "dojo/_base/declare", // declare
                "dojo/_base/kernel", // kernel.global
                "./registry" // to add functions to dijit.registry
            ], function(array, declare, kernel, registry) {

                // module:
                //		dijit/WidgetSet

                var WidgetSet = declare("dijit.WidgetSet", null, {
                    // summary:
                    //		A set of widgets indexed by id.
                    //		Deprecated, will be removed in 2.0.
                    //
                    // example:
                    //		Create a small list of widgets:
                    //		|	require(["dijit/WidgetSet", "dijit/registry"],
                    //		|		function(WidgetSet, registry){
                    //		|		var ws = new WidgetSet();
                    //		|		ws.add(registry.byId("one"));
                    //		|		ws.add(registry.byId("two"));
                    //		|		// destroy both:
                    //		|		ws.forEach(function(w){ w.destroy(); });
                    //		|	});

                    constructor: function() {
                        this._hash = {};
                        this.length = 0;
                    },

                    add: function( /*dijit/_WidgetBase*/ widget) {
                        // summary:
                        //		Add a widget to this list. If a duplicate ID is detected, a error is thrown.
                        //
                        // widget: dijit/_WidgetBase
                        //		Any dijit/_WidgetBase subclass.
                        if (this._hash[widget.id]) {
                            throw new Error("Tried to register widget with id==" + widget.id + " but that id is already registered");
                        }
                        this._hash[widget.id] = widget;
                        this.length++;
                    },

                    remove: function( /*String*/ id) {
                        // summary:
                        //		Remove a widget from this WidgetSet. Does not destroy the widget; simply
                        //		removes the reference.
                        if (this._hash[id]) {
                            delete this._hash[id];
                            this.length--;
                        }
                    },

                    forEach: function( /*Function*/ func, /* Object? */ thisObj) {
                        // summary:
                        //		Call specified function for each widget in this set.
                        //
                        // func:
                        //		A callback function to run for each item. Is passed the widget, the index
                        //		in the iteration, and the full hash, similar to `array.forEach`.
                        //
                        // thisObj:
                        //		An optional scope parameter
                        //
                        // example:
                        //		Using the default `dijit.registry` instance:
                        //		|	require(["dijit/WidgetSet", "dijit/registry"],
                        //		|		function(WidgetSet, registry){
                        //		|		registry.forEach(function(widget){
                        //		|			console.log(widget.declaredClass);
                        //		|		});
                        //		|	});
                        //
                        // returns:
                        //		Returns self, in order to allow for further chaining.

                        thisObj = thisObj || kernel.global;
                        var i = 0,
                            id;
                        for (id in this._hash) {
                            func.call(thisObj, this._hash[id], i++, this._hash);
                        }
                        return this; // dijit/WidgetSet
                    },

                    filter: function( /*Function*/ filter, /* Object? */ thisObj) {
                        // summary:
                        //		Filter down this WidgetSet to a smaller new WidgetSet
                        //		Works the same as `array.filter` and `NodeList.filter`
                        //
                        // filter:
                        //		Callback function to test truthiness. Is passed the widget
                        //		reference and the pseudo-index in the object.
                        //
                        // thisObj: Object?
                        //		Option scope to use for the filter function.
                        //
                        // example:
                        //		Arbitrary: select the odd widgets in this list
                        //		|	
                        //		|		
                        //		|	
                        //		|	require(["dijit/WidgetSet", "dijit/registry"],
                        //		|		function(WidgetSet, registry){
                        //		|		registry.filter(function(w, i){
                        //		|			return i % 2 == 0;
                        //		|		}).forEach(function(w){ /* odd ones */ });
                        //		|	});

                        thisObj = thisObj || kernel.global;
                        var res = new WidgetSet(),
                            i = 0,
                            id;
                        for (id in this._hash) {
                            var w = this._hash[id];
                            if (filter.call(thisObj, w, i++, this._hash)) {
                                res.add(w);
                            }
                        }
                        return res; // dijit/WidgetSet
                    },

                    byId: function( /*String*/ id) {
                        // summary:
                        //		Find a widget in this list by it's id.
                        // example:
                        //		Test if an id is in a particular WidgetSet
                        //		|	require(["dijit/WidgetSet", "dijit/registry"],
                        //		|		function(WidgetSet, registry){
                        //		|		var ws = new WidgetSet();
                        //		|		ws.add(registry.byId("bar"));
                        //		|		var t = ws.byId("bar") // returns a widget
                        //		|		var x = ws.byId("foo"); // returns undefined
                        //		|	});

                        return this._hash[id]; // dijit/_WidgetBase
                    },

                    byClass: function( /*String*/ cls) {
                        // summary:
                        //		Reduce this widgetset to a new WidgetSet of a particular `declaredClass`
                        //
                        // cls: String
                        //		The Class to scan for. Full dot-notated string.
                        //
                        // example:
                        //		Find all `dijit.TitlePane`s in a page:
                        //		|	require(["dijit/WidgetSet", "dijit/registry"],
                        //		|		function(WidgetSet, registry){
                        //		|		registry.byClass("dijit.TitlePane").forEach(function(tp){ tp.close(); });
                        //		|	});

                        var res = new WidgetSet(),
                            id, widget;
                        for (id in this._hash) {
                            widget = this._hash[id];
                            if (widget.declaredClass == cls) {
                                res.add(widget);
                            }
                        }
                        return res; // dijit/WidgetSet
                    },

                    toArray: function() {
                        // summary:
                        //		Convert this WidgetSet into a true Array
                        //
                        // example:
                        //		Work with the widget .domNodes in a real Array
                        //		|	require(["dijit/WidgetSet", "dijit/registry"],
                        //		|		function(WidgetSet, registry){
                        //		|		array.map(registry.toArray(), function(w){ return w.domNode; });
                        //		|	});


                        var ar = [];
                        for (var id in this._hash) {
                            ar.push(this._hash[id]);
                        }
                        return ar; // dijit/_WidgetBase[]
                    },

                    map: function( /* Function */ func, /* Object? */ thisObj) {
                        // summary:
                        //		Create a new Array from this WidgetSet, following the same rules as `array.map`
                        // example:
                        //		|	require(["dijit/WidgetSet", "dijit/registry"],
                        //		|		function(WidgetSet, registry){
                        //		|		var nodes = registry.map(function(w){ return w.domNode; });
                        //		|	});
                        //
                        // returns:
                        //		A new array of the returned values.
                        return array.map(this.toArray(), func, thisObj); // Array
                    },

                    every: function(func, thisObj) {
                        // summary:
                        //		A synthetic clone of `array.every` acting explicitly on this WidgetSet
                        //
                        // func: Function
                        //		A callback function run for every widget in this list. Exits loop
                        //		when the first false return is encountered.
                        //
                        // thisObj: Object?
                        //		Optional scope parameter to use for the callback

                        thisObj = thisObj || kernel.global;
                        var x = 0,
                            i;
                        for (i in this._hash) {
                            if (!func.call(thisObj, this._hash[i], x++, this._hash)) {
                                return false; // Boolean
                            }
                        }
                        return true; // Boolean
                    },

                    some: function(func, thisObj) {
                        // summary:
                        //		A synthetic clone of `array.some` acting explicitly on this WidgetSet
                        //
                        // func: Function
                        //		A callback function run for every widget in this list. Exits loop
                        //		when the first true return is encountered.
                        //
                        // thisObj: Object?
                        //		Optional scope parameter to use for the callback

                        thisObj = thisObj || kernel.global;
                        var x = 0,
                            i;
                        for (i in this._hash) {
                            if (func.call(thisObj, this._hash[i], x++, this._hash)) {
                                return true; // Boolean
                            }
                        }
                        return false; // Boolean
                    }

                });

                // Add in 1.x compatibility methods to dijit/registry.
                // These functions won't show up in the API doc but since they are deprecated anyway,
                // that's probably for the best.
                array.forEach(["forEach", "filter", "byClass", "map", "every", "some"], function(func) {
                    registry[func] = WidgetSet.prototype[func];
                });


                return WidgetSet;
            });

        },
        'dijit/form/RangeBoundTextBox': function() {
            define("dijit/form/RangeBoundTextBox", [
                "dojo/_base/declare", // declare
                "dojo/i18n", // i18n.getLocalization
                "./MappedTextBox"
            ], function(declare, i18n, MappedTextBox) {

                // module:
                //		dijit/form/RangeBoundTextBox


                var RangeBoundTextBox = declare("dijit.form.RangeBoundTextBox", MappedTextBox, {
                    // summary:
                    //		Base class for textbox form widgets which defines a range of valid values.

                    // rangeMessage: String
                    //		The message to display if value is out-of-range
                    rangeMessage: "",

                    /*=====
                    // constraints: RangeBoundTextBox.__Constraints
                    constraints: {},
                    ======*/

                    rangeCheck: function( /*Number*/ primitive, /*dijit/form/RangeBoundTextBox.__Constraints*/ constraints) {
                        // summary:
                        //		Overridable function used to validate the range of the numeric input value.
                        // tags:
                        //		protected
                        return ("min" in constraints ? (this.compare(primitive, constraints.min) >= 0) : true) &&
                            ("max" in constraints ? (this.compare(primitive, constraints.max) <= 0) : true); // Boolean
                    },

                    isInRange: function( /*Boolean*/ /*===== isFocused =====*/ ) {
                        // summary:
                        //		Tests if the value is in the min/max range specified in constraints
                        // tags:
                        //		protected
                        return this.rangeCheck(this.get('value'), this.constraints);
                    },

                    _isDefinitelyOutOfRange: function() {
                        // summary:
                        //		Returns true if the value is out of range and will remain
                        //		out of range even if the user types more characters
                        var val = this.get('value');
                        if (val == null) {
                            return false;
                        } // not yet valid enough to compare to
                        var outOfRange = false;
                        if ("min" in this.constraints) {
                            var min = this.constraints.min;
                            outOfRange = this.compare(val, ((typeof min == "number") && min >= 0 && val != 0) ? 0 : min) < 0;
                        }
                        if (!outOfRange && ("max" in this.constraints)) {
                            var max = this.constraints.max;
                            outOfRange = this.compare(val, ((typeof max != "number") || max > 0) ? max : 0) > 0;
                        }
                        return outOfRange;
                    },

                    _isValidSubset: function() {
                        // summary:
                        //		Overrides `dijit/form/ValidationTextBox._isValidSubset()`.
                        //		Returns true if the input is syntactically valid, and either within
                        //		range or could be made in range by more typing.
                        return this.inherited(arguments) && !this._isDefinitelyOutOfRange();
                    },

                    isValid: function( /*Boolean*/ isFocused) {
                        // Overrides dijit/form/ValidationTextBox.isValid() to check that the value is also in range.
                        return this.inherited(arguments) &&
                            ((this._isEmpty(this.textbox.value) && !this.required) || this.isInRange(isFocused)); // Boolean
                    },

                    getErrorMessage: function( /*Boolean*/ isFocused) {
                        // Overrides dijit/form/ValidationTextBox.getErrorMessage() to print "out of range" message if appropriate
                        var v = this.get('value');
                        if (v != null /* and !undefined */ && v !== '' && (typeof v != "number" || !isNaN(v)) && !this.isInRange(isFocused)) { // don't check isInRange w/o a real value
                            return this.rangeMessage; // String
                        }
                        return this.inherited(arguments);
                    },

                    postMixInProperties: function() {
                        this.inherited(arguments);
                        if (!this.rangeMessage) {
                            this.messages = i18n.getLocalization("dijit.form", "validate", this.lang);
                            this.rangeMessage = this.messages.rangeMessage;
                        }
                    },

                    _setConstraintsAttr: function( /*Object*/ constraints) {
                        this.inherited(arguments);
                        if (this.focusNode) { // not set when called from postMixInProperties
                            if (this.constraints.min !== undefined) {
                                this.focusNode.setAttribute("aria-valuemin", this.constraints.min);
                            } else {
                                this.focusNode.removeAttribute("aria-valuemin");
                            }
                            if (this.constraints.max !== undefined) {
                                this.focusNode.setAttribute("aria-valuemax", this.constraints.max);
                            } else {
                                this.focusNode.removeAttribute("aria-valuemax");
                            }
                        }
                    },

                    _setValueAttr: function( /*Number*/ value, /*Boolean?*/ priorityChange) {
                        // summary:
                        //		Hook so set('value', ...) works.

                        this.focusNode.setAttribute("aria-valuenow", value);
                        this.inherited(arguments);
                    },

                    applyTextDir: function( /*===== element, text =====*/ ) {
                        // summary:
                        //		The function overridden in the _BidiSupport module,
                        //		originally used for setting element.dir according to this.textDir.
                        //		In this case does nothing.
                        // element: Object
                        // text: String
                        // tags:
                        //		protected.
                    }
                });
                /*=====
                RangeBoundTextBox.__Constraints = declare(null, {
                	// min: Number
                	//		Minimum signed value.  Default is -Infinity
                	// max: Number
                	//		Maximum signed value.  Default is +Infinity
                });
                =====*/
                return RangeBoundTextBox;
            });

        },
        'dijit/nls/loading': function() {
            define("dijit/nls/loading", {
                root:
                    //begin v1.x content
                    ({
                        loadingState: "Loading...",
                        errorState: "Sorry, an error occurred"
                    })
                    //end v1.x content
                    ,
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });

        },
        'dojo/dnd/Moveable': function() {
            define("dojo/dnd/Moveable", [
                "../_base/array", "../_base/declare", "../_base/event", "../_base/lang",
                "../dom", "../dom-class", "../Evented", "../on", "../topic", "../touch", "./common", "./Mover", "../_base/window"
            ], function(array, declare, event, lang, dom, domClass, Evented, on, topic, touch, dnd, Mover, win) {

                // module:
                //		dojo/dnd/Moveable


                var Moveable = declare("dojo.dnd.Moveable", [Evented], {
                    // summary:
                    //		an object, which makes a node movable

                    // object attributes (for markup)
                    handle: "",
                    delay: 0,
                    skip: false,

                    constructor: function(node, params) {
                        // node: Node
                        //		a node (or node's id) to be moved
                        // params: Moveable.__MoveableArgs?
                        //		optional parameters
                        this.node = dom.byId(node);
                        if (!params) {
                            params = {};
                        }
                        this.handle = params.handle ? dom.byId(params.handle) : null;
                        if (!this.handle) {
                            this.handle = this.node;
                        }
                        this.delay = params.delay > 0 ? params.delay : 0;
                        this.skip = params.skip;
                        this.mover = params.mover ? params.mover : Mover;
                        this.events = [
                            on(this.handle, touch.press, lang.hitch(this, "onMouseDown")),
                            // cancel text selection and text dragging
                            on(this.handle, "dragstart", lang.hitch(this, "onSelectStart")),
                            on(this.handle, "selectstart", lang.hitch(this, "onSelectStart"))
                        ];
                    },

                    // markup methods
                    markupFactory: function(params, node, Ctor) {
                        return new Ctor(node, params);
                    },

                    // methods
                    destroy: function() {
                        // summary:
                        //		stops watching for possible move, deletes all references, so the object can be garbage-collected
                        array.forEach(this.events, function(handle) {
                            handle.remove();
                        });
                        this.events = this.node = this.handle = null;
                    },

                    // mouse event processors
                    onMouseDown: function(e) {
                        // summary:
                        //		event processor for onmousedown/ontouchstart, creates a Mover for the node
                        // e: Event
                        //		mouse/touch event
                        if (this.skip && dnd.isFormElement(e)) {
                            return;
                        }
                        if (this.delay) {
                            this.events.push(
                                on(this.handle, touch.move, lang.hitch(this, "onMouseMove")),
                                on(this.handle, touch.release, lang.hitch(this, "onMouseUp"))
                            );
                            this._lastX = e.pageX;
                            this._lastY = e.pageY;
                        } else {
                            this.onDragDetected(e);
                        }
                        event.stop(e);
                    },
                    onMouseMove: function(e) {
                        // summary:
                        //		event processor for onmousemove/ontouchmove, used only for delayed drags
                        // e: Event
                        //		mouse/touch event
                        if (Math.abs(e.pageX - this._lastX) > this.delay || Math.abs(e.pageY - this._lastY) > this.delay) {
                            this.onMouseUp(e);
                            this.onDragDetected(e);
                        }
                        event.stop(e);
                    },
                    onMouseUp: function(e) {
                        // summary:
                        //		event processor for onmouseup, used only for delayed drags
                        // e: Event
                        //		mouse event
                        for (var i = 0; i < 2; ++i) {
                            this.events.pop().remove();
                        }
                        event.stop(e);
                    },
                    onSelectStart: function(e) {
                        // summary:
                        //		event processor for onselectevent and ondragevent
                        // e: Event
                        //		mouse event
                        if (!this.skip || !dnd.isFormElement(e)) {
                            event.stop(e);
                        }
                    },

                    // local events
                    onDragDetected: function( /*Event*/ e) {
                        // summary:
                        //		called when the drag is detected;
                        //		responsible for creation of the mover
                        new this.mover(this.node, e, this);
                    },
                    onMoveStart: function( /*Mover*/ mover) {
                        // summary:
                        //		called before every move operation
                        topic.publish("/dnd/move/start", mover);
                        domClass.add(win.body(), "dojoMove");
                        domClass.add(this.node, "dojoMoveItem");
                    },
                    onMoveStop: function( /*Mover*/ mover) {
                        // summary:
                        //		called after every move operation
                        topic.publish("/dnd/move/stop", mover);
                        domClass.remove(win.body(), "dojoMove");
                        domClass.remove(this.node, "dojoMoveItem");
                    },
                    onFirstMove: function( /*===== mover, e =====*/ ) {
                        // summary:
                        //		called during the very first move notification;
                        //		can be used to initialize coordinates, can be overwritten.
                        // mover: Mover
                        // e: Event

                        // default implementation does nothing
                    },
                    onMove: function(mover, leftTop /*=====, e =====*/ ) {
                        // summary:
                        //		called during every move notification;
                        //		should actually move the node; can be overwritten.
                        // mover: Mover
                        // leftTop: Object
                        // e: Event
                        this.onMoving(mover, leftTop);
                        var s = mover.node.style;
                        s.left = leftTop.l + "px";
                        s.top = leftTop.t + "px";
                        this.onMoved(mover, leftTop);
                    },
                    onMoving: function( /*===== mover, leftTop =====*/ ) {
                        // summary:
                        //		called before every incremental move; can be overwritten.
                        // mover: Mover
                        // leftTop: Object

                        // default implementation does nothing
                    },
                    onMoved: function( /*===== mover, leftTop =====*/ ) {
                        // summary:
                        //		called after every incremental move; can be overwritten.
                        // mover: Mover
                        // leftTop: Object

                        // default implementation does nothing
                    }
                });

                /*=====
                Moveable.__MoveableArgs = declare([], {
                	// handle: Node||String
                	//		A node (or node's id), which is used as a mouse handle.
                	//		If omitted, the node itself is used as a handle.
                	handle: null,

                	// delay: Number
                	//		delay move by this number of pixels
                	delay: 0,

                	// skip: Boolean
                	//		skip move of form elements
                	skip: false,

                	// mover: Object
                	//		a constructor of custom Mover
                	mover: dnd.Mover
                });
                =====*/

                return Moveable;
            });

        },
        'dijit/TooltipDialog': function() {
            require({
                cache: {
                    'url:dijit/templates/TooltipDialog.html': "<div role=\"presentation\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" data-dojo-attach-point=\"containerNode\" role=\"dialog\"></div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\" data-dojo-attach-point=\"connectorNode\"></div>\n</div>\n"
                }
            });
            define("dijit/TooltipDialog", [
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.replace
                "dojo/_base/event", // event.stop
                "dojo/keys", // keys
                "dojo/_base/lang", // lang.hitch
                "./focus",
                "./layout/ContentPane",
                "./_DialogMixin",
                "./form/_FormMixin",
                "./_TemplatedMixin",
                "dojo/text!./templates/TooltipDialog.html",
                "./main" // exports methods to dijit global
            ], function(declare, domClass, event, keys, lang,
                focus, ContentPane, _DialogMixin, _FormMixin, _TemplatedMixin, template, dijit) {

                // module:
                //		dijit/TooltipDialog


                return declare("dijit.TooltipDialog", [ContentPane, _TemplatedMixin, _FormMixin, _DialogMixin], {
                    // summary:
                    //		Pops up a dialog that appears like a Tooltip

                    // title: String
                    //		Description of tooltip dialog (required for a11y)
                    title: "",

                    // doLayout: [protected] Boolean
                    //		Don't change this parameter from the default value.
                    //		This ContentPane parameter doesn't make sense for TooltipDialog, since TooltipDialog
                    //		is never a child of a layout container, nor can you specify the size of
                    //		TooltipDialog in order to control the size of an inner widget.
                    doLayout: false,

                    // autofocus: Boolean
                    //		A Toggle to modify the default focus behavior of a Dialog, which
                    //		is to focus on the first dialog element after opening the dialog.
                    //		False will disable autofocusing.  Default: true.
                    autofocus: true,

                    // baseClass: [protected] String
                    //		The root className to use for the various states of this widget
                    baseClass: "dijitTooltipDialog",

                    // _firstFocusItem: [private readonly] DomNode
                    //		The pointer to the first focusable node in the dialog.
                    //		Set by `dijit/_DialogMixin._getFocusItems()`.
                    _firstFocusItem: null,

                    // _lastFocusItem: [private readonly] DomNode
                    //		The pointer to which node has focus prior to our dialog.
                    //		Set by `dijit/_DialogMixin._getFocusItems()`.
                    _lastFocusItem: null,

                    templateString: template,

                    _setTitleAttr: function( /*String*/ title) {
                        this.containerNode.title = title;
                        this._set("title", title);
                    },

                    postCreate: function() {
                        this.inherited(arguments);
                        this.connect(this.containerNode, "onkeypress", "_onKey");
                    },

                    orient: function( /*DomNode*/ node, /*String*/ aroundCorner, /*String*/ tooltipCorner) {
                        // summary:
                        //		Configure widget to be displayed in given position relative to the button.
                        //		This is called from the dijit.popup code, and should not be called
                        //		directly.
                        // tags:
                        //		protected

                        // Note: intentionally not using dijitTooltip class since that sets position:absolute, which
                        // confuses dijit/popup trying to get the size of the tooltip.
                        var newC = {
                            "MR-ML": "dijitTooltipRight",
                            "ML-MR": "dijitTooltipLeft",
                            "TM-BM": "dijitTooltipAbove",
                            "BM-TM": "dijitTooltipBelow",
                            "BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
                            "TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
                            "BR-TR": "dijitTooltipBelow dijitTooltipABRight",
                            "TR-BR": "dijitTooltipAbove dijitTooltipABRight",
                            "BR-BL": "dijitTooltipRight",
                            "BL-BR": "dijitTooltipLeft"
                        }[aroundCorner + "-" + tooltipCorner];

                        domClass.replace(this.domNode, newC, this._currentOrientClass || "");
                        this._currentOrientClass = newC;

                        // Tooltip.orient() has code to reposition connector for when Tooltip is before/after anchor.
                        // Not putting here to avoid code bloat, and since TooltipDialogs are generally above/below.
                        // Should combine code from Tooltip and TooltipDialog.
                    },

                    focus: function() {
                        // summary:
                        //		Focus on first field
                        this._getFocusItems(this.containerNode);
                        focus.focus(this._firstFocusItem);
                    },

                    onOpen: function( /*Object*/ pos) {
                        // summary:
                        //		Called when dialog is displayed.
                        //		This is called from the dijit.popup code, and should not be called directly.
                        // tags:
                        //		protected

                        this.orient(this.domNode, pos.aroundCorner, pos.corner);

                        // Position the tooltip connector for middle alignment.
                        // This could not have been done in orient() since the tooltip wasn't positioned at that time.
                        var aroundNodeCoords = pos.aroundNodePos;
                        if (pos.corner.charAt(0) == 'M' && pos.aroundCorner.charAt(0) == 'M') {
                            this.connectorNode.style.top = aroundNodeCoords.y + ((aroundNodeCoords.h - this.connectorNode.offsetHeight) >> 1) - pos.y + "px";
                            this.connectorNode.style.left = "";
                        } else if (pos.corner.charAt(1) == 'M' && pos.aroundCorner.charAt(1) == 'M') {
                            this.connectorNode.style.left = aroundNodeCoords.x + ((aroundNodeCoords.w - this.connectorNode.offsetWidth) >> 1) - pos.x + "px";
                        }

                        this._onShow(); // lazy load trigger  (TODO: shouldn't we load before positioning?)
                    },

                    onClose: function() {
                        // summary:
                        //		Called when dialog is hidden.
                        //		This is called from the dijit.popup code, and should not be called directly.
                        // tags:
                        //		protected
                        this.onHide();
                    },

                    _onKey: function( /*Event*/ evt) {
                        // summary:
                        //		Handler for keyboard events
                        // description:
                        //		Keep keyboard focus in dialog; close dialog on escape key
                        // tags:
                        //		private

                        var node = evt.target;
                        if (evt.charOrCode === keys.TAB) {
                            this._getFocusItems(this.containerNode);
                        }
                        var singleFocusItem = (this._firstFocusItem == this._lastFocusItem);
                        if (evt.charOrCode == keys.ESCAPE) {
                            // Use defer to avoid crash on IE, see #10396.
                            this.defer("onCancel");
                            event.stop(evt);
                        } else if (node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === keys.TAB) {
                            if (!singleFocusItem) {
                                focus.focus(this._lastFocusItem); // send focus to last item in dialog
                            }
                            event.stop(evt);
                        } else if (node == this._lastFocusItem && evt.charOrCode === keys.TAB && !evt.shiftKey) {
                            if (!singleFocusItem) {
                                focus.focus(this._firstFocusItem); // send focus to first item in dialog
                            }
                            event.stop(evt);
                        } else if (evt.charOrCode === keys.TAB) {
                            // we want the browser's default tab handling to move focus
                            // but we don't want the tab to propagate upwards
                            evt.stopPropagation();
                        }
                    }
                });
            });

        },
        'dojo/ready': function() {
            define("dojo/ready", ["./_base/kernel", "./has", "require", "./domReady", "./_base/lang"], function(dojo, has, require, domReady, lang) {
                // module:
                //		dojo/ready
                // note:
                //		This module should be unnecessary in dojo 2.0

                var
                    // truthy if DOMContentLoaded or better (e.g., window.onload fired) has been achieved
                    isDomReady = 0,

                    // a function to call to cause onLoad to be called when all requested modules have been loaded
                    requestCompleteSignal,

                    // The queue of functions waiting to execute as soon as dojo.ready conditions satisfied
                    loadQ = [],

                    // prevent recursion in onLoad
                    onLoadRecursiveGuard = 0,

                    handleDomReady = function() {
                        isDomReady = 1;
                        dojo._postLoad = dojo.config.afterOnLoad = true;
                        if (loadQ.length) {
                            requestCompleteSignal(onLoad);
                        }
                    },

                    // run the next function queued with dojo.ready
                    onLoad = function() {
                        if (isDomReady && !onLoadRecursiveGuard && loadQ.length) {
                            //guard against recursions into this function
                            onLoadRecursiveGuard = 1;
                            var f = loadQ.shift();
                            try {
                                f();
                            }
                            // FIXME: signal the error via require.on
                            finally {
                                onLoadRecursiveGuard = 0;
                            }
                            onLoadRecursiveGuard = 0;
                            if (loadQ.length) {
                                requestCompleteSignal(onLoad);
                            }
                        }
                    };

                require.on("idle", onLoad);
                requestCompleteSignal = function() {
                    if (require.idle()) {
                        onLoad();
                    } // else do nothing, onLoad will be called with the next idle signal
                };

                var ready = dojo.ready = dojo.addOnLoad = function(priority, context, callback) {
                    // summary:
                    //		Add a function to execute on DOM content loaded and all requested modules have arrived and been evaluated.
                    //		In most cases, the `domReady` plug-in should suffice and this method should not be needed.
                    // priority: Integer?
                    //		The order in which to exec this callback relative to other callbacks, defaults to 1000
                    // context: Object?|Function
                    //		The context in which to run execute callback, or a callback if not using context
                    // callback: Function?
                    //		The function to execute.
                    //
                    // example:
                    //	Simple DOM and Modules ready syntax
                    //	|	require(["dojo/ready"], function(ready){
                    //	|		ready(function(){ alert("Dom ready!"); });
                    //	|	});
                    //
                    // example:
                    //	Using a priority
                    //	|	require(["dojo/ready"], function(ready){
                    //	|		ready(2, function(){ alert("low priority ready!"); })
                    //	|	});
                    //
                    // example:
                    //	Using context
                    //	|	require(["dojo/ready"], function(ready){
                    //	|		ready(foo, function(){
                    //	|			// in here, this == foo
                    //	|		});
                    //	|	});
                    //
                    // example:
                    //	Using dojo/hitch style args:
                    //	|	require(["dojo/ready"], function(ready){
                    //	|		var foo = { dojoReady: function(){ console.warn(this, "dojo dom and modules ready."); } };
                    //	|		ready(foo, "dojoReady");
                    //	|	});

                    var hitchArgs = lang._toArray(arguments);
                    if (typeof priority != "number") {
                        callback = context;
                        context = priority;
                        priority = 1000;
                    } else {
                        hitchArgs.shift();
                    }
                    callback = callback ?
                        lang.hitch.apply(dojo, hitchArgs) :
                        function() {
                            context();
                        };
                    callback.priority = priority;
                    for (var i = 0; i < loadQ.length && priority >= loadQ[i].priority; i++) {}
                    loadQ.splice(i, 0, callback);
                    requestCompleteSignal();
                };

                1 || has.add("dojo-config-addOnLoad", 1);
                if (1) {
                    var dca = dojo.config.addOnLoad;
                    if (dca) {
                        ready[(lang.isArray(dca) ? "apply" : "call")](dojo, dca);
                    }
                }

                if (0 && dojo.config.parseOnLoad && !dojo.isAsync) {
                    ready(99, function() {
                        if (!dojo.parser) {
                            dojo.deprecated("Add explicit require(['dojo/parser']);", "", "2.0");
                            require(["dojo/parser"]);
                        }
                    });
                }

                if (1) {
                    domReady(handleDomReady);
                } else {
                    handleDomReady();
                }

                return ready;
            });

        },
        'dojo/store/util/SimpleQueryEngine': function() {
            define(["../../_base/array" /*=====, "../api/Store" =====*/ ], function(arrayUtil /*=====, Store =====*/ ) {

                // module:
                //		dojo/store/util/SimpleQueryEngine

                return function(query, options) {
                    // summary:
                    //		Simple query engine that matches using filter functions, named filter
                    //		functions or objects by name-value on a query object hash
                    //
                    // description:
                    //		The SimpleQueryEngine provides a way of getting a QueryResults through
                    //		the use of a simple object hash as a filter.  The hash will be used to
                    //		match properties on data objects with the corresponding value given. In
                    //		other words, only exact matches will be returned.
                    //
                    //		This function can be used as a template for more complex query engines;
                    //		for example, an engine can be created that accepts an object hash that
                    //		contains filtering functions, or a string that gets evaluated, etc.
                    //
                    //		When creating a new dojo.store, simply set the store's queryEngine
                    //		field as a reference to this function.
                    //
                    // query: Object
                    //		An object hash with fields that may match fields of items in the store.
                    //		Values in the hash will be compared by normal == operator, but regular expressions
                    //		or any object that provides a test() method are also supported and can be
                    //		used to match strings by more complex expressions
                    //		(and then the regex's or object's test() method will be used to match values).
                    //
                    // options: dojo/store/api/Store.QueryOptions?
                    //		An object that contains optional information such as sort, start, and count.
                    //
                    // returns: Function
                    //		A function that caches the passed query under the field "matches".  See any
                    //		of the "query" methods on dojo.stores.
                    //
                    // example:
                    //		Define a store with a reference to this engine, and set up a query method.
                    //
                    //	|	var myStore = function(options){
                    //	|		//	...more properties here
                    //	|		this.queryEngine = SimpleQueryEngine;
                    //	|		//	define our query method
                    //	|		this.query = function(query, options){
                    //	|			return QueryResults(this.queryEngine(query, options)(this.data));
                    //	|		};
                    //	|	};

                    // create our matching query function
                    switch (typeof query) {
                        default: throw new Error("Can not query with a " + typeof query);
                        case "object":
                                case "undefined":
                                var queryObject = query;
                            query = function(object) {
                                for (var key in queryObject) {
                                    var required = queryObject[key];
                                    if (required && required.test) {
                                        // an object can provide a test method, which makes it work with regex
                                        if (!required.test(object[key], object)) {
                                            return false;
                                        }
                                    } else if (required != object[key]) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                            break;
                        case "string":
                                // named query
                                if (!this[query]) {
                                    throw new Error("No filter function " + query + " was found in store");
                                }
                            query = this[query];
                            // fall through
                        case "function":
                            // fall through
                    }

                    function execute(array) {
                        // execute the whole query, first we filter
                        var results = arrayUtil.filter(array, query);
                        // next we sort
                        var sortSet = options && options.sort;
                        if (sortSet) {
                            results.sort(typeof sortSet == "function" ? sortSet : function(a, b) {
                                for (var sort, i = 0; sort = sortSet[i]; i++) {
                                    var aValue = a[sort.attribute];
                                    var bValue = b[sort.attribute];
                                    if (aValue != bValue) {
                                        return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;
                                    }
                                }
                                return 0;
                            });
                        }
                        // now we paginate
                        if (options && (options.start || options.count)) {
                            var total = results.length;
                            results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));
                            results.total = total;
                        }
                        return results;
                    }
                    execute.matches = query;
                    return execute;
                };

            });

        },
        'dijit/form/_ExpandingTextAreaMixin': function() {
            define("dijit/form/_ExpandingTextAreaMixin", [
                "dojo/_base/declare", // declare
                "dojo/dom-construct", // domConstruct.create
                "dojo/has",
                "dojo/_base/lang", // lang.hitch
                "dojo/on",
                "dojo/_base/window", // win.body
                "../Viewport"
            ], function(declare, domConstruct, has, lang, on, win, Viewport) {

                // module:
                //		dijit/form/_ExpandingTextAreaMixin

                // feature detection, true for mozilla and webkit
                has.add("textarea-needs-help-shrinking", function() {
                    var body = win.body(), // note: if multiple documents exist, doesn't matter which one we use
                        te = domConstruct.create('textarea', {
                            rows: "5",
                            cols: "20",
                            value: ' ',
                            style: {
                                zoom: 1,
                                overflow: 'hidden',
                                visibility: 'hidden',
                                position: 'absolute',
                                border: "0px solid black",
                                padding: "0px"
                            }
                        }, body, "last");
                    var needsHelpShrinking = te.scrollHeight >= te.clientHeight;
                    body.removeChild(te);
                    return needsHelpShrinking;
                });

                return declare("dijit.form._ExpandingTextAreaMixin", null, {
                    // summary:
                    //		Mixin for textarea widgets to add auto-expanding capability

                    _setValueAttr: function() {
                        this.inherited(arguments);
                        this.resize();
                    },

                    postCreate: function() {
                        this.inherited(arguments);
                        var textarea = this.textbox;
                        this.own(on(textarea, "scroll, focus", lang.hitch(this, "_resizeLater")));
                        textarea.style.overflowY = "hidden";
                        this._estimateHeight();
                    },

                    startup: function() {
                        this.inherited(arguments);
                        this.own(Viewport.on("resize", lang.hitch(this, "_resizeLater")));
                        this._resizeLater();
                    },

                    _onInput: function(e) {
                        this.inherited(arguments);
                        this.resize();
                    },

                    _estimateHeight: function() {
                        // summary:
                        //		Approximate the height when the textarea is invisible with the number of lines in the text.
                        //		Fails when someone calls setValue with a long wrapping line, but the layout fixes itself when the user clicks inside so . . .
                        //		In IE, the resize event is supposed to fire when the textarea becomes visible again and that will correct the size automatically.
                        //
                        var textarea = this.textbox;
                        textarea.style.height = "auto";
                        // #rows = #newlines+1
                        // Note: on Moz, the following #rows appears to be 1 too many.
                        // Actually, Moz is reserving room for the scrollbar.
                        // If you increase the font size, this behavior becomes readily apparent as the last line gets cut off without the +1.
                        textarea.rows = (textarea.value.match(/\n/g) || []).length + 2;
                    },

                    _resizeLater: function() {
                        this.defer("resize");
                    },

                    resize: function() {
                        // summary:
                        //		Resizes the textarea vertically (should be called after a style/value change)

                        var textarea = this.textbox;

                        function textareaScrollHeight() {
                            var empty = false;
                            if (textarea.value === '') {
                                textarea.value = ' ';
                                empty = true;
                            }
                            var sh = textarea.scrollHeight;
                            if (empty) {
                                textarea.value = '';
                            }
                            return sh;
                        }

                        if (textarea.style.overflowY == "hidden") {
                            textarea.scrollTop = 0;
                        }
                        if (this.busyResizing) {
                            return;
                        }
                        this.busyResizing = true;
                        if (textareaScrollHeight() || textarea.offsetHeight) {
                            var currentHeight = textarea.style.height;
                            if (!(/px/.test(currentHeight))) {
                                currentHeight = textareaScrollHeight();
                                textarea.rows = 1;
                                textarea.style.height = currentHeight + "px";
                            }
                            var newH = Math.max(Math.max(textarea.offsetHeight, parseInt(currentHeight)) - textarea.clientHeight, 0) + textareaScrollHeight();
                            var newHpx = newH + "px";
                            if (newHpx != textarea.style.height) {
                                textarea.rows = 1;
                                textarea.style.height = newHpx;
                            }
                            if (has("textarea-needs-help-shrinking")) {
                                var origScrollHeight = textareaScrollHeight(),
                                    newScrollHeight = origScrollHeight,
                                    origMinHeight = textarea.style.minHeight,
                                    decrement = 4, // not too fast, not too slow
                                    thisScrollHeight;
                                textarea.style.minHeight = newHpx; // maintain current height
                                textarea.style.height = "auto"; // allow scrollHeight to change
                                while (newH > 0) {
                                    textarea.style.minHeight = Math.max(newH - decrement, 4) + "px";
                                    thisScrollHeight = textareaScrollHeight();
                                    var change = newScrollHeight - thisScrollHeight;
                                    newH -= change;
                                    if (change < decrement) {
                                        break; // scrollHeight didn't shrink
                                    }
                                    newScrollHeight = thisScrollHeight;
                                    decrement <<= 1;
                                }
                                textarea.style.height = newH + "px";
                                textarea.style.minHeight = origMinHeight;
                            }
                            textarea.style.overflowY = textareaScrollHeight() > textarea.clientHeight ? "auto" : "hidden";
                        } else {
                            // hidden content of unknown size
                            this._estimateHeight();
                        }
                        this.busyResizing = false;
                    }
                });
            });

        },
        'dojo/_base/Deferred': function() {
            define([
                "./kernel",
                "../Deferred",
                "../promise/Promise",
                "../errors/CancelError",
                "../has",
                "./lang",
                "../when"
            ], function(dojo, NewDeferred, Promise, CancelError, has, lang, when) {
                // module:
                //		dojo/_base/Deferred

                var mutator = function() {};
                var freeze = Object.freeze || function() {};
                // A deferred provides an API for creating and resolving a promise.
                var Deferred = dojo.Deferred = function( /*Function?*/ canceller) {
                    // summary:
                    //		Deprecated.   This module defines the legacy dojo/_base/Deferred API.
                    //		New code should use dojo/Deferred instead.
                    // description:
                    //		The Deferred API is based on the concept of promises that provide a
                    //		generic interface into the eventual completion of an asynchronous action.
                    //		The motivation for promises fundamentally is about creating a
                    //		separation of concerns that allows one to achieve the same type of
                    //		call patterns and logical data flow in asynchronous code as can be
                    //		achieved in synchronous code. Promises allows one
                    //		to be able to call a function purely with arguments needed for
                    //		execution, without conflating the call with concerns of whether it is
                    //		sync or async. One shouldn't need to alter a call's arguments if the
                    //		implementation switches from sync to async (or vice versa). By having
                    //		async functions return promises, the concerns of making the call are
                    //		separated from the concerns of asynchronous interaction (which are
                    //		handled by the promise).
                    //
                    //		The Deferred is a type of promise that provides methods for fulfilling the
                    //		promise with a successful result or an error. The most important method for
                    //		working with Dojo's promises is the then() method, which follows the
                    //		CommonJS proposed promise API. An example of using a Dojo promise:
                    //
                    //		|	var resultingPromise = someAsyncOperation.then(function(result){
                    //		|		... handle result ...
                    //		|	},
                    //		|	function(error){
                    //		|		... handle error ...
                    //		|	});
                    //
                    //		The .then() call returns a new promise that represents the result of the
                    //		execution of the callback. The callbacks will never affect the original promises value.
                    //
                    //		The Deferred instances also provide the following functions for backwards compatibility:
                    //
                    //		- addCallback(handler)
                    //		- addErrback(handler)
                    //		- callback(result)
                    //		- errback(result)
                    //
                    //		Callbacks are allowed to return promises themselves, so
                    //		you can build complicated sequences of events with ease.
                    //
                    //		The creator of the Deferred may specify a canceller.  The canceller
                    //		is a function that will be called if Deferred.cancel is called
                    //		before the Deferred fires. You can use this to implement clean
                    //		aborting of an XMLHttpRequest, etc. Note that cancel will fire the
                    //		deferred with a CancelledError (unless your canceller returns
                    //		another kind of error), so the errbacks should be prepared to
                    //		handle that error for cancellable Deferreds.
                    // example:
                    //	|	var deferred = new Deferred();
                    //	|	setTimeout(function(){ deferred.callback({success: true}); }, 1000);
                    //	|	return deferred;
                    // example:
                    //		Deferred objects are often used when making code asynchronous. It
                    //		may be easiest to write functions in a synchronous manner and then
                    //		split code using a deferred to trigger a response to a long-lived
                    //		operation. For example, instead of register a callback function to
                    //		denote when a rendering operation completes, the function can
                    //		simply return a deferred:
                    //
                    //		|	// callback style:
                    //		|	function renderLotsOfData(data, callback){
                    //		|		var success = false
                    //		|		try{
                    //		|			for(var x in data){
                    //		|				renderDataitem(data[x]);
                    //		|			}
                    //		|			success = true;
                    //		|		}catch(e){ }
                    //		|		if(callback){
                    //		|			callback(success);
                    //		|		}
                    //		|	}
                    //
                    //		|	// using callback style
                    //		|	renderLotsOfData(someDataObj, function(success){
                    //		|		// handles success or failure
                    //		|		if(!success){
                    //		|			promptUserToRecover();
                    //		|		}
                    //		|	});
                    //		|	// NOTE: no way to add another callback here!!
                    // example:
                    //		Using a Deferred doesn't simplify the sending code any, but it
                    //		provides a standard interface for callers and senders alike,
                    //		providing both with a simple way to service multiple callbacks for
                    //		an operation and freeing both sides from worrying about details
                    //		such as "did this get called already?". With Deferreds, new
                    //		callbacks can be added at any time.
                    //
                    //		|	// Deferred style:
                    //		|	function renderLotsOfData(data){
                    //		|		var d = new Deferred();
                    //		|		try{
                    //		|			for(var x in data){
                    //		|				renderDataitem(data[x]);
                    //		|			}
                    //		|			d.callback(true);
                    //		|		}catch(e){
                    //		|			d.errback(new Error("rendering failed"));
                    //		|		}
                    //		|		return d;
                    //		|	}
                    //
                    //		|	// using Deferred style
                    //		|	renderLotsOfData(someDataObj).then(null, function(){
                    //		|		promptUserToRecover();
                    //		|	});
                    //		|	// NOTE: addErrback and addCallback both return the Deferred
                    //		|	// again, so we could chain adding callbacks or save the
                    //		|	// deferred for later should we need to be notified again.
                    // example:
                    //		In this example, renderLotsOfData is synchronous and so both
                    //		versions are pretty artificial. Putting the data display on a
                    //		timeout helps show why Deferreds rock:
                    //
                    //		|	// Deferred style and async func
                    //		|	function renderLotsOfData(data){
                    //		|		var d = new Deferred();
                    //		|		setTimeout(function(){
                    //		|			try{
                    //		|				for(var x in data){
                    //		|					renderDataitem(data[x]);
                    //		|				}
                    //		|				d.callback(true);
                    //		|			}catch(e){
                    //		|				d.errback(new Error("rendering failed"));
                    //		|			}
                    //		|		}, 100);
                    //		|		return d;
                    //		|	}
                    //
                    //		|	// using Deferred style
                    //		|	renderLotsOfData(someDataObj).then(null, function(){
                    //		|		promptUserToRecover();
                    //		|	});
                    //
                    //		Note that the caller doesn't have to change his code at all to
                    //		handle the asynchronous case.

                    var result, finished, isError, head, nextListener;
                    var promise = (this.promise = new Promise());

                    function complete(value) {
                        if (finished) {
                            throw new Error("This deferred has already been resolved");
                        }
                        result = value;
                        finished = true;
                        notify();
                    }

                    function notify() {
                        var mutated;
                        while (!mutated && nextListener) {
                            var listener = nextListener;
                            nextListener = nextListener.next;
                            if ((mutated = (listener.progress == mutator))) { // assignment and check
                                finished = false;
                            }

                            var func = (isError ? listener.error : listener.resolved);
                            if (has("config-useDeferredInstrumentation")) {
                                if (isError && NewDeferred.instrumentRejected) {
                                    NewDeferred.instrumentRejected(result, !!func);
                                }
                            }
                            if (func) {
                                try {
                                    var newResult = func(result);
                                    if (newResult && typeof newResult.then === "function") {
                                        newResult.then(lang.hitch(listener.deferred, "resolve"), lang.hitch(listener.deferred, "reject"), lang.hitch(listener.deferred, "progress"));
                                        continue;
                                    }
                                    var unchanged = mutated && newResult === undefined;
                                    if (mutated && !unchanged) {
                                        isError = newResult instanceof Error;
                                    }
                                    listener.deferred[unchanged && isError ? "reject" : "resolve"](unchanged ? result : newResult);
                                } catch (e) {
                                    listener.deferred.reject(e);
                                }
                            } else {
                                if (isError) {
                                    listener.deferred.reject(result);
                                } else {
                                    listener.deferred.resolve(result);
                                }
                            }
                        }
                    }
                    // calling resolve will resolve the promise
                    this.resolve = this.callback = function(value) {
                        // summary:
                        //		Fulfills the Deferred instance successfully with the provide value
                        this.fired = 0;
                        this.results = [value, null];
                        complete(value);
                    };


                    // calling error will indicate that the promise failed
                    this.reject = this.errback = function(error) {
                        // summary:
                        //		Fulfills the Deferred instance as an error with the provided error
                        isError = true;
                        this.fired = 1;
                        if (has("config-useDeferredInstrumentation")) {
                            if (NewDeferred.instrumentRejected) {
                                NewDeferred.instrumentRejected(error, !!nextListener);
                            }
                        }
                        complete(error);
                        this.results = [null, error];
                    };
                    // call progress to provide updates on the progress on the completion of the promise
                    this.progress = function(update) {
                        // summary:
                        //		Send progress events to all listeners
                        var listener = nextListener;
                        while (listener) {
                            var progress = listener.progress;
                            progress && progress(update);
                            listener = listener.next;
                        }
                    };
                    this.addCallbacks = function(callback, errback) {
                        // summary:
                        //		Adds callback and error callback for this deferred instance.
                        // callback: Function?
                        //		The callback attached to this deferred object.
                        // errback: Function?
                        //		The error callback attached to this deferred object.
                        // returns:
                        //		Returns this deferred object.
                        this.then(callback, errback, mutator);
                        return this; // Deferred
                    };
                    // provide the implementation of the promise
                    promise.then = this.then = function( /*Function?*/ resolvedCallback, /*Function?*/ errorCallback, /*Function?*/ progressCallback) {
                        // summary:
                        //		Adds a fulfilledHandler, errorHandler, and progressHandler to be called for
                        //		completion of a promise. The fulfilledHandler is called when the promise
                        //		is fulfilled. The errorHandler is called when a promise fails. The
                        //		progressHandler is called for progress events. All arguments are optional
                        //		and non-function values are ignored. The progressHandler is not only an
                        //		optional argument, but progress events are purely optional. Promise
                        //		providers are not required to ever create progress events.
                        //
                        //		This function will return a new promise that is fulfilled when the given
                        //		fulfilledHandler or errorHandler callback is finished. This allows promise
                        //		operations to be chained together. The value returned from the callback
                        //		handler is the fulfillment value for the returned promise. If the callback
                        //		throws an error, the returned promise will be moved to failed state.
                        //
                        // returns:
                        //		Returns a new promise that represents the result of the
                        //		execution of the callback. The callbacks will never affect the original promises value.
                        // example:
                        //		An example of using a CommonJS compliant promise:
                        //		|	asyncComputeTheAnswerToEverything().
                        //		|		then(addTwo).
                        //		|		then(printResult, onError);
                        //		|	>44
                        //
                        var returnDeferred = progressCallback == mutator ? this : new Deferred(promise.cancel);
                        var listener = {
                            resolved: resolvedCallback,
                            error: errorCallback,
                            progress: progressCallback,
                            deferred: returnDeferred
                        };
                        if (nextListener) {
                            head = head.next = listener;
                        } else {
                            nextListener = head = listener;
                        }
                        if (finished) {
                            notify();
                        }
                        return returnDeferred.promise; // Promise
                    };
                    var deferred = this;
                    promise.cancel = this.cancel = function() {
                        // summary:
                        //		Cancels the asynchronous operation
                        if (!finished) {
                            var error = canceller && canceller(deferred);
                            if (!finished) {
                                if (!(error instanceof Error)) {
                                    error = new CancelError(error);
                                }
                                error.log = false;
                                deferred.reject(error);
                            }
                        }
                    };
                    freeze(promise);
                };
                lang.extend(Deferred, {
                    addCallback: function( /*Function*/ callback) {
                        // summary:
                        //		Adds successful callback for this deferred instance.
                        // returns:
                        //		Returns this deferred object.
                        return this.addCallbacks(lang.hitch.apply(dojo, arguments)); // Deferred
                    },

                    addErrback: function( /*Function*/ errback) {
                        // summary:
                        //		Adds error callback for this deferred instance.
                        // returns:
                        //		Returns this deferred object.
                        return this.addCallbacks(null, lang.hitch.apply(dojo, arguments)); // Deferred
                    },

                    addBoth: function( /*Function*/ callback) {
                        // summary:
                        //		Add handler as both successful callback and error callback for this deferred instance.
                        // returns:
                        //		Returns this deferred object.
                        var enclosed = lang.hitch.apply(dojo, arguments);
                        return this.addCallbacks(enclosed, enclosed); // Deferred
                    },
                    fired: -1
                });

                Deferred.when = dojo.when = when;

                return Deferred;
            });

        },
        'dijit/typematic': function() {
            define("dijit/typematic", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/connect", // connect.connect
                "dojo/_base/event", // event.stop
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.mixin, lang.hitch
                "dojo/on",
                "dojo/sniff", // has("ie")
                "./main" // setting dijit.typematic global
            ], function(array, connect, event, kernel, lang, on, has, dijit) {

                // module:
                //		dijit/typematic

                var typematic = (dijit.typematic = {
                    // summary:
                    //		These functions are used to repetitively call a user specified callback
                    //		method when a specific key or mouse click over a specific DOM node is
                    //		held down for a specific amount of time.
                    //		Only 1 such event is allowed to occur on the browser page at 1 time.

                    _fireEventAndReload: function() {
                        this._timer = null;
                        this._callback(++this._count, this._node, this._evt);

                        // Schedule next event, timer is at most minDelay (default 10ms) to avoid
                        // browser overload (particularly avoiding starving DOH robot so it never gets to send a mouseup)
                        this._currentTimeout = Math.max(
                            this._currentTimeout < 0 ? this._initialDelay :
                            (this._subsequentDelay > 1 ? this._subsequentDelay : Math.round(this._currentTimeout * this._subsequentDelay)),
                            this._minDelay);
                        this._timer = setTimeout(lang.hitch(this, "_fireEventAndReload"), this._currentTimeout);
                    },

                    trigger: function( /*Event*/ evt, /*Object*/ _this, /*DOMNode*/ node, /*Function*/ callback, /*Object*/ obj, /*Number?*/ subsequentDelay, /*Number?*/ initialDelay, /*Number?*/ minDelay) {
                        // summary:
                        //		Start a timed, repeating callback sequence.
                        //		If already started, the function call is ignored.
                        //		This method is not normally called by the user but can be
                        //		when the normal listener code is insufficient.
                        // evt:
                        //		key or mouse event object to pass to the user callback
                        // _this:
                        //		pointer to the user's widget space.
                        // node:
                        //		the DOM node object to pass the the callback function
                        // callback:
                        //		function to call until the sequence is stopped called with 3 parameters:
                        // count:
                        //		integer representing number of repeated calls (0..n) with -1 indicating the iteration has stopped
                        // node:
                        //		the DOM node object passed in
                        // evt:
                        //		key or mouse event object
                        // obj:
                        //		user space object used to uniquely identify each typematic sequence
                        // subsequentDelay:
                        //		if > 1, the number of milliseconds until the 3->n events occur
                        //		or else the fractional time multiplier for the next event's delay, default=0.9
                        // initialDelay:
                        //		the number of milliseconds until the 2nd event occurs, default=500ms
                        // minDelay:
                        //		the maximum delay in milliseconds for event to fire, default=10ms
                        if (obj != this._obj) {
                            this.stop();
                            this._initialDelay = initialDelay || 500;
                            this._subsequentDelay = subsequentDelay || 0.90;
                            this._minDelay = minDelay || 10;
                            this._obj = obj;
                            this._node = node;
                            this._currentTimeout = -1;
                            this._count = -1;
                            this._callback = lang.hitch(_this, callback);
                            this._evt = {
                                faux: true
                            };
                            for (var attr in evt) {
                                if (attr != "layerX" && attr != "layerY") { // prevent WebKit warnings
                                    var v = evt[attr];
                                    if (typeof v != "function" && typeof v != "undefined") {
                                        this._evt[attr] = v
                                    }
                                }
                            }
                            this._fireEventAndReload();
                        }
                    },

                    stop: function() {
                        // summary:
                        //		Stop an ongoing timed, repeating callback sequence.
                        if (this._timer) {
                            clearTimeout(this._timer);
                            this._timer = null;
                        }
                        if (this._obj) {
                            this._callback(-1, this._node, this._evt);
                            this._obj = null;
                        }
                    },

                    addKeyListener: function( /*DOMNode*/ node, /*Object*/ keyObject, /*Object*/ _this, /*Function*/ callback, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay) {
                        // summary:
                        //		Start listening for a specific typematic key.
                        //		See also the trigger method for other parameters.
                        // keyObject:
                        //		an object defining the key to listen for:
                        //
                        //		- charOrCode: the printable character (string) or keyCode (number) to listen for.
                        //		- keyCode: (deprecated - use charOrCode) the keyCode (number) to listen for (implies charCode = 0).
                        //		- charCode: (deprecated - use charOrCode) the charCode (number) to listen for.
                        //		- ctrlKey: desired ctrl key state to initiate the callback sequence:
                        //			- pressed (true)
                        //			- released (false)
                        //			- either (unspecified)
                        //		- altKey: same as ctrlKey but for the alt key
                        //		- shiftKey: same as ctrlKey but for the shift key
                        // returns:
                        //		a connection handle

                        if (keyObject.keyCode) {
                            keyObject.charOrCode = keyObject.keyCode;
                            kernel.deprecated("keyCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.", "", "2.0");
                        } else if (keyObject.charCode) {
                            keyObject.charOrCode = String.fromCharCode(keyObject.charCode);
                            kernel.deprecated("charCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.", "", "2.0");
                        }
                        var handles = [
                            on(node, connect._keypress, lang.hitch(this, function(evt) {
                                if (evt.charOrCode == keyObject.charOrCode &&
                                    (keyObject.ctrlKey === undefined || keyObject.ctrlKey == evt.ctrlKey) &&
                                    (keyObject.altKey === undefined || keyObject.altKey == evt.altKey) &&
                                    (keyObject.metaKey === undefined || keyObject.metaKey == (evt.metaKey || false)) && // IE doesn't even set metaKey
                                    (keyObject.shiftKey === undefined || keyObject.shiftKey == evt.shiftKey)) {
                                    event.stop(evt);
                                    typematic.trigger(evt, _this, node, callback, keyObject, subsequentDelay, initialDelay, minDelay);
                                } else if (typematic._obj == keyObject) {
                                    typematic.stop();
                                }
                            })),
                            on(node, "keyup", lang.hitch(this, function() {
                                if (typematic._obj == keyObject) {
                                    typematic.stop();
                                }
                            }))
                        ];
                        return {
                            remove: function() {
                                array.forEach(handles, function(h) {
                                    h.remove();
                                });
                            }
                        };
                    },

                    addMouseListener: function( /*DOMNode*/ node, /*Object*/ _this, /*Function*/ callback, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay) {
                        // summary:
                        //		Start listening for a typematic mouse click.
                        //		See the trigger method for other parameters.
                        // returns:
                        //		a connection handle
                        var handles = [
                            on(node, "mousedown", lang.hitch(this, function(evt) {
                                evt.preventDefault();
                                typematic.trigger(evt, _this, node, callback, node, subsequentDelay, initialDelay, minDelay);
                            })),
                            on(node, "mouseup", lang.hitch(this, function(evt) {
                                if (this._obj) {
                                    evt.preventDefault();
                                }
                                typematic.stop();
                            })),
                            on(node, "mouseout", lang.hitch(this, function(evt) {
                                if (this._obj) {
                                    evt.preventDefault();
                                }
                                typematic.stop();
                            })),
                            on(node, "dblclick", lang.hitch(this, function(evt) {
                                evt.preventDefault();
                                if (has("ie") < 9) {
                                    typematic.trigger(evt, _this, node, callback, node, subsequentDelay, initialDelay, minDelay);
                                    setTimeout(lang.hitch(this, typematic.stop), 50);
                                }
                            }))
                        ];
                        return {
                            remove: function() {
                                array.forEach(handles, function(h) {
                                    h.remove();
                                });
                            }
                        };
                    },

                    addListener: function( /*Node*/ mouseNode, /*Node*/ keyNode, /*Object*/ keyObject, /*Object*/ _this, /*Function*/ callback, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay) {
                        // summary:
                        //		Start listening for a specific typematic key and mouseclick.
                        //		This is a thin wrapper to addKeyListener and addMouseListener.
                        //		See the addMouseListener and addKeyListener methods for other parameters.
                        // mouseNode:
                        //		the DOM node object to listen on for mouse events.
                        // keyNode:
                        //		the DOM node object to listen on for key events.
                        // returns:
                        //		a connection handle
                        var handles = [
                            this.addKeyListener(keyNode, keyObject, _this, callback, subsequentDelay, initialDelay, minDelay),
                            this.addMouseListener(mouseNode, _this, callback, subsequentDelay, initialDelay, minDelay)
                        ];
                        return {
                            remove: function() {
                                array.forEach(handles, function(h) {
                                    h.remove();
                                });
                            }
                        };
                    }
                });

                return typematic;

            });

        },
        'hsbcwidget/LangList': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase"
                ],
                function(declare, _WidgetBase) {

                    return declare([_WidgetBase], {});

                }
            );
        },
        'dijit/MenuItem': function() {
            require({
                cache: {
                    'url:dijit/templates/MenuItem.html': "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n"
                }
            });
            define("dijit/MenuItem", [
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.setSelectable
                "dojo/dom-attr", // domAttr.set
                "dojo/dom-class", // domClass.toggle
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/sniff", // has("ie")
                "./_Widget",
                "./_TemplatedMixin",
                "./_Contained",
                "./_CssStateMixin",
                "dojo/text!./templates/MenuItem.html"
            ], function(declare, dom, domAttr, domClass, kernel, has,
                _Widget, _TemplatedMixin, _Contained, _CssStateMixin, template) {

                // module:
                //		dijit/MenuItem

                return declare("dijit.MenuItem", [_Widget, _TemplatedMixin, _Contained, _CssStateMixin], {
                    // summary:
                    //		A line item in a Menu Widget

                    // Make 3 columns
                    // icon, label, and expand arrow (BiDi-dependent) indicating sub-menu
                    templateString: template,

                    baseClass: "dijitMenuItem",

                    // label: String
                    //		Menu text
                    label: "",
                    _setLabelAttr: function(val) {
                        this.containerNode.innerHTML = val;
                        this._set("label", val);
                        if (this.textDir === "auto") {
                            this.applyTextDir(this.focusNode, this.label);
                        }
                    },

                    // iconClass: String
                    //		Class to apply to DOMNode to make it display an icon.
                    iconClass: "dijitNoIcon",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },

                    // accelKey: String
                    //		Text for the accelerator (shortcut) key combination.
                    //		Note that although Menu can display accelerator keys there
                    //		is no infrastructure to actually catch and execute these
                    //		accelerators.
                    accelKey: "",

                    // disabled: Boolean
                    //		If true, the menu item is disabled.
                    //		If false, the menu item is enabled.
                    disabled: false,

                    _fillContent: function( /*DomNode*/ source) {
                        // If button label is specified as srcNodeRef.innerHTML rather than
                        // this.params.label, handle it here.
                        if (source && !("label" in this.params)) {
                            this.set('label', source.innerHTML);
                        }
                    },

                    buildRendering: function() {
                        this.inherited(arguments);
                        var label = this.id + "_text";
                        domAttr.set(this.containerNode, "id", label);
                        if (this.accelKeyNode) {
                            domAttr.set(this.accelKeyNode, "id", this.id + "_accel");
                            label += " " + this.id + "_accel";
                        }
                        this.domNode.setAttribute("aria-labelledby", label);
                        dom.setSelectable(this.domNode, false);
                    },

                    onClick: function( /*Event*/ ) {
                        // summary:
                        //		User defined function to handle clicks
                        // tags:
                        //		callback
                    },

                    focus: function() {
                        // summary:
                        //		Focus on this MenuItem
                        try {
                            if (has("ie") == 8) {
                                // needed for IE8 which won't scroll TR tags into view on focus yet calling scrollIntoView creates flicker (#10275)
                                this.containerNode.focus();
                            }
                            this.focusNode.focus();
                        } catch (e) {
                            // this throws on IE (at least) in some scenarios
                        }
                    },

                    _onFocus: function() {
                        // summary:
                        //		This is called by the focus manager when focus
                        //		goes to this MenuItem or a child menu.
                        // tags:
                        //		protected
                        this._setSelected(true);
                        this.getParent()._onItemFocus(this);

                        this.inherited(arguments);
                    },

                    _setSelected: function(selected) {
                        // summary:
                        //		Indicate that this node is the currently selected one
                        // tags:
                        //		private

                        /***
                         * TODO: remove this method and calls to it, when _onBlur() is working for MenuItem.
                         * Currently _onBlur() gets called when focus is moved from the MenuItem to a child menu.
                         * That's not supposed to happen, but the problem is:
                         * In order to allow dijit.popup's getTopPopup() to work,a sub menu's popupParent
                         * points to the parent Menu, bypassing the parent MenuItem... thus the
                         * MenuItem is not in the chain of active widgets and gets a premature call to
                         * _onBlur()
                         */

                        domClass.toggle(this.domNode, "dijitMenuItemSelected", selected);
                    },

                    setLabel: function( /*String*/ content) {
                        // summary:
                        //		Deprecated.   Use set('label', ...) instead.
                        // tags:
                        //		deprecated
                        kernel.deprecated("dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
                        this.set("label", content);
                    },

                    setDisabled: function( /*Boolean*/ disabled) {
                        // summary:
                        //		Deprecated.   Use set('disabled', bool) instead.
                        // tags:
                        //		deprecated
                        kernel.deprecated("dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.", "", "2.0");
                        this.set('disabled', disabled);
                    },
                    _setDisabledAttr: function( /*Boolean*/ value) {
                        // summary:
                        //		Hook for attr('disabled', ...) to work.
                        //		Enable or disable this menu item.

                        this.focusNode.setAttribute('aria-disabled', value ? 'true' : 'false');
                        this._set("disabled", value);
                    },
                    _setAccelKeyAttr: function( /*String*/ value) {
                        // summary:
                        //		Hook for attr('accelKey', ...) to work.
                        //		Set accelKey on this menu item.

                        this.accelKeyNode.style.display = value ? "" : "none";
                        this.accelKeyNode.innerHTML = value;
                        //have to use colSpan to make it work in IE
                        domAttr.set(this.containerNode, 'colSpan', value ? "1" : "2");

                        this._set("accelKey", value);
                    },
                    _setTextDirAttr: function( /*String*/ textDir) {
                        // summary:
                        //		Setter for textDir.
                        // description:
                        //		Users shouldn't call this function; they should be calling
                        //		set('textDir', value)
                        // tags:
                        //		private

                        // only if new textDir is different from the old one
                        // and on widgets creation.
                        if (!this._created || this.textDir != textDir) {
                            this._set("textDir", textDir);
                            this.applyTextDir(this.focusNode, this.label);
                        }
                    }
                });
            });

        },
        'dijit/layout/TabController': function() {
            require({
                cache: {
                    'url:dijit/layout/templates/_TabButton.html': "<div role=\"presentation\" data-dojo-attach-point=\"titleNode,innerDiv,tabContent\" class=\"dijitTabInner dijitTabContent\">\n\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" data-dojo-attach-point='iconNode'/>\n\t<span data-dojo-attach-point='containerNode,focusNode' class='tabLabel'></span>\n\t<span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" data-dojo-attach-point='closeNode'\n\t\t  role=\"presentation\">\n\t\t<span data-dojo-attach-point='closeText' class='dijitTabCloseText'>[x]</span\n\t\t\t\t></span>\n</div>\n"
                }
            });
            define("dijit/layout/TabController", [
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.setSelectable
                "dojo/dom-attr", // domAttr.attr
                "dojo/dom-class", // domClass.toggle
                "dojo/i18n", // i18n.getLocalization
                "dojo/_base/lang", // lang.hitch lang.trim
                "./StackController",
                "../registry",
                "../Menu",
                "../MenuItem",
                "dojo/text!./templates/_TabButton.html",
                "dojo/i18n!../nls/common"
            ], function(declare, dom, domAttr, domClass, i18n, lang, StackController, registry, Menu, MenuItem, template) {

                // module:
                //		dijit/layout/TabController

                var TabButton = declare("dijit.layout._TabButton", StackController.StackButton, {
                    // summary:
                    //		A tab (the thing you click to select a pane).
                    // description:
                    //		Contains the title of the pane, and optionally a close-button to destroy the pane.
                    //		This is an internal widget and should not be instantiated directly.
                    // tags:
                    //		private

                    // baseClass: String
                    //		The CSS class applied to the domNode.
                    baseClass: "dijitTab",

                    // Apply dijitTabCloseButtonHover when close button is hovered
                    cssStateNodes: {
                        closeNode: "dijitTabCloseButton"
                    },

                    templateString: template,

                    // Override _FormWidget.scrollOnFocus.
                    // Don't scroll the whole tab container into view when the button is focused.
                    scrollOnFocus: false,

                    buildRendering: function() {
                        this.inherited(arguments);

                        dom.setSelectable(this.containerNode, false);
                    },

                    startup: function() {
                        this.inherited(arguments);
                        var n = this.domNode;

                        // Required to give IE6 a kick, as it initially hides the
                        // tabs until they are focused on.
                        this.defer(function() {
                            n.className = n.className;
                        }, 1);
                    },

                    _setCloseButtonAttr: function( /*Boolean*/ disp) {
                        // summary:
                        //		Hide/show close button
                        this._set("closeButton", disp);
                        domClass.toggle(this.domNode, "dijitClosable", disp);
                        this.closeNode.style.display = disp ? "" : "none";
                        if (disp) {
                            var _nlsResources = i18n.getLocalization("dijit", "common");
                            if (this.closeNode) {
                                domAttr.set(this.closeNode, "title", _nlsResources.itemClose);
                            }
                        }
                    },

                    _setDisabledAttr: function( /*Boolean*/ disabled) {
                        // summary:
                        //		Make tab selected/unselectable

                        this.inherited(arguments);

                        // Don't show tooltip for close button when tab is disabled
                        if (this.closeNode) {
                            if (disabled) {
                                domAttr.remove(this.closeNode, "title");
                            } else {
                                var _nlsResources = i18n.getLocalization("dijit", "common");
                                domAttr.set(this.closeNode, "title", _nlsResources.itemClose);
                            }
                        }
                    },

                    _setLabelAttr: function( /*String*/ content) {
                        // summary:
                        //		Hook for set('label', ...) to work.
                        // description:
                        //		takes an HTML string.
                        //		Inherited ToggleButton implementation will Set the label (text) of the button;
                        //		Need to set the alt attribute of icon on tab buttons if no label displayed
                        this.inherited(arguments);
                        if (!this.showLabel && !this.params.title) {
                            this.iconNode.alt = lang.trim(this.containerNode.innerText || this.containerNode.textContent || '');
                        }
                    }
                });

                var TabController = declare("dijit.layout.TabController", StackController, {
                    // summary:
                    //		Set of tabs (the things with titles and a close button, that you click to show a tab panel).
                    //		Used internally by `dijit/layout/TabContainer`.
                    // description:
                    //		Lets the user select the currently shown pane in a TabContainer or StackContainer.
                    //		TabController also monitors the TabContainer, and whenever a pane is
                    //		added or deleted updates itself accordingly.
                    // tags:
                    //		private

                    baseClass: "dijitTabController",

                    templateString: "<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'></div>",

                    // tabPosition: String
                    //		Defines where tabs go relative to the content.
                    //		"top", "bottom", "left-h", "right-h"
                    tabPosition: "top",

                    // buttonWidget: Constructor
                    //		The tab widget to create to correspond to each page
                    buttonWidget: TabButton,

                    // buttonWidgetCloseClass: String
                    //		Class of [x] close icon, used by event delegation code to tell when close button was clicked
                    buttonWidgetCloseClass: "dijitTabCloseButton",

                    postCreate: function() {
                        this.inherited(arguments);

                        // Setup a close menu to be shared between all the closable tabs (excluding disabled tabs)
                        var closeMenu = new Menu({
                            id: this.id + "_Menu",
                            ownerDocument: this.ownerDocument,
                            dir: this.dir,
                            lang: this.lang,
                            textDir: this.textDir,
                            targetNodeIds: [this.domNode],
                            selector: function(node) {
                                return domClass.contains(node, "dijitClosable") && !domClass.contains(node, "dijitTabDisabled");
                            }
                        });
                        this.own(closeMenu);

                        var _nlsResources = i18n.getLocalization("dijit", "common"),
                            controller = this;
                        closeMenu.addChild(new MenuItem({
                            label: _nlsResources.itemClose,
                            ownerDocument: this.ownerDocument,
                            dir: this.dir,
                            lang: this.lang,
                            textDir: this.textDir,
                            onClick: function(evt) {
                                var button = registry.byNode(this.getParent().currentTarget);
                                controller.onCloseButtonClick(button.page);
                            }
                        }));
                    }
                });

                TabController.TabButton = TabButton; // for monkey patching

                return TabController;
            });

        },
        'app/run': function() {
            require(['app']);
        },
        'dojo/cldr/supplemental': function() {
            define(["../_base/lang", "../i18n"], function(lang, i18n) {

                // module:
                //		dojo/cldr/supplemental


                var supplemental = {
                    // summary:
                    //		TODOC
                };
                lang.setObject("dojo.cldr.supplemental", supplemental);

                supplemental.getFirstDayOfWeek = function( /*String?*/ locale) {
                    // summary:
                    //		Returns a zero-based index for first day of the week
                    // description:
                    //		Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar.
                    //		e.g. Sunday (returns 0), or Monday (returns 1)

                    // from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/firstDay
                    var firstDay = { /*default is 1=Monday*/
                        bd: 5,
                        mv: 5,
                        ae: 6,
                        af: 6,
                        bh: 6,
                        dj: 6,
                        dz: 6,
                        eg: 6,
                        iq: 6,
                        ir: 6,
                        jo: 6,
                        kw: 6,
                        ly: 6,
                        ma: 6,
                        om: 6,
                        qa: 6,
                        sa: 6,
                        sd: 6,
                        sy: 6,
                        ye: 6,
                        ag: 0,
                        ar: 0,
                        as: 0,
                        au: 0,
                        br: 0,
                        bs: 0,
                        bt: 0,
                        bw: 0,
                        by: 0,
                        bz: 0,
                        ca: 0,
                        cn: 0,
                        co: 0,
                        dm: 0,
                        'do': 0,
                        et: 0,
                        gt: 0,
                        gu: 0,
                        hk: 0,
                        hn: 0,
                        id: 0,
                        ie: 0,
                        il: 0,
                        'in': 0,
                        jm: 0,
                        jp: 0,
                        ke: 0,
                        kh: 0,
                        kr: 0,
                        la: 0,
                        mh: 0,
                        mm: 0,
                        mo: 0,
                        mt: 0,
                        mx: 0,
                        mz: 0,
                        ni: 0,
                        np: 0,
                        nz: 0,
                        pa: 0,
                        pe: 0,
                        ph: 0,
                        pk: 0,
                        pr: 0,
                        py: 0,
                        sg: 0,
                        sv: 0,
                        th: 0,
                        tn: 0,
                        tt: 0,
                        tw: 0,
                        um: 0,
                        us: 0,
                        ve: 0,
                        vi: 0,
                        ws: 0,
                        za: 0,
                        zw: 0
                    };

                    var country = supplemental._region(locale);
                    var dow = firstDay[country];
                    return (dow === undefined) ? 1 : dow; /*Number*/
                };

                supplemental._region = function( /*String?*/ locale) {
                    locale = i18n.normalizeLocale(locale);
                    var tags = locale.split('-');
                    var region = tags[1];
                    if (!region) {
                        // IE often gives language only (#2269)
                        // Arbitrary mappings of language-only locales to a country:
                        region = {
                            de: "de",
                            en: "us",
                            es: "es",
                            fi: "fi",
                            fr: "fr",
                            he: "il",
                            hu: "hu",
                            it: "it",
                            ja: "jp",
                            ko: "kr",
                            nl: "nl",
                            pt: "br",
                            sv: "se",
                            zh: "cn"
                        }[tags[0]];
                    } else if (region.length == 4) {
                        // The ISO 3166 country code is usually in the second position, unless a
                        // 4-letter script is given. See http://www.ietf.org/rfc/rfc4646.txt
                        region = tags[2];
                    }
                    return region;
                };

                supplemental.getWeekend = function( /*String?*/ locale) {
                    // summary:
                    //		Returns a hash containing the start and end days of the weekend
                    // description:
                    //		Returns a hash containing the start and end days of the weekend according to local custom using locale,
                    //		or by default in the user's locale.
                    //		e.g. {start:6, end:0}

                    // from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/weekend{Start,End}
                    var weekendStart = { /*default is 6=Saturday*/
                            'in': 0,
                            af: 4,
                            dz: 4,
                            ir: 4,
                            om: 4,
                            sa: 4,
                            ye: 4,
                            ae: 5,
                            bh: 5,
                            eg: 5,
                            il: 5,
                            iq: 5,
                            jo: 5,
                            kw: 5,
                            ly: 5,
                            ma: 5,
                            qa: 5,
                            sd: 5,
                            sy: 5,
                            tn: 5
                        },

                        weekendEnd = { /*default is 0=Sunday*/
                            af: 5,
                            dz: 5,
                            ir: 5,
                            om: 5,
                            sa: 5,
                            ye: 5,
                            ae: 6,
                            bh: 5,
                            eg: 6,
                            il: 6,
                            iq: 6,
                            jo: 6,
                            kw: 6,
                            ly: 6,
                            ma: 6,
                            qa: 6,
                            sd: 6,
                            sy: 6,
                            tn: 6
                        },

                        country = supplemental._region(locale),
                        start = weekendStart[country],
                        end = weekendEnd[country];

                    if (start === undefined) {
                        start = 6;
                    }
                    if (end === undefined) {
                        end = 0;
                    }
                    return {
                        start: start,
                        end: end
                    }; /*Object {start,end}*/
                };

                return supplemental;
            });

        },
        'dijit/layout/_LayoutWidget': function() {
            define("dijit/layout/_LayoutWidget", [
                "dojo/_base/lang", // lang.mixin
                "../_Widget",
                "../_Container",
                "../_Contained",
                "../Viewport",
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.add domClass.remove
                "dojo/dom-geometry", // domGeometry.marginBox
                "dojo/dom-style" // domStyle.getComputedStyle
            ], function(lang, _Widget, _Container, _Contained, Viewport,
                declare, domClass, domGeometry, domStyle) {

                // module:
                //		dijit/layout/_LayoutWidget


                return declare("dijit.layout._LayoutWidget", [_Widget, _Container, _Contained], {
                    // summary:
                    //		Base class for a _Container widget which is responsible for laying out its children.
                    //		Widgets which mixin this code must define layout() to manage placement and sizing of the children.

                    // baseClass: [protected extension] String
                    //		This class name is applied to the widget's domNode
                    //		and also may be used to generate names for sub nodes,
                    //		for example dijitTabContainer-content.
                    baseClass: "dijitLayoutContainer",

                    // isLayoutContainer: [protected] Boolean
                    //		Indicates that this widget is going to call resize() on its
                    //		children widgets, setting their size, when they become visible.
                    isLayoutContainer: true,

                    buildRendering: function() {
                        this.inherited(arguments);
                        domClass.add(this.domNode, "dijitContainer");
                    },

                    startup: function() {
                        // summary:
                        //		Called after all the widgets have been instantiated and their
                        //		dom nodes have been inserted somewhere under win.doc.body.
                        //
                        //		Widgets should override this method to do any initialization
                        //		dependent on other widgets existing, and then call
                        //		this superclass method to finish things off.
                        //
                        //		startup() in subclasses shouldn't do anything
                        //		size related because the size of the widget hasn't been set yet.

                        if (this._started) {
                            return;
                        }

                        // Need to call inherited first - so that child widgets get started
                        // up correctly
                        this.inherited(arguments);

                        // If I am a not being controlled by a parent layout widget...
                        var parent = this.getParent && this.getParent();
                        if (!(parent && parent.isLayoutContainer)) {
                            // Do recursive sizing and layout of all my descendants
                            // (passing in no argument to resize means that it has to glean the size itself)
                            this.resize();

                            // Since my parent isn't a layout container, and my style *may be* width=height=100%
                            // or something similar (either set directly or via a CSS class),
                            // monitor when viewport size changes so that I can re-layout.
                            this.own(Viewport.on("resize", lang.hitch(this, "resize")));
                        }
                    },

                    resize: function(changeSize, resultSize) {
                        // summary:
                        //		Call this to resize a widget, or after its size has changed.
                        // description:
                        //		####Change size mode:
                        //
                        //		When changeSize is specified, changes the marginBox of this widget
                        //		and forces it to re-layout its contents accordingly.
                        //		changeSize may specify height, width, or both.
                        //
                        //		If resultSize is specified it indicates the size the widget will
                        //		become after changeSize has been applied.
                        //
                        //		####Notification mode:
                        //
                        //		When changeSize is null, indicates that the caller has already changed
                        //		the size of the widget, or perhaps it changed because the browser
                        //		window was resized.  Tells widget to re-layout its contents accordingly.
                        //
                        //		If resultSize is also specified it indicates the size the widget has
                        //		become.
                        //
                        //		In either mode, this method also:
                        //
                        //		1. Sets this._borderBox and this._contentBox to the new size of
                        //			the widget.  Queries the current domNode size if necessary.
                        //		2. Calls layout() to resize contents (and maybe adjust child widgets).
                        // changeSize: Object?
                        //		Sets the widget to this margin-box size and position.
                        //		May include any/all of the following properties:
                        //	|	{w: int, h: int, l: int, t: int}
                        // resultSize: Object?
                        //		The margin-box size of this widget after applying changeSize (if
                        //		changeSize is specified).  If caller knows this size and
                        //		passes it in, we don't need to query the browser to get the size.
                        //	|	{w: int, h: int}

                        var node = this.domNode;

                        // set margin box size, unless it wasn't specified, in which case use current size
                        if (changeSize) {
                            domGeometry.setMarginBox(node, changeSize);
                        }

                        // If either height or width wasn't specified by the user, then query node for it.
                        // But note that setting the margin box and then immediately querying dimensions may return
                        // inaccurate results, so try not to depend on it.
                        var mb = resultSize || {};
                        lang.mixin(mb, changeSize || {}); // changeSize overrides resultSize
                        if (!("h" in mb) || !("w" in mb)) {
                            mb = lang.mixin(domGeometry.getMarginBox(node), mb); // just use domGeometry.marginBox() to fill in missing values
                        }

                        // Compute and save the size of my border box and content box
                        // (w/out calling domGeometry.getContentBox() since that may fail if size was recently set)
                        var cs = domStyle.getComputedStyle(node);
                        var me = domGeometry.getMarginExtents(node, cs);
                        var be = domGeometry.getBorderExtents(node, cs);
                        var bb = (this._borderBox = {
                            w: mb.w - (me.w + be.w),
                            h: mb.h - (me.h + be.h)
                        });
                        var pe = domGeometry.getPadExtents(node, cs);
                        this._contentBox = {
                            l: domStyle.toPixelValue(node, cs.paddingLeft),
                            t: domStyle.toPixelValue(node, cs.paddingTop),
                            w: bb.w - pe.w,
                            h: bb.h - pe.h
                        };

                        // Callback for widget to adjust size of its children
                        this.layout();
                    },

                    layout: function() {
                        // summary:
                        //		Widgets override this method to size and position their contents/children.
                        //		When this is called this._contentBox is guaranteed to be set (see resize()).
                        //
                        //		This is called after startup(), and also when the widget's size has been
                        //		changed.
                        // tags:
                        //		protected extension
                    },

                    _setupChild: function( /*dijit/_WidgetBase*/ child) {
                        // summary:
                        //		Common setup for initial children and children which are added after startup
                        // tags:
                        //		protected extension

                        var cls = this.baseClass + "-child " +
                            (child.baseClass ? this.baseClass + "-" + child.baseClass : "");
                        domClass.add(child.domNode, cls);
                    },

                    addChild: function( /*dijit/_WidgetBase*/ child, /*Integer?*/ insertIndex) {
                        // Overrides _Container.addChild() to call _setupChild()
                        this.inherited(arguments);
                        if (this._started) {
                            this._setupChild(child);
                        }
                    },

                    removeChild: function( /*dijit/_WidgetBase*/ child) {
                        // Overrides _Container.removeChild() to remove class added by _setupChild()
                        var cls = this.baseClass + "-child" +
                            (child.baseClass ?
                                " " + this.baseClass + "-" + child.baseClass : "");
                        domClass.remove(child.domNode, cls);

                        this.inherited(arguments);
                    }
                });
            });

        },
        'dijit/popup': function() {
            define("dijit/popup", [
                "dojo/_base/array", // array.forEach array.some
                "dojo/aspect",
                "dojo/_base/connect", // connect._keypress
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.isDescendant
                "dojo/dom-attr", // domAttr.set
                "dojo/dom-construct", // domConstruct.create domConstruct.destroy
                "dojo/dom-geometry", // domGeometry.isBodyLtr
                "dojo/dom-style", // domStyle.set
                "dojo/_base/event", // event.stop
                "dojo/keys",
                "dojo/_base/lang", // lang.hitch
                "dojo/on",
                "dojo/sniff", // has("ie") has("mozilla")
                "./place",
                "./BackgroundIframe",
                "./main" // dijit (defining dijit.popup to match API doc)
            ], function(array, aspect, connect, declare, dom, domAttr, domConstruct, domGeometry, domStyle, event, keys, lang, on, has,
                place, BackgroundIframe, dijit) {

                // module:
                //		dijit/popup

                /*=====
                var __OpenArgs = {
                	// popup: Widget
                	//		widget to display
                	// parent: Widget
                	//		the button etc. that is displaying this popup
                	// around: DomNode
                	//		DOM node (typically a button); place popup relative to this node.  (Specify this *or* "x" and "y" parameters.)
                	// x: Integer
                	//		Absolute horizontal position (in pixels) to place node at.  (Specify this *or* "around" parameter.)
                	// y: Integer
                	//		Absolute vertical position (in pixels) to place node at.  (Specify this *or* "around" parameter.)
                	// orient: Object|String
                	//		When the around parameter is specified, orient should be a list of positions to try, ex:
                	//	|	[ "below", "above" ]
                	//		For backwards compatibility it can also be an (ordered) hash of tuples of the form
                	//		(around-node-corner, popup-node-corner), ex:
                	//	|	{ "BL": "TL", "TL": "BL" }
                	//		where BL means "bottom left" and "TL" means "top left", etc.
                	//
                	//		dijit/popup.open() tries to position the popup according to each specified position, in order,
                	//		until the popup appears fully within the viewport.
                	//
                	//		The default value is ["below", "above"]
                	//
                	//		When an (x,y) position is specified rather than an around node, orient is either
                	//		"R" or "L".  R (for right) means that it tries to put the popup to the right of the mouse,
                	//		specifically positioning the popup's top-right corner at the mouse position, and if that doesn't
                	//		fit in the viewport, then it tries, in order, the bottom-right corner, the top left corner,
                	//		and the top-right corner.
                	// onCancel: Function
                	//		callback when user has canceled the popup by:
                	//
                	//		1. hitting ESC or
                	//		2. by using the popup widget's proprietary cancel mechanism (like a cancel button in a dialog);
                	//		   i.e. whenever popupWidget.onCancel() is called, args.onCancel is called
                	// onClose: Function
                	//		callback whenever this popup is closed
                	// onExecute: Function
                	//		callback when user "executed" on the popup/sub-popup by selecting a menu choice, etc. (top menu only)
                	// padding: place.__Position
                	//		adding a buffer around the opening position. This is only useful when around is not set.
                };
                =====*/

                function destroyWrapper() {
                    // summary:
                    //		Function to destroy wrapper when popup widget is destroyed.
                    //		Left in this scope to avoid memory leak on IE8 on refresh page, see #15206.
                    if (this._popupWrapper) {
                        domConstruct.destroy(this._popupWrapper);
                        delete this._popupWrapper;
                    }
                }

                var PopupManager = declare(null, {
                    // summary:
                    //		Used to show drop downs (ex: the select list of a ComboBox)
                    //		or popups (ex: right-click context menus).

                    // _stack: dijit/_WidgetBase[]
                    //		Stack of currently popped up widgets.
                    //		(someone opened _stack[0], and then it opened _stack[1], etc.)
                    _stack: [],

                    // _beginZIndex: Number
                    //		Z-index of the first popup.   (If first popup opens other
                    //		popups they get a higher z-index.)
                    _beginZIndex: 1000,

                    _idGen: 1,

                    _createWrapper: function( /*Widget*/ widget) {
                        // summary:
                        //		Initialization for widgets that will be used as popups.
                        //		Puts widget inside a wrapper DIV (if not already in one),
                        //		and returns pointer to that wrapper DIV.

                        var wrapper = widget._popupWrapper,
                            node = widget.domNode;

                        if (!wrapper) {
                            // Create wrapper <div> for when this widget [in the future] will be used as a popup.
                            // This is done early because of IE bugs where creating/moving DOM nodes causes focus
                            // to go wonky, see tests/robot/Toolbar.html to reproduce
                            wrapper = domConstruct.create("div", {
                                "class": "dijitPopup",
                                style: {
                                    display: "none"
                                },
                                role: "presentation"
                            }, widget.ownerDocumentBody);
                            wrapper.appendChild(node);

                            var s = node.style;
                            s.display = "";
                            s.visibility = "";
                            s.position = "";
                            s.top = "0px";

                            widget._popupWrapper = wrapper;
                            aspect.after(widget, "destroy", destroyWrapper, true);
                        }

                        return wrapper;
                    },

                    moveOffScreen: function( /*Widget*/ widget) {
                        // summary:
                        //		Moves the popup widget off-screen.
                        //		Do not use this method to hide popups when not in use, because
                        //		that will create an accessibility issue: the offscreen popup is
                        //		still in the tabbing order.

                        // Create wrapper if not already there
                        var wrapper = this._createWrapper(widget);

                        domStyle.set(wrapper, {
                            visibility: "hidden",
                            top: "-9999px", // prevent transient scrollbar causing misalign (#5776), and initial flash in upper left (#10111)
                            display: ""
                        });
                    },

                    hide: function( /*Widget*/ widget) {
                        // summary:
                        //		Hide this popup widget (until it is ready to be shown).
                        //		Initialization for widgets that will be used as popups
                        //
                        //		Also puts widget inside a wrapper DIV (if not already in one)
                        //
                        //		If popup widget needs to layout it should
                        //		do so when it is made visible, and popup._onShow() is called.

                        // Create wrapper if not already there
                        var wrapper = this._createWrapper(widget);

                        domStyle.set(wrapper, "display", "none");
                    },

                    getTopPopup: function() {
                        // summary:
                        //		Compute the closest ancestor popup that's *not* a child of another popup.
                        //		Ex: For a TooltipDialog with a button that spawns a tree of menus, find the popup of the button.
                        var stack = this._stack;
                        for (var pi = stack.length - 1; pi > 0 && stack[pi].parent === stack[pi - 1].widget; pi--) {
                            /* do nothing, just trying to get right value for pi */
                        }
                        return stack[pi];
                    },

                    open: function( /*__OpenArgs*/ args) {
                        // summary:
                        //		Popup the widget at the specified position
                        //
                        // example:
                        //		opening at the mouse position
                        //		|		popup.open({popup: menuWidget, x: evt.pageX, y: evt.pageY});
                        //
                        // example:
                        //		opening the widget as a dropdown
                        //		|		popup.open({parent: this, popup: menuWidget, around: this.domNode, onClose: function(){...}});
                        //
                        //		Note that whatever widget called dijit/popup.open() should also listen to its own _onBlur callback
                        //		(fired from _base/focus.js) to know that focus has moved somewhere else and thus the popup should be closed.

                        var stack = this._stack,
                            widget = args.popup,
                            orient = args.orient || ["below", "below-alt", "above", "above-alt"],
                            ltr = args.parent ? args.parent.isLeftToRight() : domGeometry.isBodyLtr(widget.ownerDocument),
                            around = args.around,
                            id = (args.around && args.around.id) ? (args.around.id + "_dropdown") : ("popup_" + this._idGen++);

                        // If we are opening a new popup that isn't a child of a currently opened popup, then
                        // close currently opened popup(s).   This should happen automatically when the old popups
                        // gets the _onBlur() event, except that the _onBlur() event isn't reliable on IE, see [22198].
                        while (stack.length && (!args.parent || !dom.isDescendant(args.parent.domNode, stack[stack.length - 1].widget.domNode))) {
                            this.close(stack[stack.length - 1].widget);
                        }

                        // Get pointer to popup wrapper, and create wrapper if it doesn't exist
                        var wrapper = this._createWrapper(widget);


                        domAttr.set(wrapper, {
                            id: id,
                            style: {
                                zIndex: this._beginZIndex + stack.length
                            },
                            "class": "dijitPopup " + (widget.baseClass || widget["class"] || "").split(" ")[0] + "Popup",
                            dijitPopupParent: args.parent ? args.parent.id : ""
                        });

                        if (has("ie") || has("mozilla")) {
                            if (!widget.bgIframe) {
                                // setting widget.bgIframe triggers cleanup in _Widget.destroy()
                                widget.bgIframe = new BackgroundIframe(wrapper);
                            }
                        }

                        // position the wrapper node and make it visible
                        var best = around ?
                            place.around(wrapper, around, orient, ltr, widget.orient ? lang.hitch(widget, "orient") : null) :
                            place.at(wrapper, args, orient == 'R' ? ['TR', 'BR', 'TL', 'BL'] : ['TL', 'BL', 'TR', 'BR'], args.padding);

                        wrapper.style.display = "";
                        wrapper.style.visibility = "visible";
                        widget.domNode.style.visibility = "visible"; // counteract effects from _HasDropDown

                        var handlers = [];

                        // provide default escape and tab key handling
                        // (this will work for any widget, not just menu)
                        handlers.push(on(wrapper, connect._keypress, lang.hitch(this, function(evt) {
                            if (evt.charOrCode == keys.ESCAPE && args.onCancel) {
                                event.stop(evt);
                                args.onCancel();
                            } else if (evt.charOrCode === keys.TAB) {
                                event.stop(evt);
                                var topPopup = this.getTopPopup();
                                if (topPopup && topPopup.onCancel) {
                                    topPopup.onCancel();
                                }
                            }
                        })));

                        // watch for cancel/execute events on the popup and notify the caller
                        // (for a menu, "execute" means clicking an item)
                        if (widget.onCancel && args.onCancel) {
                            handlers.push(widget.on("cancel", args.onCancel));
                        }

                        handlers.push(widget.on(widget.onExecute ? "execute" : "change", lang.hitch(this, function() {
                            var topPopup = this.getTopPopup();
                            if (topPopup && topPopup.onExecute) {
                                topPopup.onExecute();
                            }
                        })));

                        stack.push({
                            widget: widget,
                            parent: args.parent,
                            onExecute: args.onExecute,
                            onCancel: args.onCancel,
                            onClose: args.onClose,
                            handlers: handlers
                        });

                        if (widget.onOpen) {
                            // TODO: in 2.0 standardize onShow() (used by StackContainer) and onOpen() (used here)
                            widget.onOpen(best);
                        }

                        return best;
                    },

                    close: function( /*Widget?*/ popup) {
                        // summary:
                        //		Close specified popup and any popups that it parented.
                        //		If no popup is specified, closes all popups.

                        var stack = this._stack;

                        // Basically work backwards from the top of the stack closing popups
                        // until we hit the specified popup, but IIRC there was some issue where closing
                        // a popup would cause others to close too.  Thus if we are trying to close B in [A,B,C]
                        // closing C might close B indirectly and then the while() condition will run where stack==[A]...
                        // so the while condition is constructed defensively.
                        while ((popup && array.some(stack, function(elem) {
                                return elem.widget == popup;
                            })) ||
                            (!popup && stack.length)) {
                            var top = stack.pop(),
                                widget = top.widget,
                                onClose = top.onClose;

                            if (widget.onClose) {
                                // TODO: in 2.0 standardize onHide() (used by StackContainer) and onClose() (used here)
                                widget.onClose();
                            }

                            var h;
                            while (h = top.handlers.pop()) {
                                h.remove();
                            }

                            // Hide the widget and it's wrapper unless it has already been destroyed in above onClose() etc.
                            if (widget && widget.domNode) {
                                this.hide(widget);
                            }

                            if (onClose) {
                                onClose();
                            }
                        }
                    }
                });

                return (dijit.popup = new PopupManager());
            });

        },
        'dijit/_base/manager': function() {
            define("dijit/_base/manager", [
                "dojo/_base/array",
                "dojo/_base/config", // defaultDuration
                "dojo/_base/lang",
                "../registry",
                "../main" // for setting exports to dijit namespace
            ], function(array, config, lang, registry, dijit) {

                // module:
                //		dijit/_base/manager

                var exports = {
                    // summary:
                    //		Deprecated.  Shim to methods on registry, plus a few other declarations.
                    //		New code should access dijit/registry directly when possible.
                };

                array.forEach(["byId", "getUniqueId", "findWidgets", "_destroyAll", "byNode", "getEnclosingWidget"], function(name) {
                    exports[name] = registry[name];
                });

                lang.mixin(exports, {
                    // defaultDuration: Integer
                    //		The default fx.animation speed (in ms) to use for all Dijit
                    //		transitional fx.animations, unless otherwise specified
                    //		on a per-instance basis. Defaults to 200, overrided by
                    //		`djConfig.defaultDuration`
                    defaultDuration: config["defaultDuration"] || 200
                });

                lang.mixin(dijit, exports);

                /*===== return exports; =====*/
                return dijit; // for back compat :-(
            });

        },
        'dijit/layout/StackController': function() {
            define("dijit/layout/StackController", [
                "dojo/_base/array", // array.forEach array.indexOf array.map
                "dojo/_base/declare", // declare
                "dojo/dom-class",
                "dojo/_base/event", // event.stop
                "dojo/keys", // keys
                "dojo/_base/lang", // lang.getObject
                "dojo/on",
                "../focus", // focus.focus()
                "../registry", // registry.byId
                "../_Widget",
                "../_TemplatedMixin",
                "../_Container",
                "../form/ToggleButton",
                "dojo/i18n!../nls/common"
            ], function(array, declare, domClass, event, keys, lang, on,
                focus, registry, _Widget, _TemplatedMixin, _Container, ToggleButton) {

                // module:
                //		dijit/layout/StackController

                var StackButton = declare("dijit.layout._StackButton", ToggleButton, {
                    // summary:
                    //		Internal widget used by StackContainer.
                    // description:
                    //		The button-like or tab-like object you click to select or delete a page
                    // tags:
                    //		private

                    // Override _FormWidget.tabIndex.
                    // StackContainer buttons are not in the tab order by default.
                    // Probably we should be calling this.startupKeyNavChildren() instead.
                    tabIndex: "-1",

                    // closeButton: Boolean
                    //		When true, display close button for this tab
                    closeButton: false,

                    _aria_attr: "aria-selected",

                    buildRendering: function( /*Event*/ evt) {
                        this.inherited(arguments);
                        (this.focusNode || this.domNode).setAttribute("role", "tab");
                    }
                });


                var StackController = declare("dijit.layout.StackController", [_Widget, _TemplatedMixin, _Container], {
                    // summary:
                    //		Set of buttons to select a page in a `dijit/layout/StackContainer`
                    // description:
                    //		Monitors the specified StackContainer, and whenever a page is
                    //		added, deleted, or selected, updates itself accordingly.

                    baseClass: "dijitStackController",

                    templateString: "<span role='tablist' data-dojo-attach-event='onkeypress'></span>",

                    // containerId: [const] String
                    //		The id of the page container that I point to
                    containerId: "",

                    // buttonWidget: [const] Constructor
                    //		The button widget to create to correspond to each page
                    buttonWidget: StackButton,

                    // buttonWidgetCloseClass: String
                    //		CSS class of [x] close icon, used by event delegation code to tell when close button was clicked
                    buttonWidgetCloseClass: "dijitStackCloseButton",

                    constructor: function(params /*===== , srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree

                        this.pane2button = {}; // mapping from pane id to buttons
                    },

                    postCreate: function() {
                        this.inherited(arguments);

                        // Listen to notifications from StackContainer.
                        // TODO: do this through bubbled events instead of topics
                        this.subscribe(this.containerId + "-startup", "onStartup");
                        this.subscribe(this.containerId + "-addChild", "onAddChild");
                        this.subscribe(this.containerId + "-removeChild", "onRemoveChild");
                        this.subscribe(this.containerId + "-selectChild", "onSelectChild");
                        this.subscribe(this.containerId + "-containerKeyPress", "onContainerKeyPress");

                        // Listen for click events to select or close tabs.
                        // No need to worry about ENTER/SPACE key handling: tabs are selected via left/right arrow keys,
                        // and closed via shift-F10 (to show the close menu).
                        this.connect(this.containerNode, 'click', function(evt) {
                            var button = registry.getEnclosingWidget(evt.target);
                            if (button != this.containerNode && !button.disabled && button.page) {
                                for (var target = evt.target; target !== this.containerNode; target = target.parentNode) {
                                    if (domClass.contains(target, this.buttonWidgetCloseClass)) {
                                        this.onCloseButtonClick(button.page);
                                        break;
                                    } else if (target == button.domNode) {
                                        this.onButtonClick(button.page);
                                        break;
                                    }
                                }
                            }
                        });
                    },

                    onStartup: function( /*Object*/ info) {
                        // summary:
                        //		Called after StackContainer has finished initializing
                        // tags:
                        //		private
                        array.forEach(info.children, this.onAddChild, this);
                        if (info.selected) {
                            // Show button corresponding to selected pane (unless selected
                            // is null because there are no panes)
                            this.onSelectChild(info.selected);
                        }

                        // Reflect events like page title changes to tab buttons
                        var containerNode = registry.byId(this.containerId).containerNode,
                            pane2button = this.pane2button,
                            paneToButtonAttr = {
                                "title": "label",
                                "showtitle": "showLabel",
                                "iconclass": "iconClass",
                                "closable": "closeButton",
                                "tooltip": "title",
                                "disabled": "disabled"
                            },
                            connectFunc = function(attr, buttonAttr) {
                                return on(containerNode, "attrmodified-" + attr, function(evt) {
                                    var button = pane2button[evt.detail && evt.detail.widget && evt.detail.widget.id];
                                    if (button) {
                                        button.set(buttonAttr, evt.detail.newValue);
                                    }
                                });
                            };
                        for (var attr in paneToButtonAttr) {
                            this.own(connectFunc(attr, paneToButtonAttr[attr]));
                        }
                    },

                    destroy: function() {
                        // Since the buttons are internal to the StackController widget, destroy() should remove them, which is
                        // done by calling onRemoveChild().
                        for (var pane in this.pane2button) {
                            this.onRemoveChild(registry.byId(pane));
                        }

                        // TODO: destroyRecursive() will call destroy() on each child button twice.   Once from the above code,
                        // and once because _WidgetBase.destroyDescendants() deletes anything inside of this.containerNode.
                        // Probably shouldn't attach that DOMNode as this.containerNode.

                        this.inherited(arguments);
                    },

                    onAddChild: function( /*dijit/_WidgetBase*/ page, /*Integer?*/ insertIndex) {
                        // summary:
                        //		Called whenever a page is added to the container.
                        //		Create button corresponding to the page.
                        // tags:
                        //		private

                        // create an instance of the button widget
                        // (remove typeof buttonWidget == string support in 2.0)
                        var Cls = lang.isString(this.buttonWidget) ? lang.getObject(this.buttonWidget) : this.buttonWidget;
                        var button = new Cls({
                            id: this.id + "_" + page.id,
                            name: this.id + "_" + page.id,
                            label: page.title,
                            disabled: page.disabled,
                            ownerDocument: this.ownerDocument,
                            dir: page.dir,
                            lang: page.lang,
                            textDir: page.textDir,
                            showLabel: page.showTitle,
                            iconClass: page.iconClass,
                            closeButton: page.closable,
                            title: page.tooltip,
                            page: page
                        });

                        this.addChild(button, insertIndex);
                        this.pane2button[page.id] = button;
                        page.controlButton = button; // this value might be overwritten if two tabs point to same container
                        if (!this._currentChild) {
                            // If this is the first child then StackContainer will soon publish that it's selected,
                            // but before that StackContainer calls layout(), and before layout() is called the
                            // StackController needs to have the proper height... which means that the button needs
                            // to be marked as selected now.   See test_TabContainer_CSS.html for test.
                            this.onSelectChild(page);
                        }
                    },

                    onRemoveChild: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Called whenever a page is removed from the container.
                        //		Remove the button corresponding to the page.
                        // tags:
                        //		private

                        if (this._currentChild === page) {
                            this._currentChild = null;
                        }

                        var button = this.pane2button[page.id];
                        if (button) {
                            this.removeChild(button);
                            delete this.pane2button[page.id];
                            button.destroy();
                        }
                        delete page.controlButton;
                    },

                    onSelectChild: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Called when a page has been selected in the StackContainer, either by me or by another StackController
                        // tags:
                        //		private

                        if (!page) {
                            return;
                        }

                        if (this._currentChild) {
                            var oldButton = this.pane2button[this._currentChild.id];
                            oldButton.set('checked', false);
                            oldButton.focusNode.setAttribute("tabIndex", "-1");
                        }

                        var newButton = this.pane2button[page.id];
                        newButton.set('checked', true);
                        this._currentChild = page;
                        newButton.focusNode.setAttribute("tabIndex", "0");
                        var container = registry.byId(this.containerId);
                        container.containerNode.setAttribute("aria-labelledby", newButton.id);
                    },

                    onButtonClick: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Called whenever one of my child buttons is pressed in an attempt to select a page
                        // tags:
                        //		private

                        var button = this.pane2button[page.id];

                        // For TabContainer where the tabs are <span>, need to set focus explicitly when left/right arrow
                        focus.focus(button.focusNode);

                        if (this._currentChild && this._currentChild.id === page.id) {
                            //In case the user clicked the checked button, keep it in the checked state because it remains to be the selected stack page.
                            button.set('checked', true);
                        }
                        var container = registry.byId(this.containerId);
                        container.selectChild(page);
                    },

                    onCloseButtonClick: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Called whenever one of my child buttons [X] is pressed in an attempt to close a page
                        // tags:
                        //		private

                        var container = registry.byId(this.containerId);
                        container.closeChild(page);
                        if (this._currentChild) {
                            var b = this.pane2button[this._currentChild.id];
                            if (b) {
                                focus.focus(b.focusNode || b.domNode);
                            }
                        }
                    },

                    // TODO: this is a bit redundant with forward, back api in StackContainer
                    adjacent: function( /*Boolean*/ forward) {
                        // summary:
                        //		Helper for onkeypress to find next/previous button
                        // tags:
                        //		private

                        if (!this.isLeftToRight() && (!this.tabPosition || /top|bottom/.test(this.tabPosition))) {
                            forward = !forward;
                        }
                        // find currently focused button in children array
                        var children = this.getChildren();
                        var idx = array.indexOf(children, this.pane2button[this._currentChild.id]),
                            current = children[idx];

                        // Pick next/previous non-disabled button to focus on.   If we get back to the original button it means
                        // that all buttons must be disabled, so return current child to avoid an infinite loop.
                        var child;
                        do {
                            idx = (idx + (forward ? 1 : children.length - 1)) % children.length;
                            child = children[idx];
                        } while (child.disabled && child != current);

                        return child; // dijit/_WidgetBase
                    },

                    onkeypress: function( /*Event*/ e) {
                        // summary:
                        //		Handle keystrokes on the page list, for advancing to next/previous button
                        //		and closing the current page if the page is closable.
                        // tags:
                        //		private

                        if (this.disabled || e.altKey) {
                            return;
                        }
                        var forward = null;
                        if (e.ctrlKey || !e._djpage) {
                            switch (e.charOrCode) {
                                case keys.LEFT_ARROW:
                                case keys.UP_ARROW:
                                    if (!e._djpage) {
                                        forward = false;
                                    }
                                    break;
                                case keys.PAGE_UP:
                                    if (e.ctrlKey) {
                                        forward = false;
                                    }
                                    break;
                                case keys.RIGHT_ARROW:
                                case keys.DOWN_ARROW:
                                    if (!e._djpage) {
                                        forward = true;
                                    }
                                    break;
                                case keys.PAGE_DOWN:
                                    if (e.ctrlKey) {
                                        forward = true;
                                    }
                                    break;
                                case keys.HOME:
                                    // Navigate to first non-disabled child
                                    var children = this.getChildren();
                                    for (var idx = 0; idx < children.length; idx++) {
                                        var child = children[idx];
                                        if (!child.disabled) {
                                            this.onButtonClick(child.page);
                                            break;
                                        }
                                    }
                                    event.stop(e);
                                    break;
                                case keys.END:
                                    // Navigate to last non-disabled child
                                    var children = this.getChildren();
                                    for (var idx = children.length - 1; idx >= 0; idx--) {
                                        var child = children[idx];
                                        if (!child.disabled) {
                                            this.onButtonClick(child.page);
                                            break;
                                        }
                                    }
                                    event.stop(e);
                                    break;
                                case keys.DELETE:
                                    if (this._currentChild.closable) {
                                        this.onCloseButtonClick(this._currentChild);
                                    }
                                    event.stop(e);
                                    break;
                                default:
                                    if (e.ctrlKey) {
                                        if (e.charOrCode === keys.TAB) {
                                            this.onButtonClick(this.adjacent(!e.shiftKey).page);
                                            event.stop(e);
                                        } else if (e.charOrCode == "w") {
                                            if (this._currentChild.closable) {
                                                this.onCloseButtonClick(this._currentChild);
                                            }
                                            event.stop(e); // avoid browser tab closing.
                                        }
                                    }
                            }
                            // handle next/previous page navigation (left/right arrow, etc.)
                            if (forward !== null) {
                                this.onButtonClick(this.adjacent(forward).page);
                                event.stop(e);
                            }
                        }
                    },

                    onContainerKeyPress: function( /*Object*/ info) {
                        // summary:
                        //		Called when there was a keypress on the container
                        // tags:
                        //		private
                        info.e._djpage = info.page;
                        this.onkeypress(info.e);
                    }
                });

                StackController.StackButton = StackButton; // for monkey patching

                return StackController;
            });

        },
        'hsbcwidget/ValidationTextBoxCam10': function() {
            define([
                "dojo/_base/declare",
                "dijit/form/ValidationTextBox",
                "dijit/Tooltip"
            ], function(
                declare,
                ValidationTextBox,
                Tooltip
            ) {

                return declare([ValidationTextBox], {
                    startup: function() {

                        this.inherited(arguments);
                    },

                    successMessage: "",


                    displayMessage: function(message) {

                        if (message && this.focused) {

                        } else {

                        }
                    }

                });
            });
        },
        'url:dijit/templates/TooltipDialog.html': "<div role=\"presentation\" tabIndex=\"-1\">\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" data-dojo-attach-point=\"containerNode\" role=\"dialog\"></div>\n\t</div>\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\" data-dojo-attach-point=\"connectorNode\"></div>\n</div>\n",
        'dojo/dnd/Mover': function() {
            define([
                "../_base/array", "../_base/declare", "../_base/event", "../_base/lang", "../sniff", "../_base/window",
                "../dom", "../dom-geometry", "../dom-style", "../Evented", "../on", "../touch", "./common", "./autoscroll"
            ], function(array, declare, event, lang, has, win, dom, domGeom, domStyle, Evented, on, touch, dnd, autoscroll) {

                // module:
                //		dojo/dnd/Mover

                return declare("dojo.dnd.Mover", [Evented], {
                    // summary:
                    //		an object which makes a node follow the mouse, or touch-drag on touch devices.
                    //		Used as a default mover, and as a base class for custom movers.

                    constructor: function(node, e, host) {
                        // node: Node
                        //		a node (or node's id) to be moved
                        // e: Event
                        //		a mouse event, which started the move;
                        //		only pageX and pageY properties are used
                        // host: Object?
                        //		object which implements the functionality of the move,
                        //	 	and defines proper events (onMoveStart and onMoveStop)
                        this.node = dom.byId(node);
                        this.marginBox = {
                            l: e.pageX,
                            t: e.pageY
                        };
                        this.mouseButton = e.button;
                        var h = (this.host = host),
                            d = node.ownerDocument;
                        this.events = [
                            // At the start of a drag, onFirstMove is called, and then the following
                            // listener is disconnected.
                            on(d, touch.move, lang.hitch(this, "onFirstMove")),

                            // These are called continually during the drag
                            on(d, touch.move, lang.hitch(this, "onMouseMove")),

                            // And these are called at the end of the drag
                            on(d, touch.release, lang.hitch(this, "onMouseUp")),

                            // cancel text selection and text dragging
                            on(d, "dragstart", event.stop),
                            on(d.body, "selectstart", event.stop)
                        ];

                        // Tell autoscroll that a drag is starting
                        autoscroll.autoScrollStart(d);

                        // notify that the move has started
                        if (h && h.onMoveStart) {
                            h.onMoveStart(this);
                        }
                    },
                    // mouse event processors
                    onMouseMove: function(e) {
                        // summary:
                        //		event processor for onmousemove/ontouchmove
                        // e: Event
                        //		mouse/touch event
                        autoscroll.autoScroll(e);
                        var m = this.marginBox;
                        this.host.onMove(this, {
                            l: m.l + e.pageX,
                            t: m.t + e.pageY
                        }, e);
                        event.stop(e);
                    },
                    onMouseUp: function(e) {
                        if (has("webkit") && has("mac") && this.mouseButton == 2 ?
                            e.button == 0 : this.mouseButton == e.button) { // TODO Should condition be met for touch devices, too?
                            this.destroy();
                        }
                        event.stop(e);
                    },
                    // utilities
                    onFirstMove: function(e) {
                        // summary:
                        //		makes the node absolute; it is meant to be called only once.
                        //		relative and absolutely positioned nodes are assumed to use pixel units
                        var s = this.node.style,
                            l, t, h = this.host;
                        switch (s.position) {
                            case "relative":
                            case "absolute":
                                // assume that left and top values are in pixels already
                                l = Math.round(parseFloat(s.left)) || 0;
                                t = Math.round(parseFloat(s.top)) || 0;
                                break;
                            default:
                                s.position = "absolute"; // enforcing the absolute mode
                                var m = domGeom.getMarginBox(this.node);
                                // event.pageX/pageY (which we used to generate the initial
                                // margin box) includes padding and margin set on the body.
                                // However, setting the node's position to absolute and then
                                // doing domGeom.marginBox on it *doesn't* take that additional
                                // space into account - so we need to subtract the combined
                                // padding and margin.  We use getComputedStyle and
                                // _getMarginBox/_getContentBox to avoid the extra lookup of
                                // the computed style.
                                var b = win.doc.body;
                                var bs = domStyle.getComputedStyle(b);
                                var bm = domGeom.getMarginBox(b, bs);
                                var bc = domGeom.getContentBox(b, bs);
                                l = m.l - (bc.l - bm.l);
                                t = m.t - (bc.t - bm.t);
                                break;
                        }
                        this.marginBox.l = l - this.marginBox.l;
                        this.marginBox.t = t - this.marginBox.t;
                        if (h && h.onFirstMove) {
                            h.onFirstMove(this, e);
                        }

                        // Disconnect touch.move that call this function
                        this.events.shift().remove();
                    },
                    destroy: function() {
                        // summary:
                        //		stops the move, deletes all references, so the object can be garbage-collected
                        array.forEach(this.events, function(handle) {
                            handle.remove();
                        });
                        // undo global settings
                        var h = this.host;
                        if (h && h.onMoveStop) {
                            h.onMoveStop(this);
                        }
                        // destroy objects
                        this.events = this.node = this.host = null;
                    }
                });

            });

        },
        'dojo/request/default': function() {
            define("dojo/request/default", [
                'exports',
                'require',
                '../has'
            ], function(exports, require, has) {
                var defId = has('config-requestProvider'),
                    platformId;

                if (1) {
                    platformId = './xhr';
                } else if (0) {
                    platformId = './node';
                    /* TODO:
	}else if( 0 ){
		platformId = './rhino';
   */
                }

                if (!defId) {
                    defId = platformId;
                }

                exports.getPlatformDefaultId = function() {
                    return platformId;
                };

                exports.load = function(id, parentRequire, loaded, config) {
                    require([id == 'platform' ? platformId : defId], function(provider) {
                        loaded(provider);
                    });
                };
            });

        },
        'dijit/layout/TabContainer': function() {
            define("dijit/layout/TabContainer", [
                "dojo/_base/lang", // lang.getObject
                "dojo/_base/declare", // declare
                "./_TabContainerBase",
                "./TabController",
                "./ScrollingTabController"
            ], function(lang, declare, _TabContainerBase, TabController, ScrollingTabController) {

                // module:
                //		dijit/layout/TabContainer


                return declare("dijit.layout.TabContainer", _TabContainerBase, {
                    // summary:
                    //		A Container with tabs to select each child (only one of which is displayed at a time).
                    // description:
                    //		A TabContainer is a container that has multiple panes, but shows only
                    //		one pane at a time.  There are a set of tabs corresponding to each pane,
                    //		where each tab has the name (aka title) of the pane, and optionally a close button.
                    //
                    //		See `StackContainer.ChildWidgetProperties` for details on the properties that can be set on
                    //		children of a `TabContainer`.

                    // useMenu: [const] Boolean
                    //		True if a menu should be used to select tabs when they are too
                    //		wide to fit the TabContainer, false otherwise.
                    useMenu: true,

                    // useSlider: [const] Boolean
                    //		True if a slider should be used to select tabs when they are too
                    //		wide to fit the TabContainer, false otherwise.
                    useSlider: true,

                    // controllerWidget: Class
                    //		An optional parameter to override the widget used to display the tab labels
                    controllerWidget: "",

                    _makeController: function( /*DomNode*/ srcNode) {
                        // summary:
                        //		Instantiate tablist controller widget and return reference to it.
                        //		Callback from _TabContainerBase.postCreate().
                        // tags:
                        //		protected extension

                        // "string" branch for back-compat, remove for 2.0
                        var cls = this.baseClass + "-tabs" + (this.doLayout ? "" : " dijitTabNoLayout"),
                            TabController = typeof this.controllerWidget == "string" ? lang.getObject(this.controllerWidget) :
                            this.controllerWidget;

                        return new TabController({
                            id: this.id + "_tablist",
                            ownerDocument: this.ownerDocument,
                            dir: this.dir,
                            lang: this.lang,
                            textDir: this.textDir,
                            tabPosition: this.tabPosition,
                            doLayout: this.doLayout,
                            containerId: this.id,
                            "class": cls,
                            nested: this.nested,
                            useMenu: this.useMenu,
                            useSlider: this.useSlider,
                            tabStripClass: this.tabStrip ? this.baseClass + (this.tabStrip ? "" : "No") + "Strip" : null
                        }, srcNode);
                    },

                    postMixInProperties: function() {
                        this.inherited(arguments);

                        // Scrolling controller only works for horizontal non-nested tabs
                        if (!this.controllerWidget) {
                            this.controllerWidget = (this.tabPosition == "top" || this.tabPosition == "bottom") && !this.nested ?
                                ScrollingTabController : TabController;
                        }
                    }
                });
            });

        },
        'dijit/BackgroundIframe': function() {
            define("dijit/BackgroundIframe", [
                "require", // require.toUrl
                "./main", // to export dijit.BackgroundIframe
                "dojo/_base/config",
                "dojo/dom-construct", // domConstruct.create
                "dojo/dom-style", // domStyle.set
                "dojo/_base/lang", // lang.extend lang.hitch
                "dojo/on",
                "dojo/sniff", // has("ie"), has("mozilla"), has("quirks")
                "dojo/_base/window" // win.doc.createElement
            ], function(require, dijit, config, domConstruct, domStyle, lang, on, has, win) {

                // module:
                //		dijit/BackgroundIFrame

                // TODO: remove _frames, it isn't being used much, since popups never release their
                // iframes (see [22236])
                var _frames = new function() {
                    // summary:
                    //		cache of iframes

                    var queue = [];

                    this.pop = function() {
                        var iframe;
                        if (queue.length) {
                            iframe = queue.pop();
                            iframe.style.display = "";
                        } else {
                            if (has("ie") < 9) {
                                var burl = config["dojoBlankHtmlUrl"] || require.toUrl("dojo/resources/blank.html") || "javascript:\"\"";
                                var html = "<iframe src='" + burl + "' role='presentation'" +
                                    " style='position: absolute; left: 0px; top: 0px;" +
                                    "z-index: -1; filter:Alpha(Opacity=\"0\");'>";
                                iframe = win.doc.createElement(html);
                            } else {
                                iframe = domConstruct.create("iframe");
                                iframe.src = 'javascript:""';
                                iframe.className = "dijitBackgroundIframe";
                                iframe.setAttribute("role", "presentation");
                                domStyle.set(iframe, "opacity", 0.1);
                            }
                            iframe.tabIndex = -1; // Magic to prevent iframe from getting focus on tab keypress - as style didn't work.
                        }
                        return iframe;
                    };

                    this.push = function(iframe) {
                        iframe.style.display = "none";
                        queue.push(iframe);
                    }
                }();


                dijit.BackgroundIframe = function( /*DomNode*/ node) {
                    // summary:
                    //		For IE/FF z-index schenanigans. id attribute is required.
                    //
                    // description:
                    //		new dijit.BackgroundIframe(node).
                    //
                    //		Makes a background iframe as a child of node, that fills
                    //		area (and position) of node

                    if (!node.id) {
                        throw new Error("no id");
                    }
                    if (has("ie") || has("mozilla")) {
                        var iframe = (this.iframe = _frames.pop());
                        node.appendChild(iframe);
                        if (has("ie") < 7 || has("quirks")) {
                            this.resize(node);
                            this._conn = on(node, 'resize', lang.hitch(this, function() {
                                this.resize(node);
                            }));
                        } else {
                            domStyle.set(iframe, {
                                width: '100%',
                                height: '100%'
                            });
                        }
                    }
                };

                lang.extend(dijit.BackgroundIframe, {
                    resize: function(node) {
                        // summary:
                        //		Resize the iframe so it's the same size as node.
                        //		Needed on IE6 and IE/quirks because height:100% doesn't work right.
                        if (this.iframe) {
                            domStyle.set(this.iframe, {
                                width: node.offsetWidth + 'px',
                                height: node.offsetHeight + 'px'
                            });
                        }
                    },
                    destroy: function() {
                        // summary:
                        //		destroy the iframe
                        if (this._conn) {
                            this._conn.remove();
                            this._conn = null;
                        }
                        if (this.iframe) {
                            _frames.push(this.iframe);
                            delete this.iframe;
                        }
                    }
                });

                return dijit.BackgroundIframe;
            });

        },
        'url:dijit/templates/Menu.html': "<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\"\n\t   data-dojo-attach-event=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n",
        'dijit/form/Button': function() {
            require({
                cache: {
                    'url:dijit/form/templates/Button.html': "<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\n\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\n\t\t\t\tid=\"${id}_label\"\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\n\t\t\t></span\n\t\t></span\n\t></span\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\n/></span>\n"
                }
            });
            define("dijit/form/Button", [
                "require",
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.toggle
                "dojo/has", // has("dijit-legacy-requires")
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.trim
                "dojo/ready",
                "./_FormWidget",
                "./_ButtonMixin",
                "dojo/text!./templates/Button.html"
            ], function(require, declare, domClass, has, kernel, lang, ready, _FormWidget, _ButtonMixin, template) {

                // module:
                //		dijit/form/Button

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/form/DropDownButton", "dijit/form/ComboButton", "dijit/form/ToggleButton"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                return declare("dijit.form.Button", [_FormWidget, _ButtonMixin], {
                    // summary:
                    //		Basically the same thing as a normal HTML button, but with special styling.
                    // description:
                    //		Buttons can display a label, an icon, or both.
                    //		A label should always be specified (through innerHTML) or the label
                    //		attribute.  It can be hidden via showLabel=false.
                    // example:
                    // |	<button data-dojo-type="dijit/form/Button" onClick="...">Hello world</button>
                    //
                    // example:
                    // |	var button1 = new Button({label: "hello world", onClick: foo});
                    // |	dojo.body().appendChild(button1.domNode);

                    // showLabel: Boolean
                    //		Set this to true to hide the label text and display only the icon.
                    //		(If showLabel=false then iconClass must be specified.)
                    //		Especially useful for toolbars.
                    //		If showLabel=true, the label will become the title (a.k.a. tooltip/hint) of the icon.
                    //
                    //		The exception case is for computers in high-contrast mode, where the label
                    //		will still be displayed, since the icon doesn't appear.
                    showLabel: true,

                    // iconClass: String
                    //		Class to apply to DOMNode in button to make it display an icon
                    iconClass: "dijitNoIcon",
                    _setIconClassAttr: {
                        node: "iconNode",
                        type: "class"
                    },

                    baseClass: "dijitButton",

                    templateString: template,

                    // Map widget attributes to DOMNode attributes.
                    _setValueAttr: "valueNode",

                    _onClick: function( /*Event*/ e) {
                        // summary:
                        //		Internal function to handle click actions
                        var ok = this.inherited(arguments);
                        if (ok) {
                            if (this.valueNode) {
                                this.valueNode.click();
                                e.preventDefault(); // cancel BUTTON click and continue with hidden INPUT click
                                e.stopPropagation(); // avoid two events bubbling from Button widget
                                // leave ok = true so that subclasses can do what they need to do
                            }
                        }
                        return ok;
                    },

                    _fillContent: function( /*DomNode*/ source) {
                        // Overrides _Templated._fillContent().
                        // If button label is specified as srcNodeRef.innerHTML rather than
                        // this.params.label, handle it here.
                        // TODO: remove the method in 2.0, parser will do it all for me
                        if (source && (!this.params || !("label" in this.params))) {
                            var sourceLabel = lang.trim(source.innerHTML);
                            if (sourceLabel) {
                                this.label = sourceLabel; // _applyAttributes will be called after buildRendering completes to update the DOM
                            }
                        }
                    },

                    _setShowLabelAttr: function(val) {
                        if (this.containerNode) {
                            domClass.toggle(this.containerNode, "dijitDisplayNone", !val);
                        }
                        this._set("showLabel", val);
                    },

                    setLabel: function( /*String*/ content) {
                        // summary:
                        //		Deprecated.  Use set('label', ...) instead.
                        kernel.deprecated("dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
                        this.set("label", content);
                    },

                    _setLabelAttr: function( /*String*/ content) {
                        // summary:
                        //		Hook for set('label', ...) to work.
                        // description:
                        //		Set the label (text) of the button; takes an HTML string.
                        //		If the label is hidden (showLabel=false) then and no title has
                        //		been specified, then label is also set as title attribute of icon.
                        this.inherited(arguments);
                        if (!this.showLabel && !("title" in this.params)) {
                            this.titleNode.title = lang.trim(this.containerNode.innerText || this.containerNode.textContent || '');
                        }
                    }
                });


            });


        },
        'url:dijit/layout/templates/TabContainer.html': "<div class=\"dijitTabContainer\">\n\t<div class=\"dijitTabListWrapper\" data-dojo-attach-point=\"tablistNode\"></div>\n\t<div data-dojo-attach-point=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer\"></div>\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container\" data-dojo-attach-point=\"containerNode\"></div>\n</div>\n",
        'dijit/_WidgetBase': function() {
            define("dijit/_WidgetBase", [
                "require", // require.toUrl
                "dojo/_base/array", // array.forEach array.map
                "dojo/aspect",
                "dojo/_base/config", // config.blankGif
                "dojo/_base/connect", // connect.connect
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.byId
                "dojo/dom-attr", // domAttr.set domAttr.remove
                "dojo/dom-class", // domClass.add domClass.replace
                "dojo/dom-construct", // domConstruct.destroy domConstruct.place
                "dojo/dom-geometry", // isBodyLtr
                "dojo/dom-style", // domStyle.set, domStyle.get
                "dojo/has",
                "dojo/_base/kernel",
                "dojo/_base/lang", // mixin(), isArray(), etc.
                "dojo/on",
                "dojo/ready",
                "dojo/Stateful", // Stateful
                "dojo/topic",
                "dojo/_base/window", // win.doc, win.body()
                "./Destroyable",
                "./registry" // registry.getUniqueId(), registry.findWidgets()
            ], function(require, array, aspect, config, connect, declare,
                dom, domAttr, domClass, domConstruct, domGeometry, domStyle, has, kernel,
                lang, on, ready, Stateful, topic, win, Destroyable, registry) {

                // module:
                //		dijit/_WidgetBase

                // Flag to make dijit load modules the app didn't explicitly request, for backwards compatibility
                has.add("dijit-legacy-requires", !kernel.isAsync);

                // For back-compat, remove in 2.0.
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/_base/manager"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                // Nested hash listing attributes for each tag, all strings in lowercase.
                // ex: {"div": {"style": true, "tabindex" true}, "form": { ...
                var tagAttrs = {};

                function getAttrs(obj) {
                    var ret = {};
                    for (var attr in obj) {
                        ret[attr.toLowerCase()] = true;
                    }
                    return ret;
                }

                function nonEmptyAttrToDom(attr) {
                    // summary:
                    //		Returns a setter function that copies the attribute to this.domNode,
                    //		or removes the attribute from this.domNode, depending on whether the
                    //		value is defined or not.
                    return function(val) {
                        domAttr[val ? "set" : "remove"](this.domNode, attr, val);
                        this._set(attr, val);
                    };
                }

                return declare("dijit._WidgetBase", [Stateful, Destroyable], {
                    // summary:
                    //		Future base class for all Dijit widgets.
                    // description:
                    //		Future base class for all Dijit widgets.
                    //		_Widget extends this class adding support for various features needed by desktop.
                    //
                    //		Provides stubs for widget lifecycle methods for subclasses to extend, like postMixInProperties(), buildRendering(),
                    //		postCreate(), startup(), and destroy(), and also public API methods like set(), get(), and watch().
                    //
                    //		Widgets can provide custom setters/getters for widget attributes, which are called automatically by set(name, value).
                    //		For an attribute XXX, define methods _setXXXAttr() and/or _getXXXAttr().
                    //
                    //		_setXXXAttr can also be a string/hash/array mapping from a widget attribute XXX to the widget's DOMNodes:
                    //
                    //		- DOM node attribute
                    // |		_setFocusAttr: {node: "focusNode", type: "attribute"}
                    // |		_setFocusAttr: "focusNode"	(shorthand)
                    // |		_setFocusAttr: ""		(shorthand, maps to this.domNode)
                    //		Maps this.focus to this.focusNode.focus, or (last example) this.domNode.focus
                    //
                    //		- DOM node innerHTML
                    //	|		_setTitleAttr: { node: "titleNode", type: "innerHTML" }
                    //		Maps this.title to this.titleNode.innerHTML
                    //
                    //		- DOM node innerText
                    //	|		_setTitleAttr: { node: "titleNode", type: "innerText" }
                    //		Maps this.title to this.titleNode.innerText
                    //
                    //		- DOM node CSS class
                    // |		_setMyClassAttr: { node: "domNode", type: "class" }
                    //		Maps this.myClass to this.domNode.className
                    //
                    //		If the value of _setXXXAttr is an array, then each element in the array matches one of the
                    //		formats of the above list.
                    //
                    //		If the custom setter is null, no action is performed other than saving the new value
                    //		in the widget (in this).
                    //
                    //		If no custom setter is defined for an attribute, then it will be copied
                    //		to this.focusNode (if the widget defines a focusNode), or this.domNode otherwise.
                    //		That's only done though for attributes that match DOMNode attributes (title,
                    //		alt, aria-labelledby, etc.)

                    // id: [const] String
                    //		A unique, opaque ID string that can be assigned by users or by the
                    //		system. If the developer passes an ID which is known not to be
                    //		unique, the specified ID is ignored and the system-generated ID is
                    //		used instead.
                    id: "",
                    _setIdAttr: "domNode", // to copy to this.domNode even for auto-generated id's

                    // lang: [const] String
                    //		Rarely used.  Overrides the default Dojo locale used to render this widget,
                    //		as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute.
                    //		Value must be among the list of locales specified during by the Dojo bootstrap,
                    //		formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us).
                    lang: "",
                    // set on domNode even when there's a focus node.	but don't set lang="", since that's invalid.
                    _setLangAttr: nonEmptyAttrToDom("lang"),

                    // dir: [const] String
                    //		Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir)
                    //		attribute. Either left-to-right "ltr" or right-to-left "rtl".  If undefined, widgets renders in page's
                    //		default direction.
                    dir: "",
                    // set on domNode even when there's a focus node.	but don't set dir="", since that's invalid.
                    _setDirAttr: nonEmptyAttrToDom("dir"), // to set on domNode even when there's a focus node

                    // textDir: String
                    //		Bi-directional support,	the main variable which is responsible for the direction of the text.
                    //		The text direction can be different than the GUI direction by using this parameter in creation
                    //		of a widget.
                    //
                    //		Allowed values:
                    //
                    //		1. "ltr"
                    //		2. "rtl"
                    //		3. "auto" - contextual the direction of a text defined by first strong letter.
                    //
                    //		By default is as the page direction.
                    textDir: "",

                    // class: String
                    //		HTML class attribute
                    "class": "",
                    _setClassAttr: {
                        node: "domNode",
                        type: "class"
                    },

                    // style: String||Object
                    //		HTML style attributes as cssText string or name/value hash
                    style: "",

                    // title: String
                    //		HTML title attribute.
                    //
                    //		For form widgets this specifies a tooltip to display when hovering over
                    //		the widget (just like the native HTML title attribute).
                    //
                    //		For TitlePane or for when this widget is a child of a TabContainer, AccordionContainer,
                    //		etc., it's used to specify the tab label, accordion pane title, etc.
                    title: "",

                    // tooltip: String
                    //		When this widget's title attribute is used to for a tab label, accordion pane title, etc.,
                    //		this specifies the tooltip to appear when the mouse is hovered over that text.
                    tooltip: "",

                    // baseClass: [protected] String
                    //		Root CSS class of the widget (ex: dijitTextBox), used to construct CSS classes to indicate
                    //		widget state.
                    baseClass: "",

                    // srcNodeRef: [readonly] DomNode
                    //		pointer to original DOM node
                    srcNodeRef: null,

                    // domNode: [readonly] DomNode
                    //		This is our visible representation of the widget! Other DOM
                    //		Nodes may by assigned to other properties, usually through the
                    //		template system's data-dojo-attach-point syntax, but the domNode
                    //		property is the canonical "top level" node in widget UI.
                    domNode: null,

                    // containerNode: [readonly] DomNode
                    //		Designates where children of the source DOM node will be placed.
                    //		"Children" in this case refers to both DOM nodes and widgets.
                    //		For example, for myWidget:
                    //
                    //		|	<div data-dojo-type=myWidget>
                    //		|		<b> here's a plain DOM node
                    //		|		<span data-dojo-type=subWidget>and a widget</span>
                    //		|		<i> and another plain DOM node </i>
                    //		|	</div>
                    //
                    //		containerNode would point to:
                    //
                    //		|		<b> here's a plain DOM node
                    //		|		<span data-dojo-type=subWidget>and a widget</span>
                    //		|		<i> and another plain DOM node </i>
                    //
                    //		In templated widgets, "containerNode" is set via a
                    //		data-dojo-attach-point assignment.
                    //
                    //		containerNode must be defined for any widget that accepts innerHTML
                    //		(like ContentPane or BorderContainer or even Button), and conversely
                    //		is null for widgets that don't, like TextBox.
                    containerNode: null,

                    // ownerDocument: [const] Document?
                    //		The document this widget belongs to.  If not specified to constructor, will default to
                    //		srcNodeRef.ownerDocument, or if no sourceRef specified, then to dojo/_base/window::doc
                    ownerDocument: null,
                    _setOwnerDocumentAttr: function(val) {
                        // this setter is merely to avoid automatically trying to set this.domNode.ownerDocument
                        this._set("ownerDocument", val);
                    },

                    /*=====
                    	// _started: [readonly] Boolean
                    	//		startup() has completed.
                    	_started: false,
                    =====*/

                    // attributeMap: [protected] Object
                    //		Deprecated.	Instead of attributeMap, widget should have a _setXXXAttr attribute
                    //		for each XXX attribute to be mapped to the DOM.
                    //
                    //		attributeMap sets up a "binding" between attributes (aka properties)
                    //		of the widget and the widget's DOM.
                    //		Changes to widget attributes listed in attributeMap will be
                    //		reflected into the DOM.
                    //
                    //		For example, calling set('title', 'hello')
                    //		on a TitlePane will automatically cause the TitlePane's DOM to update
                    //		with the new title.
                    //
                    //		attributeMap is a hash where the key is an attribute of the widget,
                    //		and the value reflects a binding to a:
                    //
                    //		- DOM node attribute
                    // |		focus: {node: "focusNode", type: "attribute"}
                    //		Maps this.focus to this.focusNode.focus
                    //
                    //		- DOM node innerHTML
                    //	|		title: { node: "titleNode", type: "innerHTML" }
                    //		Maps this.title to this.titleNode.innerHTML
                    //
                    //		- DOM node innerText
                    //	|		title: { node: "titleNode", type: "innerText" }
                    //		Maps this.title to this.titleNode.innerText
                    //
                    //		- DOM node CSS class
                    // |		myClass: { node: "domNode", type: "class" }
                    //		Maps this.myClass to this.domNode.className
                    //
                    //		If the value is an array, then each element in the array matches one of the
                    //		formats of the above list.
                    //
                    //		There are also some shorthands for backwards compatibility:
                    //
                    //		- string --> { node: string, type: "attribute" }, for example:
                    //
                    //	|	"focusNode" ---> { node: "focusNode", type: "attribute" }
                    //
                    //		- "" --> { node: "domNode", type: "attribute" }
                    attributeMap: {},

                    // _blankGif: [protected] String
                    //		Path to a blank 1x1 image.
                    //		Used by `<img>` nodes in templates that really get their image via CSS background-image.
                    _blankGif: config.blankGif || require.toUrl("dojo/resources/blank.gif"),

                    //////////// INITIALIZATION METHODS ///////////////////////////////////////

                    /*=====
                    constructor: function(params, srcNodeRef){
                    	// summary:
                    	//		Create the widget.
                    	// params: Object|null
                    	//		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                    	//		and functions, typically callbacks like onClick.
                     	//		The hash can contain any of the widget's properties, excluding read-only properties.
                     	// srcNodeRef: DOMNode|String?
                    	//		If a srcNodeRef (DOM node) is specified:
                    	//
                    	//		- use srcNodeRef.innerHTML as my contents
                    	//		- if this is a behavioral widget then apply behavior to that srcNodeRef
                    	//		- otherwise, replace srcNodeRef with my generated DOM tree
                     },
                    =====*/

                    postscript: function( /*Object?*/ params, /*DomNode|String*/ srcNodeRef) {
                        // summary:
                        //		Kicks off widget instantiation.  See create() for details.
                        // tags:
                        //		private
                        this.create(params, srcNodeRef);
                    },

                    create: function(params, srcNodeRef) {
                        // summary:
                        //		Kick off the life-cycle of a widget
                        // description:
                        //		Create calls a number of widget methods (postMixInProperties, buildRendering, postCreate,
                        //		etc.), some of which of you'll want to override. See http://dojotoolkit.org/reference-guide/dijit/_WidgetBase.html
                        //		for a discussion of the widget creation lifecycle.
                        //
                        //		Of course, adventurous developers could override create entirely, but this should
                        //		only be done as a last resort.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified:
                        //
                        //		- use srcNodeRef.innerHTML as my contents
                        //		- if this is a behavioral widget then apply behavior to that srcNodeRef
                        //		- otherwise, replace srcNodeRef with my generated DOM tree
                        // tags:
                        //		private

                        // store pointer to original DOM tree
                        this.srcNodeRef = dom.byId(srcNodeRef);

                        // No longer used, remove for 2.0.
                        this._connects = [];
                        this._supportingWidgets = [];

                        // this is here for back-compat, remove in 2.0 (but check NodeList-instantiate.html test)
                        if (this.srcNodeRef && (typeof this.srcNodeRef.id == "string")) {
                            this.id = this.srcNodeRef.id;
                        }

                        // mix in our passed parameters
                        if (params) {
                            this.params = params;
                            lang.mixin(this, params);
                        }
                        this.postMixInProperties();

                        // Generate an id for the widget if one wasn't specified, or it was specified as id: undefined.
                        // Do this before buildRendering() because it might expect the id to be there.
                        if (!this.id) {
                            this.id = registry.getUniqueId(this.declaredClass.replace(/\./g, "_"));
                            if (this.params) {
                                // if params contains {id: undefined}, prevent _applyAttributes() from processing it
                                delete this.params.id;
                            }
                        }

                        // The document and <body> node this widget is associated with
                        this.ownerDocument = this.ownerDocument || (this.srcNodeRef ? this.srcNodeRef.ownerDocument : win.doc);
                        this.ownerDocumentBody = win.body(this.ownerDocument);

                        registry.add(this);

                        this.buildRendering();

                        var deleteSrcNodeRef;

                        if (this.domNode) {
                            // Copy attributes listed in attributeMap into the [newly created] DOM for the widget.
                            // Also calls custom setters for all attributes with custom setters.
                            this._applyAttributes();

                            // If srcNodeRef was specified, then swap out original srcNode for this widget's DOM tree.
                            // For 2.0, move this after postCreate().  postCreate() shouldn't depend on the
                            // widget being attached to the DOM since it isn't when a widget is created programmatically like
                            // new MyWidget({}).	See #11635.
                            var source = this.srcNodeRef;
                            if (source && source.parentNode && this.domNode !== source) {
                                source.parentNode.replaceChild(this.domNode, source);
                                deleteSrcNodeRef = true;
                            }

                            // Note: for 2.0 may want to rename widgetId to dojo._scopeName + "_widgetId",
                            // assuming that dojo._scopeName even exists in 2.0
                            this.domNode.setAttribute("widgetId", this.id);
                        }
                        this.postCreate();

                        // If srcNodeRef has been processed and removed from the DOM (e.g. TemplatedWidget) then delete it to allow GC.
                        // I think for back-compatibility it isn't deleting srcNodeRef until after postCreate() has run.
                        if (deleteSrcNodeRef) {
                            delete this.srcNodeRef;
                        }

                        this._created = true;
                    },

                    _applyAttributes: function() {
                        // summary:
                        //		Step during widget creation to copy  widget attributes to the
                        //		DOM according to attributeMap and _setXXXAttr objects, and also to call
                        //		custom _setXXXAttr() methods.
                        //
                        //		Skips over blank/false attribute values, unless they were explicitly specified
                        //		as parameters to the widget, since those are the default anyway,
                        //		and setting tabIndex="" is different than not setting tabIndex at all.
                        //
                        //		For backwards-compatibility reasons attributeMap overrides _setXXXAttr when
                        //		_setXXXAttr is a hash/string/array, but _setXXXAttr as a functions override attributeMap.
                        // tags:
                        //		private

                        // Get list of attributes where this.set(name, value) will do something beyond
                        // setting this[name] = value.  Specifically, attributes that have:
                        //		- associated _setXXXAttr() method/hash/string/array
                        //		- entries in attributeMap (remove this for 2.0);
                        var ctor = this.constructor,
                            list = ctor._setterAttrs;
                        if (!list) {
                            list = (ctor._setterAttrs = []);
                            for (var attr in this.attributeMap) {
                                list.push(attr);
                            }

                            var proto = ctor.prototype;
                            for (var fxName in proto) {
                                if (fxName in this.attributeMap) {
                                    continue;
                                }
                                var setterName = "_set" + fxName.replace(/^[a-z]|-[a-zA-Z]/g, function(c) {
                                    return c.charAt(c.length - 1).toUpperCase();
                                }) + "Attr";
                                if (setterName in proto) {
                                    list.push(fxName);
                                }
                            }
                        }

                        // Call this.set() for each property that was either specified as parameter to constructor,
                        // or is in the list found above.	For correlated properties like value and displayedValue, the one
                        // specified as a parameter should take precedence.
                        // Particularly important for new DateTextBox({displayedValue: ...}) since DateTextBox's default value is
                        // NaN and thus is not ignored like a default value of "".

                        // Step 1: Save the current values of the widget properties that were specified as parameters to the constructor.
                        // Generally this.foo == this.params.foo, except if postMixInProperties() changed the value of this.foo.
                        var params = {};
                        for (var key in this.params || {}) {
                            params[key] = this[key];
                        }

                        // Step 2: Call set() for each property that wasn't passed as a parameter to the constructor
                        array.forEach(list, function(attr) {
                            if (attr in params) {
                                // skip this one, do it below
                            } else if (this[attr]) {
                                this.set(attr, this[attr]);
                            }
                        }, this);

                        // Step 3: Call set() for each property that was specified as parameter to constructor.
                        // Use params hash created above to ignore side effects from step #2 above.
                        for (key in params) {
                            this.set(key, params[key]);
                        }
                    },

                    postMixInProperties: function() {
                        // summary:
                        //		Called after the parameters to the widget have been read-in,
                        //		but before the widget template is instantiated. Especially
                        //		useful to set properties that are referenced in the widget
                        //		template.
                        // tags:
                        //		protected
                    },

                    buildRendering: function() {
                        // summary:
                        //		Construct the UI for this widget, setting this.domNode.
                        //		Most widgets will mixin `dijit._TemplatedMixin`, which implements this method.
                        // tags:
                        //		protected

                        if (!this.domNode) {
                            // Create root node if it wasn't created by _Templated
                            this.domNode = this.srcNodeRef || this.ownerDocument.createElement("div");
                        }

                        // baseClass is a single class name or occasionally a space-separated list of names.
                        // Add those classes to the DOMNode.  If RTL mode then also add with Rtl suffix.
                        // TODO: make baseClass custom setter
                        if (this.baseClass) {
                            var classes = this.baseClass.split(" ");
                            if (!this.isLeftToRight()) {
                                classes = classes.concat(array.map(classes, function(name) {
                                    return name + "Rtl";
                                }));
                            }
                            domClass.add(this.domNode, classes);
                        }
                    },

                    postCreate: function() {
                        // summary:
                        //		Processing after the DOM fragment is created
                        // description:
                        //		Called after the DOM fragment has been created, but not necessarily
                        //		added to the document.  Do not include any operations which rely on
                        //		node dimensions or placement.
                        // tags:
                        //		protected
                    },

                    startup: function() {
                        // summary:
                        //		Processing after the DOM fragment is added to the document
                        // description:
                        //		Called after a widget and its children have been created and added to the page,
                        //		and all related widgets have finished their create() cycle, up through postCreate().
                        //		This is useful for composite widgets that need to control or layout sub-widgets.
                        //		Many layout widgets can use this as a wiring phase.
                        if (this._started) {
                            return;
                        }
                        this._started = true;
                        array.forEach(this.getChildren(), function(obj) {
                            if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                obj.startup();
                                obj._started = true;
                            }
                        });
                    },

                    //////////// DESTROY FUNCTIONS ////////////////////////////////

                    destroyRecursive: function( /*Boolean?*/ preserveDom) {
                        // summary:
                        //		Destroy this widget and its descendants
                        // description:
                        //		This is the generic "destructor" function that all widget users
                        //		should call to cleanly discard with a widget. Once a widget is
                        //		destroyed, it is removed from the manager object.
                        // preserveDom:
                        //		If true, this method will leave the original DOM structure
                        //		alone of descendant Widgets. Note: This will NOT work with
                        //		dijit._Templated widgets.

                        this._beingDestroyed = true;
                        this.destroyDescendants(preserveDom);
                        this.destroy(preserveDom);
                    },

                    destroy: function( /*Boolean*/ preserveDom) {
                        // summary:
                        //		Destroy this widget, but not its descendants.
                        //		This method will, however, destroy internal widgets such as those used within a template.
                        // preserveDom: Boolean
                        //		If true, this method will leave the original DOM structure alone.
                        //		Note: This will not yet work with _Templated widgets

                        this._beingDestroyed = true;
                        this.uninitialize();

                        function destroy(w) {
                            if (w.destroyRecursive) {
                                w.destroyRecursive(preserveDom);
                            } else if (w.destroy) {
                                w.destroy(preserveDom);
                            }
                        }

                        // Back-compat, remove for 2.0
                        array.forEach(this._connects, lang.hitch(this, "disconnect"));
                        array.forEach(this._supportingWidgets, destroy);

                        // Destroy supporting widgets, but not child widgets under this.containerNode (for 2.0, destroy child widgets
                        // here too).   if() statement is to guard against exception if destroy() called multiple times (see #15815).
                        if (this.domNode) {
                            array.forEach(registry.findWidgets(this.domNode, this.containerNode), destroy);
                        }

                        this.destroyRendering(preserveDom);
                        registry.remove(this.id);
                        this._destroyed = true;
                    },

                    destroyRendering: function( /*Boolean?*/ preserveDom) {
                        // summary:
                        //		Destroys the DOM nodes associated with this widget
                        // preserveDom:
                        //		If true, this method will leave the original DOM structure alone
                        //		during tear-down. Note: this will not work with _Templated
                        //		widgets yet.
                        // tags:
                        //		protected

                        if (this.bgIframe) {
                            this.bgIframe.destroy(preserveDom);
                            delete this.bgIframe;
                        }

                        if (this.domNode) {
                            if (preserveDom) {
                                domAttr.remove(this.domNode, "widgetId");
                            } else {
                                domConstruct.destroy(this.domNode);
                            }
                            delete this.domNode;
                        }

                        if (this.srcNodeRef) {
                            if (!preserveDom) {
                                domConstruct.destroy(this.srcNodeRef);
                            }
                            delete this.srcNodeRef;
                        }
                    },

                    destroyDescendants: function( /*Boolean?*/ preserveDom) {
                        // summary:
                        //		Recursively destroy the children of this widget and their
                        //		descendants.
                        // preserveDom:
                        //		If true, the preserveDom attribute is passed to all descendant
                        //		widget's .destroy() method. Not for use with _Templated
                        //		widgets.

                        // get all direct descendants and destroy them recursively
                        array.forEach(this.getChildren(), function(widget) {
                            if (widget.destroyRecursive) {
                                widget.destroyRecursive(preserveDom);
                            }
                        });
                    },

                    uninitialize: function() {
                        // summary:
                        //		Deprecated. Override destroy() instead to implement custom widget tear-down
                        //		behavior.
                        // tags:
                        //		protected
                        return false;
                    },

                    ////////////////// GET/SET, CUSTOM SETTERS, ETC. ///////////////////

                    _setStyleAttr: function( /*String||Object*/ value) {
                        // summary:
                        //		Sets the style attribute of the widget according to value,
                        //		which is either a hash like {height: "5px", width: "3px"}
                        //		or a plain string
                        // description:
                        //		Determines which node to set the style on based on style setting
                        //		in attributeMap.
                        // tags:
                        //		protected

                        var mapNode = this.domNode;

                        // Note: technically we should revert any style setting made in a previous call
                        // to his method, but that's difficult to keep track of.

                        if (lang.isObject(value)) {
                            domStyle.set(mapNode, value);
                        } else {
                            if (mapNode.style.cssText) {
                                mapNode.style.cssText += "; " + value;
                            } else {
                                mapNode.style.cssText = value;
                            }
                        }

                        this._set("style", value);
                    },

                    _attrToDom: function( /*String*/ attr, /*String*/ value, /*Object?*/ commands) {
                        // summary:
                        //		Reflect a widget attribute (title, tabIndex, duration etc.) to
                        //		the widget DOM, as specified by commands parameter.
                        //		If commands isn't specified then it's looked up from attributeMap.
                        //		Note some attributes like "type"
                        //		cannot be processed this way as they are not mutable.
                        // attr:
                        //		Name of member variable (ex: "focusNode" maps to this.focusNode) pointing
                        //		to DOMNode inside the widget, or alternately pointing to a subwidget
                        // tags:
                        //		private

                        commands = arguments.length >= 3 ? commands : this.attributeMap[attr];

                        array.forEach(lang.isArray(commands) ? commands : [commands], function(command) {

                            // Get target node and what we are doing to that node
                            var mapNode = this[command.node || command || "domNode"]; // DOM node
                            var type = command.type || "attribute"; // class, innerHTML, innerText, or attribute

                            switch (type) {
                                case "attribute":
                                    if (lang.isFunction(value)) { // functions execute in the context of the widget
                                        value = lang.hitch(this, value);
                                    }

                                    // Get the name of the DOM node attribute; usually it's the same
                                    // as the name of the attribute in the widget (attr), but can be overridden.
                                    // Also maps handler names to lowercase, like onSubmit --> onsubmit
                                    var attrName = command.attribute ? command.attribute :
                                        (/^on[A-Z][a-zA-Z]*$/.test(attr) ? attr.toLowerCase() : attr);

                                    if (mapNode.tagName) {
                                        // Normal case, mapping to a DOMNode.  Note that modern browsers will have a mapNode.set()
                                        // method, but for consistency we still call domAttr
                                        domAttr.set(mapNode, attrName, value);
                                    } else {
                                        // mapping to a sub-widget
                                        mapNode.set(attrName, value);
                                    }
                                    break;
                                case "innerText":
                                    mapNode.innerHTML = "";
                                    mapNode.appendChild(this.ownerDocument.createTextNode(value));
                                    break;
                                case "innerHTML":
                                    mapNode.innerHTML = value;
                                    break;
                                case "class":
                                    domClass.replace(mapNode, value, this[attr]);
                                    break;
                            }
                        }, this);
                    },

                    get: function(name) {
                        // summary:
                        //		Get a property from a widget.
                        // name:
                        //		The property to get.
                        // description:
                        //		Get a named property from a widget. The property may
                        //		potentially be retrieved via a getter method. If no getter is defined, this
                        //		just retrieves the object's property.
                        //
                        //		For example, if the widget has properties `foo` and `bar`
                        //		and a method named `_getFooAttr()`, calling:
                        //		`myWidget.get("foo")` would be equivalent to calling
                        //		`widget._getFooAttr()` and `myWidget.get("bar")`
                        //		would be equivalent to the expression
                        //		`widget.bar2`
                        var names = this._getAttrNames(name);
                        return this[names.g] ? this[names.g]() : this[name];
                    },

                    set: function(name, value) {
                        // summary:
                        //		Set a property on a widget
                        // name:
                        //		The property to set.
                        // value:
                        //		The value to set in the property.
                        // description:
                        //		Sets named properties on a widget which may potentially be handled by a
                        //		setter in the widget.
                        //
                        //		For example, if the widget has properties `foo` and `bar`
                        //		and a method named `_setFooAttr()`, calling
                        //		`myWidget.set("foo", "Howdy!")` would be equivalent to calling
                        //		`widget._setFooAttr("Howdy!")` and `myWidget.set("bar", 3)`
                        //		would be equivalent to the statement `widget.bar = 3;`
                        //
                        //		set() may also be called with a hash of name/value pairs, ex:
                        //
                        //	|	myWidget.set({
                        //	|		foo: "Howdy",
                        //	|		bar: 3
                        //	|	});
                        //
                        //	This is equivalent to calling `set(foo, "Howdy")` and `set(bar, 3)`

                        if (typeof name === "object") {
                            for (var x in name) {
                                this.set(x, name[x]);
                            }
                            return this;
                        }
                        var names = this._getAttrNames(name),
                            setter = this[names.s];
                        if (lang.isFunction(setter)) {
                            // use the explicit setter
                            var result = setter.apply(this, Array.prototype.slice.call(arguments, 1));
                        } else {
                            // Mapping from widget attribute to DOMNode/subwidget attribute/value/etc.
                            // Map according to:
                            //		1. attributeMap setting, if one exists (TODO: attributeMap deprecated, remove in 2.0)
                            //		2. _setFooAttr: {...} type attribute in the widget (if one exists)
                            //		3. apply to focusNode or domNode if standard attribute name, excluding funcs like onClick.
                            // Checks if an attribute is a "standard attribute" by whether the DOMNode JS object has a similar
                            // attribute name (ex: accept-charset attribute matches jsObject.acceptCharset).
                            // Note also that Tree.focusNode() is a function not a DOMNode, so test for that.
                            var defaultNode = this.focusNode && !lang.isFunction(this.focusNode) ? "focusNode" : "domNode",
                                tag = this[defaultNode].tagName,
                                attrsForTag = tagAttrs[tag] || (tagAttrs[tag] = getAttrs(this[defaultNode])),
                                map = name in this.attributeMap ? this.attributeMap[name] :
                                names.s in this ? this[names.s] :
                                ((names.l in attrsForTag && typeof value != "function") ||
                                    /^aria-|^data-|^role$/.test(name)) ? defaultNode : null;
                            if (map != null) {
                                this._attrToDom(name, value, map);
                            }
                            this._set(name, value);
                        }
                        return result || this;
                    },

                    _attrPairNames: {}, // shared between all widgets
                    _getAttrNames: function(name) {
                        // summary:
                        //		Helper function for get() and set().
                        //		Caches attribute name values so we don't do the string ops every time.
                        // tags:
                        //		private

                        var apn = this._attrPairNames;
                        if (apn[name]) {
                            return apn[name];
                        }
                        var uc = name.replace(/^[a-z]|-[a-zA-Z]/g, function(c) {
                            return c.charAt(c.length - 1).toUpperCase();
                        });
                        return (apn[name] = {
                            n: name + "Node",
                            s: "_set" + uc + "Attr", // converts dashes to camel case, ex: accept-charset --> _setAcceptCharsetAttr
                            g: "_get" + uc + "Attr",
                            l: uc.toLowerCase() // lowercase name w/out dashes, ex: acceptcharset
                        });
                    },

                    _set: function( /*String*/ name, /*anything*/ value) {
                        // summary:
                        //		Helper function to set new value for specified attribute, and call handlers
                        //		registered with watch() if the value has changed.
                        var oldValue = this[name];
                        this[name] = value;
                        if (this._created && value !== oldValue) {
                            if (this._watchCallbacks) {
                                this._watchCallbacks(name, oldValue, value);
                            }
                            this.emit("attrmodified-" + name, {
                                detail: {
                                    prevValue: oldValue,
                                    newValue: value
                                }
                            });
                        }
                    },

                    emit: function( /*String*/ type, /*Object?*/ eventObj, /*Array?*/ callbackArgs) {
                        // summary:
                        //		Used by widgets to signal that a synthetic event occurred, ex:
                        //	|	myWidget.emit("attrmodified-selectedChildWidget", {}).
                        //
                        //		Emits an event on this.domNode named type.toLowerCase(), based on eventObj.
                        //		Also calls onType() method, if present, and returns value from that method.
                        //		By default passes eventObj to callback, but will pass callbackArgs instead, if specified.
                        //		Modifies eventObj by adding missing parameters (bubbles, cancelable, widget).
                        // tags:
                        //		protected

                        // Specify fallback values for bubbles, cancelable in case they are not set in eventObj.
                        // Also set pointer to widget, although since we can't add a pointer to the widget for native events
                        // (see #14729), maybe we shouldn't do it here?
                        eventObj = eventObj || {};
                        if (eventObj.bubbles === undefined) {
                            eventObj.bubbles = true;
                        }
                        if (eventObj.cancelable === undefined) {
                            eventObj.cancelable = true;
                        }
                        if (!eventObj.detail) {
                            eventObj.detail = {};
                        }
                        eventObj.detail.widget = this;

                        var ret, callback = this["on" + type];
                        if (callback) {
                            ret = callback.apply(this, callbackArgs ? callbackArgs : [eventObj]);
                        }

                        // Emit event, but avoid spurious emit()'s as parent sets properties on child during startup/destroy
                        if (this._started && !this._beingDestroyed) {
                            on.emit(this.domNode, type.toLowerCase(), eventObj);
                        }

                        return ret;
                    },

                    on: function( /*String|Function*/ type, /*Function*/ func) {
                        // summary:
                        //		Call specified function when event occurs, ex: myWidget.on("click", function(){ ... }).
                        // type:
                        //		Name of event (ex: "click") or extension event like touch.press.
                        // description:
                        //		Call specified function when event `type` occurs, ex: `myWidget.on("click", function(){ ... })`.
                        //		Note that the function is not run in any particular scope, so if (for example) you want it to run in the
                        //		widget's scope you must do `myWidget.on("click", lang.hitch(myWidget, func))`.

                        // For backwards compatibility, if there's an onType() method in the widget then connect to that.
                        // Remove in 2.0.
                        var widgetMethod = this._onMap(type);
                        if (widgetMethod) {
                            return aspect.after(this, widgetMethod, func, true);
                        }

                        // Otherwise, just listen for the event on this.domNode.
                        return this.own(on(this.domNode, type, func))[0];
                    },

                    _onMap: function( /*String|Function*/ type) {
                        // summary:
                        //		Maps on() type parameter (ex: "mousemove") to method name (ex: "onMouseMove").
                        //		If type is a synthetic event like touch.press then returns undefined.
                        var ctor = this.constructor,
                            map = ctor._onMap;
                        if (!map) {
                            map = (ctor._onMap = {});
                            for (var attr in ctor.prototype) {
                                if (/^on/.test(attr)) {
                                    map[attr.replace(/^on/, "").toLowerCase()] = attr;
                                }
                            }
                        }
                        return map[typeof type == "string" && type.toLowerCase()]; // String
                    },

                    toString: function() {
                        // summary:
                        //		Returns a string that represents the widget
                        // description:
                        //		When a widget is cast to a string, this method will be used to generate the
                        //		output. Currently, it does not implement any sort of reversible
                        //		serialization.
                        return '[Widget ' + this.declaredClass + ', ' + (this.id || 'NO ID') + ']'; // String
                    },

                    getChildren: function() {
                        // summary:
                        //		Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.
                        //		Does not return nested widgets, nor widgets that are part of this widget's template.
                        return this.containerNode ? registry.findWidgets(this.containerNode) : []; // dijit/_WidgetBase[]
                    },

                    getParent: function() {
                        // summary:
                        //		Returns the parent widget of this widget
                        return registry.getEnclosingWidget(this.domNode.parentNode);
                    },

                    connect: function(
                        /*Object|null*/
                        obj,
                        /*String|Function*/
                        event,
                        /*String|Function*/
                        method) {
                        // summary:
                        //		Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
                        //
                        //		Connects specified obj/event to specified method of this object
                        //		and registers for disconnect() on widget destroy.
                        //
                        //		Provide widget-specific analog to dojo.connect, except with the
                        //		implicit use of this widget as the target object.
                        //		Events connected with `this.connect` are disconnected upon
                        //		destruction.
                        // returns:
                        //		A handle that can be passed to `disconnect` in order to disconnect before
                        //		the widget is destroyed.
                        // example:
                        //	|	var btn = new Button();
                        //	|	// when foo.bar() is called, call the listener we're going to
                        //	|	// provide in the scope of btn
                        //	|	btn.connect(foo, "bar", function(){
                        //	|		console.debug(this.toString());
                        //	|	});
                        // tags:
                        //		protected

                        return this.own(connect.connect(obj, event, this, method))[0]; // handle
                    },

                    disconnect: function(handle) {
                        // summary:
                        //		Deprecated, will be removed in 2.0, use handle.remove() instead.
                        //
                        //		Disconnects handle created by `connect`.
                        // tags:
                        //		protected

                        handle.remove();
                    },

                    subscribe: function(t, method) {
                        // summary:
                        //		Deprecated, will be removed in 2.0, use this.own(topic.subscribe()) instead.
                        //
                        //		Subscribes to the specified topic and calls the specified method
                        //		of this object and registers for unsubscribe() on widget destroy.
                        //
                        //		Provide widget-specific analog to dojo.subscribe, except with the
                        //		implicit use of this widget as the target object.
                        // t: String
                        //		The topic
                        // method: Function
                        //		The callback
                        // example:
                        //	|	var btn = new Button();
                        //	|	// when /my/topic is published, this button changes its label to
                        //	|	// be the parameter of the topic.
                        //	|	btn.subscribe("/my/topic", function(v){
                        //	|		this.set("label", v);
                        //	|	});
                        // tags:
                        //		protected
                        return this.own(topic.subscribe(t, lang.hitch(this, method)))[0]; // handle
                    },

                    unsubscribe: function( /*Object*/ handle) {
                        // summary:
                        //		Deprecated, will be removed in 2.0, use handle.remove() instead.
                        //
                        //		Unsubscribes handle created by this.subscribe.
                        //		Also removes handle from this widget's list of subscriptions
                        // tags:
                        //		protected

                        handle.remove();
                    },

                    isLeftToRight: function() {
                        // summary:
                        //		Return this widget's explicit or implicit orientation (true for LTR, false for RTL)
                        // tags:
                        //		protected
                        return this.dir ? (this.dir == "ltr") : domGeometry.isBodyLtr(this.ownerDocument); //Boolean
                    },

                    isFocusable: function() {
                        // summary:
                        //		Return true if this widget can currently be focused
                        //		and false if not
                        return this.focus && (domStyle.get(this.domNode, "display") != "none");
                    },

                    placeAt: function( /* String|DomNode|_Widget */ reference, /* String|Int? */ position) {
                        // summary:
                        //		Place this widget somewhere in the DOM based
                        //		on standard domConstruct.place() conventions.
                        // description:
                        //		A convenience function provided in all _Widgets, providing a simple
                        //		shorthand mechanism to put an existing (or newly created) Widget
                        //		somewhere in the dom, and allow chaining.
                        // reference:
                        //		Widget, DOMNode, or id of widget or DOMNode
                        // position:
                        //		If reference is a widget (or id of widget), and that widget has an ".addChild" method,
                        //		it will be called passing this widget instance into that method, supplying the optional
                        //		position index passed.  In this case position (if specified) should be an integer.
                        //
                        //		If reference is a DOMNode (or id matching a DOMNode but not a widget),
                        //		the position argument can be a numeric index or a string
                        //		"first", "last", "before", or "after", same as dojo/dom-construct::place().
                        // returns: dijit/_WidgetBase
                        //		Provides a useful return of the newly created dijit._Widget instance so you
                        //		can "chain" this function by instantiating, placing, then saving the return value
                        //		to a variable.
                        // example:
                        //	|	// create a Button with no srcNodeRef, and place it in the body:
                        //	|	var button = new Button({ label:"click" }).placeAt(win.body());
                        //	|	// now, 'button' is still the widget reference to the newly created button
                        //	|	button.on("click", function(e){ console.log('click'); }));
                        // example:
                        //	|	// create a button out of a node with id="src" and append it to id="wrapper":
                        //	|	var button = new Button({},"src").placeAt("wrapper");
                        // example:
                        //	|	// place a new button as the first element of some div
                        //	|	var button = new Button({ label:"click" }).placeAt("wrapper","first");
                        // example:
                        //	|	// create a contentpane and add it to a TabContainer
                        //	|	var tc = dijit.byId("myTabs");
                        //	|	new ContentPane({ href:"foo.html", title:"Wow!" }).placeAt(tc)

                        var refWidget = !reference.tagName && registry.byId(reference);
                        if (refWidget && refWidget.addChild && (!position || typeof position === "number")) {
                            // Adding this to refWidget and can use refWidget.addChild() to handle everything.
                            refWidget.addChild(this, position);
                        } else {
                            // "reference" is a plain DOMNode, or we can't use refWidget.addChild().   Use domConstruct.place() and
                            // target refWidget.containerNode for nested placement (position==number, "first", "last", "only"), and
                            // refWidget.domNode otherwise ("after"/"before"/"replace").  (But not supported officially, see #14946.)
                            var ref = refWidget ?
                                (refWidget.containerNode && !/after|before|replace/.test(position || "") ?
                                    refWidget.containerNode : refWidget.domNode) : dom.byId(reference, this.ownerDocument);
                            domConstruct.place(this.domNode, ref, position);

                            // Start this iff it has a parent widget that's already started.
                            if (!this._started && (this.getParent() || {})._started) {
                                this.startup();
                            }
                        }
                        return this;
                    },

                    getTextDir: function( /*String*/ text, /*String*/ originalDir) {
                        // summary:
                        //		Return direction of the text.
                        //		The function overridden in the _BidiSupport module,
                        //		its main purpose is to calculate the direction of the
                        //		text, if was defined by the programmer through textDir.
                        // tags:
                        //		protected.
                        return originalDir;
                    },

                    applyTextDir: function( /*===== element, text =====*/ ) {
                        // summary:
                        //		The function overridden in the _BidiSupport module,
                        //		originally used for setting element.dir according to this.textDir.
                        //		In this case does nothing.
                        // element: DOMNode
                        // text: String
                        // tags:
                        //		protected.
                    },

                    defer: function(fcn, delay) {
                        // summary:
                        //		Wrapper to setTimeout to avoid deferred functions executing
                        //		after the originating widget has been destroyed.
                        //		Returns an object handle with a remove method (that returns null) (replaces clearTimeout).
                        // fcn: function reference
                        // delay: Optional number (defaults to 0)
                        // tags:
                        //		protected.
                        var timer = setTimeout(lang.hitch(this,
                                function() {
                                    timer = null;
                                    if (!this._destroyed) {
                                        lang.hitch(this, fcn)();
                                    }
                                }),
                            delay || 0
                        );
                        return {
                            remove: function() {
                                if (timer) {
                                    clearTimeout(timer);
                                    timer = null;
                                }
                                return null; // so this works well: handle = handle.remove();
                            }
                        };
                    }
                });

            });

        },
        'dijit/layout/_TabContainerBase': function() {
            require({
                cache: {
                    'url:dijit/layout/templates/TabContainer.html': "<div class=\"dijitTabContainer\">\n\t<div class=\"dijitTabListWrapper\" data-dojo-attach-point=\"tablistNode\"></div>\n\t<div data-dojo-attach-point=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer\"></div>\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container\" data-dojo-attach-point=\"containerNode\"></div>\n</div>\n"
                }
            });
            define("dijit/layout/_TabContainerBase", [
                "dojo/text!./templates/TabContainer.html",
                "./StackContainer",
                "./utils", // marginBox2contextBox, layoutChildren
                "../_TemplatedMixin",
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.add
                "dojo/dom-geometry", // domGeometry.contentBox
                "dojo/dom-style" // domStyle.style
            ], function(template, StackContainer, layoutUtils, _TemplatedMixin, declare, domClass, domGeometry, domStyle) {

                // module:
                //		dijit/layout/_TabContainerBase


                return declare("dijit.layout._TabContainerBase", [StackContainer, _TemplatedMixin], {
                    // summary:
                    //		Abstract base class for TabContainer.   Must define _makeController() to instantiate
                    //		and return the widget that displays the tab labels
                    // description:
                    //		A TabContainer is a container that has multiple panes, but shows only
                    //		one pane at a time.  There are a set of tabs corresponding to each pane,
                    //		where each tab has the name (aka title) of the pane, and optionally a close button.

                    // tabPosition: String
                    //		Defines where tabs go relative to tab content.
                    //		"top", "bottom", "left-h", "right-h"
                    tabPosition: "top",

                    baseClass: "dijitTabContainer",

                    // tabStrip: [const] Boolean
                    //		Defines whether the tablist gets an extra class for layouting, putting a border/shading
                    //		around the set of tabs.   Not supported by claro theme.
                    tabStrip: false,

                    // nested: [const] Boolean
                    //		If true, use styling for a TabContainer nested inside another TabContainer.
                    //		For tundra etc., makes tabs look like links, and hides the outer
                    //		border since the outer TabContainer already has a border.
                    nested: false,

                    templateString: template,

                    postMixInProperties: function() {
                        // set class name according to tab position, ex: dijitTabContainerTop
                        this.baseClass += this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");

                        this.srcNodeRef && domStyle.set(this.srcNodeRef, "visibility", "hidden");

                        this.inherited(arguments);
                    },

                    buildRendering: function() {
                        this.inherited(arguments);

                        // Create the tab list that will have a tab (a.k.a. tab button) for each tab panel
                        this.tablist = this._makeController(this.tablistNode);

                        if (!this.doLayout) {
                            domClass.add(this.domNode, "dijitTabContainerNoLayout");
                        }

                        if (this.nested) {
                            /* workaround IE's lack of support for "a > b" selectors by
                             * tagging each node in the template.
                             */
                            domClass.add(this.domNode, "dijitTabContainerNested");
                            domClass.add(this.tablist.containerNode, "dijitTabContainerTabListNested");
                            domClass.add(this.tablistSpacer, "dijitTabContainerSpacerNested");
                            domClass.add(this.containerNode, "dijitTabPaneWrapperNested");
                        } else {
                            domClass.add(this.domNode, "tabStrip-" + (this.tabStrip ? "enabled" : "disabled"));
                        }
                    },

                    _setupChild: function( /*dijit/_WidgetBase*/ tab) {
                        // Overrides StackContainer._setupChild().
                        domClass.add(tab.domNode, "dijitTabPane");
                        this.inherited(arguments);
                    },

                    startup: function() {
                        if (this._started) {
                            return;
                        }

                        // wire up the tablist and its tabs
                        this.tablist.startup();

                        this.inherited(arguments);
                    },

                    layout: function() {
                        // Overrides StackContainer.layout().
                        // Configure the content pane to take up all the space except for where the tabs are

                        if (!this._contentBox || typeof(this._contentBox.l) == "undefined") {
                            return;
                        }

                        var sc = this.selectedChildWidget;

                        if (this.doLayout) {
                            // position and size the titles and the container node
                            var titleAlign = this.tabPosition.replace(/-h/, "");
                            this.tablist.layoutAlign = titleAlign;
                            var children = [this.tablist, {
                                domNode: this.tablistSpacer,
                                layoutAlign: titleAlign
                            }, {
                                domNode: this.containerNode,
                                layoutAlign: "client"
                            }];
                            layoutUtils.layoutChildren(this.domNode, this._contentBox, children);

                            // Compute size to make each of my children.
                            // children[2] is the margin-box size of this.containerNode, set by layoutChildren() call above
                            this._containerContentBox = layoutUtils.marginBox2contentBox(this.containerNode, children[2]);

                            if (sc && sc.resize) {
                                sc.resize(this._containerContentBox);
                            }
                        } else {
                            // just layout the tab controller, so it can position left/right buttons etc.
                            if (this.tablist.resize) {
                                //make the tabs zero width so that they don't interfere with width calc, then reset
                                var s = this.tablist.domNode.style;
                                s.width = "0";
                                var width = domGeometry.getContentBox(this.domNode).w;
                                s.width = "";
                                this.tablist.resize({
                                    w: width
                                });
                            }

                            // and call resize() on the selected pane just to tell it that it's been made visible
                            if (sc && sc.resize) {
                                sc.resize();
                            }
                        }
                    },

                    destroy: function() {
                        if (this.tablist) {
                            this.tablist.destroy();
                        }
                        this.inherited(arguments);
                    }
                });

            });

        },
        'dijit/form/Form': function() {
            define("dijit/form/Form", [
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/_base/event", // event.stop
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/sniff", // has("ie")
                "../_Widget",
                "../_TemplatedMixin",
                "./_FormMixin",
                "../layout/_ContentPaneResizeMixin"
            ], function(declare, domAttr, event, kernel, has, _Widget, _TemplatedMixin, _FormMixin, _ContentPaneResizeMixin) {

                // module:
                //		dijit/form/Form


                return declare("dijit.form.Form", [_Widget, _TemplatedMixin, _FormMixin, _ContentPaneResizeMixin], {
                    // summary:
                    //		Widget corresponding to HTML form tag, for validation and serialization
                    //
                    // example:
                    //	|	<form data-dojo-type="dijit/form/Form" id="myForm">
                    //	|		Name: <input type="text" name="name" />
                    //	|	</form>
                    //	|	myObj = {name: "John Doe"};
                    //	|	dijit.byId('myForm').set('value', myObj);
                    //	|
                    //	|	myObj=dijit.byId('myForm').get('value');

                    // HTML <FORM> attributes

                    // name: String?
                    //		Name of form for scripting.
                    name: "",

                    // action: String?
                    //		Server-side form handler.
                    action: "",

                    // method: String?
                    //		HTTP method used to submit the form, either "GET" or "POST".
                    method: "",

                    // encType: String?
                    //		Encoding type for the form, ex: application/x-www-form-urlencoded.
                    encType: "",

                    // accept-charset: String?
                    //		List of supported charsets.
                    "accept-charset": "",

                    // accept: String?
                    //		List of MIME types for file upload.
                    accept: "",

                    // target: String?
                    //		Target frame for the document to be opened in.
                    target: "",

                    templateString: "<form data-dojo-attach-point='containerNode' data-dojo-attach-event='onreset:_onReset,onsubmit:_onSubmit' ${!nameAttrSetting}></form>",

                    postMixInProperties: function() {
                        // Setup name=foo string to be referenced from the template (but only if a name has been specified)
                        // Unfortunately we can't use _setNameAttr to set the name due to IE limitations, see #8660
                        this.nameAttrSetting = this.name ? ("name='" + this.name + "'") : "";
                        this.inherited(arguments);
                    },

                    execute: function( /*Object*/ /*===== formContents =====*/ ) {
                        // summary:
                        //		Deprecated: use submit()
                        // tags:
                        //		deprecated
                    },

                    onExecute: function() {
                        // summary:
                        //		Deprecated: use onSubmit()
                        // tags:
                        //		deprecated
                    },

                    _setEncTypeAttr: function( /*String*/ value) {
                        this.encType = value;
                        domAttr.set(this.domNode, "encType", value);
                        if (has("ie")) {
                            this.domNode.encoding = value;
                        }
                    },

                    reset: function( /*Event?*/ e) {
                        // summary:
                        //		restores all widget values back to their init values,
                        //		calls onReset() which can cancel the reset by returning false

                        // create fake event so we can know if preventDefault() is called
                        var faux = {
                            returnValue: true, // the IE way
                            preventDefault: function() { // not IE
                                this.returnValue = false;
                            },
                            stopPropagation: function() {},
                            currentTarget: e ? e.target : this.domNode,
                            target: e ? e.target : this.domNode
                        };
                        // if return value is not exactly false, and haven't called preventDefault(), then reset
                        if (!(this.onReset(faux) === false) && faux.returnValue) {
                            this.inherited(arguments, []);
                        }
                    },

                    onReset: function( /*Event?*/ /*===== e =====*/ ) {
                        // summary:
                        //		Callback when user resets the form. This method is intended
                        //		to be over-ridden. When the `reset` method is called
                        //		programmatically, the return value from `onReset` is used
                        //		to compute whether or not resetting should proceed
                        // tags:
                        //		callback
                        return true; // Boolean
                    },

                    _onReset: function(e) {
                        this.reset(e);
                        event.stop(e);
                        return false;
                    },

                    _onSubmit: function(e) {
                        var fp = this.constructor.prototype;
                        // TODO: remove this if statement beginning with 2.0
                        if (this.execute != fp.execute || this.onExecute != fp.onExecute) {
                            kernel.deprecated("dijit.form.Form:execute()/onExecute() are deprecated. Use onSubmit() instead.", "", "2.0");
                            this.onExecute();
                            this.execute(this.getValues());
                        }
                        if (this.onSubmit(e) === false) { // only exactly false stops submit
                            event.stop(e);
                        }
                    },

                    onSubmit: function( /*Event?*/ /*===== e =====*/ ) {
                        // summary:
                        //		Callback when user submits the form.
                        // description:
                        //		This method is intended to be over-ridden, but by default it checks and
                        //		returns the validity of form elements. When the `submit`
                        //		method is called programmatically, the return value from
                        //		`onSubmit` is used to compute whether or not submission
                        //		should proceed
                        // tags:
                        //		extension

                        return this.isValid(); // Boolean
                    },

                    submit: function() {
                        // summary:
                        //		programmatically submit form if and only if the `onSubmit` returns true
                        if (!(this.onSubmit() === false)) {
                            this.containerNode.submit();
                        }
                    }
                });
            });

        },
        'dojo/_base/html': function() {
            define("dojo/_base/html", ["./kernel", "../dom", "../dom-style", "../dom-attr", "../dom-prop", "../dom-class", "../dom-construct", "../dom-geometry"], function(dojo, dom, style, attr, prop, cls, ctr, geom) {
                // module:
                //		dojo/dom

                /*=====
                return {
                	// summary:
                	//		This module is a stub for the core dojo DOM API.
                };
                =====*/

                // mix-in dom
                dojo.byId = dom.byId;
                dojo.isDescendant = dom.isDescendant;
                dojo.setSelectable = dom.setSelectable;

                // mix-in dom-attr
                dojo.getAttr = attr.get;
                dojo.setAttr = attr.set;
                dojo.hasAttr = attr.has;
                dojo.removeAttr = attr.remove;
                dojo.getNodeProp = attr.getNodeProp;

                dojo.attr = function(node, name, value) {
                    // summary:
                    //		Gets or sets an attribute on an HTML element.
                    // description:
                    //		Handles normalized getting and setting of attributes on DOM
                    //		Nodes. If 2 arguments are passed, and a the second argument is a
                    //		string, acts as a getter.
                    //
                    //		If a third argument is passed, or if the second argument is a
                    //		map of attributes, acts as a setter.
                    //
                    //		When passing functions as values, note that they will not be
                    //		directly assigned to slots on the node, but rather the default
                    //		behavior will be removed and the new behavior will be added
                    //		using `dojo.connect()`, meaning that event handler properties
                    //		will be normalized and that some caveats with regards to
                    //		non-standard behaviors for onsubmit apply. Namely that you
                    //		should cancel form submission using `dojo.stopEvent()` on the
                    //		passed event object instead of returning a boolean value from
                    //		the handler itself.
                    // node: DOMNode|String
                    //		id or reference to the element to get or set the attribute on
                    // name: String|Object
                    //		the name of the attribute to get or set.
                    // value: String?
                    //		The value to set for the attribute
                    // returns:
                    //		when used as a getter, the value of the requested attribute
                    //		or null if that attribute does not have a specified or
                    //		default value;
                    //
                    //		when used as a setter, the DOM node
                    //
                    // example:
                    //	|	// get the current value of the "foo" attribute on a node
                    //	|	dojo.attr(dojo.byId("nodeId"), "foo");
                    //	|	// or we can just pass the id:
                    //	|	dojo.attr("nodeId", "foo");
                    //
                    // example:
                    //	|	// use attr() to set the tab index
                    //	|	dojo.attr("nodeId", "tabIndex", 3);
                    //	|
                    //
                    // example:
                    //	Set multiple values at once, including event handlers:
                    //	|	dojo.attr("formId", {
                    //	|		"foo": "bar",
                    //	|		"tabIndex": -1,
                    //	|		"method": "POST",
                    //	|		"onsubmit": function(e){
                    //	|			// stop submitting the form. Note that the IE behavior
                    //	|			// of returning true or false will have no effect here
                    //	|			// since our handler is connect()ed to the built-in
                    //	|			// onsubmit behavior and so we need to use
                    //	|			// dojo.stopEvent() to ensure that the submission
                    //	|			// doesn't proceed.
                    //	|			dojo.stopEvent(e);
                    //	|
                    //	|			// submit the form with Ajax
                    //	|			dojo.xhrPost({ form: "formId" });
                    //	|		}
                    //	|	});
                    //
                    // example:
                    //	Style is s special case: Only set with an object hash of styles
                    //	|	dojo.attr("someNode",{
                    //	|		id:"bar",
                    //	|		style:{
                    //	|			width:"200px", height:"100px", color:"#000"
                    //	|		}
                    //	|	});
                    //
                    // example:
                    //	Again, only set style as an object hash of styles:
                    //	|	var obj = { color:"#fff", backgroundColor:"#000" };
                    //	|	dojo.attr("someNode", "style", obj);
                    //	|
                    //	|	// though shorter to use `dojo.style()` in this case:
                    //	|	dojo.style("someNode", obj);

                    if (arguments.length == 2) {
                        return attr[typeof name == "string" ? "get" : "set"](node, name);
                    }
                    return attr.set(node, name, value);
                };

                // mix-in dom-class
                dojo.hasClass = cls.contains;
                dojo.addClass = cls.add;
                dojo.removeClass = cls.remove;
                dojo.toggleClass = cls.toggle;
                dojo.replaceClass = cls.replace;

                // mix-in dom-construct
                dojo._toDom = dojo.toDom = ctr.toDom;
                dojo.place = ctr.place;
                dojo.create = ctr.create;
                dojo.empty = function(node) {
                    ctr.empty(node);
                };
                dojo._destroyElement = dojo.destroy = function(node) {
                    ctr.destroy(node);
                };

                // mix-in dom-geometry
                dojo._getPadExtents = dojo.getPadExtents = geom.getPadExtents;
                dojo._getBorderExtents = dojo.getBorderExtents = geom.getBorderExtents;
                dojo._getPadBorderExtents = dojo.getPadBorderExtents = geom.getPadBorderExtents;
                dojo._getMarginExtents = dojo.getMarginExtents = geom.getMarginExtents;
                dojo._getMarginSize = dojo.getMarginSize = geom.getMarginSize;
                dojo._getMarginBox = dojo.getMarginBox = geom.getMarginBox;
                dojo.setMarginBox = geom.setMarginBox;
                dojo._getContentBox = dojo.getContentBox = geom.getContentBox;
                dojo.setContentSize = geom.setContentSize;
                dojo._isBodyLtr = dojo.isBodyLtr = geom.isBodyLtr;
                dojo._docScroll = dojo.docScroll = geom.docScroll;
                dojo._getIeDocumentElementOffset = dojo.getIeDocumentElementOffset = geom.getIeDocumentElementOffset;
                dojo._fixIeBiDiScrollLeft = dojo.fixIeBiDiScrollLeft = geom.fixIeBiDiScrollLeft;
                dojo.position = geom.position;

                dojo.marginBox = function marginBox( /*DomNode|String*/ node, /*Object?*/ box) {
                    // summary:
                    //		Getter/setter for the margin-box of node.
                    // description:
                    //		Getter/setter for the margin-box of node.
                    //		Returns an object in the expected format of box (regardless
                    //		if box is passed). The object might look like:
                    //		`{ l: 50, t: 200, w: 300: h: 150 }`
                    //		for a node offset from its parent 50px to the left, 200px from
                    //		the top with a margin width of 300px and a margin-height of
                    //		150px.
                    // node:
                    //		id or reference to DOM Node to get/set box for
                    // box:
                    //		If passed, denotes that dojo.marginBox() should
                    //		update/set the margin box for node. Box is an object in the
                    //		above format. All properties are optional if passed.
                    // example:
                    //		Retrieve the margin box of a passed node
                    //	|	var box = dojo.marginBox("someNodeId");
                    //	|	console.dir(box);
                    //
                    // example:
                    //		Set a node's margin box to the size of another node
                    //	|	var box = dojo.marginBox("someNodeId");
                    //	|	dojo.marginBox("someOtherNode", box);
                    return box ? geom.setMarginBox(node, box) : geom.getMarginBox(node); // Object
                };

                dojo.contentBox = function contentBox( /*DomNode|String*/ node, /*Object?*/ box) {
                    // summary:
                    //		Getter/setter for the content-box of node.
                    // description:
                    //		Returns an object in the expected format of box (regardless if box is passed).
                    //		The object might look like:
                    //		`{ l: 50, t: 200, w: 300: h: 150 }`
                    //		for a node offset from its parent 50px to the left, 200px from
                    //		the top with a content width of 300px and a content-height of
                    //		150px. Note that the content box may have a much larger border
                    //		or margin box, depending on the box model currently in use and
                    //		CSS values set/inherited for node.
                    //		While the getter will return top and left values, the
                    //		setter only accepts setting the width and height.
                    // node:
                    //		id or reference to DOM Node to get/set box for
                    // box:
                    //		If passed, denotes that dojo.contentBox() should
                    //		update/set the content box for node. Box is an object in the
                    //		above format, but only w (width) and h (height) are supported.
                    //		All properties are optional if passed.
                    return box ? geom.setContentSize(node, box) : geom.getContentBox(node); // Object
                };

                dojo.coords = function( /*DomNode|String*/ node, /*Boolean?*/ includeScroll) {
                    // summary:
                    //		Deprecated: Use position() for border-box x/y/w/h
                    //		or marginBox() for margin-box w/h/l/t.
                    //
                    //		Returns an object that measures margin-box (w)idth/(h)eight
                    //		and absolute position x/y of the border-box. Also returned
                    //		is computed (l)eft and (t)op values in pixels from the
                    //		node's offsetParent as returned from marginBox().
                    //		Return value will be in the form:
                    //|			{ l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }
                    //		Does not act as a setter. If includeScroll is passed, the x and
                    //		y params are affected as one would expect in dojo.position().
                    dojo.deprecated("dojo.coords()", "Use dojo.position() or dojo.marginBox().");
                    node = dom.byId(node);
                    var s = style.getComputedStyle(node),
                        mb = geom.getMarginBox(node, s);
                    var abs = geom.position(node, includeScroll);
                    mb.x = abs.x;
                    mb.y = abs.y;
                    return mb; // Object
                };

                // mix-in dom-prop
                dojo.getProp = prop.get;
                dojo.setProp = prop.set;

                dojo.prop = function( /*DomNode|String*/ node, /*String|Object*/ name, /*String?*/ value) {
                    // summary:
                    //		Gets or sets a property on an HTML element.
                    // description:
                    //		Handles normalized getting and setting of properties on DOM
                    //		Nodes. If 2 arguments are passed, and a the second argument is a
                    //		string, acts as a getter.
                    //
                    //		If a third argument is passed, or if the second argument is a
                    //		map of attributes, acts as a setter.
                    //
                    //		When passing functions as values, note that they will not be
                    //		directly assigned to slots on the node, but rather the default
                    //		behavior will be removed and the new behavior will be added
                    //		using `dojo.connect()`, meaning that event handler properties
                    //		will be normalized and that some caveats with regards to
                    //		non-standard behaviors for onsubmit apply. Namely that you
                    //		should cancel form submission using `dojo.stopEvent()` on the
                    //		passed event object instead of returning a boolean value from
                    //		the handler itself.
                    // node:
                    //		id or reference to the element to get or set the property on
                    // name:
                    //		the name of the property to get or set.
                    // value:
                    //		The value to set for the property
                    // returns:
                    //		when used as a getter, the value of the requested property
                    //		or null if that attribute does not have a specified or
                    //		default value;
                    //
                    //		when used as a setter, the DOM node
                    //
                    // example:
                    //	|	// get the current value of the "foo" property on a node
                    //	|	dojo.prop(dojo.byId("nodeId"), "foo");
                    //	|	// or we can just pass the id:
                    //	|	dojo.prop("nodeId", "foo");
                    //
                    // example:
                    //	|	// use prop() to set the tab index
                    //	|	dojo.prop("nodeId", "tabIndex", 3);
                    //	|
                    //
                    // example:
                    //	Set multiple values at once, including event handlers:
                    //	|	dojo.prop("formId", {
                    //	|		"foo": "bar",
                    //	|		"tabIndex": -1,
                    //	|		"method": "POST",
                    //	|		"onsubmit": function(e){
                    //	|			// stop submitting the form. Note that the IE behavior
                    //	|			// of returning true or false will have no effect here
                    //	|			// since our handler is connect()ed to the built-in
                    //	|			// onsubmit behavior and so we need to use
                    //	|			// dojo.stopEvent() to ensure that the submission
                    //	|			// doesn't proceed.
                    //	|			dojo.stopEvent(e);
                    //	|
                    //	|			// submit the form with Ajax
                    //	|			dojo.xhrPost({ form: "formId" });
                    //	|		}
                    //	|	});
                    //
                    // example:
                    //		Style is s special case: Only set with an object hash of styles
                    //	|	dojo.prop("someNode",{
                    //	|		id:"bar",
                    //	|		style:{
                    //	|			width:"200px", height:"100px", color:"#000"
                    //	|		}
                    //	|	});
                    //
                    // example:
                    //		Again, only set style as an object hash of styles:
                    //	|	var obj = { color:"#fff", backgroundColor:"#000" };
                    //	|	dojo.prop("someNode", "style", obj);
                    //	|
                    //	|	// though shorter to use `dojo.style()` in this case:
                    //	|	dojo.style("someNode", obj);

                    if (arguments.length == 2) {
                        return prop[typeof name == "string" ? "get" : "set"](node, name);
                    }
                    // setter
                    return prop.set(node, name, value);
                };

                // mix-in dom-style
                dojo.getStyle = style.get;
                dojo.setStyle = style.set;
                dojo.getComputedStyle = style.getComputedStyle;
                dojo.__toPixelValue = dojo.toPixelValue = style.toPixelValue;

                dojo.style = function(node, name, value) {
                    // summary:
                    //		Accesses styles on a node. If 2 arguments are
                    //		passed, acts as a getter. If 3 arguments are passed, acts
                    //		as a setter.
                    // description:
                    //		Getting the style value uses the computed style for the node, so the value
                    //		will be a calculated value, not just the immediate node.style value.
                    //		Also when getting values, use specific style names,
                    //		like "borderBottomWidth" instead of "border" since compound values like
                    //		"border" are not necessarily reflected as expected.
                    //		If you want to get node dimensions, use `dojo.marginBox()`,
                    //		`dojo.contentBox()` or `dojo.position()`.
                    // node: DOMNode|String
                    //		id or reference to node to get/set style for
                    // name: String|Object?
                    //		the style property to set in DOM-accessor format
                    //		("borderWidth", not "border-width") or an object with key/value
                    //		pairs suitable for setting each property.
                    // value: String?
                    //		If passed, sets value on the node for style, handling
                    //		cross-browser concerns.  When setting a pixel value,
                    //		be sure to include "px" in the value. For instance, top: "200px".
                    //		Otherwise, in some cases, some browsers will not apply the style.
                    // returns:
                    //		when used as a getter, return the computed style of the node if passing in an ID or node,
                    //		or return the normalized, computed value for the property when passing in a node and a style property
                    // example:
                    //		Passing only an ID or node returns the computed style object of
                    //		the node:
                    //	|	dojo.style("thinger");
                    // example:
                    //		Passing a node and a style property returns the current
                    //		normalized, computed value for that property:
                    //	|	dojo.style("thinger", "opacity"); // 1 by default
                    //
                    // example:
                    //		Passing a node, a style property, and a value changes the
                    //		current display of the node and returns the new computed value
                    //	|	dojo.style("thinger", "opacity", 0.5); // == 0.5
                    //
                    // example:
                    //		Passing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:
                    //	|	dojo.style("thinger", {
                    //	|		"opacity": 0.5,
                    //	|		"border": "3px solid black",
                    //	|		"height": "300px"
                    //	|	});
                    //
                    // example:
                    //		When the CSS style property is hyphenated, the JavaScript property is camelCased.
                    //		font-size becomes fontSize, and so on.
                    //	|	dojo.style("thinger",{
                    //	|		fontSize:"14pt",
                    //	|		letterSpacing:"1.2em"
                    //	|	});
                    //
                    // example:
                    //		dojo/NodeList implements .style() using the same syntax, omitting the "node" parameter, calling
                    //		dojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`
                    //	|	dojo.query(".someClassName").style("visibility","hidden");
                    //	|	// or
                    //	|	dojo.query("#baz > div").style({
                    //	|		opacity:0.75,
                    //	|		fontSize:"13pt"
                    //	|	});

                    switch (arguments.length) {
                        case 1:
                            return style.get(node);
                        case 2:
                            return style[typeof name == "string" ? "get" : "set"](node, name);
                    }
                    // setter
                    return style.set(node, name, value);
                };

                return dojo;
            });

        },
        'dojo/_base/array': function() {
            define(["./kernel", "../has", "./lang"], function(dojo, has, lang) {
                // module:
                //		dojo/_base/array

                // our old simple function builder stuff
                var cache = {},
                    u;

                function buildFn(fn) {
                    return cache[fn] = new Function("item", "index", "array", fn); // Function
                }
                // magic snippet: if(typeof fn == "string") fn = cache[fn] || buildFn(fn);

                // every & some

                function everyOrSome(some) {
                    var every = !some;
                    return function(a, fn, o) {
                        var i = 0,
                            l = a && a.length || 0,
                            result;
                        if (l && typeof a == "string") a = a.split("");
                        if (typeof fn == "string") fn = cache[fn] || buildFn(fn);
                        if (o) {
                            for (; i < l; ++i) {
                                result = !fn.call(o, a[i], i, a);
                                if (some ^ result) {
                                    return !result;
                                }
                            }
                        } else {
                            for (; i < l; ++i) {
                                result = !fn(a[i], i, a);
                                if (some ^ result) {
                                    return !result;
                                }
                            }
                        }
                        return every; // Boolean
                    };
                }

                // indexOf, lastIndexOf

                function index(up) {
                    var delta = 1,
                        lOver = 0,
                        uOver = 0;
                    if (!up) {
                        delta = lOver = uOver = -1;
                    }
                    return function(a, x, from, last) {
                        if (last && delta > 0) {
                            // TODO: why do we use a non-standard signature? why do we need "last"?
                            return array.lastIndexOf(a, x, from);
                        }
                        var l = a && a.length || 0,
                            end = up ? l + uOver : lOver,
                            i;
                        if (from === u) {
                            i = up ? lOver : l + uOver;
                        } else {
                            if (from < 0) {
                                i = l + from;
                                if (i < 0) {
                                    i = lOver;
                                }
                            } else {
                                i = from >= l ? l + uOver : from;
                            }
                        }
                        if (l && typeof a == "string") a = a.split("");
                        for (; i != end; i += delta) {
                            if (a[i] == x) {
                                return i; // Number
                            }
                        }
                        return -1; // Number
                    };
                }

                var array = {
                    // summary:
                    //		The Javascript v1.6 array extensions.

                    every: everyOrSome(false),
                    /*=====
                     every: function(arr, callback, thisObject){
                    	 // summary:
                    	 //		Determines whether or not every item in arr satisfies the
                    	 //		condition implemented by callback.
                    	 // arr: Array|String
                    	 //		the array to iterate on. If a string, operates on individual characters.
                    	 // callback: Function|String
                    	 //		a function is invoked with three arguments: item, index,
                    	 //		and array and returns true if the condition is met.
                    	 // thisObject: Object?
                    	 //		may be used to scope the call to callback
                    	 // returns: Boolean
                    	 // description:
                    	 //		This function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when
                    	 //		run over sparse arrays, this implementation passes the "holes" in the sparse array to
                    	 //		the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array.
                    	 //		For more details, see:
                    	 //		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every
                    	 // example:
                    	 //	|	// returns false
                    	 //	|	array.every([1, 2, 3, 4], function(item){ return item>1; });
                    	 // example:
                    	 //	|	// returns true
                    	 //	|	array.every([1, 2, 3, 4], function(item){ return item>0; });
                     },
                     =====*/

                    some: everyOrSome(true),
                    /*=====
                    some: function(arr, callback, thisObject){
                    	// summary:
                    	//		Determines whether or not any item in arr satisfies the
                    	//		condition implemented by callback.
                    	// arr: Array|String
                    	//		the array to iterate over. If a string, operates on individual characters.
                    	// callback: Function|String
                    	//		a function is invoked with three arguments: item, index,
                    	//		and array and returns true if the condition is met.
                    	// thisObject: Object?
                    	//		may be used to scope the call to callback
                    	// returns: Boolean
                    	// description:
                    	//		This function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when
                    	//		run over sparse arrays, this implementation passes the "holes" in the sparse array to
                    	//		the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array.
                    	//		For more details, see:
                    	//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some
                    	// example:
                    	//	| // is true
                    	//	| array.some([1, 2, 3, 4], function(item){ return item>1; });
                    	// example:
                    	//	| // is false
                    	//	| array.some([1, 2, 3, 4], function(item){ return item<1; });
                    },
                    =====*/

                    indexOf: index(true),
                    /*=====
                    indexOf: function(arr, value, fromIndex, findLast){
                    	// summary:
                    	//		locates the first index of the provided value in the
                    	//		passed array. If the value is not found, -1 is returned.
                    	// description:
                    	//		This method corresponds to the JavaScript 1.6 Array.indexOf method, with one difference: when
                    	//		run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript
                    	//		1.6's indexOf skips the holes in the sparse array.
                    	//		For details on this method, see:
                    	//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf
                    	// arr: Array
                    	// value: Object
                    	// fromIndex: Integer?
                    	// findLast: Boolean?
                    	// returns: Number
                    },
                    =====*/

                    lastIndexOf: index(false),
                    /*=====
                    lastIndexOf: function(arr, value, fromIndex){
                    	// summary:
                    	//		locates the last index of the provided value in the passed
                    	//		array. If the value is not found, -1 is returned.
                    	// description:
                    	//		This method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with one difference: when
                    	//		run over sparse arrays, the Dojo function invokes the callback for every index whereas JavaScript
                    	//		1.6's lastIndexOf skips the holes in the sparse array.
                    	//		For details on this method, see:
                    	//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf
                    	// arr: Array,
                    	// value: Object,
                    	// fromIndex: Integer?
                    	// returns: Number
                    },
                    =====*/

                    forEach: function(arr, callback, thisObject) {
                        // summary:
                        //		for every item in arr, callback is invoked. Return values are ignored.
                        //		If you want to break out of the loop, consider using array.every() or array.some().
                        //		forEach does not allow breaking out of the loop over the items in arr.
                        // arr:
                        //		the array to iterate over. If a string, operates on individual characters.
                        // callback:
                        //		a function is invoked with three arguments: item, index, and array
                        // thisObject:
                        //		may be used to scope the call to callback
                        // description:
                        //		This function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when
                        //		run over sparse arrays, this implementation passes the "holes" in the sparse array to
                        //		the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array.
                        //		For more details, see:
                        //		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach
                        // example:
                        //	| // log out all members of the array:
                        //	| array.forEach(
                        //	|		[ "thinger", "blah", "howdy", 10 ],
                        //	|		function(item){
                        //	|			console.log(item);
                        //	|		}
                        //	| );
                        // example:
                        //	| // log out the members and their indexes
                        //	| array.forEach(
                        //	|		[ "thinger", "blah", "howdy", 10 ],
                        //	|		function(item, idx, arr){
                        //	|			console.log(item, "at index:", idx);
                        //	|		}
                        //	| );
                        // example:
                        //	| // use a scoped object member as the callback
                        //	|
                        //	| var obj = {
                        //	|		prefix: "logged via obj.callback:",
                        //	|		callback: function(item){
                        //	|			console.log(this.prefix, item);
                        //	|		}
                        //	| };
                        //	|
                        //	| // specifying the scope function executes the callback in that scope
                        //	| array.forEach(
                        //	|		[ "thinger", "blah", "howdy", 10 ],
                        //	|		obj.callback,
                        //	|		obj
                        //	| );
                        //	|
                        //	| // alternately, we can accomplish the same thing with lang.hitch()
                        //	| array.forEach(
                        //	|		[ "thinger", "blah", "howdy", 10 ],
                        //	|		lang.hitch(obj, "callback")
                        //	| );
                        // arr: Array|String
                        // callback: Function|String
                        // thisObject: Object?

                        var i = 0,
                            l = arr && arr.length || 0;
                        if (l && typeof arr == "string") arr = arr.split("");
                        if (typeof callback == "string") callback = cache[callback] || buildFn(callback);
                        if (thisObject) {
                            for (; i < l; ++i) {
                                callback.call(thisObject, arr[i], i, arr);
                            }
                        } else {
                            for (; i < l; ++i) {
                                callback(arr[i], i, arr);
                            }
                        }
                    },

                    map: function(arr, callback, thisObject, Ctr) {
                        // summary:
                        //		applies callback to each element of arr and returns
                        //		an Array with the results
                        // arr: Array|String
                        //		the array to iterate on. If a string, operates on
                        //		individual characters.
                        // callback: Function|String
                        //		a function is invoked with three arguments, (item, index,
                        //		array),	 and returns a value
                        // thisObject: Object?
                        //		may be used to scope the call to callback
                        // returns: Array
                        // description:
                        //		This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when
                        //		run over sparse arrays, this implementation passes the "holes" in the sparse array to
                        //		the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array.
                        //		For more details, see:
                        //		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
                        // example:
                        //	| // returns [2, 3, 4, 5]
                        //	| array.map([1, 2, 3, 4], function(item){ return item+1 });

                        // TODO: why do we have a non-standard signature here? do we need "Ctr"?
                        var i = 0,
                            l = arr && arr.length || 0,
                            out = new(Ctr || Array)(l);
                        if (l && typeof arr == "string") arr = arr.split("");
                        if (typeof callback == "string") callback = cache[callback] || buildFn(callback);
                        if (thisObject) {
                            for (; i < l; ++i) {
                                out[i] = callback.call(thisObject, arr[i], i, arr);
                            }
                        } else {
                            for (; i < l; ++i) {
                                out[i] = callback(arr[i], i, arr);
                            }
                        }
                        return out; // Array
                    },

                    filter: function(arr, callback, thisObject) {
                        // summary:
                        //		Returns a new Array with those items from arr that match the
                        //		condition implemented by callback.
                        // arr: Array
                        //		the array to iterate over.
                        // callback: Function|String
                        //		a function that is invoked with three arguments (item,
                        //		index, array). The return of this function is expected to
                        //		be a boolean which determines whether the passed-in item
                        //		will be included in the returned array.
                        // thisObject: Object?
                        //		may be used to scope the call to callback
                        // returns: Array
                        // description:
                        //		This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when
                        //		run over sparse arrays, this implementation passes the "holes" in the sparse array to
                        //		the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.
                        //		For more details, see:
                        //		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
                        // example:
                        //	| // returns [2, 3, 4]
                        //	| array.filter([1, 2, 3, 4], function(item){ return item>1; });

                        // TODO: do we need "Ctr" here like in map()?
                        var i = 0,
                            l = arr && arr.length || 0,
                            out = [],
                            value;
                        if (l && typeof arr == "string") arr = arr.split("");
                        if (typeof callback == "string") callback = cache[callback] || buildFn(callback);
                        if (thisObject) {
                            for (; i < l; ++i) {
                                value = arr[i];
                                if (callback.call(thisObject, value, i, arr)) {
                                    out.push(value);
                                }
                            }
                        } else {
                            for (; i < l; ++i) {
                                value = arr[i];
                                if (callback(value, i, arr)) {
                                    out.push(value);
                                }
                            }
                        }
                        return out; // Array
                    },

                    clearCache: function() {
                        cache = {};
                    }
                };


                1 && lang.mixin(dojo, array);

                return array;
            });

        },
        'dojo/promise/Promise': function() {
            define([
                "../_base/lang"
            ], function(lang) {
                "use strict";

                // module:
                //		dojo/promise/Promise

                function throwAbstract() {
                    throw new TypeError("abstract");
                }

                return lang.extend(function Promise() {
                    // summary:
                    //		The public interface to a deferred.
                    // description:
                    //		The public interface to a deferred. All promises in Dojo are
                    //		instances of this class.
                }, {
                    then: function(callback, errback, progback) {
                        // summary:
                        //		Add new callbacks to the promise.
                        // description:
                        //		Add new callbacks to the deferred. Callbacks can be added
                        //		before or after the deferred is fulfilled.
                        // callback: Function?
                        //		Callback to be invoked when the promise is resolved.
                        //		Receives the resolution value.
                        // errback: Function?
                        //		Callback to be invoked when the promise is rejected.
                        //		Receives the rejection error.
                        // progback: Function?
                        //		Callback to be invoked when the promise emits a progress
                        //		update. Receives the progress update.
                        // returns: dojo/promise/Promise
                        //		Returns a new promise for the result of the callback(s).
                        //		This can be used for chaining many asynchronous operations.

                        throwAbstract();
                    },

                    cancel: function(reason, strict) {
                        // summary:
                        //		Inform the deferred it may cancel its asynchronous operation.
                        // description:
                        //		Inform the deferred it may cancel its asynchronous operation.
                        //		The deferred's (optional) canceler is invoked and the
                        //		deferred will be left in a rejected state. Can affect other
                        //		promises that originate with the same deferred.
                        // reason: any
                        //		A message that may be sent to the deferred's canceler,
                        //		explaining why it's being canceled.
                        // strict: Boolean?
                        //		If strict, will throw an error if the deferred has already
                        //		been fulfilled and consequently cannot be canceled.
                        // returns: any
                        //		Returns the rejection reason if the deferred was canceled
                        //		normally.

                        throwAbstract();
                    },

                    isResolved: function() {
                        // summary:
                        //		Checks whether the promise has been resolved.
                        // returns: Boolean

                        throwAbstract();
                    },

                    isRejected: function() {
                        // summary:
                        //		Checks whether the promise has been rejected.
                        // returns: Boolean

                        throwAbstract();
                    },

                    isFulfilled: function() {
                        // summary:
                        //		Checks whether the promise has been resolved or rejected.
                        // returns: Boolean

                        throwAbstract();
                    },

                    isCanceled: function() {
                        // summary:
                        //		Checks whether the promise has been canceled.
                        // returns: Boolean

                        throwAbstract();
                    },

                    always: function(callbackOrErrback) {
                        // summary:
                        //		Add a callback to be invoked when the promise is resolved
                        //		or rejected.
                        // callbackOrErrback: Function?
                        //		A function that is used both as a callback and errback.
                        // returns: dojo/promise/Promise
                        //		Returns a new promise for the result of the callback/errback.

                        return this.then(callbackOrErrback, callbackOrErrback);
                    },

                    otherwise: function(errback) {
                        // summary:
                        //		Add new errbacks to the promise.
                        // errback: Function?
                        //		Callback to be invoked when the promise is rejected.
                        // returns: dojo/promise/Promise
                        //		Returns a new promise for the result of the errback.

                        return this.then(null, errback);
                    },

                    trace: function() {
                        return this;
                    },

                    traceRejected: function() {
                        return this;
                    },

                    toString: function() {
                        // returns: string
                        //		Returns `[object Promise]`.

                        return "[object Promise]";
                    }
                });
            });

        },
        'dojo/store/Memory': function() {
            define(["../_base/declare", "./util/QueryResults", "./util/SimpleQueryEngine" /*=====, "./api/Store" =====*/ ],
                function(declare, QueryResults, SimpleQueryEngine /*=====, Store =====*/ ) {

                    // module:
                    //		dojo/store/Memory

                    // No base class, but for purposes of documentation, the base class is dojo/store/api/Store
                    var base = null;
                    /*===== base = Store; =====*/

                    return declare("dojo.store.Memory", base, {
                        // summary:
                        //		This is a basic in-memory object store. It implements dojo/store/api/Store.
                        constructor: function(options) {
                            // summary:
                            //		Creates a memory object store.
                            // options: dojo/store/Memory
                            //		This provides any configuration information that will be mixed into the store.
                            //		This should generally include the data property to provide the starting set of data.
                            for (var i in options) {
                                this[i] = options[i];
                            }
                            this.setData(this.data || []);
                        },
                        // data: Array
                        //		The array of all the objects in the memory store
                        data: null,

                        // idProperty: String
                        //		Indicates the property to use as the identity property. The values of this
                        //		property should be unique.
                        idProperty: "id",

                        // index: Object
                        //		An index of data indices into the data array by id
                        index: null,

                        // queryEngine: Function
                        //		Defines the query engine to use for querying the data store
                        queryEngine: SimpleQueryEngine,
                        get: function(id) {
                            // summary:
                            //		Retrieves an object by its identity
                            // id: Number
                            //		The identity to use to lookup the object
                            // returns: Object
                            //		The object in the store that matches the given id.
                            return this.data[this.index[id]];
                        },
                        getIdentity: function(object) {
                            // summary:
                            //		Returns an object's identity
                            // object: Object
                            //		The object to get the identity from
                            // returns: Number
                            return object[this.idProperty];
                        },
                        put: function(object, options) {
                            // summary:
                            //		Stores an object
                            // object: Object
                            //		The object to store.
                            // options: dojo/store/api/Store.PutDirectives?
                            //		Additional metadata for storing the data.  Includes an "id"
                            //		property if a specific id is to be used.
                            // returns: Number
                            var data = this.data,
                                index = this.index,
                                idProperty = this.idProperty;
                            var id = object[idProperty] = (options && "id" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();
                            if (id in index) {
                                // object exists
                                if (options && options.overwrite === false) {
                                    throw new Error("Object already exists");
                                }
                                // replace the entry in data
                                data[index[id]] = object;
                            } else {
                                // add the new object
                                index[id] = data.push(object) - 1;
                            }
                            return id;
                        },
                        add: function(object, options) {
                            // summary:
                            //		Creates an object, throws an error if the object already exists
                            // object: Object
                            //		The object to store.
                            // options: dojo/store/api/Store.PutDirectives?
                            //		Additional metadata for storing the data.  Includes an "id"
                            //		property if a specific id is to be used.
                            // returns: Number
                            (options = options || {}).overwrite = false;
                            // call put with overwrite being false
                            return this.put(object, options);
                        },
                        remove: function(id) {
                            // summary:
                            //		Deletes an object by its identity
                            // id: Number
                            //		The identity to use to delete the object
                            // returns: Boolean
                            //		Returns true if an object was removed, falsy (undefined) if no object matched the id
                            var index = this.index;
                            var data = this.data;
                            if (id in index) {
                                data.splice(index[id], 1);
                                // now we have to reindex
                                this.setData(data);
                                return true;
                            }
                        },
                        query: function(query, options) {
                            // summary:
                            //		Queries the store for objects.
                            // query: Object
                            //		The query to use for retrieving objects from the store.
                            // options: dojo/store/api/Store.QueryOptions?
                            //		The optional arguments to apply to the resultset.
                            // returns: dojo/store/api/Store.QueryResults
                            //		The results of the query, extended with iterative methods.
                            //
                            // example:
                            //		Given the following store:
                            //
                            // 	|	var store = new Memory({
                            // 	|		data: [
                            // 	|			{id: 1, name: "one", prime: false },
                            //	|			{id: 2, name: "two", even: true, prime: true},
                            //	|			{id: 3, name: "three", prime: true},
                            //	|			{id: 4, name: "four", even: true, prime: false},
                            //	|			{id: 5, name: "five", prime: true}
                            //	|		]
                            //	|	});
                            //
                            //	...find all items where "prime" is true:
                            //
                            //	|	var results = store.query({ prime: true });
                            //
                            //	...or find all items where "even" is true:
                            //
                            //	|	var results = store.query({ even: true });
                            return QueryResults(this.queryEngine(query, options)(this.data));
                        },
                        setData: function(data) {
                            // summary:
                            //		Sets the given data as the source for this store, and indexes it
                            // data: Object[]
                            //		An array of objects to use as the source of data.
                            if (data.items) {
                                // just for convenience with the data format IFRS expects
                                this.idProperty = data.identifier;
                                data = this.data = data.items;
                            } else {
                                this.data = data;
                            }
                            this.index = {};
                            for (var i = 0, l = data.length; i < l; i++) {
                                this.index[data[i][this.idProperty]] = i;
                            }
                        }
                    });

                });

        },
        'dojo/errors/RequestTimeoutError': function() {
            define("dojo/errors/RequestTimeoutError", ['./create', './RequestError'], function(create, RequestError) {
                // module:
                //		dojo/errors/RequestTimeoutError

                /*=====
                 return function(){
                	 // summary:
                	 //		TODOC
                 };
                 =====*/

                return create("RequestTimeoutError", null, RequestError, {
                    dojoType: "timeout"
                });
            });

        },
        'hsbcwidget/Logo': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase"
                ],
                function(declare, _WidgetBase) {

                    return declare([_WidgetBase], {

                    });

                }
            );
        },
        'url:dijit/templates/Tooltip.html': "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" data-dojo-attach-point=\"containerNode\" role='alert'></div\n\t><div class=\"dijitTooltipConnector\" data-dojo-attach-point=\"connectorNode\"></div\n></div>\n",
        'hsbcwidget/form/CustomSelect1': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/dom-construct",
                    "dojo/dom-geometry",
                    "dojo/dom-style",
                    "dojo/on",
                    "dojo/dom-class",
                    "dojo/dom-prop"
                ],
                function(declare, _WidgetBase, query, domConstruct, domGeom, domStyle, on, domClass, domProp) {

                    return declare([_WidgetBase], {
                        overlayClass: 'select-overlay',
                        calculateSize: true,

                        buildRendering: function() {
                            this.inherited(arguments);
                            this.selectNode = query('select', this.domNode)[0];
                            domClass.add(this.selectNode, 'replaced');

                            this.overlayNode = domConstruct.toDom('<div role="presentation" aria-hidden="true" class="' + this.overlayClass + '"><div class="inner"><span class="value"></span><span class="arrow"></span></div></div>');
                            this.overlayNode = domConstruct.place(this.overlayNode, this.selectNode, 'after');

                            this.innerNode = query('.inner', this.overlayNode)[0];
                            this.valueNode = query('.value', this.innerNode)[0];
                            this.arrowNode = query('.arrow', this.innerNode)[0];

                            this.optionNodes = query('option', this.selectNode);
                            this.selectNode.style.width = "600px";
                            this.selectNode.style.height = "50px";
                            domClass.add(this.selectNode.parentNode, "forselect");

                            //Set Overlay size
                            if (this.calculateSize === true) {
                                domGeom.setContentSize(this.overlayNode, domGeom.position(this.selectNode));
                            }
                        },

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this;

                            //Setup events
                            on(this.selectNode, 'focus', function(e) {
                                domClass.add(self.overlayNode, 'focused');
                            });

                            on(this.selectNode, 'blur', function(e) {
                                domClass.remove(self.overlayNode, 'focused');
                            });

                            on(this.selectNode, 'change', function(e) {
                                self.update();
                            });

                            //needed as FF doesn't fire change event
                            //until select is blurred.
                            on(this.selectNode, 'keyup', function(e) {
                                self.update();
                            });

                            //Custom Events
                            on(this.domNode, 'enable:customselect', function(e) {
                                self.enable();
                            });

                            on(this.domNode, 'disable:customselect', function(e) {
                                self.disable();
                            });

                            //Inital setup
                            this.update();
                        },

                        update: function() {
                            var index = domProp.get(this.selectNode, 'selectedIndex');

                            this.valueNode.innerHTML = this.optionNodes[index].innerHTML;
                        },

                        enable: function() {
                            domProp.set(this.selectNode, 'disabled');
                            domClass.remove(this.overlayNode, 'disabled');
                        },

                        disable: function() {
                            domProp.set(this.selectNode, 'disabled', 'true');
                            domClass.add(this.overlayNode, 'disabled');
                        }
                    });

                }
            );
        },
        'hsbccore/doT': function() {
            (function() {
                function o() {
                    var b = {
                            "&": "&#38;",
                            "<": "&#60;",
                            ">": "&#62;",
                            '"': "&#34;",
                            "'": "&#39;",
                            "/": "&#47;"
                        },
                        a = /&(?!#?\w+;)|<|>|"|'|\//g;
                    return function(f) {
                        return f ? f.toString().replace(a, function(g) {
                            return b[g] || g
                        }) : f
                    }
                }

                function p(b, a, f) {
                    return (typeof a === "string" ? a : a.toString()).replace(b.define || h, function(g, e, c, i) {
                        if (e.indexOf("def.") === 0) e = e.substring(4);
                        if (!(e in f))
                            if (c === ":") f[e] = i;
                            else eval("def['" + e + "']=" + i);
                        return ""
                    }).replace(b.use || h, function(g, e) {
                        var c = eval(e);
                        return c ? p(b, c, f) : c
                    })
                }

                function l(b) {
                    return b.replace(/\\('|\\)/g,
                        "$1").replace(/[\r\t\n]/g, " ")
                }
                var j = {
                        version: "0.2.0",
                        templateSettings: {
                            evaluate: /\{\{([\s\S]+?)\}\}/g,
                            interpolate: /\{\{=([\s\S]+?)\}\}/g,
                            encode: /\{\{!([\s\S]+?)\}\}/g,
                            use: /\{\{#([\s\S]+?)\}\}/g,
                            define: /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
                            conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
                            iterate: /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
                            varname: "it",
                            strip: true,
                            append: true,
                            selfcontained: false
                        },
                        template: undefined,
                        compile: undefined
                    },
                    m = function() {
                        return this || (0, eval)("this")
                    }();
                if (typeof module !== "undefined" && module.exports) module.exports = j;
                else if (typeof define === "function" && define.amd) define("hsbccore/doT", function() {
                    return j
                });
                else m.doT = j;
                m.encodeHTML = o();
                var q = {
                        append: {
                            start: "'+(",
                            end: ")+'",
                            startencode: "'+encodeHTML("
                        },
                        split: {
                            start: "';out+=(",
                            end: ");out+='",
                            startencode: "';out+=encodeHTML("
                        }
                    },
                    h = /$^/;
                j.template = function(b, a, f) {
                    a = a || j.templateSettings;
                    var g = a.append ? q.append : q.split,
                        e, c = 0,
                        i;
                    if (a.use || a.define) {
                        var r = m.def;
                        m.def = f || {};
                        b = p(a, b, m.def);
                        m.def = r
                    }
                    b = ("var out='" + (a.strip ? b.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g,
                        " ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g, "") : b).replace(/'|\\/g, "\\$&").replace(a.interpolate || h, function(n, d) {
                        return g.start + l(d) + g.end
                    }).replace(a.encode || h, function(n, d) {
                        e = true;
                        return g.startencode + l(d) + g.end
                    }).replace(a.conditional || h, function(n, d, k) {
                        return d ? k ? "';}else if(" + l(k) + "){out+='" : "';}else{out+='" : k ? "';if(" + l(k) + "){out+='" : "';}out+='"
                    }).replace(a.iterate || h, function(n, d, k, s) {
                        if (!d) return "';} } out+='";
                        c += 1;
                        i = s || "i" + c;
                        d = l(d);
                        return "';var arr" + c + "=" + d + ";if(arr" + c + "){var " + k + "," + i + "=-1,l" +
                            c + "=arr" + c + ".length-1;while(" + i + "<l" + c + "){" + k + "=arr" + c + "[" + i + "+=1];out+='"
                    }).replace(a.evaluate || h, function(n, d) {
                        return "';" + l(d) + "out+='"
                    }) + "';return out;").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/(\s|;|}|^|{)out\+='';/g, "$1").replace(/\+''/g, "").replace(/(\s|;|}|^|{)out\+=''\+/g, "$1out+=");
                    if (e && a.selfcontained) b = "var encodeHTML=(" + o.toString() + "());" + b;
                    try {
                        return new Function(a.varname, b)
                    } catch (t) {
                        typeof console !== "undefined" && console.log("Could not create a template function: " +
                            b);
                        throw t;
                    }
                };
                j.compile = function(b, a) {
                    return j.template(b, null, a)
                }
            })();
        },
        'dojo/_base/config': function() {
            define(["../has", "require"], function(has, require) {
                // module:
                //		dojo/_base/config

                /*=====
                return {
                	// summary:
                	//		This module defines the user configuration during bootstrap.
                	// description:
                	//		By defining user configuration as a module value, an entire configuration can be specified in a build,
                	//		thereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig.
                	//		Also, when multiple instances of dojo exist in a single application, each will necessarily be located
                	//		at an unique absolute module identifier as given by the package configuration. Implementing configuration
                	//		as a module allows for specifying unique, per-instance configurations.
                	// example:
                	//		Create a second instance of dojo with a different, instance-unique configuration (assume the loader and
                	//		dojo.js are already loaded).
                	//		|	// specify a configuration that creates a new instance of dojo at the absolute module identifier "myDojo"
                	//		|	require({
                	//		|		packages:[{
                	//		|			name:"myDojo",
                	//		|			location:".", //assume baseUrl points to dojo.js
                	//		|		}]
                	//		|	});
                	//		|
                	//		|	// specify a configuration for the myDojo instance
                	//		|	define("myDojo/config", {
                	//		|		// normal configuration variables go here, e.g.,
                	//		|		locale:"fr-ca"
                	//		|	});
                	//		|
                	//		|	// load and use the new instance of dojo
                	//		|	require(["myDojo"], function(dojo){
                	//		|		// dojo is the new instance of dojo
                	//		|		// use as required
                	//		|	});

                	// isDebug: Boolean
                	//		Defaults to `false`. If set to `true`, ensures that Dojo provides
                	//		extended debugging feedback via Firebug. If Firebug is not available
                	//		on your platform, setting `isDebug` to `true` will force Dojo to
                	//		pull in (and display) the version of Firebug Lite which is
                	//		integrated into the Dojo distribution, thereby always providing a
                	//		debugging/logging console when `isDebug` is enabled. Note that
                	//		Firebug's `console.*` methods are ALWAYS defined by Dojo. If
                	//		`isDebug` is false and you are on a platform without Firebug, these
                	//		methods will be defined as no-ops.
                	isDebug: false,

                	// locale: String
                	//		The locale to assume for loading localized resources in this page,
                	//		specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt).
                	//		Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`.
                	//		See the documentation for `dojo.i18n` and `dojo.requireLocalization`
                	//		for details on loading localized resources. If no locale is specified,
                	//		Dojo assumes the locale of the user agent, according to `navigator.userLanguage`
                	//		or `navigator.language` properties.
                	locale: undefined,

                	// extraLocale: Array
                	//		No default value. Specifies additional locales whose
                	//		resources should also be loaded alongside the default locale when
                	//		calls to `dojo.requireLocalization()` are processed.
                	extraLocale: undefined,

                	// baseUrl: String
                	//		The directory in which `dojo.js` is located. Under normal
                	//		conditions, Dojo auto-detects the correct location from which it
                	//		was loaded. You may need to manually configure `baseUrl` in cases
                	//		where you have renamed `dojo.js` or in which `<base>` tags confuse
                	//		some browsers (e.g. IE 6). The variable `dojo.baseUrl` is assigned
                	//		either the value of `djConfig.baseUrl` if one is provided or the
                	//		auto-detected root if not. Other modules are located relative to
                	//		this path. The path should end in a slash.
                	baseUrl: undefined,

                	// modulePaths: [deprecated] Object
                	//		A map of module names to paths relative to `dojo.baseUrl`. The
                	//		key/value pairs correspond directly to the arguments which
                	//		`dojo.registerModulePath` accepts. Specifying
                	//		`djConfig.modulePaths = { "foo": "../../bar" }` is the equivalent
                	//		of calling `dojo.registerModulePath("foo", "../../bar");`. Multiple
                	//		modules may be configured via `djConfig.modulePaths`.
                	modulePaths: {},

                	// addOnLoad: Function|Array
                	//		Adds a callback via dojo/ready. Useful when Dojo is added after
                	//		the page loads and djConfig.afterOnLoad is true. Supports the same
                	//		arguments as dojo/ready. When using a function reference, use
                	//		`djConfig.addOnLoad = function(){};`. For object with function name use
                	//		`djConfig.addOnLoad = [myObject, "functionName"];` and for object with
                	//		function reference use
                	//		`djConfig.addOnLoad = [myObject, function(){}];`
                	addOnLoad: null,

                	// parseOnLoad: Boolean
                	//		Run the parser after the page is loaded
                	parseOnLoad: false,

                	// require: String[]
                	//		An array of module names to be loaded immediately after dojo.js has been included
                	//		in a page.
                	require: [],

                	// defaultDuration: Number
                	//		Default duration, in milliseconds, for wipe and fade animations within dijits.
                	//		Assigned to dijit.defaultDuration.
                	defaultDuration: 200,

                	// dojoBlankHtmlUrl: String
                	//		Used by some modules to configure an empty iframe. Used by dojo/io/iframe and
                	//		dojo/back, and dijit/popup support in IE where an iframe is needed to make sure native
                	//		controls do not bleed through the popups. Normally this configuration variable
                	//		does not need to be set, except when using cross-domain/CDN Dojo builds.
                	//		Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl`
                	//		to the path on your domain your copy of blank.html.
                	dojoBlankHtmlUrl: undefined,

                	// ioPublish: Boolean?
                	//		Set this to true to enable publishing of topics for the different phases of
                	//		IO operations. Publishing is done via dojo/topic.publish(). See dojo/main.__IoPublish for a list
                	//		of topics that are published.
                	ioPublish: false,

                	// useCustomLogger: Anything?
                	//		If set to a value that evaluates to true such as a string or array and
                	//		isDebug is true and Firebug is not available or running, then it bypasses
                	//		the creation of Firebug Lite allowing you to define your own console object.
                	useCustomLogger: undefined,

                	// transparentColor: Array
                	//		Array containing the r, g, b components used as transparent color in dojo.Color;
                	//		if undefined, [255,255,255] (white) will be used.
                	transparentColor: undefined,
                	
                	// deps: Function|Array
                	//		Defines dependencies to be used before the loader has been loaded.
                	//		When provided, they cause the loader to execute require(deps, callback) 
                	//		once it has finished loading. Should be used with callback.
                	deps: undefined,
                	
                	// callback: Function|Array
                	//		Defines a callback to be used when dependencies are defined before 
                	//		the loader has been loaded. When provided, they cause the loader to 
                	//		execute require(deps, callback) once it has finished loading. 
                	//		Should be used with deps.
                	callback: undefined,
                	
                	// deferredInstrumentation: Boolean
                	//		Whether deferred instrumentation should be loaded or included
                	//		in builds.
                	deferredInstrumentation: true,

                	// useDeferredInstrumentation: Boolean|String
                	//		Whether the deferred instrumentation should be used.
                	//
                	//		* `"report-rejections"`: report each rejection as it occurs.
                	//		* `true` or `1` or `"report-unhandled-rejections"`: wait 1 second
                	//			in an attempt to detect unhandled rejections.
                	useDeferredInstrumentation: "report-unhandled-rejections"
                };
                =====*/

                var result = {};
                if (1) {
                    // must be the dojo loader; take a shallow copy of require.rawConfig
                    var src = require.rawConfig,
                        p;
                    for (p in src) {
                        result[p] = src[p];
                    }
                } else {
                    var adviseHas = function(featureSet, prefix, booting) {
                        for (p in featureSet) {
                            p != "has" && has.add(prefix + p, featureSet[p], 0, booting);
                        }
                    };
                    result = 1 ?
                        // must be a built version of the dojo loader; all config stuffed in require.rawConfig
                        require.rawConfig :
                        // a foreign loader
                        this.dojoConfig || this.djConfig || {};
                    adviseHas(result, "config", 1);
                    adviseHas(result.has, "", 1);
                }
                return result;
            });


        },
        'hsbcwidget/form/CustomSelect2': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/dom-construct",
                    "dojo/dom-geometry",
                    "dojo/dom-style",
                    "dojo/on",
                    "dojo/dom-class",
                    "dojo/dom-prop"
                ],
                function(declare, _WidgetBase, query, domConstruct, domGeom, domStyle, on, domClass, domProp) {

                    return declare([_WidgetBase], {
                        overlayClass: 'select-overlay',
                        calculateSize: true,

                        buildRendering: function() {
                            this.inherited(arguments);
                            this.selectNode = query('select', this.domNode)[0];
                            domClass.add(this.selectNode, 'replaced');

                            this.overlayNode = domConstruct.toDom('<div role="presentation" aria-hidden="true" class="' + this.overlayClass + '"><div class="inner"><span class="value"></span><span class="arrow"></span></div></div>');
                            this.overlayNode = domConstruct.place(this.overlayNode, this.selectNode, 'after');

                            this.innerNode = query('.inner', this.overlayNode)[0];
                            this.valueNode = query('.value', this.innerNode)[0];
                            this.arrowNode = query('.arrow', this.innerNode)[0];

                            this.optionNodes = query('option', this.selectNode);
                            this.selectNode.style.width = "300px";
                            domClass.add(this.selectNode.parentNode, "forselect");

                            //Set Overlay size
                            if (this.calculateSize === true) {
                                //					domGeom.setContentSize(this.overlayNode, domGeom.position(this.selectNode));
                                this.overlayNode.style.width = "300px";
                            }
                        },

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this;

                            //Setup events
                            on(this.selectNode, 'focus', function(e) {
                                domClass.add(self.overlayNode, 'focused');
                            });

                            on(this.selectNode, 'blur', function(e) {
                                domClass.remove(self.overlayNode, 'focused');
                            });

                            on(this.selectNode, 'change', function(e) {
                                self.update();
                            });

                            //needed as FF doesn't fire change event
                            //until select is blurred.
                            on(this.selectNode, 'keyup', function(e) {
                                self.update();
                            });

                            //Custom Events
                            on(this.domNode, 'enable:customselect', function(e) {
                                self.enable();
                            });

                            on(this.domNode, 'disable:customselect', function(e) {
                                self.disable();
                            });

                            //Inital setup
                            this.update();
                        },

                        update: function() {
                            var index = domProp.get(this.selectNode, 'selectedIndex');

                            this.valueNode.innerHTML = this.optionNodes[index].innerHTML;
                        },

                        enable: function() {
                            domProp.set(this.selectNode, 'disabled');
                            domClass.remove(this.overlayNode, 'disabled');
                        },

                        disable: function() {
                            domProp.set(this.selectNode, 'disabled', 'true');
                            domClass.add(this.overlayNode, 'disabled');
                        }
                    });

                }
            );
        },
        'dojo/_base/kernel': function() {
            define(["../has", "./config", "require", "module"], function(has, config, require, module) {
                // module:
                //		dojo/_base/kernel

                // This module is the foundational module of the dojo boot sequence; it defines the dojo object.

                var
                    // loop variables for this module
                    i, p,

                    // create dojo, dijit, and dojox
                    // FIXME: in 2.0 remove dijit, dojox being created by dojo
                    dijit = {},
                    dojox = {},
                    dojo = {
                        // summary:
                        //		This module is the foundational module of the dojo boot sequence; it defines the dojo object.

                        // notice dojo takes ownership of the value of the config module
                        config: config,
                        global: this,
                        dijit: dijit,
                        dojox: dojox
                    };


                // Configure the scope map. For a 100% AMD application, the scope map is not needed other than to provide
                // a _scopeName property for the dojo, dijit, and dojox root object so those packages can create
                // unique names in the global space.
                //
                // Built, legacy modules use the scope map to allow those modules to be expressed as if dojo, dijit, and dojox,
                // where global when in fact they are either global under different names or not global at all. In v1.6-, the
                // config variable "scopeMap" was used to map names as used within a module to global names. This has been
                // subsumed by the AMD map configuration variable which can relocate packages to different names. For backcompat,
                // only the "*" mapping is supported. See http://livedocs.dojotoolkit.org/developer/design/loader#legacy-cross-domain-mode for details.
                //
                // The following computations contort the packageMap for this dojo instance into a scopeMap.
                var scopeMap =
                    // a map from a name used in a legacy module to the (global variable name, object addressed by that name)
                    // always map dojo, dijit, and dojox
                    {
                        dojo: ["dojo", dojo],
                        dijit: ["dijit", dijit],
                        dojox: ["dojox", dojox]
                    },

                    packageMap =
                    // the package map for this dojo instance; note, a foreign loader or no pacakgeMap results in the above default config
                    (require.map && require.map[module.id.match(/[^\/]+/)[0]]),

                    item;


                // process all mapped top-level names for this instance of dojo
                for (p in packageMap) {
                    if (scopeMap[p]) {
                        // mapped dojo, dijit, or dojox
                        scopeMap[p][0] = packageMap[p];
                    } else {
                        // some other top-level name
                        scopeMap[p] = [packageMap[p], {}];
                    }
                }

                // publish those names to _scopeName and, optionally, the global namespace
                for (p in scopeMap) {
                    item = scopeMap[p];
                    item[1]._scopeName = item[0];
                    if (!config.noGlobals) {
                        this[item[0]] = item[1];
                    }
                }
                dojo.scopeMap = scopeMap;

                /*===== dojo.__docParserConfigureScopeMap(scopeMap); =====*/

                // FIXME: dojo.baseUrl and dojo.config.baseUrl should be deprecated
                dojo.baseUrl = dojo.config.baseUrl = require.baseUrl;
                dojo.isAsync = !1 || require.async;
                dojo.locale = config.locale;

                var rev = "$Rev: 29262 $".match(/\d+/);
                dojo.version = {
                    // summary:
                    //		Version number of the Dojo Toolkit
                    // description:
                    //		Hash about the version, including
                    //
                    //		- major: Integer: Major version. If total version is "1.2.0beta1", will be 1
                    //		- minor: Integer: Minor version. If total version is "1.2.0beta1", will be 2
                    //		- patch: Integer: Patch version. If total version is "1.2.0beta1", will be 0
                    //		- flag: String: Descriptor flag. If total version is "1.2.0beta1", will be "beta1"
                    //		- revision: Number: The SVN rev from which dojo was pulled

                    major: 1,
                    minor: 8,
                    patch: 1,
                    flag: "",
                    revision: rev ? +rev[0] : NaN,
                    toString: function() {
                        var v = dojo.version;
                        return v.major + "." + v.minor + "." + v.patch + v.flag + " (" + v.revision + ")"; // String
                    }
                };

                // If  1  is truthy, then as a dojo module is defined it should push it's definitions
                // into the dojo object, and conversely. In 2.0, it will likely be unusual to augment another object
                // as a result of defining a module. This has feature gives a way to force 2.0 behavior as the code
                // is migrated. Absent specific advice otherwise, set extend-dojo to truthy.
                1 || has.add("extend-dojo", 1);


                (Function("d", "d.eval = function(){return d.global.eval ? d.global.eval(arguments[0]) : eval(arguments[0]);}"))(dojo);
                /*=====
                dojo.eval = function(scriptText){
                	// summary:
                	//		A legacy method created for use exclusively by internal Dojo methods. Do not use this method
                	//		directly unless you understand its possibly-different implications on the platforms your are targeting.
                	// description:
                	//		Makes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers
                	//		that support indirect eval.
                	//
                	//		As usual, IE does not. On IE, the only way to implement global eval is to
                	//		use execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval.
                	//		This implementation uses the technique of executing eval in the scope of a function that is a single scope
                	//		frame below the global scope; thereby coming close to the global scope. Note carefully that
                	//
                	//		dojo.eval("var pi = 3.14;");
                	//
                	//		will define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want
                	//		to define a global variable using dojo.eval, write something like
                	//
                	//		dojo.eval("window.pi = 3.14;")
                	// scriptText:
                	//		The text to evaluation.
                	// returns:
                	//		The result of the evaluation. Often `undefined`
                };
                =====*/


                if (0) {
                    dojo.exit = function(exitcode) {
                        quit(exitcode);
                    };
                } else {
                    dojo.exit = function() {};
                }

                0 && has.add("dojo-guarantee-console",
                    // ensure that console.log, console.warn, etc. are defined
                    1
                );
                if (0) {
                    typeof console != "undefined" || (console = {});
                    //	Be careful to leave 'log' always at the end
                    var cn = [
                        "assert", "count", "debug", "dir", "dirxml", "error", "group",
                        "groupEnd", "info", "profile", "profileEnd", "time", "timeEnd",
                        "trace", "warn", "log"
                    ];
                    var tn;
                    i = 0;
                    while ((tn = cn[i++])) {
                        if (!console[tn]) {
                            (function() {
                                var tcn = tn + "";
                                console[tcn] = ('log' in console) ? function() {
                                    var a = Array.apply({}, arguments);
                                    a.unshift(tcn + ":");
                                    console["log"](a.join(" "));
                                } : function() {};
                                console[tcn]._fake = true;
                            })();
                        }
                    }
                }

                0 && has.add("dojo-debug-messages",
                    // include dojo.deprecated/dojo.experimental implementations
                    !!config.isDebug
                );
                dojo.deprecated = dojo.experimental = function() {};
                if (0) {
                    dojo.deprecated = function( /*String*/ behaviour, /*String?*/ extra, /*String?*/ removal) {
                        // summary:
                        //		Log a debug message to indicate that a behavior has been
                        //		deprecated.
                        // behaviour: String
                        //		The API or behavior being deprecated. Usually in the form
                        //		of "myApp.someFunction()".
                        // extra: String?
                        //		Text to append to the message. Often provides advice on a
                        //		new function or facility to achieve the same goal during
                        //		the deprecation period.
                        // removal: String?
                        //		Text to indicate when in the future the behavior will be
                        //		removed. Usually a version number.
                        // example:
                        //	| dojo.deprecated("myApp.getTemp()", "use myApp.getLocaleTemp() instead", "1.0");

                        var message = "DEPRECATED: " + behaviour;
                        if (extra) {
                            message += " " + extra;
                        }
                        if (removal) {
                            message += " -- will be removed in version: " + removal;
                        }
                        console.warn(message);
                    };

                    dojo.experimental = function( /* String */ moduleName, /* String? */ extra) {
                        // summary:
                        //		Marks code as experimental.
                        // description:
                        //		This can be used to mark a function, file, or module as
                        //		experimental.	 Experimental code is not ready to be used, and the
                        //		APIs are subject to change without notice.	Experimental code may be
                        //		completed deleted without going through the normal deprecation
                        //		process.
                        // moduleName: String
                        //		The name of a module, or the name of a module file or a specific
                        //		function
                        // extra: String?
                        //		some additional message for the user
                        // example:
                        //	| dojo.experimental("dojo.data.Result");
                        // example:
                        //	| dojo.experimental("dojo.weather.toKelvin()", "PENDING approval from NOAA");

                        var message = "EXPERIMENTAL: " + moduleName + " -- APIs subject to change without notice.";
                        if (extra) {
                            message += " " + extra;
                        }
                        console.warn(message);
                    };
                }

                0 && has.add("dojo-modulePaths",
                    // consume dojo.modulePaths processing
                    1
                );
                if (0) {
                    // notice that modulePaths won't be applied to any require's before the dojo/_base/kernel factory is run;
                    // this is the v1.6- behavior.
                    if (config.modulePaths) {
                        dojo.deprecated("dojo.modulePaths", "use paths configuration");
                        var paths = {};
                        for (p in config.modulePaths) {
                            paths[p.replace(/\./g, "/")] = config.modulePaths[p];
                        }
                        require({
                            paths: paths
                        });
                    }
                }

                0 && has.add("dojo-moduleUrl",
                    // include dojo.moduleUrl
                    1
                );
                if (0) {
                    dojo.moduleUrl = function( /*String*/ module, /*String?*/ url) {
                        // summary:
                        //		Returns a URL relative to a module.
                        // example:
                        //	|	var pngPath = dojo.moduleUrl("acme","images/small.png");
                        //	|	console.dir(pngPath); // list the object properties
                        //	|	// create an image and set it's source to pngPath's value:
                        //	|	var img = document.createElement("img");
                        //	|	img.src = pngPath;
                        //	|	// add our image to the document
                        //	|	dojo.body().appendChild(img);
                        // example:
                        //		you may de-reference as far as you like down the package
                        //		hierarchy.  This is sometimes handy to avoid lenghty relative
                        //		urls or for building portable sub-packages. In this example,
                        //		the `acme.widget` and `acme.util` directories may be located
                        //		under different roots (see `dojo.registerModulePath`) but the
                        //		the modules which reference them can be unaware of their
                        //		relative locations on the filesystem:
                        //	|	// somewhere in a configuration block
                        //	|	dojo.registerModulePath("acme.widget", "../../acme/widget");
                        //	|	dojo.registerModulePath("acme.util", "../../util");
                        //	|
                        //	|	// ...
                        //	|
                        //	|	// code in a module using acme resources
                        //	|	var tmpltPath = dojo.moduleUrl("acme.widget","templates/template.html");
                        //	|	var dataPath = dojo.moduleUrl("acme.util","resources/data.json");

                        dojo.deprecated("dojo.moduleUrl()", "use require.toUrl", "2.0");

                        // require.toUrl requires a filetype; therefore, just append the suffix "/*.*" to guarantee a filetype, then
                        // remove the suffix from the result. This way clients can request a url w/out a filetype. This should be
                        // rare, but it maintains backcompat for the v1.x line (note: dojo.moduleUrl will be removed in v2.0).
                        // Notice * is an illegal filename so it won't conflict with any real path map that may exist the paths config.
                        var result = null;
                        if (module) {
                            result = require.toUrl(module.replace(/\./g, "/") + (url ? ("/" + url) : "") + "/*.*").replace(/\/\*\.\*/, "") + (url ? "" : "/");
                        }
                        return result;
                    };
                }

                dojo._hasResource = {}; // for backward compatibility with layers built with 1.6 tooling

                return dojo;
            });

        },
        'hsbcwidget/MustMatchTextBox': function() {
            define([
                'dojo/_base/declare',
                'dijit/registry',
                'dijit/form/ValidationTextBox',
                'dojo/on',
                'dojo/_base/lang',
                'dijit/Tooltip'
            ], function(declare, registry, ValidationTextBox, on, lang, Tooltip) {

                return declare([ValidationTextBox], {

                    siblingInputId: '',
                    successMessage: "",
                    mustmatchMessage: "",
                    completeMessage: '',
                    startup: function() {
                        if (this.siblingInputId === '') {
                            throw new Error('Sibling input id must be provided');
                        }

                        this.siblingInput = registry.byId(this.siblingInputId);

                        //dojo.extend(ValidationTextBox, { _hasBeenFocused: false });




                        this.inherited(arguments);
                    },

                    //        postCreate: function() {
                    //              if(this.siblingInputId === ''){
                    //                              throw new Error('Sibling input id must be provided');
                    //                      }
                    //              this.siblingInput = registry.byId(this.siblingInputId);
                    //            this.inherited(arguments);
                    //         },

                    validator: function(value, constraints) {

                        if (this.siblingInput) {
                            if (value != null && value != "") {
                                var siblingValue = this.siblingInput.get('value');

                                return value.toUpperCase() === siblingValue.toUpperCase();



                            } else {
                                return false;
                            }
                        }
                    },



                    onFocus: function(value) {
                        var self = this;

                        if (this.isValid()) {
                            Tooltip.show(this.successMessage, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            if (this.value.length > 0) {
                                this.invalidMessage = this.mustmatchMessage;
                                Tooltip.show(this.invalidMessage, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                            } else {
                                this.invalidMessage = this.completeMessage;
                                Tooltip.show(this.invalidMessage, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                            }
                        }

                    }
                });

            });
        },
        'dijit/layout/StackContainer': function() {
            define("dijit/layout/StackContainer", [
                "dojo/_base/array", // array.forEach array.indexOf array.some
                "dojo/cookie", // cookie
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.add domClass.replace
                "dojo/has", // has("dijit-legacy-requires")
                "dojo/_base/lang", // lang.extend
                "dojo/ready",
                "dojo/topic", // publish
                "../registry", // registry.byId
                "../_WidgetBase",
                "./_LayoutWidget",
                "dojo/i18n!../nls/common"
            ], function(array, cookie, declare, domClass, has, lang, ready, topic,
                registry, _WidgetBase, _LayoutWidget) {

                // module:
                //		dijit/layout/StackContainer

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/layout/StackController"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                var StackContainer = declare("dijit.layout.StackContainer", _LayoutWidget, {
                    // summary:
                    //		A container that has multiple children, but shows only
                    //		one child at a time
                    //
                    // description:
                    //		A container for widgets (ContentPanes, for example) That displays
                    //		only one Widget at a time.
                    //
                    //		Publishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild
                    //
                    //		Can be base class for container, Wizard, Show, etc.
                    //
                    //		See `StackContainer.ChildWidgetProperties` for details on the properties that can be set on
                    //		children of a `StackContainer`.

                    // doLayout: Boolean
                    //		If true, change the size of my currently displayed child to match my size
                    doLayout: true,

                    // persist: Boolean
                    //		Remembers the selected child across sessions
                    persist: false,

                    baseClass: "dijitStackContainer",

                    /*=====
                    	// selectedChildWidget: [readonly] dijit._Widget
                    	//		References the currently selected child widget, if any.
                    	//		Adjust selected child with selectChild() method.
                    	selectedChildWidget: null,
                    =====*/

                    buildRendering: function() {
                        this.inherited(arguments);
                        domClass.add(this.domNode, "dijitLayoutContainer");
                        this.containerNode.setAttribute("role", "tabpanel");
                    },

                    postCreate: function() {
                        this.inherited(arguments);
                        this.connect(this.domNode, "onkeypress", this._onKeyPress);
                    },

                    startup: function() {
                        if (this._started) {
                            return;
                        }

                        var children = this.getChildren();

                        // Setup each page panel to be initially hidden
                        array.forEach(children, this._setupChild, this);

                        // Figure out which child to initially display, defaulting to first one
                        if (this.persist) {
                            this.selectedChildWidget = registry.byId(cookie(this.id + "_selectedChild"));
                        } else {
                            array.some(children, function(child) {
                                if (child.selected) {
                                    this.selectedChildWidget = child;
                                }
                                return child.selected;
                            }, this);
                        }
                        var selected = this.selectedChildWidget;
                        if (!selected && children[0]) {
                            selected = this.selectedChildWidget = children[0];
                            selected.selected = true;
                        }

                        // Publish information about myself so any StackControllers can initialize.
                        // This needs to happen before this.inherited(arguments) so that for
                        // TabContainer, this._contentBox doesn't include the space for the tab labels.
                        topic.publish(this.id + "-startup", {
                            children: children,
                            selected: selected
                        });

                        // Startup each child widget, and do initial layout like setting this._contentBox,
                        // then calls this.resize() which does the initial sizing on the selected child.
                        this.inherited(arguments);
                    },

                    resize: function() {
                        // Overrides _LayoutWidget.resize()
                        // Resize is called when we are first made visible (it's called from startup()
                        // if we are initially visible). If this is the first time we've been made
                        // visible then show our first child.
                        if (!this._hasBeenShown) {
                            this._hasBeenShown = true;
                            var selected = this.selectedChildWidget;
                            if (selected) {
                                this._showChild(selected);
                            }
                        }
                        this.inherited(arguments);
                    },

                    _setupChild: function( /*dijit/_WidgetBase*/ child) {
                        // Overrides _LayoutWidget._setupChild()

                        this.inherited(arguments);

                        domClass.replace(child.domNode, "dijitHidden", "dijitVisible");

                        // remove the title attribute so it doesn't show up when i hover
                        // over a node
                        child.domNode.title = "";
                    },

                    addChild: function( /*dijit/_WidgetBase*/ child, /*Integer?*/ insertIndex) {
                        // Overrides _Container.addChild() to do layout and publish events

                        this.inherited(arguments);

                        if (this._started) {
                            topic.publish(this.id + "-addChild", child, insertIndex); // publish

                            // in case the tab titles have overflowed from one line to two lines
                            // (or, if this if first child, from zero lines to one line)
                            // TODO: w/ScrollingTabController this is no longer necessary, although
                            // ScrollTabController.resize() does need to get called to show/hide
                            // the navigation buttons as appropriate, but that's handled in ScrollingTabController.onAddChild().
                            // If this is updated to not layout [except for initial child added / last child removed], update
                            // "childless startup" test in StackContainer.html to check for no resize event after second addChild()
                            this.layout();

                            // if this is the first child, then select it
                            if (!this.selectedChildWidget) {
                                this.selectChild(child);
                            }
                        }
                    },

                    removeChild: function( /*dijit/_WidgetBase*/ page) {
                        // Overrides _Container.removeChild() to do layout and publish events

                        this.inherited(arguments);

                        if (this._started) {
                            // this will notify any tablists to remove a button; do this first because it may affect sizing
                            topic.publish(this.id + "-removeChild", page); // publish
                        }

                        // If all our children are being destroyed than don't run the code below (to select another page),
                        // because we are deleting every page one by one
                        if (this._descendantsBeingDestroyed) {
                            return;
                        }

                        // Select new page to display, also updating TabController to show the respective tab.
                        // Do this before layout call because it can affect the height of the TabController.
                        if (this.selectedChildWidget === page) {
                            this.selectedChildWidget = undefined;
                            if (this._started) {
                                var children = this.getChildren();
                                if (children.length) {
                                    this.selectChild(children[0]);
                                }
                            }
                        }

                        if (this._started) {
                            // In case the tab titles now take up one line instead of two lines
                            // (note though that ScrollingTabController never overflows to multiple lines),
                            // or the height has changed slightly because of addition/removal of tab which close icon
                            this.layout();
                        }
                    },

                    selectChild: function( /*dijit/_WidgetBase|String*/ page, /*Boolean*/ animate) {
                        // summary:
                        //		Show the given widget (which must be one of my children)
                        // page:
                        //		Reference to child widget or id of child widget

                        page = registry.byId(page);

                        if (this.selectedChildWidget != page) {
                            // Deselect old page and select new one
                            var d = this._transition(page, this.selectedChildWidget, animate);
                            this._set("selectedChildWidget", page);
                            topic.publish(this.id + "-selectChild", page); // publish

                            if (this.persist) {
                                cookie(this.id + "_selectedChild", this.selectedChildWidget.id);
                            }
                        }

                        return d; // If child has an href, promise that fires when the child's href finishes loading
                    },

                    _transition: function(newWidget, oldWidget /*===== ,  animate =====*/ ) {
                        // summary:
                        //		Hide the old widget and display the new widget.
                        //		Subclasses should override this.
                        // newWidget: dijit/_WidgetBase
                        //		The newly selected widget.
                        // oldWidget: dijit/_WidgetBase
                        //		The previously selected widget.
                        // animate: Boolean
                        //		Used by AccordionContainer to turn on/off slide effect.
                        // tags:
                        //		protected extension
                        if (oldWidget) {
                            this._hideChild(oldWidget);
                        }
                        var d = this._showChild(newWidget);

                        // Size the new widget, in case this is the first time it's being shown,
                        // or I have been resized since the last time it was shown.
                        // Note that page must be visible for resizing to work.
                        if (newWidget.resize) {
                            if (this.doLayout) {
                                newWidget.resize(this._containerContentBox || this._contentBox);
                            } else {
                                // the child should pick it's own size but we still need to call resize()
                                // (with no arguments) to let the widget lay itself out
                                newWidget.resize();
                            }
                        }

                        return d; // If child has an href, promise that fires when the child's href finishes loading
                    },

                    _adjacent: function( /*Boolean*/ forward) {
                        // summary:
                        //		Gets the next/previous child widget in this container from the current selection.

                        // TODO: remove for 2.0 if this isn't being used.   Otherwise, fix to skip disabled tabs.

                        var children = this.getChildren();
                        var index = array.indexOf(children, this.selectedChildWidget);
                        index += forward ? 1 : children.length - 1;
                        return children[index % children.length]; // dijit/_WidgetBase
                    },

                    forward: function() {
                        // summary:
                        //		Advance to next page.
                        return this.selectChild(this._adjacent(true), true);
                    },

                    back: function() {
                        // summary:
                        //		Go back to previous page.
                        return this.selectChild(this._adjacent(false), true);
                    },

                    _onKeyPress: function(e) {
                        topic.publish(this.id + "-containerKeyPress", {
                            e: e,
                            page: this
                        }); // publish
                    },

                    layout: function() {
                        // Implement _LayoutWidget.layout() virtual method.
                        var child = this.selectedChildWidget;
                        if (child && child.resize) {
                            if (this.doLayout) {
                                child.resize(this._containerContentBox || this._contentBox);
                            } else {
                                child.resize();
                            }
                        }
                    },

                    _showChild: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Show the specified child by changing it's CSS, and call _onShow()/onShow() so
                        //		it can do any updates it needs regarding loading href's etc.
                        // returns:
                        //		Promise that fires when page has finished showing, or true if there's no href
                        var children = this.getChildren();
                        page.isFirstChild = (page == children[0]);
                        page.isLastChild = (page == children[children.length - 1]);
                        page._set("selected", true);

                        domClass.replace(page.domNode, "dijitVisible", "dijitHidden");

                        return (page._onShow && page._onShow()) || true;
                    },

                    _hideChild: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Hide the specified child by changing it's CSS, and call _onHide() so
                        //		it's notified.
                        page._set("selected", false);
                        domClass.replace(page.domNode, "dijitHidden", "dijitVisible");

                        page.onHide && page.onHide();
                    },

                    closeChild: function( /*dijit/_WidgetBase*/ page) {
                        // summary:
                        //		Callback when user clicks the [X] to remove a page.
                        //		If onClose() returns true then remove and destroy the child.
                        // tags:
                        //		private
                        var remove = page.onClose(this, page);
                        if (remove) {
                            this.removeChild(page);
                            // makes sure we can clean up executeScripts in ContentPane onUnLoad
                            page.destroyRecursive();
                        }
                    },

                    destroyDescendants: function( /*Boolean*/ preserveDom) {
                        this._descendantsBeingDestroyed = true;
                        this.selectedChildWidget = undefined;
                        array.forEach(this.getChildren(), function(child) {
                            if (!preserveDom) {
                                this.removeChild(child);
                            }
                            child.destroyRecursive(preserveDom);
                        }, this);
                        this._descendantsBeingDestroyed = false;
                    }
                });

                StackContainer.ChildWidgetProperties = {
                    // summary:
                    //		These properties can be specified for the children of a StackContainer.

                    // selected: Boolean
                    //		Specifies that this widget should be the initially displayed pane.
                    //		Note: to change the selected child use `dijit/layout/StackContainer.selectChild`
                    selected: false,

                    // disabled: Boolean
                    //		Specifies that the button to select this pane should be disabled.
                    //		Doesn't affect programmatic selection of the pane, nor does it deselect the pane if it is currently selected.
                    disabled: false,

                    // closable: Boolean
                    //		True if user can close (destroy) this child, such as (for example) clicking the X on the tab.
                    closable: false,

                    // iconClass: String
                    //		CSS Class specifying icon to use in label associated with this pane.
                    iconClass: "dijitNoIcon",

                    // showTitle: Boolean
                    //		When true, display title of this widget as tab label etc., rather than just using
                    //		icon specified in iconClass
                    showTitle: true
                };

                // Since any widget can be specified as a StackContainer child, mix them
                // into the base widget class.  (This is a hack, but it's effective.)
                // This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.
                lang.extend(_WidgetBase, /*===== {} || =====*/ StackContainer.ChildWidgetProperties);

                return StackContainer;
            });

        },
        'dojo/regexp': function() {
            define(["./_base/kernel", "./_base/lang"], function(dojo, lang) {

                // module:
                //		dojo/regexp

                var regexp = {
                    // summary:
                    //		Regular expressions and Builder resources
                };
                lang.setObject("dojo.regexp", regexp);

                regexp.escapeString = function( /*String*/ str, /*String?*/ except) {
                    // summary:
                    //		Adds escape sequences for special characters in regular expressions
                    // except:
                    //		a String with special characters to be left unescaped

                    return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function(ch) {
                        if (except && except.indexOf(ch) != -1) {
                            return ch;
                        }
                        return "\\" + ch;
                    }); // String
                };

                regexp.buildGroupRE = function( /*Object|Array*/ arr, /*Function*/ re, /*Boolean?*/ nonCapture) {
                    // summary:
                    //		Builds a regular expression that groups subexpressions
                    // description:
                    //		A utility function used by some of the RE generators. The
                    //		subexpressions are constructed by the function, re, in the second
                    //		parameter.  re builds one subexpression for each elem in the array
                    //		a, in the first parameter. Returns a string for a regular
                    //		expression that groups all the subexpressions.
                    // arr:
                    //		A single value or an array of values.
                    // re:
                    //		A function. Takes one parameter and converts it to a regular
                    //		expression.
                    // nonCapture:
                    //		If true, uses non-capturing match, otherwise matches are retained
                    //		by regular expression. Defaults to false

                    // case 1: a is a single value.
                    if (!(arr instanceof Array)) {
                        return re(arr); // String
                    }

                    // case 2: a is an array
                    var b = [];
                    for (var i = 0; i < arr.length; i++) {
                        // convert each elem to a RE
                        b.push(re(arr[i]));
                    }

                    // join the REs as alternatives in a RE group.
                    return regexp.group(b.join("|"), nonCapture); // String
                };

                regexp.group = function( /*String*/ expression, /*Boolean?*/ nonCapture) {
                    // summary:
                    //		adds group match to expression
                    // nonCapture:
                    //		If true, uses non-capturing match, otherwise matches are retained
                    //		by regular expression.
                    return "(" + (nonCapture ? "?:" : "") + expression + ")"; // String
                };

                return regexp;
            });

        },
        'hsbcwidget/ValidationUserIDTextBox': function() {
            define("hsbcwidget/ValidationUserIDTextBox", [
                "dojo/_base/declare",
                "dijit/form/ValidationTextBox",
                "dijit/Tooltip",
                "dojo/on",
                "dojo/_base/lang"
            ], function(
                declare,
                ValidationTextBox,
                Tooltip,
                on,
                lang
            ) {

                return declare([ValidationTextBox], {

                    postCreate: function() {
                        on(this.domNode, 'keyup', lang.hitch(this, 'onKeyUp'));
                    },


                    successMessage: "",
                    exceptionMessage: "",
                    minLengthMessage: "",
                    missingMessage: "",
                    isSuccess: "",
                    visited: "zero",
                    systemErrorMessage: "",
                    regEx: "^[a-zA-Z0-9@_\'.\-]*$",


                    onKeyUp: function() {
                        this.validate();
                    },

                    //Extending Validator from ValidationTextBox to provide functionality of userId validation
                    validator: function( /* anything */ value, /* __Constraints */ constraints) {




                        // If there's code...
                        if (value != "") {
                            if (value.length >= parseInt(this.minimumlength)) {
                                if (!(new RegExp(this.regEx)).test(value)) {
                                    this.invalidMessage = this.InvalidMessage;
                                    this.isSuccess = "false";
                                } else {
                                    // Using dojo.xhrPost, as very little information is being sent
                                    if (this.visited == "zero") {
                                        dojo.xhrPost({
                                            url: "/gsa/GSA_USERID_VALIDATION_SERVICE",
                                            contentType: "application/json",
                                            postData: dojo.toJson({
                                                "userID": value
                                            }),
                                            handleAs: "json",
                                            timeout: 15000,
                                            // The success callback with result from server
                                            load: dojo.hitch(this, function(result) {

                                                if (result != null && result != "undefined") {
                                                    if (result.responseDetails != null) {
                                                        if (result.responseDetails.responseCode == "0") {
                                                            this.isSuccess = "true";
                                                        } else if (result.responseDetails.responseCode == "8") {
                                                            this.invalidMessage = "";
                                                            for (var index = 0; index < result.responseDetails.reasons.length; index++) {
                                                                this.invalidMessage = this.invalidMessage + result.responseDetails.reasons[index].detail + "<br>";
                                                            }
                                                            this.isSuccess = "false";
                                                        } else if (result.responseDetails.responseCode == "16") {
                                                            this.invalidMessage = this.exceptionMessage;
                                                            this.isSuccess = "false";
                                                        }

                                                        this.visited = "one";
                                                        this.validate();
                                                    }
                                                }
                                            }),
                                            error: dojo.hitch(this, function(error) {

                                                this.invalidMessage = this.systemErrorMessage;
                                                this.isSuccess = "false";
                                                this.visited = "one";
                                                this.validate();

                                            })
                                        });
                                    }
                                }
                            } else {
                                this.invalidMessage = this.minLengthMessage;
                                this.isSuccess = "false";
                            }
                        } else {
                            this.invalidMessage = this.missingMessage;
                            this.isSuccess = "false";
                        }
                        this.visited = "zero";
                        if (this.isSuccess == "true") {
                            return true; // Boolean   
                        } else {
                            return false; // Boolean
                        }


                    }

                });
            });

        },
        'dijit/form/_FormMixin': function() {
            define("dijit/form/_FormMixin", [
                "dojo/_base/array", // array.every array.filter array.forEach array.indexOf array.map
                "dojo/_base/declare", // declare
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.hitch lang.isArray
                "dojo/on",
                "dojo/window" // winUtils.scrollIntoView
            ], function(array, declare, kernel, lang, on, winUtils) {

                // module:
                //		dijit/form/_FormMixin

                return declare("dijit.form._FormMixin", null, {
                    // summary:
                    //		Mixin for containers of form widgets (i.e. widgets that represent a single value
                    //		and can be children of a `<form>` node or `dijit/form/Form` widget)
                    // description:
                    //		Can extract all the form widgets
                    //		values and combine them into a single javascript object, or alternately
                    //		take such an object and set the values for all the contained
                    //		form widgets

                    /*=====
                    	// value: Object
                    	//		Name/value hash for each child widget with a name and value.
                    	//		Child widgets without names are not part of the hash.
                    	//
                    	//		If there are multiple child widgets w/the same name, value is an array,
                    	//		unless they are radio buttons in which case value is a scalar (since only
                    	//		one radio button can be checked at a time).
                    	//
                    	//		If a child widget's name is a dot separated list (like a.b.c.d), it's a nested structure.
                    	//
                    	//		Example:
                    	//	|	{ name: "John Smith", interests: ["sports", "movies"] }
                    =====*/

                    // state: [readonly] String
                    //		Will be "Error" if one or more of the child widgets has an invalid value,
                    //		"Incomplete" if not all of the required child widgets are filled in.  Otherwise, "",
                    //		which indicates that the form is ready to be submitted.
                    state: "",

                    // TODO:
                    //	* Repeater
                    //	* better handling for arrays.  Often form elements have names with [] like
                    //	* people[3].sex (for a list of people [{name: Bill, sex: M}, ...])


                    _getDescendantFormWidgets: function( /*dijit/_WidgetBase[]?*/ children) {
                        // summary:
                        //		Returns all form widget descendants, searching through non-form child widgets like BorderContainer
                        var res = [];
                        array.forEach(children || this.getChildren(), function(child) {
                            if ("value" in child) {
                                res.push(child);
                            } else {
                                res = res.concat(this._getDescendantFormWidgets(child.getChildren()));
                            }
                        }, this);
                        return res;
                    },

                    reset: function() {
                        array.forEach(this._getDescendantFormWidgets(), function(widget) {
                            if (widget.reset) {
                                widget.reset();
                            }
                        });
                    },

                    validate: function() {
                        // summary:
                        //		returns if the form is valid - same as isValid - but
                        //		provides a few additional (ui-specific) features:
                        //
                        //		1. it will highlight any sub-widgets that are not valid
                        //		2. it will call focus() on the first invalid sub-widget
                        var didFocus = false;
                        return array.every(array.map(this._getDescendantFormWidgets(), function(widget) {
                            // Need to set this so that "required" widgets get their
                            // state set.
                            widget._hasBeenBlurred = true;
                            var valid = widget.disabled || !widget.validate || widget.validate();
                            if (!valid && !didFocus) {
                                // Set focus of the first non-valid widget
                                winUtils.scrollIntoView(widget.containerNode || widget.domNode);
                                widget.focus();
                                didFocus = true;
                            }
                            return valid;
                        }), function(item) {
                            return item;
                        });
                    },

                    setValues: function(val) {
                        kernel.deprecated(this.declaredClass + "::setValues() is deprecated. Use set('value', val) instead.", "", "2.0");
                        return this.set('value', val);
                    },
                    _setValueAttr: function( /*Object*/ obj) {
                        // summary:
                        //		Fill in form values from according to an Object (in the format returned by get('value'))

                        // generate map from name --> [list of widgets with that name]
                        var map = {};
                        array.forEach(this._getDescendantFormWidgets(), function(widget) {
                            if (!widget.name) {
                                return;
                            }
                            var entry = map[widget.name] || (map[widget.name] = []);
                            entry.push(widget);
                        });

                        for (var name in map) {
                            if (!map.hasOwnProperty(name)) {
                                continue;
                            }
                            var widgets = map[name], // array of widgets w/this name
                                values = lang.getObject(name, false, obj); // list of values for those widgets

                            if (values === undefined) {
                                continue;
                            }
                            if (!lang.isArray(values)) {
                                values = [values];
                            }
                            if (typeof widgets[0].checked == 'boolean') {
                                // for checkbox/radio, values is a list of which widgets should be checked
                                array.forEach(widgets, function(w) {
                                    w.set('value', array.indexOf(values, w.value) != -1);
                                });
                            } else if (widgets[0].multiple) {
                                // it takes an array (e.g. multi-select)
                                widgets[0].set('value', values);
                            } else {
                                // otherwise, values is a list of values to be assigned sequentially to each widget
                                array.forEach(widgets, function(w, i) {
                                    w.set('value', values[i]);
                                });
                            }
                        }

                        /***
                         *	TODO: code for plain input boxes (this shouldn't run for inputs that are part of widgets)

                        array.forEach(this.containerNode.elements, function(element){
                        	if(element.name == ''){return};	// like "continue"
                        	var namePath = element.name.split(".");
                        	var myObj=obj;
                        	var name=namePath[namePath.length-1];
                        	for(var j=1,len2=namePath.length;j<len2;++j){
                        		var p=namePath[j - 1];
                        		// repeater support block
                        		var nameA=p.split("[");
                        		if(nameA.length > 1){
                        			if(typeof(myObj[nameA[0]]) == "undefined"){
                        				myObj[nameA[0]]=[ ];
                        			} // if

                        			nameIndex=parseInt(nameA[1]);
                        			if(typeof(myObj[nameA[0]][nameIndex]) == "undefined"){
                        				myObj[nameA[0]][nameIndex] = { };
                        			}
                        			myObj=myObj[nameA[0]][nameIndex];
                        			continue;
                        		} // repeater support ends

                        		if(typeof(myObj[p]) == "undefined"){
                        			myObj=undefined;
                        			break;
                        		};
                        		myObj=myObj[p];
                        	}

                        	if(typeof(myObj) == "undefined"){
                        		return;		// like "continue"
                        	}
                        	if(typeof(myObj[name]) == "undefined" && this.ignoreNullValues){
                        		return;		// like "continue"
                        	}

                        	// TODO: widget values (just call set('value', ...) on the widget)

                        	// TODO: maybe should call dojo.getNodeProp() instead
                        	switch(element.type){
                        		case "checkbox":
                        			element.checked = (name in myObj) &&
                        				array.some(myObj[name], function(val){ return val == element.value; });
                        			break;
                        		case "radio":
                        			element.checked = (name in myObj) && myObj[name] == element.value;
                        			break;
                        		case "select-multiple":
                        			element.selectedIndex=-1;
                        			array.forEach(element.options, function(option){
                        				option.selected = array.some(myObj[name], function(val){ return option.value == val; });
                        			});
                        			break;
                        		case "select-one":
                        			element.selectedIndex="0";
                        			array.forEach(element.options, function(option){
                        				option.selected = option.value == myObj[name];
                        			});
                        			break;
                        		case "hidden":
                        		case "text":
                        		case "textarea":
                        		case "password":
                        			element.value = myObj[name] || "";
                        			break;
                        	}
                        });
                        */

                        // Note: no need to call this._set("value", ...) as the child updates will trigger onChange events
                        // which I am monitoring.
                    },

                    getValues: function() {
                        kernel.deprecated(this.declaredClass + "::getValues() is deprecated. Use get('value') instead.", "", "2.0");
                        return this.get('value');
                    },
                    _getValueAttr: function() {
                        // summary:
                        //		Returns Object representing form values.   See description of `value` for details.
                        // description:

                        // The value is updated into this.value every time a child has an onChange event,
                        // so in the common case this function could just return this.value.   However,
                        // that wouldn't work when:
                        //
                        // 1. User presses return key to submit a form.  That doesn't fire an onchange event,
                        // and even if it did it would come too late due to the defer(...) in _handleOnChange()
                        //
                        // 2. app for some reason calls this.get("value") while the user is typing into a
                        // form field.   Not sure if that case needs to be supported or not.

                        // get widget values
                        var obj = {};
                        array.forEach(this._getDescendantFormWidgets(), function(widget) {
                            var name = widget.name;
                            if (!name || widget.disabled) {
                                return;
                            }

                            // Single value widget (checkbox, radio, or plain <input> type widget)
                            var value = widget.get('value');

                            // Store widget's value(s) as a scalar, except for checkboxes which are automatically arrays
                            if (typeof widget.checked == 'boolean') {
                                if (/Radio/.test(widget.declaredClass)) {
                                    // radio button
                                    if (value !== false) {
                                        lang.setObject(name, value, obj);
                                    } else {
                                        // give radio widgets a default of null
                                        value = lang.getObject(name, false, obj);
                                        if (value === undefined) {
                                            lang.setObject(name, null, obj);
                                        }
                                    }
                                } else {
                                    // checkbox/toggle button
                                    var ary = lang.getObject(name, false, obj);
                                    if (!ary) {
                                        ary = [];
                                        lang.setObject(name, ary, obj);
                                    }
                                    if (value !== false) {
                                        ary.push(value);
                                    }
                                }
                            } else {
                                var prev = lang.getObject(name, false, obj);
                                if (typeof prev != "undefined") {
                                    if (lang.isArray(prev)) {
                                        prev.push(value);
                                    } else {
                                        lang.setObject(name, [prev, value], obj);
                                    }
                                } else {
                                    // unique name
                                    lang.setObject(name, value, obj);
                                }
                            }
                        });

                        /***
                         * code for plain input boxes (see also domForm.formToObject, can we use that instead of this code?
                         * but it doesn't understand [] notation, presumably)
                        var obj = { };
                        array.forEach(this.containerNode.elements, function(elm){
                        	if(!elm.name)	{
                        		return;		// like "continue"
                        	}
                        	var namePath = elm.name.split(".");
                        	var myObj=obj;
                        	var name=namePath[namePath.length-1];
                        	for(var j=1,len2=namePath.length;j<len2;++j){
                        		var nameIndex = null;
                        		var p=namePath[j - 1];
                        		var nameA=p.split("[");
                        		if(nameA.length > 1){
                        			if(typeof(myObj[nameA[0]]) == "undefined"){
                        				myObj[nameA[0]]=[ ];
                        			} // if
                        			nameIndex=parseInt(nameA[1]);
                        			if(typeof(myObj[nameA[0]][nameIndex]) == "undefined"){
                        				myObj[nameA[0]][nameIndex] = { };
                        			}
                        		}else if(typeof(myObj[nameA[0]]) == "undefined"){
                        			myObj[nameA[0]] = { }
                        		} // if

                        		if(nameA.length == 1){
                        			myObj=myObj[nameA[0]];
                        		}else{
                        			myObj=myObj[nameA[0]][nameIndex];
                        		} // if
                        	} // for

                        	if((elm.type != "select-multiple" && elm.type != "checkbox" && elm.type != "radio") || (elm.type == "radio" && elm.checked)){
                        		if(name == name.split("[")[0]){
                        			myObj[name]=elm.value;
                        		}else{
                        			// can not set value when there is no name
                        		}
                        	}else if(elm.type == "checkbox" && elm.checked){
                        		if(typeof(myObj[name]) == 'undefined'){
                        			myObj[name]=[ ];
                        		}
                        		myObj[name].push(elm.value);
                        	}else if(elm.type == "select-multiple"){
                        		if(typeof(myObj[name]) == 'undefined'){
                        			myObj[name]=[ ];
                        		}
                        		for(var jdx=0,len3=elm.options.length; jdx<len3; ++jdx){
                        			if(elm.options[jdx].selected){
                        				myObj[name].push(elm.options[jdx].value);
                        			}
                        		}
                        	} // if
                        	name=undefined;
                        }); // forEach
                        ***/
                        return obj;
                    },

                    isValid: function() {
                        // summary:
                        //		Returns true if all of the widgets are valid.
                        //		Deprecated, will be removed in 2.0.  Use get("state") instead.

                        return this.state == "";
                    },

                    onValidStateChange: function( /*Boolean*/ /*===== isValid =====*/ ) {
                        // summary:
                        //		Stub function to connect to if you want to do something
                        //		(like disable/enable a submit button) when the valid
                        //		state changes on the form as a whole.
                        //
                        //		Deprecated.  Will be removed in 2.0.  Use watch("state", ...) instead.
                    },

                    _getState: function() {
                        // summary:
                        //		Compute what this.state should be based on state of children
                        var states = array.map(this._descendants, function(w) {
                            return w.get("state") || "";
                        });

                        return array.indexOf(states, "Error") >= 0 ? "Error" :
                            array.indexOf(states, "Incomplete") >= 0 ? "Incomplete" : "";
                    },

                    disconnectChildren: function() {
                        // summary:
                        //		Deprecated method.   Applications no longer need to call this.   Remove for 2.0.
                    },

                    connectChildren: function( /*Boolean*/ inStartup) {
                        // summary:
                        //		You can call this function directly, ex. in the event that you
                        //		programmatically add a widget to the form *after* the form has been
                        //		initialized.

                        // TODO: rename for 2.0

                        this._descendants = this._getDescendantFormWidgets();

                        // To get notifications from children they need to be started.   Children didn't used to need to be started,
                        // so for back-compat, start them here
                        array.forEach(this._descendants, function(child) {
                            if (!child._started) {
                                child.startup();
                            }
                        });

                        if (!inStartup) {
                            this._onChildChange();
                        }
                    },

                    _onChildChange: function( /*String*/ attr) {
                        // summary:
                        //		Called when child's value or disabled state changes

                        // The unit tests expect state update to be synchronous, so update it immediately.
                        if (!attr || attr == "state" || attr == "disabled") {
                            this._set("state", this._getState());
                        }

                        // Use defer() to collapse value changes in multiple children into a single
                        // update to my value.   Multiple updates will occur on:
                        //	1. Form.set()
                        //	2. Form.reset()
                        //	3. user selecting a radio button (which will de-select another radio button,
                        //		 causing two onChange events)
                        if (!attr || attr == "value" || attr == "disabled" || attr == "checked") {
                            if (this._onChangeDelayTimer) {
                                this._onChangeDelayTimer.remove();
                            }
                            this._onChangeDelayTimer = this.defer(function() {
                                delete this._onChangeDelayTimer;
                                this._set("value", this.get("value"));
                            }, 10);
                        }
                    },

                    startup: function() {
                        this.inherited(arguments);

                        // Set initial this.value and this.state.   Don't emit watch() notifications.
                        this._descendants = this._getDescendantFormWidgets();
                        this.value = this.get("value");
                        this.state = this._getState();

                        // Initialize value and valid/invalid state tracking.
                        var self = this;
                        this.own(
                            on(
                                this.containerNode,
                                "attrmodified-state, attrmodified-disabled, attrmodified-value, attrmodified-checked",
                                function(evt) {
                                    if (evt.target == self.domNode) {
                                        return; // ignore events that I fire on myself because my children changed
                                    }
                                    self._onChildChange(evt.type.replace("attrmodified-", ""));
                                }
                            )
                        );

                        // Make state change call onValidStateChange(), will be removed in 2.0
                        this.watch("state", function(attr, oldVal, newVal) {
                            this.onValidStateChange(newVal == "");
                        });
                    },

                    destroy: function() {
                        this.inherited(arguments);
                    }

                });
            });

        },
        'dijit/DropDownMenu': function() {
            require({
                cache: {
                    'url:dijit/templates/Menu.html': "<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\"\n\t   data-dojo-attach-event=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\n\t<tbody class=\"dijitReset\" data-dojo-attach-point=\"containerNode\"></tbody>\n</table>\n"
                }
            });
            define("dijit/DropDownMenu", [
                "dojo/_base/declare", // declare
                "dojo/_base/event", // event.stop
                "dojo/keys", // keys
                "dojo/text!./templates/Menu.html",
                "./_OnDijitClickMixin",
                "./_MenuBase"
            ], function(declare, event, keys, template, _OnDijitClickMixin, _MenuBase) {

                // module:
                //		dijit/DropDownMenu

                return declare("dijit.DropDownMenu", [_MenuBase, _OnDijitClickMixin], {
                    // summary:
                    //		A menu, without features for context menu (Meaning, drop down menu)

                    templateString: template,

                    baseClass: "dijitMenu",

                    postCreate: function() {
                        this.inherited(arguments);
                        var l = this.isLeftToRight();
                        this._openSubMenuKey = l ? keys.RIGHT_ARROW : keys.LEFT_ARROW;
                        this._closeSubMenuKey = l ? keys.LEFT_ARROW : keys.RIGHT_ARROW;
                        this.connectKeyNavHandlers([keys.UP_ARROW], [keys.DOWN_ARROW]);
                    },

                    _onKeyPress: function( /*Event*/ evt) {
                        // summary:
                        //		Handle keyboard based menu navigation.
                        // tags:
                        //		protected

                        if (evt.ctrlKey || evt.altKey) {
                            return;
                        }

                        switch (evt.charOrCode) {
                            case this._openSubMenuKey:
                                this._moveToPopup(evt);
                                event.stop(evt);
                                break;
                            case this._closeSubMenuKey:
                                if (this.parentMenu) {
                                    if (this.parentMenu._isMenuBar) {
                                        this.parentMenu.focusPrev();
                                    } else {
                                        this.onCancel(false);
                                    }
                                } else {
                                    event.stop(evt);
                                }
                                break;
                        }
                    }
                });
            });

        },
        'dijit/Menu': function() {
            define("dijit/Menu", [
                "require",
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/_base/event", // event.stop
                "dojo/dom", // dom.byId dom.isDescendant
                "dojo/dom-attr", // domAttr.get domAttr.set domAttr.has domAttr.remove
                "dojo/dom-geometry", // domStyle.getComputedStyle domGeometry.position
                "dojo/dom-style", // domStyle.getComputedStyle
                "dojo/keys", // keys.F10
                "dojo/_base/lang", // lang.hitch
                "dojo/on",
                "dojo/sniff", // has("ie"), has("quirks")
                "dojo/_base/window", // win.body win.doc.documentElement win.doc.frames
                "dojo/window", // winUtils.get
                "./popup",
                "./DropDownMenu",
                "dojo/ready"
            ], function(require, array, declare, event, dom, domAttr, domGeometry, domStyle, keys, lang, on,
                has, win, winUtils, pm, DropDownMenu, ready) {

                // module:
                //		dijit/Menu

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/MenuItem", "dijit/PopupMenuItem", "dijit/CheckedMenuItem", "dijit/MenuSeparator"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                return declare("dijit.Menu", DropDownMenu, {
                    // summary:
                    //		A context menu you can assign to multiple elements

                    constructor: function( /*===== params, srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified:
                        //
                        //		- use srcNodeRef.innerHTML as my contents
                        //		- replace srcNodeRef with my generated DOM tree

                        this._bindings = [];
                    },

                    // targetNodeIds: [const] String[]
                    //		Array of dom node ids of nodes to attach to.
                    //		Fill this with nodeIds upon widget creation and it becomes context menu for those nodes.
                    targetNodeIds: [],

                    // selector: String?
                    //		CSS expression to apply this Menu to descendants of targetNodeIds, rather than to
                    //		the nodes specified by targetNodeIds themselves.    Useful for applying a Menu to
                    //		a range of rows in a table, tree, etc.
                    //
                    //		The application must require() an appropriate level of dojo/query to handle the selector.
                    selector: "",

                    // TODO: in 2.0 remove support for multiple targetNodeIds.   selector gives the same effect.
                    // So, change targetNodeIds to a targetNodeId: "", remove bindDomNode()/unBindDomNode(), etc.

                    /*=====
                    	// currentTarget: [readonly] DOMNode
                    	//		For context menus, set to the current node that the Menu is being displayed for.
                    	//		Useful so that the menu actions can be tailored according to the node
                    	currentTarget: null,
                    =====*/

                    // contextMenuForWindow: [const] Boolean
                    //		If true, right clicking anywhere on the window will cause this context menu to open.
                    //		If false, must specify targetNodeIds.
                    contextMenuForWindow: false,

                    // leftClickToOpen: [const] Boolean
                    //		If true, menu will open on left click instead of right click, similar to a file menu.
                    leftClickToOpen: false,

                    // refocus: Boolean
                    //		When this menu closes, re-focus the element which had focus before it was opened.
                    refocus: true,

                    postCreate: function() {
                        if (this.contextMenuForWindow) {
                            this.bindDomNode(this.ownerDocumentBody);
                        } else {
                            // TODO: should have _setTargetNodeIds() method to handle initialization and a possible
                            // later set('targetNodeIds', ...) call.  There's also a problem that targetNodeIds[]
                            // gets stale after calls to bindDomNode()/unBindDomNode() as it still is just the original list (see #9610)
                            array.forEach(this.targetNodeIds, this.bindDomNode, this);
                        }
                        this.inherited(arguments);
                    },

                    // thanks burstlib!
                    _iframeContentWindow: function( /* HTMLIFrameElement */ iframe_el) {
                        // summary:
                        //		Returns the window reference of the passed iframe
                        // tags:
                        //		private
                        return winUtils.get(this._iframeContentDocument(iframe_el)) ||
                            // Moz. TODO: is this available when defaultView isn't?
                            this._iframeContentDocument(iframe_el)['__parent__'] ||
                            (iframe_el.name && win.doc.frames[iframe_el.name]) || null; //	Window
                    },

                    _iframeContentDocument: function( /* HTMLIFrameElement */ iframe_el) {
                        // summary:
                        //		Returns a reference to the document object inside iframe_el
                        // tags:
                        //		protected
                        return iframe_el.contentDocument // W3
                            ||
                            (iframe_el.contentWindow && iframe_el.contentWindow.document) // IE
                            ||
                            (iframe_el.name && win.doc.frames[iframe_el.name] && win.doc.frames[iframe_el.name].document) ||
                            null; //	HTMLDocument
                    },

                    bindDomNode: function( /*String|DomNode*/ node) {
                        // summary:
                        //		Attach menu to given node
                        node = dom.byId(node, this.ownerDocument);

                        var cn; // Connect node

                        // Support context menus on iframes.  Rather than binding to the iframe itself we need
                        // to bind to the <body> node inside the iframe.
                        if (node.tagName.toLowerCase() == "iframe") {
                            var iframe = node,
                                window = this._iframeContentWindow(iframe);
                            cn = win.body(window.document);
                        } else {
                            // To capture these events at the top level, attach to <html>, not <body>.
                            // Otherwise right-click context menu just doesn't work.
                            cn = (node == win.body(this.ownerDocument) ? this.ownerDocument.documentElement : node);
                        }


                        // "binding" is the object to track our connection to the node (ie, the parameter to bindDomNode())
                        var binding = {
                            node: node,
                            iframe: iframe
                        };

                        // Save info about binding in _bindings[], and make node itself record index(+1) into
                        // _bindings[] array.  Prefix w/_dijitMenu to avoid setting an attribute that may
                        // start with a number, which fails on FF/safari.
                        domAttr.set(node, "_dijitMenu" + this.id, this._bindings.push(binding));

                        // Setup the connections to monitor click etc., unless we are connecting to an iframe which hasn't finished
                        // loading yet, in which case we need to wait for the onload event first, and then connect
                        // On linux Shift-F10 produces the oncontextmenu event, but on Windows it doesn't, so
                        // we need to monitor keyboard events in addition to the oncontextmenu event.
                        var doConnects = lang.hitch(this, function(cn) {
                            var selector = this.selector,
                                delegatedEvent = selector ?
                                function(eventType) {
                                    return on.selector(selector, eventType);
                                } :
                                function(eventType) {
                                    return eventType;
                                },
                                self = this;
                            return [
                                // TODO: when leftClickToOpen is true then shouldn't space/enter key trigger the menu,
                                // rather than shift-F10?
                                on(cn, delegatedEvent(this.leftClickToOpen ? "click" : "contextmenu"), function(evt) {
                                    // Schedule context menu to be opened unless it's already been scheduled from onkeydown handler
                                    event.stop(evt);
                                    self._scheduleOpen(this, iframe, {
                                        x: evt.pageX,
                                        y: evt.pageY
                                    });
                                }),
                                on(cn, delegatedEvent("keydown"), function(evt) {
                                    if (evt.shiftKey && evt.keyCode == keys.F10) {
                                        event.stop(evt);
                                        self._scheduleOpen(this, iframe); // no coords - open near target node
                                    }
                                })
                            ];
                        });
                        binding.connects = cn ? doConnects(cn) : [];

                        if (iframe) {
                            // Setup handler to [re]bind to the iframe when the contents are initially loaded,
                            // and every time the contents change.
                            // Need to do this b/c we are actually binding to the iframe's <body> node.
                            // Note: can't use connect.connect(), see #9609.

                            binding.onloadHandler = lang.hitch(this, function() {
                                // want to remove old connections, but IE throws exceptions when trying to
                                // access the <body> node because it's already gone, or at least in a state of limbo

                                var window = this._iframeContentWindow(iframe);
                                cn = win.body(window.document)
                                binding.connects = doConnects(cn);
                            });
                            if (iframe.addEventListener) {
                                iframe.addEventListener("load", binding.onloadHandler, false);
                            } else {
                                iframe.attachEvent("onload", binding.onloadHandler);
                            }
                        }
                    },

                    unBindDomNode: function( /*String|DomNode*/ nodeName) {
                        // summary:
                        //		Detach menu from given node

                        var node;
                        try {
                            node = dom.byId(nodeName, this.ownerDocument);
                        } catch (e) {
                            // On IE the dom.byId() call will get an exception if the attach point was
                            // the <body> node of an <iframe> that has since been reloaded (and thus the
                            // <body> node is in a limbo state of destruction.
                            return;
                        }

                        // node["_dijitMenu" + this.id] contains index(+1) into my _bindings[] array
                        var attrName = "_dijitMenu" + this.id;
                        if (node && domAttr.has(node, attrName)) {
                            var bid = domAttr.get(node, attrName) - 1,
                                b = this._bindings[bid],
                                h;
                            while ((h = b.connects.pop())) {
                                h.remove();
                            }

                            // Remove listener for iframe onload events
                            var iframe = b.iframe;
                            if (iframe) {
                                if (iframe.removeEventListener) {
                                    iframe.removeEventListener("load", b.onloadHandler, false);
                                } else {
                                    iframe.detachEvent("onload", b.onloadHandler);
                                }
                            }

                            domAttr.remove(node, attrName);
                            delete this._bindings[bid];
                        }
                    },

                    _scheduleOpen: function( /*DomNode?*/ target, /*DomNode?*/ iframe, /*Object?*/ coords) {
                        // summary:
                        //		Set timer to display myself.  Using a timer rather than displaying immediately solves
                        //		two problems:
                        //
                        //		1. IE: without the delay, focus work in "open" causes the system
                        //		context menu to appear in spite of stopEvent.
                        //
                        //		2. Avoid double-shows on linux, where shift-F10 generates an oncontextmenu event
                        //		even after a event.stop(e).  (Shift-F10 on windows doesn't generate the
                        //		oncontextmenu event.)

                        if (!this._openTimer) {
                            this._openTimer = this.defer(function() {
                                delete this._openTimer;
                                this._openMyself({
                                    target: target,
                                    iframe: iframe,
                                    coords: coords
                                });
                            }, 1);
                        }
                    },

                    _openMyself: function(args) {
                        // summary:
                        //		Internal function for opening myself when the user does a right-click or something similar.
                        // args:
                        //		This is an Object containing:
                        //
                        //		- target: The node that is being clicked
                        //		- iframe: If an `<iframe>` is being clicked, iframe points to that iframe
                        //		- coords: Put menu at specified x/y position in viewport, or if iframe is
                        //		  specified, then relative to iframe.
                        //
                        //		_openMyself() formerly took the event object, and since various code references
                        //		evt.target (after connecting to _openMyself()), using an Object for parameters
                        //		(so that old code still works).

                        var target = args.target,
                            iframe = args.iframe,
                            coords = args.coords;

                        // To be used by MenuItem event handlers to tell which node the menu was opened on
                        this.currentTarget = target;

                        // Get coordinates to open menu, either at specified (mouse) position or (if triggered via keyboard)
                        // then near the node the menu is assigned to.
                        if (coords) {
                            if (iframe) {
                                // Specified coordinates are on <body> node of an <iframe>, convert to match main document
                                var ifc = domGeometry.position(iframe, true),
                                    window = this._iframeContentWindow(iframe),
                                    scroll = domGeometry.docScroll(window.document);

                                var cs = domStyle.getComputedStyle(iframe),
                                    tp = domStyle.toPixelValue,
                                    left = (has("ie") && has("quirks") ? 0 : tp(iframe, cs.paddingLeft)) + (has("ie") && has("quirks") ? tp(iframe, cs.borderLeftWidth) : 0),
                                    top = (has("ie") && has("quirks") ? 0 : tp(iframe, cs.paddingTop)) + (has("ie") && has("quirks") ? tp(iframe, cs.borderTopWidth) : 0);

                                coords.x += ifc.x + left - scroll.x;
                                coords.y += ifc.y + top - scroll.y;
                            }
                        } else {
                            coords = domGeometry.position(target, true);
                            coords.x += 10;
                            coords.y += 10;
                        }

                        var self = this;
                        var prevFocusNode = this._focusManager.get("prevNode");
                        var curFocusNode = this._focusManager.get("curNode");
                        var savedFocusNode = !curFocusNode || (dom.isDescendant(curFocusNode, this.domNode)) ? prevFocusNode : curFocusNode;

                        function closeAndRestoreFocus() {
                            // user has clicked on a menu or popup
                            if (self.refocus && savedFocusNode) {
                                savedFocusNode.focus();
                            }
                            pm.close(self);
                        }
                        pm.open({
                            popup: this,
                            x: coords.x,
                            y: coords.y,
                            onExecute: closeAndRestoreFocus,
                            onCancel: closeAndRestoreFocus,
                            orient: this.isLeftToRight() ? 'L' : 'R'
                        });
                        this.focus();

                        this._onBlur = function() {
                            this.inherited('_onBlur', arguments);
                            // Usually the parent closes the child widget but if this is a context
                            // menu then there is no parent
                            pm.close(this);
                            // don't try to restore focus; user has clicked another part of the screen
                            // and set focus there
                        };
                    },

                    destroy: function() {
                        array.forEach(this._bindings, function(b) {
                            if (b) {
                                this.unBindDomNode(b.node);
                            }
                        }, this);
                        this.inherited(arguments);
                    }
                });

            });

        },
        'dojo/on': function() {
            define(["./has!dom-addeventlistener?:./aspect", "./_base/kernel", "./has"], function(aspect, dojo, has) {

                "use strict";
                if (1) { // check to make sure we are in a browser, this module should work anywhere
                    var major = window.ScriptEngineMajorVersion;
                    has.add("jscript", major && (major() + ScriptEngineMinorVersion() / 10));
                    has.add("event-orientationchange", has("touch") && !has("android")); // TODO: how do we detect this?
                    has.add("event-stopimmediatepropagation", window.Event && !!window.Event.prototype && !!window.Event.prototype.stopImmediatePropagation);
                }
                var on = function(target, type, listener, dontFix) {
                    // summary:
                    //		A function that provides core event listening functionality. With this function
                    //		you can provide a target, event type, and listener to be notified of
                    //		future matching events that are fired.
                    // target: Element|Object
                    //		This is the target object or DOM element that to receive events from
                    // type: String|Function
                    //		This is the name of the event to listen for or an extension event type.
                    // listener: Function
                    //		This is the function that should be called when the event fires.
                    // returns: Object
                    //		An object with a remove() method that can be used to stop listening for this
                    //		event.
                    // description:
                    //		To listen for "click" events on a button node, we can do:
                    //		|	define(["dojo/on"], function(listen){
                    //		|		on(button, "click", clickHandler);
                    //		|		...
                    //		Evented JavaScript objects can also have their own events.
                    //		|	var obj = new Evented;
                    //		|	on(obj, "foo", fooHandler);
                    //		And then we could publish a "foo" event:
                    //		|	on.emit(obj, "foo", {key: "value"});
                    //		We can use extension events as well. For example, you could listen for a tap gesture:
                    //		|	define(["dojo/on", "dojo/gesture/tap", function(listen, tap){
                    //		|		on(button, tap, tapHandler);
                    //		|		...
                    //		which would trigger fooHandler. Note that for a simple object this is equivalent to calling:
                    //		|	obj.onfoo({key:"value"});
                    //		If you use on.emit on a DOM node, it will use native event dispatching when possible.

                    if (typeof target.on == "function" && typeof type != "function") {
                        // delegate to the target's on() method, so it can handle it's own listening if it wants
                        return target.on(type, listener);
                    }
                    // delegate to main listener code
                    return on.parse(target, type, listener, addListener, dontFix, this);
                };
                on.pausable = function(target, type, listener, dontFix) {
                    // summary:
                    //		This function acts the same as on(), but with pausable functionality. The
                    //		returned signal object has pause() and resume() functions. Calling the
                    //		pause() method will cause the listener to not be called for future events. Calling the
                    //		resume() method will cause the listener to again be called for future events.
                    var paused;
                    var signal = on(target, type, function() {
                        if (!paused) {
                            return listener.apply(this, arguments);
                        }
                    }, dontFix);
                    signal.pause = function() {
                        paused = true;
                    };
                    signal.resume = function() {
                        paused = false;
                    };
                    return signal;
                };
                on.once = function(target, type, listener, dontFix) {
                    // summary:
                    //		This function acts the same as on(), but will only call the listener once. The 
                    //		listener will be called for the first
                    //		event that takes place and then listener will automatically be removed.
                    var signal = on(target, type, function() {
                        // remove this listener
                        signal.remove();
                        // proceed to call the listener
                        return listener.apply(this, arguments);
                    });
                    return signal;
                };
                on.parse = function(target, type, listener, addListener, dontFix, matchesTarget) {
                    if (type.call) {
                        // event handler function
                        // on(node, touch.press, touchListener);
                        return type.call(matchesTarget, target, listener);
                    }

                    if (type.indexOf(",") > -1) {
                        // we allow comma delimited event names, so you can register for multiple events at once
                        var events = type.split(/\s*,\s*/);
                        var handles = [];
                        var i = 0;
                        var eventName;
                        while (eventName = events[i++]) {
                            handles.push(addListener(target, eventName, listener, dontFix, matchesTarget));
                        }
                        handles.remove = function() {
                            for (var i = 0; i < handles.length; i++) {
                                handles[i].remove();
                            }
                        };
                        return handles;
                    }
                    return addListener(target, type, listener, dontFix, matchesTarget);
                };
                var touchEvents = /^touch/;

                function addListener(target, type, listener, dontFix, matchesTarget) {
                    // event delegation:
                    var selector = type.match(/(.*):(.*)/);
                    // if we have a selector:event, the last one is interpreted as an event, and we use event delegation
                    if (selector) {
                        type = selector[2];
                        selector = selector[1];
                        // create the extension event for selectors and directly call it
                        return on.selector(selector, type).call(matchesTarget, target, listener);
                    }
                    // test to see if it a touch event right now, so we don't have to do it every time it fires
                    if (has("touch")) {
                        if (touchEvents.test(type)) {
                            // touch event, fix it
                            listener = fixTouchListener(listener);
                        }
                        if (!has("event-orientationchange") && (type == "orientationchange")) {
                            //"orientationchange" not supported <= Android 2.1, 
                            //but works through "resize" on window
                            type = "resize";
                            target = window;
                            listener = fixTouchListener(listener);
                        }
                    }
                    if (addStopImmediate) {
                        // add stopImmediatePropagation if it doesn't exist
                        listener = addStopImmediate(listener);
                    }
                    // normal path, the target is |this|
                    if (target.addEventListener) {
                        // the target has addEventListener, which should be used if available (might or might not be a node, non-nodes can implement this method as well)
                        // check for capture conversions
                        var capture = type in captures,
                            adjustedType = capture ? captures[type] : type;
                        target.addEventListener(adjustedType, listener, capture);
                        // create and return the signal
                        return {
                            remove: function() {
                                target.removeEventListener(adjustedType, listener, capture);
                            }
                        };
                    }
                    type = "on" + type;
                    if (fixAttach && target.attachEvent) {
                        return fixAttach(target, type, listener);
                    }
                    throw new Error("Target must be an event emitter");
                }

                on.selector = function(selector, eventType, children) {
                    // summary:
                    //		Creates a new extension event with event delegation. This is based on
                    //		the provided event type (can be extension event) that
                    //		only calls the listener when the CSS selector matches the target of the event.
                    //
                    //		The application must require() an appropriate level of dojo/query to handle the selector.
                    // selector:
                    //		The CSS selector to use for filter events and determine the |this| of the event listener.
                    // eventType:
                    //		The event to listen for
                    // children:
                    //		Indicates if children elements of the selector should be allowed. This defaults to 
                    //		true
                    // example:
                    // |	require(["dojo/on", "dojo/mouse", "dojo/query!css2"], function(listen, mouse){
                    // |		on(node, on.selector(".my-class", mouse.enter), handlerForMyHover);
                    return function(target, listener) {
                        // if the selector is function, use it to select the node, otherwise use the matches method
                        var matchesTarget = typeof selector == "function" ? {
                                matches: selector
                            } : this,
                            bubble = eventType.bubble;

                        function select(eventTarget) {
                            // see if we have a valid matchesTarget or default to dojo.query
                            matchesTarget = matchesTarget && matchesTarget.matches ? matchesTarget : dojo.query;
                            // there is a selector, so make sure it matches
                            while (!matchesTarget.matches(eventTarget, selector, target)) {
                                if (eventTarget == target || children === false || !(eventTarget = eventTarget.parentNode) || eventTarget.nodeType != 1) { // intentional assignment
                                    return;
                                }
                            }
                            return eventTarget;
                        }
                        if (bubble) {
                            // the event type doesn't naturally bubble, but has a bubbling form, use that, and give it the selector so it can perform the select itself
                            return on(target, bubble(select), listener);
                        }
                        // standard event delegation
                        return on(target, eventType, function(event) {
                            // call select to see if we match
                            var eventTarget = select(event.target);
                            // if it matches we call the listener
                            return eventTarget && listener.call(eventTarget, event);
                        });
                    };
                };

                function syntheticPreventDefault() {
                    this.cancelable = false;
                }

                function syntheticStopPropagation() {
                    this.bubbles = false;
                }
                var slice = [].slice,
                    syntheticDispatch = on.emit = function(target, type, event) {
                        // summary:
                        //		Fires an event on the target object.
                        // target:
                        //		The target object to fire the event on. This can be a DOM element or a plain 
                        //		JS object. If the target is a DOM element, native event emiting mechanisms
                        //		are used when possible.
                        // type:
                        //		The event type name. You can emulate standard native events like "click" and 
                        //		"mouseover" or create custom events like "open" or "finish".
                        // event:
                        //		An object that provides the properties for the event. See https://developer.mozilla.org/en/DOM/event.initEvent 
                        //		for some of the properties. These properties are copied to the event object.
                        //		Of particular importance are the cancelable and bubbles properties. The
                        //		cancelable property indicates whether or not the event has a default action
                        //		that can be cancelled. The event is cancelled by calling preventDefault() on
                        //		the event object. The bubbles property indicates whether or not the
                        //		event will bubble up the DOM tree. If bubbles is true, the event will be called
                        //		on the target and then each parent successively until the top of the tree
                        //		is reached or stopPropagation() is called. Both bubbles and cancelable 
                        //		default to false.
                        // returns:
                        //		If the event is cancelable and the event is not cancelled,
                        //		emit will return true. If the event is cancelable and the event is cancelled,
                        //		emit will return false.
                        // details:
                        //		Note that this is designed to emit events for listeners registered through
                        //		dojo/on. It should actually work with any event listener except those
                        //		added through IE's attachEvent (IE8 and below's non-W3C event emiting
                        //		doesn't support custom event types). It should work with all events registered
                        //		through dojo/on. Also note that the emit method does do any default
                        //		action, it only returns a value to indicate if the default action should take
                        //		place. For example, emiting a keypress event would not cause a character
                        //		to appear in a textbox.
                        // example:
                        //		To fire our own click event
                        //	|	on.emit(dojo.byId("button"), "click", {
                        //	|		cancelable: true,
                        //	|		bubbles: true,
                        //	|		screenX: 33,
                        //	|		screenY: 44
                        //	|	});
                        //		We can also fire our own custom events:
                        //	|	on.emit(dojo.byId("slider"), "slide", {
                        //	|		cancelable: true,
                        //	|		bubbles: true,
                        //	|		direction: "left-to-right"
                        //	|	});
                        var args = slice.call(arguments, 2);
                        var method = "on" + type;
                        if ("parentNode" in target) {
                            // node (or node-like), create event controller methods
                            var newEvent = args[0] = {};
                            for (var i in event) {
                                newEvent[i] = event[i];
                            }
                            newEvent.preventDefault = syntheticPreventDefault;
                            newEvent.stopPropagation = syntheticStopPropagation;
                            newEvent.target = target;
                            newEvent.type = type;
                            event = newEvent;
                        }
                        do {
                            // call any node which has a handler (note that ideally we would try/catch to simulate normal event propagation but that causes too much pain for debugging)
                            target[method] && target[method].apply(target, args);
                            // and then continue up the parent node chain if it is still bubbling (if started as bubbles and stopPropagation hasn't been called)
                        } while (event && event.bubbles && (target = target.parentNode));
                        return event && event.cancelable && event; // if it is still true (was cancelable and was cancelled), return the event to indicate default action should happen
                    };
                var captures = {};
                if (!has("event-stopimmediatepropagation")) {
                    var stopImmediatePropagation = function() {
                        this.immediatelyStopped = true;
                        this.modified = true; // mark it as modified so the event will be cached in IE
                    };
                    var addStopImmediate = function(listener) {
                        return function(event) {
                            if (!event.immediatelyStopped) { // check to make sure it hasn't been stopped immediately
                                event.stopImmediatePropagation = stopImmediatePropagation;
                                return listener.apply(this, arguments);
                            }
                        };
                    }
                }
                if (has("dom-addeventlistener")) {
                    // normalize focusin and focusout
                    captures = {
                        focusin: "focus",
                        focusout: "blur"
                    };
                    if (has("opera")) {
                        captures.keydown = "keypress"; // this one needs to be transformed because Opera doesn't support repeating keys on keydown (and keypress works because it incorrectly fires on all keydown events)
                    }

                    // emiter that works with native event handling
                    on.emit = function(target, type, event) {
                        if (target.dispatchEvent && document.createEvent) {
                            // use the native event emiting mechanism if it is available on the target object
                            // create a generic event				
                            // we could create branch into the different types of event constructors, but 
                            // that would be a lot of extra code, with little benefit that I can see, seems 
                            // best to use the generic constructor and copy properties over, making it 
                            // easy to have events look like the ones created with specific initializers
                            var nativeEvent = target.ownerDocument.createEvent("HTMLEvents");
                            nativeEvent.initEvent(type, !!event.bubbles, !!event.cancelable);
                            // and copy all our properties over
                            for (var i in event) {
                                var value = event[i];
                                if (!(i in nativeEvent)) {
                                    nativeEvent[i] = event[i];
                                }
                            }
                            return target.dispatchEvent(nativeEvent) && nativeEvent;
                        }
                        return syntheticDispatch.apply(on, arguments); // emit for a non-node
                    };
                } else {
                    // no addEventListener, basically old IE event normalization
                    on._fixEvent = function(evt, sender) {
                        // summary:
                        //		normalizes properties on the event object including event
                        //		bubbling methods, keystroke normalization, and x/y positions
                        // evt:
                        //		native event object
                        // sender:
                        //		node to treat as "currentTarget"
                        if (!evt) {
                            var w = sender && (sender.ownerDocument || sender.document || sender).parentWindow || window;
                            evt = w.event;
                        }
                        if (!evt) {
                            return evt;
                        }
                        if (lastEvent && evt.type == lastEvent.type) {
                            // should be same event, reuse event object (so it can be augmented)
                            evt = lastEvent;
                        }
                        if (!evt.target) { // check to see if it has been fixed yet
                            evt.target = evt.srcElement;
                            evt.currentTarget = (sender || evt.srcElement);
                            if (evt.type == "mouseover") {
                                evt.relatedTarget = evt.fromElement;
                            }
                            if (evt.type == "mouseout") {
                                evt.relatedTarget = evt.toElement;
                            }
                            if (!evt.stopPropagation) {
                                evt.stopPropagation = stopPropagation;
                                evt.preventDefault = preventDefault;
                            }
                            switch (evt.type) {
                                case "keypress":
                                    var c = ("charCode" in evt ? evt.charCode : evt.keyCode);
                                    if (c == 10) {
                                        // CTRL-ENTER is CTRL-ASCII(10) on IE, but CTRL-ENTER on Mozilla
                                        c = 0;
                                        evt.keyCode = 13;
                                    } else if (c == 13 || c == 27) {
                                        c = 0; // Mozilla considers ENTER and ESC non-printable
                                    } else if (c == 3) {
                                        c = 99; // Mozilla maps CTRL-BREAK to CTRL-c
                                    }
                                    // Mozilla sets keyCode to 0 when there is a charCode
                                    // but that stops the event on IE.
                                    evt.charCode = c;
                                    _setKeyChar(evt);
                                    break;
                            }
                        }
                        return evt;
                    };
                    var lastEvent, IESignal = function(handle) {
                        this.handle = handle;
                    };
                    IESignal.prototype.remove = function() {
                        delete _dojoIEListeners_[this.handle];
                    };
                    var fixListener = function(listener) {
                        // this is a minimal function for closing on the previous listener with as few as variables as possible
                        return function(evt) {
                            evt = on._fixEvent(evt, this);
                            var result = listener.call(this, evt);
                            if (evt.modified) {
                                // cache the last event and reuse it if we can
                                if (!lastEvent) {
                                    setTimeout(function() {
                                        lastEvent = null;
                                    });
                                }
                                lastEvent = evt;
                            }
                            return result;
                        };
                    };
                    var fixAttach = function(target, type, listener) {
                        listener = fixListener(listener);
                        if (((target.ownerDocument ? target.ownerDocument.parentWindow : target.parentWindow || target.window || window) != top ||
                                has("jscript") < 5.8) &&
                            !has("config-_allow_leaks")) {
                            // IE will leak memory on certain handlers in frames (IE8 and earlier) and in unattached DOM nodes for JScript 5.7 and below.
                            // Here we use global redirection to solve the memory leaks
                            if (typeof _dojoIEListeners_ == "undefined") {
                                _dojoIEListeners_ = [];
                            }
                            var emiter = target[type];
                            if (!emiter || !emiter.listeners) {
                                var oldListener = emiter;
                                emiter = Function('event', 'var callee = arguments.callee; for(var i = 0; i<callee.listeners.length; i++){var listener = _dojoIEListeners_[callee.listeners[i]]; if(listener){listener.call(this,event);}}');
                                emiter.listeners = [];
                                target[type] = emiter;
                                emiter.global = this;
                                if (oldListener) {
                                    emiter.listeners.push(_dojoIEListeners_.push(oldListener) - 1);
                                }
                            }
                            var handle;
                            emiter.listeners.push(handle = (emiter.global._dojoIEListeners_.push(listener) - 1));
                            return new IESignal(handle);
                        }
                        return aspect.after(target, type, listener, true);
                    };

                    var _setKeyChar = function(evt) {
                        evt.keyChar = evt.charCode ? String.fromCharCode(evt.charCode) : '';
                        evt.charOrCode = evt.keyChar || evt.keyCode;
                    };
                    // Called in Event scope
                    var stopPropagation = function() {
                        this.cancelBubble = true;
                    };
                    var preventDefault = on._preventDefault = function() {
                        // Setting keyCode to 0 is the only way to prevent certain keypresses (namely
                        // ctrl-combinations that correspond to menu accelerator keys).
                        // Otoh, it prevents upstream listeners from getting this information
                        // Try to split the difference here by clobbering keyCode only for ctrl
                        // combinations. If you still need to access the key upstream, bubbledKeyCode is
                        // provided as a workaround.
                        this.bubbledKeyCode = this.keyCode;
                        if (this.ctrlKey) {
                            try {
                                // squelch errors when keyCode is read-only
                                // (e.g. if keyCode is ctrl or shift)
                                this.keyCode = 0;
                            } catch (e) {}
                        }
                        this.defaultPrevented = true;
                        this.returnValue = false;
                    };
                }
                if (has("touch")) {
                    var Event = function() {};
                    var windowOrientation = window.orientation;
                    var fixTouchListener = function(listener) {
                        return function(originalEvent) {
                            //Event normalization(for ontouchxxx and resize): 
                            //1.incorrect e.pageX|pageY in iOS 
                            //2.there are no "e.rotation", "e.scale" and "onorientationchange" in Andriod
                            //3.More TBD e.g. force | screenX | screenX | clientX | clientY | radiusX | radiusY

                            // see if it has already been corrected
                            var event = originalEvent.corrected;
                            if (!event) {
                                var type = originalEvent.type;
                                try {
                                    delete originalEvent.type; // on some JS engines (android), deleting properties make them mutable
                                } catch (e) {}
                                if (originalEvent.type) {
                                    // deleting properties doesn't work (older iOS), have to use delegation
                                    Event.prototype = originalEvent;
                                    var event = new Event;
                                    // have to delegate methods to make them work
                                    event.preventDefault = function() {
                                        originalEvent.preventDefault();
                                    };
                                    event.stopPropagation = function() {
                                        originalEvent.stopPropagation();
                                    };
                                } else {
                                    // deletion worked, use property as is
                                    event = originalEvent;
                                    event.type = type;
                                }
                                originalEvent.corrected = event;
                                if (type == 'resize') {
                                    if (windowOrientation == window.orientation) {
                                        return null; //double tap causes an unexpected 'resize' in Andriod 
                                    }
                                    windowOrientation = window.orientation;
                                    event.type = "orientationchange";
                                    return listener.call(this, event);
                                }
                                // We use the original event and augment, rather than doing an expensive mixin operation
                                if (!("rotation" in event)) { // test to see if it has rotation
                                    event.rotation = 0;
                                    event.scale = 1;
                                }
                                //use event.changedTouches[0].pageX|pageY|screenX|screenY|clientX|clientY|target
                                var firstChangeTouch = event.changedTouches[0];
                                for (var i in firstChangeTouch) { // use for-in, we don't need to have dependency on dojo/_base/lang here
                                    delete event[i]; // delete it first to make it mutable
                                    event[i] = firstChangeTouch[i];
                                }
                            }
                            return listener.call(this, event);
                        };
                    };
                }
                return on;
            });

        },
        'dijit/form/_CheckBoxMixin': function() {
            define("dijit/form/_CheckBoxMixin", [
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/_base/event" // event.stop
            ], function(declare, domAttr, event) {

                // module:
                //		dijit/form/_CheckBoxMixin

                return declare("dijit.form._CheckBoxMixin", null, {
                    // summary:
                    //		Mixin to provide widget functionality corresponding to an HTML checkbox
                    //
                    // description:
                    //		User interacts with real html inputs.
                    //		On onclick (which occurs by mouse click, space-bar, or
                    //		using the arrow keys to switch the selected radio button),
                    //		we update the state of the checkbox/radio.
                    //

                    // type: [private] String
                    //		type attribute on `<input>` node.
                    //		Overrides `dijit/form/Button.type`.  Users should not change this value.
                    type: "checkbox",

                    // value: String
                    //		As an initialization parameter, equivalent to value field on normal checkbox
                    //		(if checked, the value is passed as the value when form is submitted).
                    value: "on",

                    // readOnly: Boolean
                    //		Should this widget respond to user input?
                    //		In markup, this is specified as "readOnly".
                    //		Similar to disabled except readOnly form values are submitted.
                    readOnly: false,

                    // aria-pressed for toggle buttons, and aria-checked for checkboxes
                    _aria_attr: "aria-checked",

                    _setReadOnlyAttr: function( /*Boolean*/ value) {
                        this._set("readOnly", value);
                        domAttr.set(this.focusNode, 'readOnly', value);
                        this.focusNode.setAttribute("aria-readonly", value);
                    },

                    // Override dijit/form/Button._setLabelAttr() since we don't even have a containerNode.
                    // Normally users won't try to set label, except when CheckBox or RadioButton is the child of a dojox/layout/TabContainer
                    _setLabelAttr: undefined,

                    _getSubmitValue: function( /*String*/ value) {
                        return !value && value !== 0 ? "on" : value;
                    },

                    _setValueAttr: function(newValue) {
                        newValue = this._getSubmitValue(newValue); // "on" to match browser native behavior when value unspecified
                        this._set("value", newValue);
                        domAttr.set(this.focusNode, "value", newValue);
                    },

                    reset: function() {
                        this.inherited(arguments);
                        // Handle unlikely event that the <input type=checkbox> value attribute has changed
                        this._set("value", this.params.value || "on");
                        domAttr.set(this.focusNode, 'value', this.value);
                    },

                    _onClick: function( /*Event*/ e) {
                        // summary:
                        //		Internal function to handle click actions - need to check
                        //		readOnly, since button no longer does that check.
                        if (this.readOnly) {
                            event.stop(e);
                            return false;
                        }
                        return this.inherited(arguments);
                    }
                });
            });

        },
        'app/validationRules': function() {
            define(
                "app/validationRules", [
                    "dojo/dom-prop",
                    "dojo/dom-attr",
                    "dojo/query",
                    "dojo/NodeList-traverse"
                ],
                function(domProp, domAttr, query) {
                    var rules = {
                        /**
                         * Checks the input value contains only alpha (including caps) chars.
                         */
                        alpha: function($input) {
                            var val = domProp.get($input, 'value'),
                                regex = /^[a-zA-Z]+$/i;

                            return !!val.match(regex);
                        },
                        /**
                         * Checks the input value contains only alphanumeric (including caps) chars with spaces.
                         */
                        alphaWithSpaces: function($input) {
                            var val = domProp.get($input, 'value'),
                                regex = /^[a-zA-Z\s]+$/i;

                            return !!val.match(regex);
                        },
                        alphanumericWithSpaces: function($input) {
                            var val = domProp.get($input, 'value'),
                                regex = /^[a-zA-Z0-9\s]+$/i;

                            return !!val.match(regex);
                        },
                        /**
                         * Checks the input value contains Alphanumeric (A-Z, 0-9) plus special characters (@), underscore (_), hyphen (-), space ( ), apostrophe (? and period (.).
                         */
                        alphaWithChart: function($input) {
                            var val = domProp.get($input, 'value'),
                                regex = /^[A-Za-z0-9-@_'. ]*$/i;
                            return !!val.match(regex);
                        },
                        /**
                         * Checks the input value is a positive int
                         */
                        positiveInt: function($input) {
                            var val = domProp.get($input, 'value'),
                                regex = /^[0-9]+$/i;

                            return !!val.match(regex);
                        },
                        /**
                         * Checks if the input value is empty
                         */
                        empty: function($input) {
                            var val = domProp.get($input, 'value');
                            if (!val || val === domAttr.get($input, 'data-default-text')) {
                                return true;
                            } else {
                                return false;
                            }
                        },
                        /**
                         * Checks the input value is not longer than a maximum value, this value is set within a data attribute called "data-max-length".
                         */
                        maxLength: function($input) {
                            var val = domProp.get($input, 'value'),
                                maxLen = domAttr.get($input, 'data-max-length');

                            if (!maxLen || !parseInt(maxLen)) {
                                throw new Error("Form Validation: Max Length rule. data-max-length attribute not found or invalid");
                            } else {
                                if (val.length > parseInt(maxLen)) {
                                    return false;
                                } else {
                                    return true;
                                }
                            }
                        },
                        /**
                         * Checks the input value is not shorter than a minimum value, this value is set within a data attribute called "data-min-length".
                         */
                        minLength: function($input) {
                            var val = domProp.get($input, 'value'),
                                minLen = domAttr.get($input, 'data-min-length');

                            if (!minLen || !parseInt(minLen)) {
                                throw new Error("Form Validation: Minimum Length rule. data-min-length attribute not found or invalid.");
                            } else {
                                if (val.length < parseInt(minLen)) {
                                    return false;
                                } else {
                                    return true;
                                }
                            }
                        },
                        /**
                         *
                         */
                        matches: function($input) {
                            var val = domProp.get($input, 'value'),
                                matchName = domAttr.get($input, 'data-match-element-name');

                            if (!matchName) {
                                throw new Error("Form Validation: data-match-element-name not specified");
                            } else {
                                var $matchEle = query('[name="' + matchName + '"]', query($input).closest('form')[0]);
                                if (!$matchEle || !$matchEle.length) {
                                    throw new Error("Form Validation: element with data-match-element-name (" + matchName + ") not found.")
                                } else {
                                    if (domProp.get($matchEle[0], 'value') === val) {
                                        return true;
                                    } else {
                                        return false;
                                    }
                                }
                            }


                        }
                    }
                    return rules;
                }
            );

        },
        'hsbcwidget/lightbox': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dijit/_Templated",
                    "dijit/registry",
                    "dojo/text!hsbcwidget/themes/ursula/templates/Lightbox.html",
                    "dojo/query",
                    "dojo/dom-class",
                    "dojo/html",
                    "dojo/dom-construct",
                    "dojo/on",
                    "dojo/dom",
                    "dojo/Deferred",
                    "dojo/dom-geometry",
                    "dojo/_base/window",
                    "dojo/_base/array",
                    "dojo/window",
                    "dojo/dom-style",
                    "dojo/_base/lang",
                    "dojo/dom-attr",
                    "dojo/request",
                    "dojo/store/Memory",
                    "dijit/focus",
                    "dojo/parser",
                    "dojo/NodeList-traverse",
                    "dojo/NodeList-dom",
                    "dojo/NodeList-manipulate"
                ],
                function(declare, _WidgetBase, _Templated, registry, template, query, domClass, html, domConstruct, on, dom, Deferred, domGeom, winBase, array, win, domStyle, lang, domAttr, request, memory, focusUtil, parser) {

                    return declare("hsbcwidget.Lightbox", [_WidgetBase, _Templated], {
                        templateString: template,
                        tabbableEl: true,
                        classes: {
                            close: 'close',
                            noPrint: 'noPrint',
                            overlayOpen: 'bodyFixed',
                            overflowX: 'lightboxOverflow',
                            hideClose: 'hideClose',
                            disableOverlayClose: 'disableOverlayClose'
                        },
                        selectors: {
                            trigger: '.jsLightboxTrigger',
                            printButton: '.jsPrint',
                            overlay: '.overlay',
                            lightbox: '.lightbox',
                            lightboxContent: '.lightboxInner2',
                            close: '.jsClose',
                            dialogTitle: '.dialogTitle',
                            defaultOpen: 'defaultOpen',
                            addOnLoad: '.addOnLoad',
                            buttonClose: '.buttonClose'
                        },
                        $overlay: null,
                        $lightbox: null,
                        $lightboxContent: null,
                        $tabbableNode: null,
                        store: null,
                        currStoreId: null,
                        NextIdNum: 1,
                        overlayCloseDisabled: false,
                        currentTrigger: null,
                        lightBoxLastNode: null,
                        isInValidEle: false,
                        LightboxLastEle: null,

                        postCreate: function() {
                            this.init();
                            this.bindCloseEvent(this.$lightbox);
                            this.buildTabbableElement();
                            this.setOverlayDimensions();
                            this.bindOverlayEvents();
                            this._bindTriggerEvents();
                            this.bindAddOnLoadEvents();
                            if (this._defaultOpen) {
                                this._defaultOpen.click();
                            }
                        },

                        init: function() {
                            domConstruct.place(template, winBase.body());
                            domConstruct.place(this.domNode, winBase.body(), 'last');
                            this.$overlay = query(this.selectors.overlay)[0];
                            this.$lightbox = query(this.selectors.lightbox)[0];
                            this.$lightboxContent = query(this.selectors.lightboxContent)[0];
                            this.store = new memory({});
                        },

                        /**
                         * Adds Tabbable element to the overlay that is focused when the overlay is opened.
                         */
                        buildTabbableElement: function() {
                            query(this.selectors.close, this.domNode).forEach(lang.hitch(this, function($node) {
                                this.mapShiftTab($node, 'keydown');
                            }));
                        },
                        mapShiftTab: function($trigger, event) {
                            on($trigger, event, lang.hitch(this, function(e) {
                                if (e.shiftKey && e.which == 9) {
                                    e.preventDefault();
                                    //console.log("in shif tab", this.lightBoxLastNode);
                                    focusUtil.focus(this.lightBoxLastNode);
                                }
                            }));
                        },
                        bindAddOnLoadEvents: function() {
                            query(this.selectors.addOnLoad).forEach(lang.hitch(this, function($node) {
                                this.show();
                                this.loadContent($node);
                            }));
                        },
                        containsFocus: function(node) {
                            var def = new Deferred();
                            setTimeout(lang.hitch(this, function() {
                                if (dom.isDescendant(document.activeElement, this.$lightbox)) {
                                    def.resolve();
                                } else {
                                    def.reject();
                                }
                            }), 0);

                            return def.promise;
                        },

                        /**
                         * Binds click events to triggers
                         * @private
                         */
                        _bindTriggerEvents: function() {
                            query(this.selectors.trigger).forEach(lang.hitch(this, function($node) {
                                this.bindTriggerEvent($node, 'click');

                                if (domClass.contains($node, this.selectors.defaultOpen)) {
                                    this._defaultOpen = $node;
                                }
                            }));
                        },

                        bindTriggerEvent: function($trigger, event) {

                            on($trigger, event, lang.hitch(this, function(e) {
                                var valid = true;
                                if (domAttr.get($trigger, "data-validation-widget")) {
                                    valid = registry.byId(domAttr.get($trigger, "data-validation-widget")).validate();
                                }

                                e.preventDefault();

                                if (valid) {
                                    domClass.add($trigger, 'hide');
                                    this.show();
                                    this.currentTrigger = $trigger;
                                    this.loadContent($trigger);
                                }
                            }));
                        },

                        bindOverlayEvents: function() {
                            on(winBase.global, 'resize', lang.hitch(this, function() {
                                this.setOverlayDimensions();
                            }));
                            on(this.$overlay, 'click', lang.hitch(this, function(e) {
                                e.preventDefault();
                                if (!this.overlayCloseDisabled) {
                                    this.hide();
                                }

                            }));

                            on(this.domNode, on.selector(this.selectors.printButton, 'click, keypress'), lang.hitch(this, function(e) {

                                if (e.type === 'click') {
                                    e.preventDefault();
                                } else if (e.which !== '13') {
                                    return;
                                }

                                query(this.domNode).siblings(':not(script)').addClass(this.classes.noPrint);
                                this.printing = true;
                                window.print();
                            }));

                            on(this.domNode, 'keydown', lang.hitch(this, function(e) {
                                if (e.which === 9) {
                                    //if the user tabs out of the lightbox
                                    //give focus back to the lightbox.
                                    this.containsFocus().then(function() {}, lang.hitch(this, function() {
                                        //this.$tabbableNode.focus();
                                        this.focusNode = null;
                                        if (domClass.contains(this.closeButton, 'hide')) {
                                            this.focusNode = query('a:first', this.$lightboxContent)[0];
                                        } else {
                                            this.focusNode = query(this.selectors.close, this.domNode)[0];
                                        }
                                        this.focusNode.focus();
                                    }));
                                } else if (e.which === 27) {
                                    this.hide();
                                }
                            }));
                        },

                        bindCloseEvent: function($node) {
                            query(this.selectors.close, $node).forEach(lang.hitch(this, function($el) {
                                on($el, 'click', lang.hitch(this, function(e) {
                                    e.preventDefault();

                                    if (!domClass.contains($el, "invalid")) {
                                        this.hide();
                                    }

                                }));
                            }));
                        },


                        show: function() {
                            query('body').addClass(this.classes.overlayOpen);
                            domStyle.set(this.$overlay, 'display', 'block');
                            domStyle.set(this.$lightbox, 'display', 'block');
                            this.setPos();

                            //focusUtil.focus(this.domNode);
                            on.emit(this.$lightbox, "onlightboxopen", {
                                bubbles: true,
                                cancelable: true
                            });
                            this.getLastNodeofOverlay();
                        },
                        getLastNodeofOverlay: function() {
                            array.forEach(query(":focusable", this.$lightboxContent), lang.hitch(this, function(node) {
                                var eleNames = ["A", "INPUT", "BUTTON", "SELECT", "TEXTAREA"].indexOf(node.nodeName) >= 0;

                                if (eleNames) {
                                    //ignore hidden, tabIndex -1 and disable element
                                    if (node.type == "hidden") {
                                        this.isInValidEle = true;
                                    } else if (domAttr.get(node, 'tabindex') == "-1") {
                                        this.isInValidEle = true;
                                    } else if (domAttr.has(node, 'disabled')) {
                                        this.isInValidEle = true;
                                    }
                                    if (!this.isInValidEle) {
                                        this.LightboxLastEle = node;
                                    }
                                    this.isInValidEle = false;
                                }
                            }));
                            if (this.LightboxLastEle == null) {
                                this.lightBoxLastNode = query(this.selectors.close, this.domNode)[0];
                            } else {
                                this.lightBoxLastNode = this.LightboxLastEle;
                            }
                        },
                        hide: function() {
                            if (this.currStoreId) {
                                this.removeContent();
                            }
                            domClass.remove($trigger, 'hide');
                            domClass.remove(this.$lightbox);
                            domClass.add(this.$lightbox, 'lightbox');

                            if (this.printing) {
                                query(this.domNode).siblings(':not(script)').removeClass(this.classes.noPrint);
                            }
                            domStyle.set(this.$overlay, 'display', 'none');
                            domStyle.set(this.$lightbox, 'display', 'none');
                            on.emit(this.$lightbox, 'onlightboxclose', {
                                bubbles: true,
                                cancelable: true
                            });
                            query('body').removeClass(this.classes.overlayOpen);
                            domStyle.set(this.innerNode, "height", "");
                            domClass.remove(this.innerNode, this.classes.overflowX);
                            focusUtil.focus(this.currentTrigger);
                            this.currentTrigger = null;
                        },

                        removeContent: function() {
                            this.store.put({
                                node: query(this.$lightboxContent).children().remove()[0]
                            }, {
                                id: this.currStoreId
                            });
                            on.emit(this.$lightbox, 'onlightboxempty', {
                                bubbles: true,
                                cancelable: true
                            });
                        },

                        setPos: function() {
                            var winBox = win.getBox(),
                                top,
                                lightboxBox = domGeom.getContentBox(this.$lightbox),
                                topPos = document.body.scrollTop;
                            domStyle.set(this.$lightbox, 'left', ((winBox.w - lightboxBox.w) / 2) + 'px');

                            if (lightboxBox.h < winBox.h) {
                                top = topPos + ((winBox.h - lightboxBox.h) / 2);
                            } else {
                                top = topPos;
                            }

                            domStyle.set(this.$lightbox, 'top', top + 'px');
                        },

                        setOverlayDimensions: function() {
                            var docBox = win.getBox(),
                                lightboxBox = domGeom.getContentBox(this.$lightbox),
                                height = Math.max(docBox.h, lightboxBox.h),
                                width = Math.max(docBox.w, lightboxBox.w);

                            if (lightboxBox.h > docBox.h || lightboxBox.w > docBox.w) {
                                domStyle.set(this.$overlay, 'position', 'absolute');
                            } else {
                                domStyle.set(this.$overlay, 'position', 'fixed');
                            }
                            domStyle.set(this.$overlay, 'height', height + 'px');
                            domStyle.set(this.$overlay, 'width', width + 'px');
                        },

                        changeContent: function($trigger, $content, id) {
                            this.removeContent();
                            if (id) {
                                this.addContent(null, null, id);
                            } else if (!$trigger && $content) {
                                this.addContent(null, $content, null);
                            } else if ($trigger && !$content) {
                                this.loadContent($trigger);
                            }
                        },

                        loadContent: function($trigger) {
                            var targetId = domAttr.get($trigger, 'data-target-id');
                            if (this.store.get(targetId)) {
                                this.addContent($trigger, null, targetId);
                            } else if (domAttr.has($trigger, 'data-ajax-target')) {
                                var target = domAttr.get($trigger, 'data-ajax-target');
                                request(target).then(lang.hitch(this, function(response) {
                                    this.addContent($trigger, response);
                                }));
                            } else if (targetId) {
                                var target = domAttr.get($trigger, 'data-target-id'),
                                    $content = query('#' + target)[0];
                                this.addContent($trigger, $content);
                            } else {
                                throw new Error('Dojo Lightbox: All lightbox triggers must either specify a target id (data-target-id) or target uri (data-ajax-target).');
                            }
                        },

                        addContent: function($trigger, $content, id) {

                            var reposition = lang.hitch(this, function() {
                                var winHeight = win.getBox().h,
                                    totalHeight = "",
                                    lightboxClass = domAttr.get($trigger, "data-lightbox-class") || "",
                                    overflowAction = "remove";

                                if (domGeom.getMarginBox(this.$lightbox).h > winHeight) {
                                    var lightboxMarginExtents = domGeom.getMarginExtents(this.$lightbox),
                                        lightboxInnerMarginExtents = domGeom.getMarginExtents(this.innerNode),
                                        lightboxBorderPad = domGeom.getPadBorderExtents(this.$lightbox),
                                        lightboxInnerBorderPad = domGeom.getPadBorderExtents(this.innerNode),
                                        totalMargin = lightboxMarginExtents.t + lightboxMarginExtents.b + lightboxInnerMarginExtents.t + lightboxInnerMarginExtents.b,
                                        totalBorderPad = lightboxBorderPad.t + lightboxBorderPad.b + lightboxInnerBorderPad.t + lightboxInnerBorderPad.b;

                                    totalHeight = (winHeight - totalBorderPad - totalMargin) + 'px';
                                    overflowAction = "add";
                                }
                                domClass.add(this.$lightbox, lightboxClass);

                                domStyle.set(this.innerNode, "height", totalHeight);
                                domClass[overflowAction](this.innerNode, this.classes.overflowX);
                            });

                            if (!this.store.get(id)) {
                                domStyle.set($content, 'display', 'none');
                                $content = lang.clone($content);
                                domStyle.set($content, 'display', 'block');
                                domConstruct.place($content, this.$lightboxContent, 'only');
                                parser.parse({
                                    rootNode: $content,
                                    scope: 'lightbox'
                                }).then(lang.hitch(this, function(instances) {
                                    this.currStoreId = this.store.put({
                                        id: $content.id,
                                        $node: $content
                                    });
                                    this.bindCloseEvent($content);
                                    on.emit(this.$lightboxContent, 'onlightboxcontentadd', {
                                        bubbles: true,
                                        cancelable: true
                                    });
                                    this.setOverlayDimensions();
                                    reposition();
                                    this.setPos();
                                }));
                                var title = query(this.selectors.dialogTitle, $content);

                                if (title.length) {

                                    title.attr("id", this.id + '_label');
                                    domAttr.set(this.domNode, "aria-labelledby", this.id + '_label');

                                }

                            } else {
                                this.currStoreId = id;
                                var $node = this.store.get(id).node;
                                $content = $node;
                                domStyle.set($node, 'display', 'block');
                                domConstruct.place($node, this.$lightboxContent, 'only');
                                on.emit(this.$lightboxContent, 'onlightboxcontentadd', {
                                    bubbles: true,
                                    cancelable: true
                                });

                                this.setOverlayDimensions();
                                reposition();
                                this.setPos();
                            }

                            this.focusNode = null;
                            if (domClass.contains($content, this.classes.hideClose)) {
                                domClass.add(this.closeButton, "hide");
                                this.focusNode = query('a:first', $content)[0];
                            } else {
                                domClass.remove(this.closeButton, "hide");
                                this.focusNode = query(this.selectors.close, this.domNode)[0];
                            }
                            this.focusNode.focus();
                            this.getLastNodeofOverlay();
                            if (domClass.contains($content, this.classes.disableOverlayClose)) {
                                this.overlayCloseDisabled = true;
                            } else {
                                this.overlayCloseDisabled = false;
                            }

                        }
                    });
                }
            );
        },
        'dijit/layout/ContentPane': function() {
            define("dijit/layout/ContentPane", [
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.mixin lang.delegate lang.hitch lang.isFunction lang.isObject
                "../_Widget",
                "../_Container",
                "./_ContentPaneResizeMixin",
                "dojo/string", // string.substitute
                "dojo/html", // html._ContentSetter html._emptyNode
                "dojo/i18n!../nls/loading",
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/_base/Deferred", // Deferred
                "dojo/dom", // dom.byId
                "dojo/dom-attr", // domAttr.attr
                "dojo/_base/xhr", // xhr.get
                "dojo/i18n", // i18n.getLocalization
                "dojo/when"
            ], function(kernel, lang, _Widget, _Container, _ContentPaneResizeMixin, string, html, nlsLoading,
                array, declare, Deferred, dom, domAttr, xhr, i18n, when) {

                // module:
                //		dijit/layout/ContentPane


                return declare("dijit.layout.ContentPane", [_Widget, _Container, _ContentPaneResizeMixin], {
                    // summary:
                    //		A widget containing an HTML fragment, specified inline
                    //		or by uri.  Fragment may include widgets.
                    //
                    // description:
                    //		This widget embeds a document fragment in the page, specified
                    //		either by uri, javascript generated markup or DOM reference.
                    //		Any widgets within this content are instantiated and managed,
                    //		but laid out according to the HTML structure.  Unlike IFRAME,
                    //		ContentPane embeds a document fragment as would be found
                    //		inside the BODY tag of a full HTML document.  It should not
                    //		contain the HTML, HEAD, or BODY tags.
                    //		For more advanced functionality with scripts and
                    //		stylesheets, see dojox/layout/ContentPane.  This widget may be
                    //		used stand alone or as a base class for other widgets.
                    //		ContentPane is useful as a child of other layout containers
                    //		such as BorderContainer or TabContainer, but note that those
                    //		widgets can contain any widget as a child.
                    //
                    // example:
                    //		Some quick samples:
                    //		To change the innerHTML:
                    // |		cp.set('content', '<b>new content</b>')`
                    //		Or you can send it a NodeList:
                    // |		cp.set('content', dojo.query('div [class=selected]', userSelection))
                    //		To do an ajax update:
                    // |		cp.set('href', url)

                    // href: String
                    //		The href of the content that displays now.
                    //		Set this at construction if you want to load data externally when the
                    //		pane is shown.  (Set preload=true to load it immediately.)
                    //		Changing href after creation doesn't have any effect; Use set('href', ...);
                    href: "",

                    // content: String|DomNode|NodeList|dijit/_Widget
                    //		The innerHTML of the ContentPane.
                    //		Note that the initialization parameter / argument to set("content", ...)
                    //		can be a String, DomNode, Nodelist, or _Widget.
                    content: "",

                    // extractContent: Boolean
                    //		Extract visible content from inside of `<body> .... </body>`.
                    //		I.e., strip `<html>` and `<head>` (and it's contents) from the href
                    extractContent: false,

                    // parseOnLoad: Boolean
                    //		Parse content and create the widgets, if any.
                    parseOnLoad: true,

                    // parserScope: String
                    //		Flag passed to parser.  Root for attribute names to search for.   If scopeName is dojo,
                    //		will search for data-dojo-type (or dojoType).  For backwards compatibility
                    //		reasons defaults to dojo._scopeName (which is "dojo" except when
                    //		multi-version support is used, when it will be something like dojo16, dojo20, etc.)
                    parserScope: kernel._scopeName,

                    // preventCache: Boolean
                    //		Prevent caching of data from href's by appending a timestamp to the href.
                    preventCache: false,

                    // preload: Boolean
                    //		Force load of data on initialization even if pane is hidden.
                    preload: false,

                    // refreshOnShow: Boolean
                    //		Refresh (re-download) content when pane goes from hidden to shown
                    refreshOnShow: false,

                    // loadingMessage: String
                    //		Message that shows while downloading
                    loadingMessage: "<span class='dijitContentPaneLoading'><span class='dijitInline dijitIconLoading'></span>${loadingState}</span>",

                    // errorMessage: String
                    //		Message that shows if an error occurs
                    errorMessage: "<span class='dijitContentPaneError'><span class='dijitInline dijitIconError'></span>${errorState}</span>",

                    // isLoaded: [readonly] Boolean
                    //		True if the ContentPane has data in it, either specified
                    //		during initialization (via href or inline content), or set
                    //		via set('content', ...) / set('href', ...)
                    //
                    //		False if it doesn't have any content, or if ContentPane is
                    //		still in the process of downloading href.
                    isLoaded: false,

                    baseClass: "dijitContentPane",

                    /*======
                    // ioMethod: dojo/_base/xhr.get|dojo._base/xhr.post
                    //		Function that should grab the content specified via href.
                    ioMethod: dojo.xhrGet,
                    ======*/

                    // ioArgs: Object
                    //		Parameters to pass to xhrGet() request, for example:
                    // |	<div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="href: './bar', ioArgs: {timeout: 500}">
                    ioArgs: {},

                    // onLoadDeferred: [readonly] dojo.Deferred
                    //		This is the `dojo.Deferred` returned by set('href', ...) and refresh().
                    //		Calling onLoadDeferred.then() registers your
                    //		callback to be called only once, when the prior set('href', ...) call or
                    //		the initial href parameter to the constructor finishes loading.
                    //
                    //		This is different than an onLoad() handler which gets called any time any href
                    //		or content is loaded.
                    onLoadDeferred: null,

                    // Cancel _WidgetBase's _setTitleAttr because we don't want the title attribute (used to specify
                    // tab labels) to be copied to ContentPane.domNode... otherwise a tooltip shows up over the
                    // entire pane.
                    _setTitleAttr: null,

                    // Flag to parser that I'll parse my contents, so it shouldn't.
                    stopParser: true,

                    // template: [private] Boolean
                    //		Flag from the parser that this ContentPane is inside a template
                    //		so the contents are pre-parsed.
                    // TODO: this declaration can be commented out in 2.0
                    template: false,

                    create: function(params, srcNodeRef) {
                        // Convert a srcNodeRef argument into a content parameter, so that the original contents are
                        // processed in the same way as contents set via set("content", ...), calling the parser etc.
                        // Avoid modifying original params object since that breaks NodeList instantiation, see #11906.
                        if ((!params || !params.template) && srcNodeRef && !("href" in params) && !("content" in params)) {
                            srcNodeRef = dom.byId(srcNodeRef);
                            var df = srcNodeRef.ownerDocument.createDocumentFragment();
                            while (srcNodeRef.firstChild) {
                                df.appendChild(srcNodeRef.firstChild);
                            }
                            params = lang.delegate(params, {
                                content: df
                            });
                        }
                        this.inherited(arguments, [params, srcNodeRef]);
                    },

                    postMixInProperties: function() {
                        this.inherited(arguments);
                        var messages = i18n.getLocalization("dijit", "loading", this.lang);
                        this.loadingMessage = string.substitute(this.loadingMessage, messages);
                        this.errorMessage = string.substitute(this.errorMessage, messages);
                    },

                    buildRendering: function() {
                        this.inherited(arguments);

                        // Since we have no template we need to set this.containerNode ourselves, to make getChildren() work.
                        // For subclasses of ContentPane that do have a template, does nothing.
                        if (!this.containerNode) {
                            this.containerNode = this.domNode;
                        }

                        // remove the title attribute so it doesn't show up when hovering
                        // over a node  (TODO: remove in 2.0, no longer needed after #11490)
                        this.domNode.title = "";

                        if (!domAttr.get(this.domNode, "role")) {
                            this.domNode.setAttribute("role", "group");
                        }
                    },

                    startup: function() {
                        // summary:
                        //		Call startup() on all children including non _Widget ones like dojo/dnd/Source objects

                        // This starts all the widgets
                        this.inherited(arguments);

                        // And this catches stuff like dojo/dnd/Source
                        if (this._contentSetter) {
                            array.forEach(this._contentSetter.parseResults, function(obj) {
                                if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                    obj.startup();
                                    obj._started = true;
                                }
                            }, this);
                        }
                    },

                    _startChildren: function() {
                        // summary:
                        //		Called when content is loaded.   Calls startup on each child widget.   Similar to ContentPane.startup()
                        //		itself, but avoids marking the ContentPane itself as "restarted" (see #15581).

                        // This starts all the widgets
                        array.forEach(this.getChildren(), function(obj) {
                            if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                obj.startup();
                                obj._started = true;
                            }
                        });

                        // And this catches stuff like dojo/dnd/Source
                        if (this._contentSetter) {
                            array.forEach(this._contentSetter.parseResults, function(obj) {
                                if (!obj._started && !obj._destroyed && lang.isFunction(obj.startup)) {
                                    obj.startup();
                                    obj._started = true;
                                }
                            }, this);
                        }
                    },

                    setHref: function( /*String|Uri*/ href) {
                        // summary:
                        //		Deprecated.   Use set('href', ...) instead.
                        kernel.deprecated("dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.", "", "2.0");
                        return this.set("href", href);
                    },
                    _setHrefAttr: function( /*String|Uri*/ href) {
                        // summary:
                        //		Hook so set("href", ...) works.
                        // description:
                        //		Reset the (external defined) content of this pane and replace with new url
                        //		Note: It delays the download until widget is shown if preload is false.
                        // href:
                        //		url to the page you want to get, must be within the same domain as your mainpage

                        // Cancel any in-flight requests (a set('href', ...) will cancel any in-flight set('href', ...))
                        this.cancel();

                        this.onLoadDeferred = new Deferred(lang.hitch(this, "cancel"));
                        this.onLoadDeferred.then(lang.hitch(this, "onLoad"));

                        this._set("href", href);

                        // _setHrefAttr() is called during creation and by the user, after creation.
                        // Assuming preload == false, only in the second case do we actually load the URL;
                        // otherwise it's done in startup(), and only if this widget is shown.
                        if (this.preload || (this._created && this._isShown())) {
                            this._load();
                        } else {
                            // Set flag to indicate that href needs to be loaded the next time the
                            // ContentPane is made visible
                            this._hrefChanged = true;
                        }

                        return this.onLoadDeferred; // Deferred
                    },

                    setContent: function( /*String|DomNode|Nodelist*/ data) {
                        // summary:
                        //		Deprecated.   Use set('content', ...) instead.
                        kernel.deprecated("dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.", "", "2.0");
                        this.set("content", data);
                    },
                    _setContentAttr: function( /*String|DomNode|Nodelist*/ data) {
                        // summary:
                        //		Hook to make set("content", ...) work.
                        //		Replaces old content with data content, include style classes from old content
                        // data:
                        //		the new Content may be String, DomNode or NodeList
                        //
                        //		if data is a NodeList (or an array of nodes) nodes are copied
                        //		so you can import nodes from another document implicitly

                        // clear href so we can't run refresh and clear content
                        // refresh should only work if we downloaded the content
                        this._set("href", "");

                        // Cancel any in-flight requests (a set('content', ...) will cancel any in-flight set('href', ...))
                        this.cancel();

                        // Even though user is just setting content directly, still need to define an onLoadDeferred
                        // because the _onLoadHandler() handler is still getting called from setContent()
                        this.onLoadDeferred = new Deferred(lang.hitch(this, "cancel"));
                        if (this._created) {
                            // For back-compat reasons, call onLoad() for set('content', ...)
                            // calls but not for content specified in srcNodeRef (ie: <div data-dojo-type=ContentPane>...</div>)
                            // or as initialization parameter (ie: new ContentPane({content: ...})
                            this.onLoadDeferred.then(lang.hitch(this, "onLoad"));
                        }

                        this._setContent(data || "");

                        this._isDownloaded = false; // mark that content is from a set('content') not a set('href')

                        return this.onLoadDeferred; // Deferred
                    },
                    _getContentAttr: function() {
                        // summary:
                        //		Hook to make get("content") work
                        return this.containerNode.innerHTML;
                    },

                    cancel: function() {
                        // summary:
                        //		Cancels an in-flight download of content
                        if (this._xhrDfd && (this._xhrDfd.fired == -1)) {
                            this._xhrDfd.cancel();
                        }
                        delete this._xhrDfd; // garbage collect

                        this.onLoadDeferred = null;
                    },

                    destroy: function() {
                        this.cancel();
                        this.inherited(arguments);
                    },

                    destroyRecursive: function( /*Boolean*/ preserveDom) {
                        // summary:
                        //		Destroy the ContentPane and its contents

                        // if we have multiple controllers destroying us, bail after the first
                        if (this._beingDestroyed) {
                            return;
                        }
                        this.inherited(arguments);
                    },

                    _onShow: function() {
                        // summary:
                        //		Called when the ContentPane is made visible
                        // description:
                        //		For a plain ContentPane, this is called on initialization, from startup().
                        //		If the ContentPane is a hidden pane of a TabContainer etc., then it's
                        //		called whenever the pane is made visible.
                        //
                        //		Does necessary processing, including href download and layout/resize of
                        //		child widget(s)

                        this.inherited(arguments);

                        if (this.href) {
                            if (!this._xhrDfd && // if there's an href that isn't already being loaded
                                (!this.isLoaded || this._hrefChanged || this.refreshOnShow)
                            ) {
                                return this.refresh(); // If child has an href, promise that fires when the load is complete
                            }
                        }
                    },

                    refresh: function() {
                        // summary:
                        //		[Re]download contents of href and display
                        // description:
                        //		1. cancels any currently in-flight requests
                        //		2. posts "loading..." message
                        //		3. sends XHR to download new data

                        // Cancel possible prior in-flight request
                        this.cancel();

                        this.onLoadDeferred = new Deferred(lang.hitch(this, "cancel"));
                        this.onLoadDeferred.then(lang.hitch(this, "onLoad"));
                        this._load();
                        return this.onLoadDeferred; // If child has an href, promise that fires when refresh is complete
                    },

                    _load: function() {
                        // summary:
                        //		Load/reload the href specified in this.href

                        // display loading message
                        this._setContent(this.onDownloadStart(), true);

                        var self = this;
                        var getArgs = {
                            preventCache: (this.preventCache || this.refreshOnShow),
                            url: this.href,
                            handleAs: "text"
                        };
                        if (lang.isObject(this.ioArgs)) {
                            lang.mixin(getArgs, this.ioArgs);
                        }

                        var hand = (this._xhrDfd = (this.ioMethod || xhr.get)(getArgs)),
                            returnedHtml;

                        hand.then(
                            function(html) {
                                returnedHtml = html;
                                try {
                                    self._isDownloaded = true;
                                    return self._setContent(html, false);
                                } catch (err) {
                                    self._onError('Content', err); // onContentError
                                }
                            },
                            function(err) {
                                if (!hand.canceled) {
                                    // show error message in the pane
                                    self._onError('Download', err); // onDownloadError
                                }
                                delete self._xhrDfd;
                                return err;
                            }
                        ).then(function() {
                            self.onDownloadEnd();
                            delete self._xhrDfd;
                            return returnedHtml;
                        });

                        // Remove flag saying that a load is needed
                        delete this._hrefChanged;
                    },

                    _onLoadHandler: function(data) {
                        // summary:
                        //		This is called whenever new content is being loaded
                        this._set("isLoaded", true);
                        try {
                            this.onLoadDeferred.resolve(data);
                        } catch (e) {
                            console.error('Error ' + this.widgetId + ' running custom onLoad code: ' + e.message);
                        }
                    },

                    _onUnloadHandler: function() {
                        // summary:
                        //		This is called whenever the content is being unloaded
                        this._set("isLoaded", false);
                        try {
                            this.onUnload();
                        } catch (e) {
                            console.error('Error ' + this.widgetId + ' running custom onUnload code: ' + e.message);
                        }
                    },

                    destroyDescendants: function( /*Boolean*/ preserveDom) {
                        // summary:
                        //		Destroy all the widgets inside the ContentPane and empty containerNode

                        // Make sure we call onUnload (but only when the ContentPane has real content)
                        if (this.isLoaded) {
                            this._onUnloadHandler();
                        }

                        // Even if this.isLoaded == false there might still be a "Loading..." message
                        // to erase, so continue...

                        // For historical reasons we need to delete all widgets under this.containerNode,
                        // even ones that the user has created manually.
                        var setter = this._contentSetter;
                        array.forEach(this.getChildren(), function(widget) {
                            if (widget.destroyRecursive) {
                                // All widgets will hit this branch
                                widget.destroyRecursive(preserveDom);
                            } else if (widget.destroy) {
                                // Things like dojo/dnd/Source have destroy(), not destroyRecursive()
                                widget.destroy(preserveDom);
                            }
                            widget._destroyed = true;
                        });
                        if (setter) {
                            // Most of the widgets in setter.parseResults have already been destroyed, but
                            // things like Menu that have been moved to <body> haven't yet
                            array.forEach(setter.parseResults, function(widget) {
                                if (!widget._destroyed) {
                                    if (widget.destroyRecursive) {
                                        // All widgets will hit this branch
                                        widget.destroyRecursive(preserveDom);
                                    } else if (widget.destroy) {
                                        // Things like dojo/dnd/Source have destroy(), not destroyRecursive()
                                        widget.destroy(preserveDom);
                                    }
                                    widget._destroyed = true;
                                }
                            });
                            delete setter.parseResults;
                        }

                        // And then clear away all the DOM nodes
                        if (!preserveDom) {
                            html._emptyNode(this.containerNode);
                        }

                        // Delete any state information we have about current contents
                        delete this._singleChild;
                    },

                    _setContent: function( /*String|DocumentFragment*/ cont, /*Boolean*/ isFakeContent) {
                        // summary:
                        //		Insert the content into the container node
                        // returns:
                        //		Returns a Deferred promise that is resolved when the content is parsed.

                        // first get rid of child widgets
                        this.destroyDescendants();

                        // html.set will take care of the rest of the details
                        // we provide an override for the error handling to ensure the widget gets the errors
                        // configure the setter instance with only the relevant widget instance properties
                        // NOTE: unless we hook into attr, or provide property setters for each property,
                        // we need to re-configure the ContentSetter with each use
                        var setter = this._contentSetter;
                        if (!(setter && setter instanceof html._ContentSetter)) {
                            setter = this._contentSetter = new html._ContentSetter({
                                node: this.containerNode,
                                _onError: lang.hitch(this, this._onError),
                                onContentError: lang.hitch(this, function(e) {
                                    // fires if a domfault occurs when we are appending this.errorMessage
                                    // like for instance if domNode is a UL and we try append a DIV
                                    var errMess = this.onContentError(e);
                                    try {
                                        this.containerNode.innerHTML = errMess;
                                    } catch (e) {
                                        console.error('Fatal ' + this.id + ' could not change content due to ' + e.message, e);
                                    }
                                })
                                /*,
                                				_onError */
                            });
                        }

                        var setterParams = lang.mixin({
                            cleanContent: this.cleanContent,
                            extractContent: this.extractContent,
                            parseContent: !cont.domNode && this.parseOnLoad,
                            parserScope: this.parserScope,
                            startup: false,
                            dir: this.dir,
                            lang: this.lang,
                            textDir: this.textDir
                        }, this._contentSetterParams || {});

                        var p = setter.set((lang.isObject(cont) && cont.domNode) ? cont.domNode : cont, setterParams);

                        // dojox/layout/html/_base::_ContentSetter.set() returns a Promise that indicates when everything is completed.
                        // dojo/html::_ContentSetter.set() currently returns the DOMNode, but that will be changed for 2.0.
                        // So, if set() returns a promise then use it, otherwise fallback to waiting on setter.parseDeferred
                        var self = this;
                        return when(p && p.then ? p : setter.parseDeferred, function() {
                            // setter params must be pulled afresh from the ContentPane each time
                            delete self._contentSetterParams;

                            if (!isFakeContent) {
                                if (self._started) {
                                    // Startup each top level child widget (and they will start their children, recursively)
                                    self._startChildren();

                                    // Call resize() on each of my child layout widgets,
                                    // or resize() on my single child layout widget...
                                    // either now (if I'm currently visible) or when I become visible
                                    self._scheduleLayout();
                                }
                                self._onLoadHandler(cont);
                            }
                        });
                    },

                    _onError: function(type, err, consoleText) {
                        this.onLoadDeferred.reject(err);

                        // shows user the string that is returned by on[type]Error
                        // override on[type]Error and return your own string to customize
                        var errText = this['on' + type + 'Error'].call(this, err);
                        if (consoleText) {
                            console.error(consoleText, err);
                        } else if (errText) { // a empty string won't change current content
                            this._setContent(errText, true);
                        }
                    },

                    // EVENT's, should be overide-able
                    onLoad: function( /*===== data =====*/ ) {
                        // summary:
                        //		Event hook, is called after everything is loaded and widgetified
                        // tags:
                        //		callback
                    },

                    onUnload: function() {
                        // summary:
                        //		Event hook, is called before old content is cleared
                        // tags:
                        //		callback
                    },

                    onDownloadStart: function() {
                        // summary:
                        //		Called before download starts.
                        // description:
                        //		The string returned by this function will be the html
                        //		that tells the user we are loading something.
                        //		Override with your own function if you want to change text.
                        // tags:
                        //		extension
                        return this.loadingMessage;
                    },

                    onContentError: function( /*Error*/ /*===== error =====*/ ) {
                        // summary:
                        //		Called on DOM faults, require faults etc. in content.
                        //
                        //		In order to display an error message in the pane, return
                        //		the error message from this method, as an HTML string.
                        //
                        //		By default (if this method is not overriden), it returns
                        //		nothing, so the error message is just printed to the console.
                        // tags:
                        //		extension
                    },

                    onDownloadError: function( /*Error*/ /*===== error =====*/ ) {
                        // summary:
                        //		Called when download error occurs.
                        //
                        //		In order to display an error message in the pane, return
                        //		the error message from this method, as an HTML string.
                        //
                        //		Default behavior (if this method is not overriden) is to display
                        //		the error message inside the pane.
                        // tags:
                        //		extension
                        return this.errorMessage;
                    },

                    onDownloadEnd: function() {
                        // summary:
                        //		Called when download is finished.
                        // tags:
                        //		callback
                    }
                });

            });

        },
        'dojo/_base/fx': function() {
            define(["./kernel", "./config", /*===== "./declare", =====*/ "./lang", "../Evented", "./Color", "./connect", "./sniff", "../dom", "../dom-style"],
                function(dojo, config, /*===== declare, =====*/ lang, Evented, Color, connect, has, dom, style) {
                    // module:
                    //		dojo/_base/fx
                    // notes:
                    //		Animation loosely package based on Dan Pupius' work, contributed under CLA; see
                    //		http://pupius.co.uk/js/Toolkit.Drawing.js

                    var _mixin = lang.mixin;

                    // Module export
                    var basefx = {
                        // summary:
                        //		This module defines the base dojo/_base/fx implementation.
                    };

                    var _Line = basefx._Line = function( /*int*/ start, /*int*/ end) {
                        // summary:
                        //		Object used to generate values from a start value to an end value
                        // start: int
                        //		Beginning value for range
                        // end: int
                        //		Ending value for range
                        this.start = start;
                        this.end = end;
                    };

                    _Line.prototype.getValue = function( /*float*/ n) {
                        // summary:
                        //		Returns the point on the line
                        // n:
                        //		a floating point number greater than 0 and less than 1
                        return ((this.end - this.start) * n) + this.start; // Decimal
                    };

                    var Animation = basefx.Animation = function(args) {
                        // summary:
                        //		A generic animation class that fires callbacks into its handlers
                        //		object at various states.
                        // description:
                        //		A generic animation class that fires callbacks into its handlers
                        //		object at various states. Nearly all dojo animation functions
                        //		return an instance of this method, usually without calling the
                        //		.play() method beforehand. Therefore, you will likely need to
                        //		call .play() on instances of `Animation` when one is
                        //		returned.
                        // args: Object
                        //		The 'magic argument', mixing all the properties into this
                        //		animation instance.

                        _mixin(this, args);
                        if (lang.isArray(this.curve)) {
                            this.curve = new _Line(this.curve[0], this.curve[1]);
                        }

                    };
                    Animation.prototype = new Evented();

                    lang.extend(Animation, {
                        // duration: Integer
                        //		The time in milliseconds the animation will take to run
                        duration: 350,

                        /*=====
                        	// curve: _Line|Array
                        	//		A two element array of start and end values, or a `_Line` instance to be
                        	//		used in the Animation.
                        	curve: null,

                        	// easing: Function?
                        	//		A Function to adjust the acceleration (or deceleration) of the progress
                        	//		across a _Line
                        	easing: null,
                        =====*/

                        // repeat: Integer?
                        //		The number of times to loop the animation
                        repeat: 0,

                        // rate: Integer?
                        //		the time in milliseconds to wait before advancing to next frame
                        //		(used as a fps timer: 1000/rate = fps)
                        rate: 20 /* 50 fps */ ,

                        /*=====
                        	// delay: Integer?
                        	//		The time in milliseconds to wait before starting animation after it
                        	//		has been .play()'ed
                        	delay: null,

                        	// beforeBegin: Event?
                        	//		Synthetic event fired before a Animation begins playing (synchronous)
                        	beforeBegin: null,

                        	// onBegin: Event?
                        	//		Synthetic event fired as a Animation begins playing (useful?)
                        	onBegin: null,

                        	// onAnimate: Event?
                        	//		Synthetic event fired at each interval of the Animation
                        	onAnimate: null,

                        	// onEnd: Event?
                        	//		Synthetic event fired after the final frame of the Animation
                        	onEnd: null,

                        	// onPlay: Event?
                        	//		Synthetic event fired any time the Animation is play()'ed
                        	onPlay: null,

                        	// onPause: Event?
                        	//		Synthetic event fired when the Animation is paused
                        	onPause: null,

                        	// onStop: Event
                        	//		Synthetic event fires when the Animation is stopped
                        	onStop: null,

                        =====*/

                        _percent: 0,
                        _startRepeatCount: 0,

                        _getStep: function() {
                            var _p = this._percent,
                                _e = this.easing;
                            return _e ? _e(_p) : _p;
                        },
                        _fire: function( /*Event*/ evt, /*Array?*/ args) {
                            // summary:
                            //		Convenience function.  Fire event "evt" and pass it the
                            //		arguments specified in "args".
                            // description:
                            //		Convenience function.  Fire event "evt" and pass it the
                            //		arguments specified in "args".
                            //		Fires the callback in the scope of this Animation
                            //		instance.
                            // evt:
                            //		The event to fire.
                            // args:
                            //		The arguments to pass to the event.
                            var a = args || [];
                            if (this[evt]) {
                                if (config.debugAtAllCosts) {
                                    this[evt].apply(this, a);
                                } else {
                                    try {
                                        this[evt].apply(this, a);
                                    } catch (e) {
                                        // squelch and log because we shouldn't allow exceptions in
                                        // synthetic event handlers to cause the internal timer to run
                                        // amuck, potentially pegging the CPU. I'm not a fan of this
                                        // squelch, but hopefully logging will make it clear what's
                                        // going on
                                        console.error("exception in animation handler for:", evt);
                                        console.error(e);
                                    }
                                }
                            }
                            return this; // Animation
                        },

                        play: function( /*int?*/ delay, /*Boolean?*/ gotoStart) {
                            // summary:
                            //		Start the animation.
                            // delay:
                            //		How many milliseconds to delay before starting.
                            // gotoStart:
                            //		If true, starts the animation from the beginning; otherwise,
                            //		starts it from its current position.
                            // returns: Animation
                            //		The instance to allow chaining.

                            var _t = this;
                            if (_t._delayTimer) {
                                _t._clearTimer();
                            }
                            if (gotoStart) {
                                _t._stopTimer();
                                _t._active = _t._paused = false;
                                _t._percent = 0;
                            } else if (_t._active && !_t._paused) {
                                return _t;
                            }

                            _t._fire("beforeBegin", [_t.node]);

                            var de = delay || _t.delay,
                                _p = lang.hitch(_t, "_play", gotoStart);

                            if (de > 0) {
                                _t._delayTimer = setTimeout(_p, de);
                                return _t;
                            }
                            _p();
                            return _t; // Animation
                        },

                        _play: function(gotoStart) {
                            var _t = this;
                            if (_t._delayTimer) {
                                _t._clearTimer();
                            }
                            _t._startTime = new Date().valueOf();
                            if (_t._paused) {
                                _t._startTime -= _t.duration * _t._percent;
                            }

                            _t._active = true;
                            _t._paused = false;
                            var value = _t.curve.getValue(_t._getStep());
                            if (!_t._percent) {
                                if (!_t._startRepeatCount) {
                                    _t._startRepeatCount = _t.repeat;
                                }
                                _t._fire("onBegin", [value]);
                            }

                            _t._fire("onPlay", [value]);

                            _t._cycle();
                            return _t; // Animation
                        },

                        pause: function() {
                            // summary:
                            //		Pauses a running animation.
                            var _t = this;
                            if (_t._delayTimer) {
                                _t._clearTimer();
                            }
                            _t._stopTimer();
                            if (!_t._active) {
                                return _t; /*Animation*/
                            }
                            _t._paused = true;
                            _t._fire("onPause", [_t.curve.getValue(_t._getStep())]);
                            return _t; // Animation
                        },

                        gotoPercent: function( /*Decimal*/ percent, /*Boolean?*/ andPlay) {
                            // summary:
                            //		Sets the progress of the animation.
                            // percent:
                            //		A percentage in decimal notation (between and including 0.0 and 1.0).
                            // andPlay:
                            //		If true, play the animation after setting the progress.
                            var _t = this;
                            _t._stopTimer();
                            _t._active = _t._paused = true;
                            _t._percent = percent;
                            if (andPlay) {
                                _t.play();
                            }
                            return _t; // Animation
                        },

                        stop: function( /*boolean?*/ gotoEnd) {
                            // summary:
                            //		Stops a running animation.
                            // gotoEnd:
                            //		If true, the animation will end.
                            var _t = this;
                            if (_t._delayTimer) {
                                _t._clearTimer();
                            }
                            if (!_t._timer) {
                                return _t; /* Animation */
                            }
                            _t._stopTimer();
                            if (gotoEnd) {
                                _t._percent = 1;
                            }
                            _t._fire("onStop", [_t.curve.getValue(_t._getStep())]);
                            _t._active = _t._paused = false;
                            return _t; // Animation
                        },

                        status: function() {
                            // summary:
                            //		Returns a string token representation of the status of
                            //		the animation, one of: "paused", "playing", "stopped"
                            if (this._active) {
                                return this._paused ? "paused" : "playing"; // String
                            }
                            return "stopped"; // String
                        },

                        _cycle: function() {
                            var _t = this;
                            if (_t._active) {
                                var curr = new Date().valueOf();
                                // Allow durations of 0 (instant) by setting step to 1 - see #13798
                                var step = _t.duration === 0 ? 1 : (curr - _t._startTime) / (_t.duration);

                                if (step >= 1) {
                                    step = 1;
                                }
                                _t._percent = step;

                                // Perform easing
                                if (_t.easing) {
                                    step = _t.easing(step);
                                }

                                _t._fire("onAnimate", [_t.curve.getValue(step)]);

                                if (_t._percent < 1) {
                                    _t._startTimer();
                                } else {
                                    _t._active = false;

                                    if (_t.repeat > 0) {
                                        _t.repeat--;
                                        _t.play(null, true);
                                    } else if (_t.repeat == -1) {
                                        _t.play(null, true);
                                    } else {
                                        if (_t._startRepeatCount) {
                                            _t.repeat = _t._startRepeatCount;
                                            _t._startRepeatCount = 0;
                                        }
                                    }
                                    _t._percent = 0;
                                    _t._fire("onEnd", [_t.node]);
                                    !_t.repeat && _t._stopTimer();
                                }
                            }
                            return _t; // Animation
                        },

                        _clearTimer: function() {
                            // summary:
                            //		Clear the play delay timer
                            clearTimeout(this._delayTimer);
                            delete this._delayTimer;
                        }

                    });

                    // the local timer, stubbed into all Animation instances
                    var ctr = 0,
                        timer = null,
                        runner = {
                            run: function() {}
                        };

                    lang.extend(Animation, {

                        _startTimer: function() {
                            if (!this._timer) {
                                this._timer = connect.connect(runner, "run", this, "_cycle");
                                ctr++;
                            }
                            if (!timer) {
                                timer = setInterval(lang.hitch(runner, "run"), this.rate);
                            }
                        },

                        _stopTimer: function() {
                            if (this._timer) {
                                connect.disconnect(this._timer);
                                this._timer = null;
                                ctr--;
                            }
                            if (ctr <= 0) {
                                clearInterval(timer);
                                timer = null;
                                ctr = 0;
                            }
                        }

                    });

                    var _makeFadeable =
                        has("ie") ? function(node) {
                            // only set the zoom if the "tickle" value would be the same as the
                            // default
                            var ns = node.style;
                            // don't set the width to auto if it didn't already cascade that way.
                            // We don't want to f anyones designs
                            if (!ns.width.length && style.get(node, "width") == "auto") {
                                ns.width = "auto";
                            }
                        } :
                        function() {};

                    basefx._fade = function( /*Object*/ args) {
                        // summary:
                        //		Returns an animation that will fade the node defined by
                        //		args.node from the start to end values passed (args.start
                        //		args.end) (end is mandatory, start is optional)

                        args.node = dom.byId(args.node);
                        var fArgs = _mixin({
                                properties: {}
                            }, args),
                            props = (fArgs.properties.opacity = {});

                        props.start = !("start" in fArgs) ?
                            function() {
                                return +style.get(fArgs.node, "opacity") || 0;
                            } : fArgs.start;
                        props.end = fArgs.end;

                        var anim = basefx.animateProperty(fArgs);
                        connect.connect(anim, "beforeBegin", lang.partial(_makeFadeable, fArgs.node));

                        return anim; // Animation
                    };

                    /*=====
                    var __FadeArgs = declare(null, {
                    	// node: DOMNode|String
                    	//		The node referenced in the animation
                    	// duration: Integer?
                    	//		Duration of the animation in milliseconds.
                    	// easing: Function?
                    	//		An easing function.
                    });
                    =====*/

                    basefx.fadeIn = function( /*__FadeArgs*/ args) {
                        // summary:
                        //		Returns an animation that will fade node defined in 'args' from
                        //		its current opacity to fully opaque.
                        return basefx._fade(_mixin({
                            end: 1
                        }, args)); // Animation
                    };

                    basefx.fadeOut = function( /*__FadeArgs*/ args) {
                        // summary:
                        //		Returns an animation that will fade node defined in 'args'
                        //		from its current opacity to fully transparent.
                        return basefx._fade(_mixin({
                            end: 0
                        }, args)); // Animation
                    };

                    basefx._defaultEasing = function( /*Decimal?*/ n) {
                        // summary:
                        //		The default easing function for Animation(s)
                        return 0.5 + ((Math.sin((n + 1.5) * Math.PI)) / 2); // Decimal
                    };

                    var PropLine = function(properties) {
                        // PropLine is an internal class which is used to model the values of
                        // an a group of CSS properties across an animation lifecycle. In
                        // particular, the "getValue" function handles getting interpolated
                        // values between start and end for a particular CSS value.
                        this._properties = properties;
                        for (var p in properties) {
                            var prop = properties[p];
                            if (prop.start instanceof Color) {
                                // create a reusable temp color object to keep intermediate results
                                prop.tempColor = new Color();
                            }
                        }
                    };

                    PropLine.prototype.getValue = function(r) {
                        var ret = {};
                        for (var p in this._properties) {
                            var prop = this._properties[p],
                                start = prop.start;
                            if (start instanceof Color) {
                                ret[p] = Color.blendColors(start, prop.end, r, prop.tempColor).toCss();
                            } else if (!lang.isArray(start)) {
                                ret[p] = ((prop.end - start) * r) + start + (p != "opacity" ? prop.units || "px" : 0);
                            }
                        }
                        return ret;
                    };

                    /*=====
                    var __AnimArgs = declare(__FadeArgs, {
                    	// properties: Object?
                    	//		A hash map of style properties to Objects describing the transition,
                    	//		such as the properties of _Line with an additional 'units' property
                    	properties: {}

                    	//TODOC: add event callbacks
                    });
                    =====*/

                    basefx.animateProperty = function( /*__AnimArgs*/ args) {
                        // summary:
                        //		Returns an animation that will transition the properties of
                        //		node defined in `args` depending how they are defined in
                        //		`args.properties`
                        //
                        // description:
                        //		Foundation of most `dojo/_base/fx`
                        //		animations. It takes an object of "properties" corresponding to
                        //		style properties, and animates them in parallel over a set
                        //		duration.
                        //
                        // example:
                        //		A simple animation that changes the width of the specified node.
                        //	|	basefx.animateProperty({
                        //	|		node: "nodeId",
                        //	|		properties: { width: 400 },
                        //	|	}).play();
                        //		Dojo figures out the start value for the width and converts the
                        //		integer specified for the width to the more expressive but
                        //		verbose form `{ width: { end: '400', units: 'px' } }` which you
                        //		can also specify directly. Defaults to 'px' if omitted.
                        //
                        // example:
                        //		Animate width, height, and padding over 2 seconds... the
                        //		pedantic way:
                        //	|	basefx.animateProperty({ node: node, duration:2000,
                        //	|		properties: {
                        //	|			width: { start: '200', end: '400', units:"px" },
                        //	|			height: { start:'200', end: '400', units:"px" },
                        //	|			paddingTop: { start:'5', end:'50', units:"px" }
                        //	|		}
                        //	|	}).play();
                        //		Note 'paddingTop' is used over 'padding-top'. Multi-name CSS properties
                        //		are written using "mixed case", as the hyphen is illegal as an object key.
                        //
                        // example:
                        //		Plug in a different easing function and register a callback for
                        //		when the animation ends. Easing functions accept values between
                        //		zero and one and return a value on that basis. In this case, an
                        //		exponential-in curve.
                        //	|	basefx.animateProperty({
                        //	|		node: "nodeId",
                        //	|		// dojo figures out the start value
                        //	|		properties: { width: { end: 400 } },
                        //	|		easing: function(n){
                        //	|			return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));
                        //	|		},
                        //	|		onEnd: function(node){
                        //	|			// called when the animation finishes. The animation
                        //	|			// target is passed to this function
                        //	|		}
                        //	|	}).play(500); // delay playing half a second
                        //
                        // example:
                        //		Like all `Animation`s, animateProperty returns a handle to the
                        //		Animation instance, which fires the events common to Dojo FX. Use `aspect.after`
                        //		to access these events outside of the Animation definition:
                        //	|	var anim = basefx.animateProperty({
                        //	|		node:"someId",
                        //	|		properties:{
                        //	|			width:400, height:500
                        //	|		}
                        //	|	});
                        //	|	aspect.after(anim, "onEnd", function(){
                        //	|		console.log("animation ended");
                        //	|	}, true);
                        //	|	// play the animation now:
                        //	|	anim.play();
                        //
                        // example:
                        //		Each property can be a function whose return value is substituted along.
                        //		Additionally, each measurement (eg: start, end) can be a function. The node
                        //		reference is passed directly to callbacks.
                        //	|	basefx.animateProperty({
                        //	|		node:"mine",
                        //	|		properties:{
                        //	|			height:function(node){
                        //	|				// shrink this node by 50%
                        //	|				return domGeom.position(node).h / 2
                        //	|			},
                        //	|			width:{
                        //	|				start:function(node){ return 100; },
                        //	|				end:function(node){ return 200; }
                        //	|			}
                        //	|		}
                        //	|	}).play();
                        //

                        var n = args.node = dom.byId(args.node);
                        if (!args.easing) {
                            args.easing = dojo._defaultEasing;
                        }

                        var anim = new Animation(args);
                        connect.connect(anim, "beforeBegin", anim, function() {
                            var pm = {};
                            for (var p in this.properties) {
                                // Make shallow copy of properties into pm because we overwrite
                                // some values below. In particular if start/end are functions
                                // we don't want to overwrite them or the functions won't be
                                // called if the animation is reused.
                                if (p == "width" || p == "height") {
                                    this.node.display = "block";
                                }
                                var prop = this.properties[p];
                                if (lang.isFunction(prop)) {
                                    prop = prop(n);
                                }
                                prop = pm[p] = _mixin({}, (lang.isObject(prop) ? prop : {
                                    end: prop
                                }));

                                if (lang.isFunction(prop.start)) {
                                    prop.start = prop.start(n);
                                }
                                if (lang.isFunction(prop.end)) {
                                    prop.end = prop.end(n);
                                }
                                var isColor = (p.toLowerCase().indexOf("color") >= 0);

                                function getStyle(node, p) {
                                    // domStyle.get(node, "height") can return "auto" or "" on IE; this is more reliable:
                                    var v = {
                                        height: node.offsetHeight,
                                        width: node.offsetWidth
                                    }[p];
                                    if (v !== undefined) {
                                        return v;
                                    }
                                    v = style.get(node, p);
                                    return (p == "opacity") ? +v : (isColor ? v : parseFloat(v));
                                }
                                if (!("end" in prop)) {
                                    prop.end = getStyle(n, p);
                                } else if (!("start" in prop)) {
                                    prop.start = getStyle(n, p);
                                }

                                if (isColor) {
                                    prop.start = new Color(prop.start);
                                    prop.end = new Color(prop.end);
                                } else {
                                    prop.start = (p == "opacity") ? +prop.start : parseFloat(prop.start);
                                }
                            }
                            this.curve = new PropLine(pm);
                        });
                        connect.connect(anim, "onAnimate", lang.hitch(style, "set", anim.node));
                        return anim; // Animation
                    };

                    basefx.anim = function( /*DOMNode|String*/ node,
                        /*Object*/
                        properties,
                        /*Integer?*/
                        duration,
                        /*Function?*/
                        easing,
                        /*Function?*/
                        onEnd,
                        /*Integer?*/
                        delay) {
                        // summary:
                        //		A simpler interface to `animateProperty()`, also returns
                        //		an instance of `Animation` but begins the animation
                        //		immediately, unlike nearly every other Dojo animation API.
                        // description:
                        //		Simpler (but somewhat less powerful) version
                        //		of `animateProperty`.  It uses defaults for many basic properties
                        //		and allows for positional parameters to be used in place of the
                        //		packed "property bag" which is used for other Dojo animation
                        //		methods.
                        //
                        //		The `Animation` object returned will be already playing, so
                        //		calling play() on it again is (usually) a no-op.
                        // node:
                        //		a DOM node or the id of a node to animate CSS properties on
                        // duration:
                        //		The number of milliseconds over which the animation
                        //		should run. Defaults to the global animation default duration
                        //		(350ms).
                        // easing:
                        //		An easing function over which to calculate acceleration
                        //		and deceleration of the animation through its duration.
                        //		A default easing algorithm is provided, but you may
                        //		plug in any you wish. A large selection of easing algorithms
                        //		are available in `dojo/fx/easing`.
                        // onEnd:
                        //		A function to be called when the animation finishes
                        //		running.
                        // delay:
                        //		The number of milliseconds to delay beginning the
                        //		animation by. The default is 0.
                        // example:
                        //		Fade out a node
                        //	|	basefx.anim("id", { opacity: 0 });
                        // example:
                        //		Fade out a node over a full second
                        //	|	basefx.anim("id", { opacity: 0 }, 1000);
                        return basefx.animateProperty({ // Animation
                            node: node,
                            duration: duration || Animation.prototype.duration,
                            properties: properties,
                            easing: easing,
                            onEnd: onEnd
                        }).play(delay || 0);
                    };


                    if (1) {
                        _mixin(dojo, basefx);
                        // Alias to drop come 2.0:
                        dojo._Animation = Animation;
                    }

                    return basefx;
                });

        },
        'dojox/dtl/_base': function() {
            define("dojox/dtl/_base", [
                    "dojo/_base/kernel",
                    "dojo/_base/lang",
                    "dojox/string/tokenize",
                    "dojo/_base/json",
                    "dojo/dom",
                    "dojo/_base/xhr",
                    "dojox/string/Builder",
                    "dojo/_base/Deferred"
                ],
                function(kernel, lang, Tokenize, json, dom, xhr, StringBuilder, deferred) {

                    kernel.experimental("dojox.dtl");
                    var dd = lang.getObject("dojox.dtl", true);
                    dd._base = {};

                    dd.TOKEN_BLOCK = -1;
                    dd.TOKEN_VAR = -2;
                    dd.TOKEN_COMMENT = -3;
                    dd.TOKEN_TEXT = 3;

                    dd._Context = lang.extend(function(dict) {
                        // summary:
                        //		Pass one of these when rendering a template to tell the template what values to use.
                        if (dict) {
                            lang._mixin(this, dict);
                            if (dict.get) {
                                // Preserve passed getter and restore prototype get
                                this._getter = dict.get;
                                delete this.get;
                            }
                        }
                    }, {
                        push: function() {
                            var last = this;
                            var context = lang.delegate(this);
                            context.pop = function() {
                                return last;
                            }
                            return context;
                        },
                        pop: function() {
                            throw new Error("pop() called on empty Context");
                        },
                        get: function(key, otherwise) {
                            var n = this._normalize;

                            if (this._getter) {
                                var got = this._getter(key);
                                if (got !== undefined) {
                                    return n(got);
                                }
                            }

                            if (this[key] !== undefined) {
                                return n(this[key]);
                            }

                            return otherwise;
                        },
                        _normalize: function(value) {
                            if (value instanceof Date) {
                                value.year = value.getFullYear();
                                value.month = value.getMonth() + 1;
                                value.day = value.getDate();
                                value.date = value.year + "-" + ("0" + value.month).slice(-2) + "-" + ("0" + value.day).slice(-2);
                                value.hour = value.getHours();
                                value.minute = value.getMinutes();
                                value.second = value.getSeconds();
                                value.microsecond = value.getMilliseconds();
                            }
                            return value;
                        },
                        update: function(dict) {
                            var context = this.push();
                            if (dict) {
                                lang._mixin(this, dict);
                            }
                            return context;
                        }
                    });

                    var smart_split_re = /("(?:[^"\\]*(?:\\.[^"\\]*)*)"|'(?:[^'\\]*(?:\\.[^'\\]*)*)'|[^\s]+)/g;
                    var split_re = /\s+/g;
                    var split = function( /*String|RegExp?*/ splitter, /*Integer?*/ limit) {
                        splitter = splitter || split_re;
                        if (!(splitter instanceof RegExp)) {
                            splitter = new RegExp(splitter, "g");
                        }
                        if (!splitter.global) {
                            throw new Error("You must use a globally flagged RegExp with split " + splitter);
                        }
                        splitter.exec(""); // Reset the global

                        var part, parts = [],
                            lastIndex = 0,
                            i = 0;
                        while ((part = splitter.exec(this))) {
                            parts.push(this.slice(lastIndex, splitter.lastIndex - part[0].length));
                            lastIndex = splitter.lastIndex;
                            if (limit && (++i > limit - 1)) {
                                break;
                            }
                        }
                        parts.push(this.slice(lastIndex));
                        return parts;
                    };

                    dd.Token = function(token_type, contents) {
                        // tags:
                        //		private
                        this.token_type = token_type;
                        this.contents = new String(lang.trim(contents));
                        this.contents.split = split;
                        this.split = function() {
                            return String.prototype.split.apply(this.contents, arguments);
                        }
                    };
                    dd.Token.prototype.split_contents = function( /*Integer?*/ limit) {
                        var bit, bits = [],
                            i = 0;
                        limit = limit || 999;
                        while (i++ < limit && (bit = smart_split_re.exec(this.contents))) {
                            bit = bit[0];
                            if (bit.charAt(0) == '"' && bit.slice(-1) == '"') {
                                bits.push('"' + bit.slice(1, -1).replace('\\"', '"').replace('\\\\', '\\') + '"');
                            } else if (bit.charAt(0) == "'" && bit.slice(-1) == "'") {
                                bits.push("'" + bit.slice(1, -1).replace("\\'", "'").replace('\\\\', '\\') + "'");
                            } else {
                                bits.push(bit);
                            }
                        }
                        return bits;
                    };

                    var ddt = dd.text = {
                        _get: function(module, name, errorless) {
                            // summary:
                            //		Used to find both tags and filters
                            var params = dd.register.get(module, name.toLowerCase(), errorless);
                            if (!params) {
                                if (!errorless) {
                                    throw new Error("No tag found for " + name);
                                }
                                return null;
                            }

                            var fn = params[1];
                            var deps = params[2];

                            var parts;
                            if (fn.indexOf(":") != -1) {
                                parts = fn.split(":");
                                fn = parts.pop();
                            }

                            // FIXME: THIS DESIGN DOES NOT WORK WITH ASYNC LOADERS!
                            var mod = deps;
                            if (/\./.test(deps)) {
                                deps = deps.replace(/\./g, "/");
                            }
                            require([deps], function() {});

                            var parent = lang.getObject(mod);

                            return parent[fn || name] || parent[name + "_"] || parent[fn + "_"];
                        },
                        getTag: function(name, errorless) {
                            return ddt._get("tag", name, errorless);
                        },
                        getFilter: function(name, errorless) {
                            return ddt._get("filter", name, errorless);
                        },
                        getTemplate: function(file) {
                            return new dd.Template(ddt.getTemplateString(file));
                        },
                        getTemplateString: function(file) {
                            return xhr._getText(file.toString()) || "";
                        },
                        _resolveLazy: function(location, sync, json) {
                            if (sync) {
                                if (json) {
                                    return json.fromJson(xhr._getText(location)) || {};
                                } else {
                                    return dd.text.getTemplateString(location);
                                }
                            } else {
                                return xhr.get({
                                    handleAs: json ? "json" : "text",
                                    url: location
                                });
                            }
                        },
                        _resolveTemplateArg: function(arg, sync) {
                            if (ddt._isTemplate(arg)) {
                                if (!sync) {
                                    var d = new deferred();
                                    d.callback(arg);
                                    return d;
                                }
                                return arg;
                            }
                            return ddt._resolveLazy(arg, sync);
                        },
                        _isTemplate: function(arg) {
                            return (arg === undefined) || (typeof arg == "string" && (arg.match(/^\s*[<{]/) || arg.indexOf(" ") != -1));
                        },
                        _resolveContextArg: function(arg, sync) {
                            if (arg.constructor == Object) {
                                if (!sync) {
                                    var d = new deferred;
                                    d.callback(arg);
                                    return d;
                                }
                                return arg;
                            }
                            return ddt._resolveLazy(arg, sync, true);
                        },
                        _re: /(?:\{\{\s*(.+?)\s*\}\}|\{%\s*(load\s*)?(.+?)\s*%\})/g,
                        tokenize: function(str) {
                            return Tokenize(str, ddt._re, ddt._parseDelims);
                        },
                        _parseDelims: function(varr, load, tag) {
                            if (varr) {
                                return [dd.TOKEN_VAR, varr];
                            } else if (load) {
                                var parts = lang.trim(tag).split(/\s+/g);
                                for (var i = 0, part; part = parts[i]; i++) {
                                    if (/\./.test(part)) {
                                        part = part.replace(/\./g, "/");
                                    }
                                    require([part]);
                                }
                            } else {
                                return [dd.TOKEN_BLOCK, tag];
                            }
                        }
                    };

                    dd.Template = lang.extend(function( /*String|dojo._Url*/ template, /*Boolean*/ isString) {
                        // summary:
                        //		The base class for text-based templates.
                        // template: String|dojo/_base/url
                        //		The string or location of the string to
                        //		use as a template
                        // isString: Boolean
                        //		Indicates whether the template is a string or a url.
                        var str = isString ? template : ddt._resolveTemplateArg(template, true) || "";
                        var tokens = ddt.tokenize(str);
                        var parser = new dd._Parser(tokens);
                        this.nodelist = parser.parse();
                    }, {
                        update: function(node, context) {
                            // summary:
                            //		Updates this template according to the given context.
                            // node: DOMNode|String|dojo/NodeList
                            //		A node reference or set of nodes
                            // context: dojo/base/url|String|Object
                            //		The context object or location
                            return ddt._resolveContextArg(context).addCallback(this, function(contextObject) {
                                var content = this.render(new dd._Context(contextObject));
                                if (node.forEach) {
                                    node.forEach(function(item) {
                                        item.innerHTML = content;
                                    });
                                } else {
                                    dom.byId(node).innerHTML = content;
                                }
                                return this;
                            });
                        },
                        render: function(context, buffer) {
                            // summary:
                            //		Renders this template.
                            // context: Object
                            //		The runtime context.
                            // buffer: StringBuilder?
                            //		A string buffer.
                            buffer = buffer || this.getBuffer();
                            context = context || new dd._Context({});
                            return this.nodelist.render(context, buffer) + "";
                        },
                        getBuffer: function() {
                            return new StringBuilder();
                        }
                    });

                    var qfRe = /\{\{\s*(.+?)\s*\}\}/g;
                    dd.quickFilter = function(str) {
                        if (!str) {
                            return new dd._NodeList();
                        }

                        if (str.indexOf("{%") == -1) {
                            return new dd._QuickNodeList(Tokenize(str, qfRe, function(token) {
                                return new dd._Filter(token);
                            }));
                        }
                    };

                    dd._QuickNodeList = lang.extend(function(contents) {
                        this.contents = contents;
                    }, {
                        render: function(context, buffer) {
                            for (var i = 0, l = this.contents.length; i < l; i++) {
                                if (this.contents[i].resolve) {
                                    buffer = buffer.concat(this.contents[i].resolve(context));
                                } else {
                                    buffer = buffer.concat(this.contents[i]);
                                }
                            }
                            return buffer;
                        },
                        dummyRender: function(context) {
                            return this.render(context, dd.Template.prototype.getBuffer()).toString();
                        },
                        clone: function(buffer) {
                            return this;
                        }
                    });

                    dd._Filter = lang.extend(function(token) {
                        // summary:
                        //		Uses a string to find (and manipulate) a variable
                        if (!token) throw new Error("Filter must be called with variable name");
                        this.contents = token;

                        var cache = this._cache[token];
                        if (cache) {
                            this.key = cache[0];
                            this.filters = cache[1];
                        } else {
                            this.filters = [];
                            Tokenize(token, this._re, this._tokenize, this);
                            this._cache[token] = [this.key, this.filters];
                        }
                    }, {
                        _cache: {},
                        _re: /(?:^_\("([^\\"]*(?:\\.[^\\"])*)"\)|^"([^\\"]*(?:\\.[^\\"]*)*)"|^([a-zA-Z0-9_.]+)|\|(\w+)(?::(?:_\("([^\\"]*(?:\\.[^\\"])*)"\)|"([^\\"]*(?:\\.[^\\"]*)*)"|([a-zA-Z0-9_.]+)|'([^\\']*(?:\\.[^\\']*)*)'))?|^'([^\\']*(?:\\.[^\\']*)*)')/g,
                        _values: {
                            0: '"', // _("text")
                            1: '"', // "text"
                            2: "", // variable
                            8: '"' // 'text'
                        },
                        _args: {
                            4: '"', // :_("text")
                            5: '"', // :"text"
                            6: "", // :variable
                            7: "'" // :'text'
                        },
                        _tokenize: function() {
                            var pos, arg;

                            for (var i = 0, has = []; i < arguments.length; i++) {
                                has[i] = (arguments[i] !== undefined && typeof arguments[i] == "string" && arguments[i]);
                            }

                            if (!this.key) {
                                for (pos in this._values) {
                                    if (has[pos]) {
                                        this.key = this._values[pos] + arguments[pos] + this._values[pos];
                                        break;
                                    }
                                }
                            } else {
                                for (pos in this._args) {
                                    if (has[pos]) {
                                        var value = arguments[pos];
                                        if (this._args[pos] == "'") {
                                            value = value.replace(/\\'/g, "'");
                                        } else if (this._args[pos] == '"') {
                                            value = value.replace(/\\"/g, '"');
                                        }
                                        arg = [!this._args[pos], value];
                                        break;
                                    }
                                }
                                // Get a named filter
                                var fn = ddt.getFilter(arguments[3]);
                                if (!lang.isFunction(fn)) throw new Error(arguments[3] + " is not registered as a filter");
                                this.filters.push([fn, arg]);
                            }
                        },
                        getExpression: function() {
                            return this.contents;
                        },
                        resolve: function(context) {
                            if (this.key === undefined) {
                                return "";
                            }

                            var str = this.resolvePath(this.key, context);

                            for (var i = 0, filter; filter = this.filters[i]; i++) {
                                // Each filter has the function in [0], a boolean in [1][0] of whether it's a variable or a string
                                // and [1][1] is either the variable name of the string content.
                                if (filter[1]) {
                                    if (filter[1][0]) {
                                        str = filter[0](str, this.resolvePath(filter[1][1], context));
                                    } else {
                                        str = filter[0](str, filter[1][1]);
                                    }
                                } else {
                                    str = filter[0](str);
                                }
                            }

                            return str;
                        },
                        resolvePath: function(path, context) {
                            var current, parts;
                            var first = path.charAt(0);
                            var last = path.slice(-1);
                            if (!isNaN(parseInt(first))) {
                                current = (path.indexOf(".") == -1) ? parseInt(path) : parseFloat(path);
                            } else if (first == '"' && first == last) {
                                current = path.slice(1, -1);
                            } else {
                                if (path == "true") {
                                    return true;
                                }
                                if (path == "false") {
                                    return false;
                                }
                                if (path == "null" || path == "None") {
                                    return null;
                                }
                                parts = path.split(".");
                                current = context.get(parts[0]);

                                if (lang.isFunction(current)) {
                                    var self = context.getThis && context.getThis();
                                    if (current.alters_data) {
                                        current = "";
                                    } else if (self) {
                                        current = current.call(self);
                                    } else {
                                        current = "";
                                    }
                                }

                                for (var i = 1; i < parts.length; i++) {
                                    var part = parts[i];
                                    if (current) {
                                        var base = current;
                                        if (lang.isObject(current) && part == "items" && current[part] === undefined) {
                                            var items = [];
                                            for (var key in current) {
                                                items.push([key, current[key]]);
                                            }
                                            current = items;
                                            continue;
                                        }

                                        if (current.get && lang.isFunction(current.get) && current.get.safe) {
                                            current = current.get(part);
                                        } else if (current[part] === undefined) {
                                            current = current[part];
                                            break;
                                        } else {
                                            current = current[part];
                                        }

                                        if (lang.isFunction(current)) {
                                            if (current.alters_data) {
                                                current = "";
                                            } else {
                                                current = current.call(base);
                                            }
                                        } else if (current instanceof Date) {
                                            current = dd._Context.prototype._normalize(current);
                                        }
                                    } else {
                                        return "";
                                    }
                                }
                            }
                            return current;
                        }
                    });

                    dd._TextNode = dd._Node = lang.extend(function( /*Object*/ obj) {
                        // summary:
                        //		Basic catch-all node
                        this.contents = obj;
                    }, {
                        set: function(data) {
                            this.contents = data;
                            return this;
                        },
                        render: function(context, buffer) {
                            // summary:
                            //		Adds content onto the buffer
                            return buffer.concat(this.contents);
                        },
                        isEmpty: function() {
                            return !lang.trim(this.contents);
                        },
                        clone: function() {
                            return this;
                        }
                    });

                    dd._NodeList = lang.extend(function( /*Node[]*/ nodes) {
                        // summary:
                        //		Allows us to render a group of nodes
                        this.contents = nodes || [];
                        this.last = "";
                    }, {
                        push: function(node) {
                            // summary:
                            //		Add a new node to the list
                            this.contents.push(node);
                            return this;
                        },
                        concat: function(nodes) {
                            this.contents = this.contents.concat(nodes);
                            return this;
                        },
                        render: function(context, buffer) {
                            // summary:
                            //		Adds all content onto the buffer
                            for (var i = 0; i < this.contents.length; i++) {
                                buffer = this.contents[i].render(context, buffer);
                                if (!buffer) throw new Error("Template must return buffer");
                            }
                            return buffer;
                        },
                        dummyRender: function(context) {
                            return this.render(context, dd.Template.prototype.getBuffer()).toString();
                        },
                        unrender: function() {
                            return arguments[1];
                        },
                        clone: function() {
                            return this;
                        },
                        rtrim: function() {
                            while (1) {
                                i = this.contents.length - 1;
                                if (this.contents[i] instanceof dd._TextNode && this.contents[i].isEmpty()) {
                                    this.contents.pop();
                                } else {
                                    break;
                                }
                            }

                            return this;
                        }
                    });

                    dd._VarNode = lang.extend(function(str) {
                        // summary:
                        //		A node to be processed as a variable
                        this.contents = new dd._Filter(str);
                    }, {
                        render: function(context, buffer) {
                            var str = this.contents.resolve(context);
                            if (!str.safe) {
                                str = dd._base.escape("" + str);
                            }
                            return buffer.concat(str);
                        }
                    });

                    dd._noOpNode = new function() {
                        // summary:
                        //		Adds a no-op node. Useful in custom tags
                        this.render = this.unrender = function() {
                            return arguments[1];
                        }
                        this.clone = function() {
                            return this;
                        }
                    };

                    dd._Parser = lang.extend(function(tokens) {
                        // summary:
                        //		Parser used during initialization and for tag groups.
                        this.contents = tokens;
                    }, {
                        i: 0,
                        parse: function( /*Array?*/ stop_at) {
                            // summary:
                            //		Turns tokens into nodes
                            // description:
                            //		Steps into tags are they're found. Blocks use the parse object
                            //		to find their closing tag (the stop_at array). stop_at is inclusive, it
                            //		returns the node that matched.
                            var terminators = {},
                                token;
                            stop_at = stop_at || [];
                            for (var i = 0; i < stop_at.length; i++) {
                                terminators[stop_at[i]] = true;
                            }

                            var nodelist = new dd._NodeList();
                            while (this.i < this.contents.length) {
                                token = this.contents[this.i++];
                                if (typeof token == "string") {
                                    nodelist.push(new dd._TextNode(token));
                                } else {
                                    var type = token[0];
                                    var text = token[1];
                                    if (type == dd.TOKEN_VAR) {
                                        nodelist.push(new dd._VarNode(text));
                                    } else if (type == dd.TOKEN_BLOCK) {
                                        if (terminators[text]) {
                                            --this.i;
                                            return nodelist;
                                        }
                                        var cmd = text.split(/\s+/g);
                                        if (cmd.length) {
                                            cmd = cmd[0];
                                            var fn = ddt.getTag(cmd);
                                            if (fn) {
                                                nodelist.push(fn(this, new dd.Token(type, text)));
                                            }
                                        }
                                    }
                                }
                            }

                            if (stop_at.length) {
                                throw new Error("Could not find closing tag(s): " + stop_at.toString());
                            }

                            this.contents.length = 0;
                            return nodelist;
                        },
                        next_token: function() {
                            // summary:
                            //		Returns the next token in the list.
                            var token = this.contents[this.i++];
                            return new dd.Token(token[0], token[1]);
                        },
                        delete_first_token: function() {
                            this.i++;
                        },
                        skip_past: function(endtag) {
                            while (this.i < this.contents.length) {
                                var token = this.contents[this.i++];
                                if (token[0] == dd.TOKEN_BLOCK && token[1] == endtag) {
                                    return;
                                }
                            }
                            throw new Error("Unclosed tag found when looking for " + endtag);
                        },
                        create_variable_node: function(expr) {
                            return new dd._VarNode(expr);
                        },
                        create_text_node: function(expr) {
                            return new dd._TextNode(expr || "");
                        },
                        getTemplate: function(file) {
                            return new dd.Template(file);
                        }
                    });

                    dd.register = {
                        // summary:
                        //		A register for filters and tags.

                        _registry: {
                            attributes: [],
                            tags: [],
                            filters: []
                        },
                        get: function( /*String*/ module, /*String*/ name) {
                            // tags:
                            //		private
                            var registry = dd.register._registry[module + "s"];
                            for (var i = 0, entry; entry = registry[i]; i++) {
                                if (typeof entry[0] == "string") {
                                    if (entry[0] == name) {
                                        return entry;
                                    }
                                } else if (name.match(entry[0])) {
                                    return entry;
                                }
                            }
                        },
                        getAttributeTags: function() {
                            // tags:
                            //		private
                            var tags = [];
                            var registry = dd.register._registry.attributes;
                            for (var i = 0, entry; entry = registry[i]; i++) {
                                if (entry.length == 3) {
                                    tags.push(entry);
                                } else {
                                    var fn = lang.getObject(entry[1]);
                                    if (fn && lang.isFunction(fn)) {
                                        entry.push(fn);
                                        tags.push(entry);
                                    }
                                }
                            }
                            return tags;
                        },
                        _any: function(type, base, locations) {
                            for (var path in locations) {
                                for (var i = 0, fn; fn = locations[path][i]; i++) {
                                    var key = fn;
                                    if (lang.isArray(fn)) {
                                        key = fn[0];
                                        fn = fn[1];
                                    }
                                    if (typeof key == "string") {
                                        if (key.substr(0, 5) == "attr:") {
                                            var attr = fn;
                                            if (attr.substr(0, 5) == "attr:") {
                                                attr = attr.slice(5);
                                            }
                                            dd.register._registry.attributes.push([attr.toLowerCase(), base + "." + path + "." + attr]);
                                        }
                                        key = key.toLowerCase()
                                    }
                                    dd.register._registry[type].push([
                                        key,
                                        fn,
                                        base + "." + path
                                    ]);
                                }
                            }
                        },
                        tags: function( /*String*/ base, /*Object*/ locations) {
                            // summary:
                            //		Register the specified tag libraries.
                            // description:
                            //		The locations parameter defines the contents of each library as a hash whose keys are the library names and values 
                            //		an array of the tags exported by the library. For example, the tags exported by the logic library would be:
                            //	|	{ logic: ["if", "for", "ifequal", "ifnotequal"] }
                            // base:
                            //		The base path of the libraries.
                            // locations:
                            //		An object defining the tags for each library as a hash whose keys are the library names and values 
                            //		an array of the tags or filters exported by the library.
                            dd.register._any("tags", base, locations);
                        },
                        filters: function( /*String*/ base, /*Object*/ locations) {
                            // summary:
                            //		Register the specified filter libraries.
                            // description:
                            //		The locations parameter defines the contents of each library as a hash whose keys are the library names and values 
                            //		an array of the filters exported by the library. For example, the filters exported by the date library would be:
                            //	|	{ "dates": ["date", "time", "timesince", "timeuntil"] }
                            // base:
                            //		The base path of the libraries.
                            // locations:
                            //		An object defining the filters for each library as a hash whose keys are the library names and values 
                            //		an array of the filters exported by the library.
                            dd.register._any("filters", base, locations);
                        }
                    }

                    var escapeamp = /&/g;
                    var escapelt = /</g;
                    var escapegt = />/g;
                    var escapeqt = /'/g;
                    var escapedblqt = /"/g;
                    dd._base.escape = function(value) {
                        // summary:
                        //		Escapes a string's HTML
                        return dd.mark_safe(value.replace(escapeamp, '&amp;').replace(escapelt, '&lt;').replace(escapegt, '&gt;').replace(escapedblqt, '&quot;').replace(escapeqt, '&#39;'));
                    };

                    dd._base.safe = function(value) {
                        if (typeof value == "string") {
                            value = new String(value);
                        }
                        if (typeof value == "object") {
                            value.safe = true;
                        }
                        return value;
                    };
                    dd.mark_safe = dd._base.safe;

                    dd.register.tags("dojox.dtl.tag", {
                        "date": ["now"],
                        "logic": ["if", "for", "ifequal", "ifnotequal"],
                        "loader": ["extends", "block", "include", "load", "ssi"],
                        "misc": ["comment", "debug", "filter", "firstof", "spaceless", "templatetag", "widthratio", "with"],
                        "loop": ["cycle", "ifchanged", "regroup"]
                    });
                    dd.register.filters("dojox.dtl.filter", {
                        "dates": ["date", "time", "timesince", "timeuntil"],
                        "htmlstrings": ["linebreaks", "linebreaksbr", "removetags", "striptags"],
                        "integers": ["add", "get_digit"],
                        "lists": ["dictsort", "dictsortreversed", "first", "join", "length", "length_is", "random", "slice", "unordered_list"],
                        "logic": ["default", "default_if_none", "divisibleby", "yesno"],
                        "misc": ["filesizeformat", "pluralize", "phone2numeric", "pprint"],
                        "strings": ["addslashes", "capfirst", "center", "cut", "fix_ampersands", "floatformat", "iriencode", "linenumbers", "ljust", "lower", "make_list", "rjust", "slugify", "stringformat", "title", "truncatewords", "truncatewords_html", "upper", "urlencode", "urlize", "urlizetrunc", "wordcount", "wordwrap"]
                    });
                    dd.register.filters("dojox.dtl", {
                        "_base": ["escape", "safe"]
                    });
                    return dd;
                });


        },
        'url:dijit/form/templates/ValidationTextBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
        'url:dijit/form/templates/TextBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n",
        'dijit/layout/utils': function() {
            define("dijit/layout/utils", [
                "dojo/_base/array", // array.filter array.forEach
                "dojo/dom-class", // domClass.add domClass.remove
                "dojo/dom-geometry", // domGeometry.marginBox
                "dojo/dom-style", // domStyle.getComputedStyle
                "dojo/_base/lang", // lang.mixin
                "../main" // for exporting symbols to dijit, remove in 2.0
            ], function(array, domClass, domGeometry, domStyle, lang, dijit) {

                // module:
                //		dijit/layout/utils

                var layout = lang.getObject("layout", true, dijit);
                /*=====
                layout = {
                	 // summary:
                	 //		marginBox2contentBox() and layoutChildren()
                 };
                 =====*/

                layout.marginBox2contentBox = function( /*DomNode*/ node, /*Object*/ mb) {
                    // summary:
                    //		Given the margin-box size of a node, return its content box size.
                    //		Functions like domGeometry.contentBox() but is more reliable since it doesn't have
                    //		to wait for the browser to compute sizes.
                    var cs = domStyle.getComputedStyle(node);
                    var me = domGeometry.getMarginExtents(node, cs);
                    var pb = domGeometry.getPadBorderExtents(node, cs);
                    return {
                        l: domStyle.toPixelValue(node, cs.paddingLeft),
                        t: domStyle.toPixelValue(node, cs.paddingTop),
                        w: mb.w - (me.w + pb.w),
                        h: mb.h - (me.h + pb.h)
                    };
                };

                function capitalize(word) {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                }

                function size(widget, dim) {
                    // size the child
                    var newSize = widget.resize ? widget.resize(dim) : domGeometry.setMarginBox(widget.domNode, dim);

                    // record child's size
                    if (newSize) {
                        // if the child returned it's new size then use that
                        lang.mixin(widget, newSize);
                    } else {
                        // otherwise, call getMarginBox(), but favor our own numbers when we have them.
                        // the browser lies sometimes
                        lang.mixin(widget, domGeometry.getMarginBox(widget.domNode));
                        lang.mixin(widget, dim);
                    }
                }

                layout.layoutChildren = function( /*DomNode*/ container, /*Object*/ dim, /*Widget[]*/ children,
                    /*String?*/
                    changedRegionId, /*Number?*/ changedRegionSize) {
                    // summary:
                    //		Layout a bunch of child dom nodes within a parent dom node
                    // container:
                    //		parent node
                    // dim:
                    //		{l, t, w, h} object specifying dimensions of container into which to place children
                    // children:
                    //		An array of Widgets or at least objects containing:
                    //
                    //		- domNode: pointer to DOM node to position
                    //		- region or layoutAlign: position to place DOM node
                    //		- resize(): (optional) method to set size of node
                    //		- id: (optional) Id of widgets, referenced from resize object, below.
                    // changedRegionId:
                    //		If specified, the slider for the region with the specified id has been dragged, and thus
                    //		the region's height or width should be adjusted according to changedRegionSize
                    // changedRegionSize:
                    //		See changedRegionId.

                    // copy dim because we are going to modify it
                    dim = lang.mixin({}, dim);

                    domClass.add(container, "dijitLayoutContainer");

                    // Move "client" elements to the end of the array for layout.  a11y dictates that the author
                    // needs to be able to put them in the document in tab-order, but this algorithm requires that
                    // client be last.    TODO: move these lines to LayoutContainer?   Unneeded other places I think.
                    children = array.filter(children, function(item) {
                            return item.region != "center" && item.layoutAlign != "client";
                        })
                        .concat(array.filter(children, function(item) {
                            return item.region == "center" || item.layoutAlign == "client";
                        }));

                    // set positions/sizes
                    array.forEach(children, function(child) {
                        var elm = child.domNode,
                            pos = (child.region || child.layoutAlign);
                        if (!pos) {
                            throw new Error("No region setting for " + child.id)
                        }

                        // set elem to upper left corner of unused space; may move it later
                        var elmStyle = elm.style;
                        elmStyle.left = dim.l + "px";
                        elmStyle.top = dim.t + "px";
                        elmStyle.position = "absolute";

                        domClass.add(elm, "dijitAlign" + capitalize(pos));

                        // Size adjustments to make to this child widget
                        var sizeSetting = {};

                        // Check for optional size adjustment due to splitter drag (height adjustment for top/bottom align
                        // panes and width adjustment for left/right align panes.
                        if (changedRegionId && changedRegionId == child.id) {
                            sizeSetting[child.region == "top" || child.region == "bottom" ? "h" : "w"] = changedRegionSize;
                        }

                        // set size && adjust record of remaining space.
                        // note that setting the width of a <div> may affect its height.
                        if (pos == "top" || pos == "bottom") {
                            sizeSetting.w = dim.w;
                            size(child, sizeSetting);
                            dim.h -= child.h;
                            if (pos == "top") {
                                dim.t += child.h;
                            } else {
                                elmStyle.top = dim.t + dim.h + "px";
                            }
                        } else if (pos == "left" || pos == "right") {
                            sizeSetting.h = dim.h;
                            size(child, sizeSetting);
                            dim.w -= child.w;
                            if (pos == "left") {
                                dim.l += child.w;
                            } else {
                                elmStyle.left = dim.l + dim.w + "px";
                            }
                        } else if (pos == "client" || pos == "center") {
                            size(child, dim);
                        }
                    });
                };


                return {
                    marginBox2contentBox: layout.marginBox2contentBox,
                    layoutChildren: layout.layoutChildren
                };
            });

        },
        'dijit/_KeyNavContainer': function() {
            define("dijit/_KeyNavContainer", [
                "dojo/_base/kernel", // kernel.deprecated
                "./_Container",
                "./_FocusMixin",
                "dojo/_base/array", // array.forEach
                "dojo/keys", // keys.END keys.HOME
                "dojo/_base/declare", // declare
                "dojo/_base/event", // event.stop
                "dojo/dom-attr", // domAttr.set
                "dojo/_base/lang" // lang.hitch
            ], function(kernel, _Container, _FocusMixin, array, keys, declare, event, domAttr, lang) {


                // module:
                //		dijit/_KeyNavContainer

                return declare("dijit._KeyNavContainer", [_FocusMixin, _Container], {
                    // summary:
                    //		A _Container with keyboard navigation of its children.
                    // description:
                    //		To use this mixin, call connectKeyNavHandlers() in
                    //		postCreate().
                    //		It provides normalized keyboard and focusing code for Container
                    //		widgets.

                    /*=====
                    		// focusedChild: [protected] Widget
                    		//		The currently focused child widget, or null if there isn't one
                    		focusedChild: null,
                    =====*/

                    // tabIndex: String
                    //		Tab index of the container; same as HTML tabIndex attribute.
                    //		Note then when user tabs into the container, focus is immediately
                    //		moved to the first item in the container.
                    tabIndex: "0",

                    connectKeyNavHandlers: function( /*keys[]*/ prevKeyCodes, /*keys[]*/ nextKeyCodes) {
                        // summary:
                        //		Call in postCreate() to attach the keyboard handlers
                        //		to the container.
                        // preKeyCodes: keys[]
                        //		Key codes for navigating to the previous child.
                        // nextKeyCodes: keys[]
                        //		Key codes for navigating to the next child.
                        // tags:
                        //		protected

                        // TODO: call this automatically from my own postCreate()

                        var keyCodes = (this._keyNavCodes = {});
                        var prev = lang.hitch(this, "focusPrev");
                        var next = lang.hitch(this, "focusNext");
                        array.forEach(prevKeyCodes, function(code) {
                            keyCodes[code] = prev;
                        });
                        array.forEach(nextKeyCodes, function(code) {
                            keyCodes[code] = next;
                        });
                        keyCodes[keys.HOME] = lang.hitch(this, "focusFirstChild");
                        keyCodes[keys.END] = lang.hitch(this, "focusLastChild");
                        this.connect(this.domNode, "onkeypress", "_onContainerKeypress");
                        this.connect(this.domNode, "onfocus", "_onContainerFocus");
                    },

                    startupKeyNavChildren: function() {
                        kernel.deprecated("startupKeyNavChildren() call no longer needed", "", "2.0");
                    },

                    startup: function() {
                        this.inherited(arguments);
                        array.forEach(this.getChildren(), lang.hitch(this, "_startupChild"));
                    },

                    addChild: function( /*dijit/_WidgetBase*/ widget, /*int?*/ insertIndex) {
                        this.inherited(arguments);
                        this._startupChild(widget);
                    },

                    focus: function() {
                        // summary:
                        //		Default focus() implementation: focus the first child.
                        this.focusFirstChild();
                    },

                    focusFirstChild: function() {
                        // summary:
                        //		Focus the first focusable child in the container.
                        // tags:
                        //		protected
                        this.focusChild(this._getFirstFocusableChild());
                    },

                    focusLastChild: function() {
                        // summary:
                        //		Focus the last focusable child in the container.
                        // tags:
                        //		protected
                        this.focusChild(this._getLastFocusableChild());
                    },

                    focusNext: function() {
                        // summary:
                        //		Focus the next widget
                        // tags:
                        //		protected
                        this.focusChild(this._getNextFocusableChild(this.focusedChild, 1));
                    },

                    focusPrev: function() {
                        // summary:
                        //		Focus the last focusable node in the previous widget
                        //		(ex: go to the ComboButton icon section rather than button section)
                        // tags:
                        //		protected
                        this.focusChild(this._getNextFocusableChild(this.focusedChild, -1), true);
                    },

                    focusChild: function( /*dijit/_WidgetBase*/ widget, /*Boolean*/ last) {
                        // summary:
                        //		Focus specified child widget.
                        // widget:
                        //		Reference to container's child widget
                        // last:
                        //		If true and if widget has multiple focusable nodes, focus the
                        //		last one instead of the first one
                        // tags:
                        //		protected

                        if (!widget) {
                            return;
                        }

                        if (this.focusedChild && widget !== this.focusedChild) {
                            this._onChildBlur(this.focusedChild); // used by _MenuBase
                        }
                        widget.set("tabIndex", this.tabIndex); // for IE focus outline to appear, must set tabIndex before focs
                        widget.focus(last ? "end" : "start");
                        this._set("focusedChild", widget);
                    },

                    _startupChild: function( /*dijit/_WidgetBase*/ widget) {
                        // summary:
                        //		Setup for each child widget
                        // description:
                        //		Sets tabIndex=-1 on each child, so that the tab key will
                        //		leave the container rather than visiting each child.
                        // tags:
                        //		private

                        widget.set("tabIndex", "-1");

                        this.connect(widget, "_onFocus", function() {
                            // Set valid tabIndex so tabbing away from widget goes to right place, see #10272
                            widget.set("tabIndex", this.tabIndex);
                        });
                        this.connect(widget, "_onBlur", function() {
                            widget.set("tabIndex", "-1");
                        });
                    },

                    _onContainerFocus: function(evt) {
                        // summary:
                        //		Handler for when the container gets focus
                        // description:
                        //		Initially the container itself has a tabIndex, but when it gets
                        //		focus, switch focus to first child...
                        // tags:
                        //		private

                        // Note that we can't use _onFocus() because switching focus from the
                        // _onFocus() handler confuses the focus.js code
                        // (because it causes _onFocusNode() to be called recursively)
                        // Also, _onFocus() would fire when focus went directly to a child widget due to mouse click.

                        // Ignore spurious focus events:
                        //	1. focus on a child widget bubbles on FF
                        //	2. on IE, clicking the scrollbar of a select dropdown moves focus from the focused child item to me
                        if (evt.target !== this.domNode || this.focusedChild) {
                            return;
                        }

                        this.focusFirstChild();

                        // and then set the container's tabIndex to -1,
                        // (don't remove as that breaks Safari 4)
                        // so that tab or shift-tab will go to the fields after/before
                        // the container, rather than the container itself
                        domAttr.set(this.domNode, "tabIndex", "-1");
                    },

                    _onBlur: function(evt) {
                        // When focus is moved away the container, and its descendant (popup) widgets,
                        // then restore the container's tabIndex so that user can tab to it again.
                        // Note that using _onBlur() so that this doesn't happen when focus is shifted
                        // to one of my child widgets (typically a popup)
                        if (this.tabIndex) {
                            domAttr.set(this.domNode, "tabIndex", this.tabIndex);
                        }
                        this.focusedChild = null;
                        this.inherited(arguments);
                    },

                    _onContainerKeypress: function(evt) {
                        // summary:
                        //		When a key is pressed, if it's an arrow key etc. then
                        //		it's handled here.
                        // tags:
                        //		private
                        if (evt.ctrlKey || evt.altKey) {
                            return;
                        }
                        var func = this._keyNavCodes[evt.charOrCode];
                        if (func) {
                            func();
                            event.stop(evt);
                        }
                    },

                    _onChildBlur: function( /*dijit/_WidgetBase*/ /*===== widget =====*/ ) {
                        // summary:
                        //		Called when focus leaves a child widget to go
                        //		to a sibling widget.
                        //		Used by MenuBase.js (TODO: move code there)
                        // tags:
                        //		protected
                    },

                    _getFirstFocusableChild: function() {
                        // summary:
                        //		Returns first child that can be focused
                        return this._getNextFocusableChild(null, 1); // dijit/_WidgetBase
                    },

                    _getLastFocusableChild: function() {
                        // summary:
                        //		Returns last child that can be focused
                        return this._getNextFocusableChild(null, -1); // dijit/_WidgetBase
                    },

                    _getNextFocusableChild: function(child, dir) {
                        // summary:
                        //		Returns the next or previous focusable child, compared
                        //		to "child"
                        // child: Widget
                        //		The current widget
                        // dir: Integer
                        //		- 1 = after
                        //		- -1 = before
                        if (child) {
                            child = this._getSiblingOfChild(child, dir);
                        }
                        var children = this.getChildren();
                        for (var i = 0; i < children.length; i++) {
                            if (!child) {
                                child = children[(dir > 0) ? 0 : (children.length - 1)];
                            }
                            if (child.isFocusable()) {
                                return child; // dijit/_WidgetBase
                            }
                            child = this._getSiblingOfChild(child, dir);
                        }
                        // no focusable child found
                        return null; // dijit/_WidgetBase
                    }
                });
            });

        },
        'dijit/_Contained': function() {
            define("dijit/_Contained", [
                "dojo/_base/declare", // declare
                "./registry" // registry.getEnclosingWidget(), registry.byNode()
            ], function(declare, registry) {

                // module:
                //		dijit/_Contained

                return declare("dijit._Contained", null, {
                    // summary:
                    //		Mixin for widgets that are children of a container widget
                    //
                    // example:
                    //	|	// make a basic custom widget that knows about it's parents
                    //	|	declare("my.customClass",[dijit._Widget,dijit._Contained],{});

                    _getSibling: function( /*String*/ which) {
                        // summary:
                        //		Returns next or previous sibling
                        // which:
                        //		Either "next" or "previous"
                        // tags:
                        //		private
                        var node = this.domNode;
                        do {
                            node = node[which + "Sibling"];
                        } while (node && node.nodeType != 1);
                        return node && registry.byNode(node); // dijit/_WidgetBase
                    },

                    getPreviousSibling: function() {
                        // summary:
                        //		Returns null if this is the first child of the parent,
                        //		otherwise returns the next element sibling to the "left".

                        return this._getSibling("previous"); // dijit/_WidgetBase
                    },

                    getNextSibling: function() {
                        // summary:
                        //		Returns null if this is the last child of the parent,
                        //		otherwise returns the next element sibling to the "right".

                        return this._getSibling("next"); // dijit/_WidgetBase
                    },

                    getIndexInParent: function() {
                        // summary:
                        //		Returns the index of this widget within its container parent.
                        //		It returns -1 if the parent does not exist, or if the parent
                        //		is not a dijit._Container

                        var p = this.getParent();
                        if (!p || !p.getIndexOfChild) {
                            return -1; // int
                        }
                        return p.getIndexOfChild(this); // int
                    }
                });
            });

        },
        'dijit/form/DataList': function() {
            define("dijit/form/DataList", [
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.byId
                "dojo/_base/lang", // lang.trim
                "dojo/query", // query
                "dojo/store/Memory",
                "../registry" // registry.add registry.remove
            ], function(declare, dom, lang, query, MemoryStore, registry) {

                // module:
                //		dijit/form/DataList

                function toItem( /*DOMNode*/ option) {
                    // summary:
                    //		Convert `<option>` node to hash
                    return {
                        id: option.value,
                        value: option.value,
                        name: lang.trim(option.innerText || option.textContent || '')
                    };
                }

                return declare("dijit.form.DataList", MemoryStore, {
                    // summary:
                    //		Inefficient but small data store specialized for inlined data via OPTION tags
                    //
                    // description:
                    //		Provides a store for inlined data like:
                    //
                    //	|	<datalist>
                    //	|		<option value="AL">Alabama</option>
                    //	|		...

                    constructor: function(params, srcNodeRef) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String
                        //		Attach widget to this DOM node.

                        // store pointer to original DOM tree
                        this.domNode = dom.byId(srcNodeRef);

                        lang.mixin(this, params);
                        if (this.id) {
                            registry.add(this); // add to registry so it can be easily found by id
                        }
                        this.domNode.style.display = "none";

                        this.inherited(arguments, [{
                            data: query("option", this.domNode).map(toItem)
                        }]);
                    },

                    destroy: function() {
                        registry.remove(this.id);
                    },

                    fetchSelectedItem: function() {
                        // summary:
                        //		Get the option marked as selected, like `<option selected>`.
                        //		Not part of dojo.data API.
                        var option = query("> option[selected]", this.domNode)[0] || query("> option", this.domNode)[0];
                        return option && toItem(option);
                    }
                });
            });

        },
        'hsbcwidget/ToggleButtons': function() {
            define([
                "dojo/_base/declare",
                "dijit/_WidgetBase",
                "dojo/query",
                "dojo/dom-attr",
                "dojo/dom-class",
                "dojo/dom-style",
                "dojo/on",
                "dijit/focus",
                "dojo/dom-construct",
                "dojo/_base/lang"
            ], function(declare, WidgetBase, query, domAttr, domClass, domStyle, on, focusUtil, domConstruct, lang) {

                return declare([WidgetBase], {
                    /**
                     * Class name for the wrapper of the buttons.
                     * Usually attached to a UL element
                     * @type {String}
                     * @default  .naviTabs
                     */
                    buttonsContainerClassName: '.naviTabs',
                    /**
                     * Class name for the tab-contents.
                     * @type {String}
                     * @default  .tab-content
                     */
                    tabContentClassName: '.tab-content',
                    /**
                     * Query object containing the list of the buttons
                     * @type {Object}
                     */
                    buttons: null,
                    /**
                     * Query object containing the list of the tab contents
                     * @type {Object}
                     */
                    tabContents: null,

                    /**
                     * Method inherited from WidgetBase (see define imports)
                     * Events are triggered after creating child widgets and dom replacements.
                     * custom _bindEvents() method is called by this method.
                     * @method  postCreate
                     * @public
                     */
                    postCreate: function() {
                        this.inherited(arguments);
                        this.buttons = query(this.buttonsContainerClassName + ' > li > a', this.domNode);
                        this._activeTab(this.buttons[0]);
                        this.tabContents = query(this.tabContentClassName, this.domNode);
                        this._bindEvents();
                    },
                    /**
                     * Private method to set active tab for accessibility
                     * @method  _activeTab
                     * @private
                     */
                    _activeTab: function(currentNode) {
                        //reset
                        this.buttons.forEach(function(button) {
                            dojo.query(".dijitOffScreen", button).forEach(dojo.destroy);
                            domConstruct.create('span', {
                                "class": 'dijitOffScreen',
                                "innerHTML": "Not Selected"
                            }, button, 'last');
                        });
                        //set active
                        dojo.query(".dijitOffScreen", currentNode).forEach(dojo.destroy);
                        domConstruct.create('span', {
                            "class": 'dijitOffScreen',
                            "innerHTML": "Selected"
                        }, currentNode, 'last');
                    },
                    /**
                     * Private method to bind Events
                     * @method  _bindEvents
                     * @private
                     */
                    _bindEvents: function() {
                        this.buttons.on('click', lang.hitch(this, '_buttonsClickHandler'));
                    },

                    /**
                     * Private method to handle click event for the buttons
                     * @method  _buttonsClickHandler
                     * @param   {e}             e Event
                     * @private
                     */
                    _buttonsClickHandler: function(e) {
                        e.preventDefault();
                        var id = domAttr.get(e.currentTarget, 'href');
                        this.buttons.parent('.active').removeClass('active');
                        this.tabContents.filter('.active').removeClass('active').addClass('hide');
                        domClass.add(e.currentTarget.parentElement, 'active');
                        this.tabContents.filter(id).addClass('active');
                        this._activeTab(e.currentTarget);
                    }
                });
            });
        },
        'url:dijit/templates/Dialog.html': "<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"\n\t\t\t\trole=\"header\" level=\"1\"></span>\n\t\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\n\t\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t\t</span>\n\t</div>\n\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n</div>\n",
        'dijit/form/CheckBox': function() {
            require({
                cache: {
                    'url:dijit/form/templates/CheckBox.html': "<div class=\"dijit dijitReset dijitInline\" role=\"presentation\"\n\t><input\n\t \t${!nameAttrSetting} type=\"${type}\" ${checkedAttrSetting}\n\t\tclass=\"dijitReset dijitCheckBoxInput\"\n\t\tdata-dojo-attach-point=\"focusNode\"\n\t \tdata-dojo-attach-event=\"onclick:_onClick\"\n/></div>\n"
                }
            });
            define("dijit/form/CheckBox", [
                "require",
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/has", // has("dijit-legacy-requires")
                "dojo/query", // query
                "dojo/ready",
                "./ToggleButton",
                "./_CheckBoxMixin",
                "dojo/text!./templates/CheckBox.html",
                "dojo/NodeList-dom" // NodeList.addClass/removeClass
            ], function(require, declare, domAttr, has, query, ready, ToggleButton, _CheckBoxMixin, template) {

                // module:
                //		dijit/form/CheckBox

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/form/RadioButton"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                return declare("dijit.form.CheckBox", [ToggleButton, _CheckBoxMixin], {
                    // summary:
                    //		Same as an HTML checkbox, but with fancy styling.
                    //
                    // description:
                    //		User interacts with real html inputs.
                    //		On onclick (which occurs by mouse click, space-bar, or
                    //		using the arrow keys to switch the selected radio button),
                    //		we update the state of the checkbox/radio.
                    //
                    //		There are two modes:
                    //
                    //		1. High contrast mode
                    //		2. Normal mode
                    //
                    //		In case 1, the regular html inputs are shown and used by the user.
                    //		In case 2, the regular html inputs are invisible but still used by
                    //		the user. They are turned quasi-invisible and overlay the background-image.

                    templateString: template,

                    baseClass: "dijitCheckBox",

                    _setValueAttr: function( /*String|Boolean*/ newValue, /*Boolean*/ priorityChange) {
                        // summary:
                        //		Handler for value= attribute to constructor, and also calls to
                        //		set('value', val).
                        // description:
                        //		During initialization, just saves as attribute to the `<input type=checkbox>`.
                        //
                        //		After initialization,
                        //		when passed a boolean, controls whether or not the CheckBox is checked.
                        //		If passed a string, changes the value attribute of the CheckBox (the one
                        //		specified as "value" when the CheckBox was constructed
                        //		(ex: `<input data-dojo-type="dijit/CheckBox" value="chicken">`).
                        //
                        //		`widget.set('value', string)` will check the checkbox and change the value to the
                        //		specified string.
                        //
                        //		`widget.set('value', boolean)` will change the checked state.

                        if (typeof newValue == "string") {
                            this.inherited(arguments);
                            newValue = true;
                        }
                        if (this._created) {
                            this.set('checked', newValue, priorityChange);
                        }
                    },
                    _getValueAttr: function() {
                        // summary:
                        //		Hook so get('value') works.
                        // description:
                        //		If the CheckBox is checked, returns the value attribute.
                        //		Otherwise returns false.
                        return (this.checked ? this.value : false);
                    },

                    // Override behavior from Button, since we don't have an iconNode
                    _setIconClassAttr: null,

                    postMixInProperties: function() {
                        this.inherited(arguments);

                        // Need to set initial checked state as part of template, so that form submit works.
                        // domAttr.set(node, "checked", bool) doesn't work on IE until node has been attached
                        // to <body>, see #8666
                        this.checkedAttrSetting = this.checked ? "checked" : "";
                    },

                    _fillContent: function() {
                        // Override Button::_fillContent() since it doesn't make sense for CheckBox,
                        // since CheckBox doesn't even have a container
                    },

                    _onFocus: function() {
                        if (this.id) {
                            query("label[for='" + this.id + "']").addClass("dijitFocusedLabel");
                        }
                        this.inherited(arguments);
                    },

                    _onBlur: function() {
                        if (this.id) {
                            query("label[for='" + this.id + "']").removeClass("dijitFocusedLabel");
                        }
                        this.inherited(arguments);
                    }
                });
            });

        },
        'dojo/dom-style': function() {
            define("dojo/dom-style", ["./sniff", "./dom"], function(has, dom) {
                // module:
                //		dojo/dom-style

                // =============================
                // Style Functions
                // =============================

                // getComputedStyle drives most of the style code.
                // Wherever possible, reuse the returned object.
                //
                // API functions below that need to access computed styles accept an
                // optional computedStyle parameter.
                // If this parameter is omitted, the functions will call getComputedStyle themselves.
                // This way, calling code can access computedStyle once, and then pass the reference to
                // multiple API functions.

                // Although we normally eschew argument validation at this
                // level, here we test argument 'node' for (duck)type,
                // by testing nodeType, ecause 'document' is the 'parentNode' of 'body'
                // it is frequently sent to this function even
                // though it is not Element.
                var getComputedStyle, style = {
                    // summary:
                    //		This module defines the core dojo DOM style API.
                };
                if (has("webkit")) {
                    getComputedStyle = function( /*DomNode*/ node) {
                        var s;
                        if (node.nodeType == 1) {
                            var dv = node.ownerDocument.defaultView;
                            s = dv.getComputedStyle(node, null);
                            if (!s && node.style) {
                                node.style.display = "";
                                s = dv.getComputedStyle(node, null);
                            }
                        }
                        return s || {};
                    };
                } else if (has("ie") && (has("ie") < 9 || has("quirks"))) {
                    getComputedStyle = function(node) {
                        // IE (as of 7) doesn't expose Element like sane browsers
                        // currentStyle can be null on IE8!
                        return node.nodeType == 1 /* ELEMENT_NODE*/ && node.currentStyle ? node.currentStyle : {};
                    };
                } else {
                    getComputedStyle = function(node) {
                        return node.nodeType == 1 /* ELEMENT_NODE*/ ?
                            node.ownerDocument.defaultView.getComputedStyle(node, null) : {};
                    };
                }
                style.getComputedStyle = getComputedStyle;
                /*=====
                style.getComputedStyle = function(node){
                	// summary:
                	//		Returns a "computed style" object.
                	//
                	// description:
                	//		Gets a "computed style" object which can be used to gather
                	//		information about the current state of the rendered node.
                	//
                	//		Note that this may behave differently on different browsers.
                	//		Values may have different formats and value encodings across
                	//		browsers.
                	//
                	//		Note also that this method is expensive.  Wherever possible,
                	//		reuse the returned object.
                	//
                	//		Use the dojo.style() method for more consistent (pixelized)
                	//		return values.
                	//
                	// node: DOMNode
                	//		A reference to a DOM node. Does NOT support taking an
                	//		ID string for speed reasons.
                	// example:
                	//	|	dojo.getComputedStyle(dojo.byId('foo')).borderWidth;
                	//
                	// example:
                	//		Reusing the returned object, avoiding multiple lookups:
                	//	|	var cs = dojo.getComputedStyle(dojo.byId("someNode"));
                	//	|	var w = cs.width, h = cs.height;
                	return; // CSS2Properties
                };
                =====*/

                var toPixel;
                if (!has("ie")) {
                    toPixel = function(element, value) {
                        // style values can be floats, client code may want
                        // to round for integer pixels.
                        return parseFloat(value) || 0;
                    };
                } else {
                    toPixel = function(element, avalue) {
                        if (!avalue) {
                            return 0;
                        }
                        // on IE7, medium is usually 4 pixels
                        if (avalue == "medium") {
                            return 4;
                        }
                        // style values can be floats, client code may
                        // want to round this value for integer pixels.
                        if (avalue.slice && avalue.slice(-2) == 'px') {
                            return parseFloat(avalue);
                        }
                        var s = element.style,
                            rs = element.runtimeStyle,
                            cs = element.currentStyle,
                            sLeft = s.left,
                            rsLeft = rs.left;
                        rs.left = cs.left;
                        try {
                            // 'avalue' may be incompatible with style.left, which can cause IE to throw
                            // this has been observed for border widths using "thin", "medium", "thick" constants
                            // those particular constants could be trapped by a lookup
                            // but perhaps there are more
                            s.left = avalue;
                            avalue = s.pixelLeft;
                        } catch (e) {
                            avalue = 0;
                        }
                        s.left = sLeft;
                        rs.left = rsLeft;
                        return avalue;
                    };
                }
                style.toPixelValue = toPixel;
                /*=====
                style.toPixelValue = function(node, value){
                	// summary:
                	//		converts style value to pixels on IE or return a numeric value.
                	// node: DOMNode
                	// value: String
                	// returns: Number
                };
                =====*/

                // FIXME: there opacity quirks on FF that we haven't ported over. Hrm.

                var astr = "DXImageTransform.Microsoft.Alpha";
                var af = function(n, f) {
                    try {
                        return n.filters.item(astr);
                    } catch (e) {
                        return f ? {} : null;
                    }
                };

                var _getOpacity =
                    has("ie") < 9 || (has("ie") && has("quirks")) ? function(node) {
                        try {
                            return af(node).Opacity / 100; // Number
                        } catch (e) {
                            return 1; // Number
                        }
                    } :
                    function(node) {
                        return getComputedStyle(node).opacity;
                    };

                var _setOpacity =
                    has("ie") < 9 || (has("ie") && has("quirks")) ? function( /*DomNode*/ node, /*Number*/ opacity) {
                        var ov = opacity * 100,
                            opaque = opacity == 1;
                        node.style.zoom = opaque ? "" : 1;

                        if (!af(node)) {
                            if (opaque) {
                                return opacity;
                            }
                            node.style.filter += " progid:" + astr + "(Opacity=" + ov + ")";
                        } else {
                            af(node, 1).Opacity = ov;
                        }

                        // on IE7 Alpha(Filter opacity=100) makes text look fuzzy so disable it altogether (bug #2661),
                        //but still update the opacity value so we can get a correct reading if it is read later.
                        af(node, 1).Enabled = !opaque;

                        if (node.tagName.toLowerCase() == "tr") {
                            for (var td = node.firstChild; td; td = td.nextSibling) {
                                if (td.tagName.toLowerCase() == "td") {
                                    _setOpacity(td, opacity);
                                }
                            }
                        }
                        return opacity;
                    } :
                    function(node, opacity) {
                        return node.style.opacity = opacity;
                    };

                var _pixelNamesCache = {
                    left: true,
                    top: true
                };
                var _pixelRegExp = /margin|padding|width|height|max|min|offset/; // |border
                function _toStyleValue(node, type, value) {
                    //TODO: should we really be doing string case conversion here? Should we cache it? Need to profile!
                    type = type.toLowerCase();
                    if (has("ie")) {
                        if (value == "auto") {
                            if (type == "height") {
                                return node.offsetHeight;
                            }
                            if (type == "width") {
                                return node.offsetWidth;
                            }
                        }
                        if (type == "fontweight") {
                            switch (value) {
                                case 700:
                                    return "bold";
                                case 400:
                                default:
                                    return "normal";
                            }
                        }
                    }
                    if (!(type in _pixelNamesCache)) {
                        _pixelNamesCache[type] = _pixelRegExp.test(type);
                    }
                    return _pixelNamesCache[type] ? toPixel(node, value) : value;
                }

                var _floatStyle = has("ie") ? "styleFloat" : "cssFloat",
                    _floatAliases = {
                        "cssFloat": _floatStyle,
                        "styleFloat": _floatStyle,
                        "float": _floatStyle
                    };

                // public API

                style.get = function getStyle( /*DOMNode|String*/ node, /*String?*/ name) {
                    // summary:
                    //		Accesses styles on a node.
                    // description:
                    //		Getting the style value uses the computed style for the node, so the value
                    //		will be a calculated value, not just the immediate node.style value.
                    //		Also when getting values, use specific style names,
                    //		like "borderBottomWidth" instead of "border" since compound values like
                    //		"border" are not necessarily reflected as expected.
                    //		If you want to get node dimensions, use `dojo.marginBox()`,
                    //		`dojo.contentBox()` or `dojo.position()`.
                    // node: DOMNode|String
                    //		id or reference to node to get style for
                    // name: String?
                    //		the style property to get
                    // example:
                    //		Passing only an ID or node returns the computed style object of
                    //		the node:
                    //	|	dojo.getStyle("thinger");
                    // example:
                    //		Passing a node and a style property returns the current
                    //		normalized, computed value for that property:
                    //	|	dojo.getStyle("thinger", "opacity"); // 1 by default

                    var n = dom.byId(node),
                        l = arguments.length,
                        op = (name == "opacity");
                    if (l == 2 && op) {
                        return _getOpacity(n);
                    }
                    name = _floatAliases[name] || name;
                    var s = style.getComputedStyle(n);
                    return (l == 1) ? s : _toStyleValue(n, name, s[name] || n.style[name]); /* CSS2Properties||String||Number */
                };

                style.set = function setStyle( /*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value) {
                    // summary:
                    //		Sets styles on a node.
                    // node: DOMNode|String
                    //		id or reference to node to set style for
                    // name: String|Object
                    //		the style property to set in DOM-accessor format
                    //		("borderWidth", not "border-width") or an object with key/value
                    //		pairs suitable for setting each property.
                    // value: String?
                    //		If passed, sets value on the node for style, handling
                    //		cross-browser concerns.  When setting a pixel value,
                    //		be sure to include "px" in the value. For instance, top: "200px".
                    //		Otherwise, in some cases, some browsers will not apply the style.
                    //
                    // example:
                    //		Passing a node, a style property, and a value changes the
                    //		current display of the node and returns the new computed value
                    //	|	dojo.setStyle("thinger", "opacity", 0.5); // == 0.5
                    //
                    // example:
                    //		Passing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:
                    //	|	dojo.setStyle("thinger", {
                    //	|		"opacity": 0.5,
                    //	|		"border": "3px solid black",
                    //	|		"height": "300px"
                    //	|	});
                    //
                    // example:
                    //		When the CSS style property is hyphenated, the JavaScript property is camelCased.
                    //		font-size becomes fontSize, and so on.
                    //	|	dojo.setStyle("thinger",{
                    //	|		fontSize:"14pt",
                    //	|		letterSpacing:"1.2em"
                    //	|	});
                    //
                    // example:
                    //		dojo/NodeList implements .style() using the same syntax, omitting the "node" parameter, calling
                    //		dojo.style() on every element of the list. See: `dojo.query()` and `dojo/NodeList`
                    //	|	dojo.query(".someClassName").style("visibility","hidden");
                    //	|	// or
                    //	|	dojo.query("#baz > div").style({
                    //	|		opacity:0.75,
                    //	|		fontSize:"13pt"
                    //	|	});

                    var n = dom.byId(node),
                        l = arguments.length,
                        op = (name == "opacity");
                    name = _floatAliases[name] || name;
                    if (l == 3) {
                        return op ? _setOpacity(n, value) : n.style[name] = value; // Number
                    }
                    for (var x in name) {
                        style.set(node, x, name[x]);
                    }
                    return style.getComputedStyle(n);
                };

                return style;
            });

        },
        'dojox/dtl/tag/logic': function() {
            define("dojox/dtl/tag/logic", [
                "dojo/_base/lang",
                "../_base"
            ], function(lang, dd) {

                lang.getObject("dojox.dtl.tag.logic", true);

                var ddt = dd.text;
                var ddtl = dd.tag.logic;

                ddtl.IfNode = lang.extend(function(bools, trues, falses, type) {
                    this.bools = bools;
                    this.trues = trues;
                    this.falses = falses;
                    this.type = type;
                }, {
                    render: function(context, buffer) {
                        var i, bool, ifnot, filter, value;
                        if (this.type == "or") {
                            for (i = 0; bool = this.bools[i]; i++) {
                                ifnot = bool[0];
                                filter = bool[1];
                                value = filter.resolve(context);
                                if ((value && !ifnot) || (ifnot && !value)) {
                                    if (this.falses) {
                                        buffer = this.falses.unrender(context, buffer);
                                    }
                                    return (this.trues) ? this.trues.render(context, buffer, this) : buffer;
                                }
                            }
                            if (this.trues) {
                                buffer = this.trues.unrender(context, buffer);
                            }
                            return (this.falses) ? this.falses.render(context, buffer, this) : buffer;
                        } else {
                            for (i = 0; bool = this.bools[i]; i++) {
                                ifnot = bool[0];
                                filter = bool[1];
                                value = filter.resolve(context);
                                // If we ever encounter a false value
                                if (value == ifnot) {
                                    if (this.trues) {
                                        buffer = this.trues.unrender(context, buffer);
                                    }
                                    return (this.falses) ? this.falses.render(context, buffer, this) : buffer;
                                }
                            }
                            if (this.falses) {
                                buffer = this.falses.unrender(context, buffer);
                            }
                            return (this.trues) ? this.trues.render(context, buffer, this) : buffer;
                        }
                        return buffer;
                    },
                    unrender: function(context, buffer) {
                        buffer = (this.trues) ? this.trues.unrender(context, buffer) : buffer;
                        buffer = (this.falses) ? this.falses.unrender(context, buffer) : buffer;
                        return buffer;
                    },
                    clone: function(buffer) {
                        var trues = (this.trues) ? this.trues.clone(buffer) : null;
                        var falses = (this.falses) ? this.falses.clone(buffer) : null;
                        return new this.constructor(this.bools, trues, falses, this.type);
                    }
                });

                ddtl.IfEqualNode = lang.extend(function(var1, var2, trues, falses, negate) {
                    this.var1 = new dd._Filter(var1);
                    this.var2 = new dd._Filter(var2);
                    this.trues = trues;
                    this.falses = falses;
                    this.negate = negate;
                }, {
                    render: function(context, buffer) {
                        var var1 = this.var1.resolve(context);
                        var var2 = this.var2.resolve(context);
                        var1 = (typeof var1 != "undefined") ? var1 : "";
                        var2 = (typeof var1 != "undefined") ? var2 : "";
                        if ((this.negate && var1 != var2) || (!this.negate && var1 == var2)) {
                            if (this.falses) {
                                buffer = this.falses.unrender(context, buffer, this);
                            }
                            return (this.trues) ? this.trues.render(context, buffer, this) : buffer;
                        }
                        if (this.trues) {
                            buffer = this.trues.unrender(context, buffer, this);
                        }
                        return (this.falses) ? this.falses.render(context, buffer, this) : buffer;
                    },
                    unrender: function(context, buffer) {
                        return ddtl.IfNode.prototype.unrender.call(this, context, buffer);
                    },
                    clone: function(buffer) {
                        var trues = this.trues ? this.trues.clone(buffer) : null;
                        var falses = this.falses ? this.falses.clone(buffer) : null;
                        return new this.constructor(this.var1.getExpression(), this.var2.getExpression(), trues, falses, this.negate);
                    }
                });

                ddtl.ForNode = lang.extend(function(assign, loop, reversed, nodelist) {
                    this.assign = assign;
                    this.loop = new dd._Filter(loop);
                    this.reversed = reversed;
                    this.nodelist = nodelist;
                    this.pool = [];
                }, {
                    render: function(context, buffer) {
                        var i, j, k;
                        var dirty = false;
                        var assign = this.assign;

                        for (k = 0; k < assign.length; k++) {
                            if (typeof context[assign[k]] != "undefined") {
                                dirty = true;
                                context = context.push();
                                break;
                            }
                        }
                        if (!dirty && context.forloop) {
                            dirty = true;
                            context = context.push();
                        }

                        var items = this.loop.resolve(context) || [];
                        for (i = items.length; i < this.pool.length; i++) {
                            this.pool[i].unrender(context, buffer, this);
                        }
                        if (this.reversed) {
                            items = items.slice(0).reverse();
                        }

                        var isObject = lang.isObject(items) && !lang.isArrayLike(items);
                        var arred = [];
                        if (isObject) {
                            for (var key in items) {
                                arred.push(items[key]);
                            }
                        } else {
                            arred = items;
                        }

                        var forloop = context.forloop = {
                            parentloop: context.get("forloop", {})
                        };
                        var j = 0;
                        for (i = 0; i < arred.length; i++) {
                            var item = arred[i];

                            forloop.counter0 = j;
                            forloop.counter = j + 1;
                            forloop.revcounter0 = arred.length - j - 1;
                            forloop.revcounter = arred.length - j;
                            forloop.first = !j;
                            forloop.last = (j == arred.length - 1);

                            if (assign.length > 1 && lang.isArrayLike(item)) {
                                if (!dirty) {
                                    dirty = true;
                                    context = context.push();
                                }
                                var zipped = {};
                                for (k = 0; k < item.length && k < assign.length; k++) {
                                    zipped[assign[k]] = item[k];
                                }
                                lang.mixin(context, zipped);
                            } else {
                                context[assign[0]] = item;
                            }

                            if (j + 1 > this.pool.length) {
                                this.pool.push(this.nodelist.clone(buffer));
                            }
                            buffer = this.pool[j++].render(context, buffer, this);
                        }

                        delete context.forloop;
                        if (dirty) {
                            context = context.pop();
                        } else {
                            for (k = 0; k < assign.length; k++) {
                                delete context[assign[k]];
                            }
                        }
                        return buffer;
                    },
                    unrender: function(context, buffer) {
                        for (var i = 0, pool; pool = this.pool[i]; i++) {
                            buffer = pool.unrender(context, buffer);
                        }
                        return buffer;
                    },
                    clone: function(buffer) {
                        return new this.constructor(this.assign, this.loop.getExpression(), this.reversed, this.nodelist.clone(buffer));
                    }
                });

                lang.mixin(ddtl, {
                    if_: function(parser, token) {
                        var i, part, type, bools = [],
                            parts = token.contents.split();
                        parts.shift();
                        token = parts.join(" ");
                        parts = token.split(" and ");
                        if (parts.length == 1) {
                            type = "or";
                            parts = token.split(" or ");
                        } else {
                            type = "and";
                            for (i = 0; i < parts.length; i++) {
                                if (parts[i].indexOf(" or ") != -1) {
                                    // Note, since we split by and, this is the only place we need to error check
                                    throw new Error("'if' tags can't mix 'and' and 'or'");
                                }
                            }
                        }
                        for (i = 0; part = parts[i]; i++) {
                            var not = false;
                            if (part.indexOf("not ") == 0) {
                                part = part.slice(4);
                                not = true;
                            }
                            bools.push([not, new dd._Filter(part)]);
                        }
                        var trues = parser.parse(["else", "endif"]);
                        var falses = false;
                        var token = parser.next_token();
                        if (token.contents == "else") {
                            falses = parser.parse(["endif"]);
                            parser.next_token();
                        }
                        return new ddtl.IfNode(bools, trues, falses, type);
                    },
                    _ifequal: function(parser, token, negate) {
                        var parts = token.split_contents();
                        if (parts.length != 3) {
                            throw new Error(parts[0] + " takes two arguments");
                        }
                        var end = 'end' + parts[0];
                        var trues = parser.parse(["else", end]);
                        var falses = false;
                        var token = parser.next_token();
                        if (token.contents == "else") {
                            falses = parser.parse([end]);
                            parser.next_token();
                        }
                        return new ddtl.IfEqualNode(parts[1], parts[2], trues, falses, negate);
                    },
                    ifequal: function(parser, token) {
                        return ddtl._ifequal(parser, token);
                    },
                    ifnotequal: function(parser, token) {
                        return ddtl._ifequal(parser, token, true);
                    },
                    for_: function(parser, token) {
                        var parts = token.contents.split();
                        if (parts.length < 4) {
                            throw new Error("'for' statements should have at least four words: " + token.contents);
                        }
                        var reversed = parts[parts.length - 1] == "reversed";
                        var index = (reversed) ? -3 : -2;
                        if (parts[parts.length + index] != "in") {
                            throw new Error("'for' tag received an invalid argument: " + token.contents);
                        }
                        var loopvars = parts.slice(1, index).join(" ").split(/ *, */);
                        for (var i = 0; i < loopvars.length; i++) {
                            if (!loopvars[i] || loopvars[i].indexOf(" ") != -1) {
                                throw new Error("'for' tag received an invalid argument: " + token.contents);
                            }
                        }
                        var nodelist = parser.parse(["endfor"]);
                        parser.next_token();
                        return new ddtl.ForNode(loopvars, parts[parts.length + index + 1], reversed, nodelist);
                    }
                });
                return dojox.dtl.tag.logic;
            });
        },
        'hsbcwidget/inputDefaultText': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/on",
                    "dojo/dom-prop",
                    "dojo/dom-attr",
                    "dojo/dom-class"

                ],
                function(declare, WidgetBase, query, on, domProp, domAttr, domClass) {

                    return declare("dijit.inputDefaultText", [WidgetBase], {
                        selector: '[data-default-text]',
                        attr: 'data-default-text',
                        defaultClass: 'defaultValue',

                        startup: function() {
                            var self = this;
                            query('[data-default-text]').forEach(function($input) {
                                self.bindEvents($input);
                                self._onBlur($input);
                            });
                        },

                        bindEvents: function($input) {
                            var self = this;
                            on($input, "focus", function(e) {
                                self._onFocus($input);
                            });
                            on($input, "blur", function(e) {
                                self._onBlur($input);
                            });
                        },

                        _onBlur: function($input) {
                            var self = this;
                            var val = domProp.get($input, 'value'),
                                defaultVal = domAttr.get($input, self.attr);
                            if (val === '') {
                                domProp.set($input, 'value', defaultVal);
                                domClass.add($input, self.defaultClass);
                            } else if (val === defaultVal) {
                                domClass.add($input, self.defaultClass);
                            }
                        },

                        _onFocus: function($input) {
                            var self = this;
                            if (domProp.get($input, 'value') === domAttr.get($input, self.attr)) {
                                domProp.set($input, 'value', '');
                                domClass.remove($input, self.defaultClass);
                            }
                        }
                    });

                }
            );
        },
        'hsbcwidget/DropDown': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/dom-style",
                    "dojo/_base/fx",
                    "dojo/on",
                    "dojo/query",
                    "dojo/_base/lang",
                    "dojo/dom-construct",
                    "dojo/dom-class",
                    "dojo/dom-attr",
                    "dojo/NodeList-manipulate",
                    "dojo/NodeList-fx",
                    "dojo/NodeList-dom"
                ],
                function(declare, _WidgetBase, domStlye, fx, on, query, lang, domConstruct, domClass, domAttr) {

                    return declare([_WidgetBase], {
                        state: 'open',
                        duration: 800,
                        moved: false,
                        prevent: true,

                        triggerSelector: '.trigger',
                        triggerNode: null,

                        placeholderSelector: '.placeholder',
                        placeholderNode: null,

                        contentSelector: '',
                        contentNode: null,

                        startup: function() {
                            this.inherited(arguments);

                            domAttr.set(this.domNode, 'aria-relevant', 'all');
                            domAttr.set(this.domNode, 'aria-live', 'polite');

                            this.triggerNode = query(this.triggerSelector, this.domNode);
                            this.placeholderNode = query(this.placeholderSelector, this.domNode);
                            this.contentNode = query(this.contentSelector);

                            on(this.triggerNode, 'click', lang.hitch(this, function(e) {
                                if (this.prevent) {
                                    e.preventDefault();
                                }

                                if (!this.moved) {
                                    domConstruct.place(this.contentNode[0], this.placeholderNode[0], "replace");
                                    domClass.remove(this.contentNode[0], 'loadinContent');

                                    this.placeholderNode = this.contentNode;
                                    this.moved = true;

                                    on.emit(this.domNode, 'dropDown.moved', {});

                                    this.close(true, true);
                                }

                                if (this.state === 'open') {
                                    this.close();
                                } else if (this.state === 'closed') {
                                    this.open();
                                }
                            }));
                        },

                        open: function(snap) {
                            if (this.state !== 'closed' || !this.moved) {
                                return;
                            }

                            snap = snap || false;

                            var duration = (snap ? 0 : this.duration);

                            this.placeholderNode.style('display', 'block');
                            this.placeholderNode.attr('aria-hidden', 'false');

                            this.state = 'opening';
                            this.applyState();

                            this.placeholderNode
                                .fadeIn({
                                    duration: duration,
                                    onEnd: lang.hitch(this, function(node) {
                                        this.state = 'open';
                                        this.applyState();
                                    }),
                                    auto: true
                                });
                        },

                        close: function(snap, override) {
                            if ((this.state !== 'open' || !this.moved) && !override) {
                                return;
                            }

                            snap = snap || false;

                            var duration = (snap ? 0 : this.duration);

                            this.state = 'closing';
                            this.applyState();

                            this.placeholderNode
                                .fadeOut({
                                    duration: duration,
                                    onEnd: lang.hitch(this, function(node) {
                                        domStlye.set(node, 'display', 'none');
                                        domAttr.set(node, 'aria-hidden', 'true');

                                        this.state = 'closed';
                                        this.applyState();

                                    }),
                                    auto: true
                                });
                        },

                        applyState: function() {
                            domClass.remove(this.domNode, 'dropDownClosed dropDownOpen dropDownOpening dropDownClosing');

                            var newClass;

                            switch (this.state) {
                                case 'open':
                                    newClass = 'dropDownOpen';
                                    break;
                                case 'closed':
                                    newClass = 'dropDownClosed';
                                    break;
                                case 'opening':
                                    newClass = 'dropDownOpening';
                                    break;
                                case 'closing':
                                    newClass = 'dropDownClosing';
                                    break;
                            }

                            domClass.add(this.domNode, newClass);
                            on.emit(this.domNode, ('dropdown-' + this.state), {});
                        }
                    });

                }
            );
        },
        'dojo/dom-construct': function() {
            define(["exports", "./_base/kernel", "./sniff", "./_base/window", "./dom", "./dom-attr", "./on"],
                function(exports, dojo, has, win, dom, attr, on) {
                    // module:
                    //		dojo/dom-construct
                    // summary:
                    //		This module defines the core dojo DOM construction API.

                    // TODOC: summary not showing up in output, see https://github.com/csnover/js-doc-parse/issues/42

                    // support stuff for toDom()
                    var tagWrap = {
                            option: ["select"],
                            tbody: ["table"],
                            thead: ["table"],
                            tfoot: ["table"],
                            tr: ["table", "tbody"],
                            td: ["table", "tbody", "tr"],
                            th: ["table", "thead", "tr"],
                            legend: ["fieldset"],
                            caption: ["table"],
                            colgroup: ["table"],
                            col: ["table", "colgroup"],
                            li: ["ul"]
                        },
                        reTag = /<\s*([\w\:]+)/,
                        masterNode = {},
                        masterNum = 0,
                        masterName = "__" + dojo._scopeName + "ToDomId";

                    // generate start/end tag strings to use
                    // for the injection for each special tag wrap case.
                    for (var param in tagWrap) {
                        if (tagWrap.hasOwnProperty(param)) {
                            var tw = tagWrap[param];
                            tw.pre = param == "option" ? '<select multiple="multiple">' : "<" + tw.join("><") + ">";
                            tw.post = "</" + tw.reverse().join("></") + ">";
                            // the last line is destructive: it reverses the array,
                            // but we don't care at this point
                        }
                    }

                    function _insertBefore( /*DomNode*/ node, /*DomNode*/ ref) {
                        var parent = ref.parentNode;
                        if (parent) {
                            parent.insertBefore(node, ref);
                        }
                    }

                    function _insertAfter( /*DomNode*/ node, /*DomNode*/ ref) {
                        // summary:
                        //		Try to insert node after ref
                        var parent = ref.parentNode;
                        if (parent) {
                            if (parent.lastChild == ref) {
                                parent.appendChild(node);
                            } else {
                                parent.insertBefore(node, ref.nextSibling);
                            }
                        }
                    }

                    var _destroyContainer = null,
                        _destroyDoc;
                    on(window, "unload", function() {
                        _destroyContainer = null; //prevent IE leak
                    });

                    exports.toDom = function toDom(frag, doc) {
                        // summary:
                        //		instantiates an HTML fragment returning the corresponding DOM.
                        // frag: String
                        //		the HTML fragment
                        // doc: DocumentNode?
                        //		optional document to use when creating DOM nodes, defaults to
                        //		dojo.doc if not specified.
                        // returns:
                        //		Document fragment, unless it's a single node in which case it returns the node itself
                        // example:
                        //		Create a table row:
                        //	|	var tr = dojo.toDom("<tr><td>First!</td></tr>");

                        doc = doc || win.doc;
                        var masterId = doc[masterName];
                        if (!masterId) {
                            doc[masterName] = masterId = ++masterNum + "";
                            masterNode[masterId] = doc.createElement("div");
                        }

                        // make sure the frag is a string.
                        frag += "";

                        // find the starting tag, and get node wrapper
                        var match = frag.match(reTag),
                            tag = match ? match[1].toLowerCase() : "",
                            master = masterNode[masterId],
                            wrap, i, fc, df;
                        if (match && tagWrap[tag]) {
                            wrap = tagWrap[tag];
                            master.innerHTML = wrap.pre + frag + wrap.post;
                            for (i = wrap.length; i; --i) {
                                master = master.firstChild;
                            }
                        } else {
                            master.innerHTML = frag;
                        }

                        // one node shortcut => return the node itself
                        if (master.childNodes.length == 1) {
                            return master.removeChild(master.firstChild); // DOMNode
                        }

                        // return multiple nodes as a document fragment
                        df = doc.createDocumentFragment();
                        while (fc = master.firstChild) { // intentional assignment
                            df.appendChild(fc);
                        }
                        return df; // DocumentFragment
                    };

                    exports.place = function place( /*DOMNode|String*/ node, /*DOMNode|String*/ refNode, /*String|Number?*/ position) {
                        // summary:
                        //		Attempt to insert node into the DOM, choosing from various positioning options.
                        //		Returns the first argument resolved to a DOM node.
                        // node: DOMNode|String
                        //		id or node reference, or HTML fragment starting with "<" to place relative to refNode
                        // refNode: DOMNode|String
                        //		id or node reference to use as basis for placement
                        // position: String|Number?
                        //		string noting the position of node relative to refNode or a
                        //		number indicating the location in the childNodes collection of refNode.
                        //		Accepted string values are:
                        //
                        //		- before
                        //		- after
                        //		- replace
                        //		- only
                        //		- first
                        //		- last
                        //
                        //		"first" and "last" indicate positions as children of refNode, "replace" replaces refNode,
                        //		"only" replaces all children.  position defaults to "last" if not specified
                        // returns: DOMNode
                        //		Returned values is the first argument resolved to a DOM node.
                        //
                        //		.place() is also a method of `dojo/NodeList`, allowing `dojo.query` node lookups.
                        // example:
                        //		Place a node by string id as the last child of another node by string id:
                        //	|	dojo.place("someNode", "anotherNode");
                        // example:
                        //		Place a node by string id before another node by string id
                        //	|	dojo.place("someNode", "anotherNode", "before");
                        // example:
                        //		Create a Node, and place it in the body element (last child):
                        //	|	dojo.place("<div></div>", dojo.body());
                        // example:
                        //		Put a new LI as the first child of a list by id:
                        //	|	dojo.place("<li></li>", "someUl", "first");

                        refNode = dom.byId(refNode);
                        if (typeof node == "string") { // inline'd type check
                            node = /^\s*</.test(node) ? exports.toDom(node, refNode.ownerDocument) : dom.byId(node);
                        }
                        if (typeof position == "number") { // inline'd type check
                            var cn = refNode.childNodes;
                            if (!cn.length || cn.length <= position) {
                                refNode.appendChild(node);
                            } else {
                                _insertBefore(node, cn[position < 0 ? 0 : position]);
                            }
                        } else {
                            switch (position) {
                                case "before":
                                    _insertBefore(node, refNode);
                                    break;
                                case "after":
                                    _insertAfter(node, refNode);
                                    break;
                                case "replace":
                                    refNode.parentNode.replaceChild(node, refNode);
                                    break;
                                case "only":
                                    exports.empty(refNode);
                                    refNode.appendChild(node);
                                    break;
                                case "first":
                                    if (refNode.firstChild) {
                                        _insertBefore(node, refNode.firstChild);
                                        break;
                                    }
                                    // else fallthrough...
                                default: // aka: last
                                    refNode.appendChild(node);
                            }
                        }
                        return node; // DomNode
                    };

                    exports.create = function create( /*DOMNode|String*/ tag, /*Object*/ attrs, /*DOMNode|String?*/ refNode, /*String?*/ pos) {
                        // summary:
                        //		Create an element, allowing for optional attribute decoration
                        //		and placement.
                        // description:
                        //		A DOM Element creation function. A shorthand method for creating a node or
                        //		a fragment, and allowing for a convenient optional attribute setting step,
                        //		as well as an optional DOM placement reference.
                        //
                        //		Attributes are set by passing the optional object through `dojo.setAttr`.
                        //		See `dojo.setAttr` for noted caveats and nuances, and API if applicable.
                        //
                        //		Placement is done via `dojo.place`, assuming the new node to be the action
                        //		node, passing along the optional reference node and position.
                        // tag: DOMNode|String
                        //		A string of the element to create (eg: "div", "a", "p", "li", "script", "br"),
                        //		or an existing DOM node to process.
                        // attrs: Object
                        //		An object-hash of attributes to set on the newly created node.
                        //		Can be null, if you don't want to set any attributes/styles.
                        //		See: `dojo.setAttr` for a description of available attributes.
                        // refNode: DOMNode|String?
                        //		Optional reference node. Used by `dojo.place` to place the newly created
                        //		node somewhere in the dom relative to refNode. Can be a DomNode reference
                        //		or String ID of a node.
                        // pos: String?
                        //		Optional positional reference. Defaults to "last" by way of `dojo.place`,
                        //		though can be set to "first","after","before","last", "replace" or "only"
                        //		to further control the placement of the new node relative to the refNode.
                        //		'refNode' is required if a 'pos' is specified.
                        // example:
                        //		Create a DIV:
                        //	|	var n = dojo.create("div");
                        //
                        // example:
                        //		Create a DIV with content:
                        //	|	var n = dojo.create("div", { innerHTML:"<p>hi</p>" });
                        //
                        // example:
                        //		Place a new DIV in the BODY, with no attributes set
                        //	|	var n = dojo.create("div", null, dojo.body());
                        //
                        // example:
                        //		Create an UL, and populate it with LI's. Place the list as the first-child of a
                        //		node with id="someId":
                        //	|	var ul = dojo.create("ul", null, "someId", "first");
                        //	|	var items = ["one", "two", "three", "four"];
                        //	|	dojo.forEach(items, function(data){
                        //	|		dojo.create("li", { innerHTML: data }, ul);
                        //	|	});
                        //
                        // example:
                        //		Create an anchor, with an href. Place in BODY:
                        //	|	dojo.create("a", { href:"foo.html", title:"Goto FOO!" }, dojo.body());
                        //
                        // example:
                        //		Create a `dojo/NodeList()` from a new element (for syntactic sugar):
                        //	|	dojo.query(dojo.create('div'))
                        //	|		.addClass("newDiv")
                        //	|		.onclick(function(e){ console.log('clicked', e.target) })
                        //	|		.place("#someNode"); // redundant, but cleaner.

                        var doc = win.doc;
                        if (refNode) {
                            refNode = dom.byId(refNode);
                            doc = refNode.ownerDocument;
                        }
                        if (typeof tag == "string") { // inline'd type check
                            tag = doc.createElement(tag);
                        }
                        if (attrs) {
                            attr.set(tag, attrs);
                        }
                        if (refNode) {
                            exports.place(tag, refNode, pos);
                        }
                        return tag; // DomNode
                    };

                    exports.empty =
                        has("ie") ? function(node) {
                            node = dom.byId(node);
                            for (var c; c = node.lastChild;) { // intentional assignment
                                exports.destroy(c);
                            }
                        } :
                        function(node) {
                            dom.byId(node).innerHTML = "";
                        };
                    /*=====
                     exports.empty = function(node){
                    	 // summary:
                    	 //		safely removes all children of the node.
                    	 // node: DOMNode|String
                    	 //		a reference to a DOM node or an id.
                    	 // example:
                    	 //		Destroy node's children byId:
                    	 //	|	dojo.empty("someId");
                    	 //
                    	 // example:
                    	 //		Destroy all nodes' children in a list by reference:
                    	 //	|	dojo.query(".someNode").forEach(dojo.empty);
                     };
                     =====*/

                    exports.destroy = function destroy( /*DOMNode|String*/ node) {
                        // summary:
                        //		Removes a node from its parent, clobbering it and all of its
                        //		children.
                        //
                        // description:
                        //		Removes a node from its parent, clobbering it and all of its
                        //		children. Function only works with DomNodes, and returns nothing.
                        //
                        // node: DOMNode|String
                        //		A String ID or DomNode reference of the element to be destroyed
                        //
                        // example:
                        //		Destroy a node byId:
                        //	|	dojo.destroy("someId");
                        //
                        // example:
                        //		Destroy all nodes in a list by reference:
                        //	|	dojo.query(".someNode").forEach(dojo.destroy);

                        node = dom.byId(node);
                        try {
                            var doc = node.ownerDocument;
                            // cannot use _destroyContainer.ownerDocument since this can throw an exception on IE
                            if (!_destroyContainer || _destroyDoc != doc) {
                                _destroyContainer = doc.createElement("div");
                                _destroyDoc = doc;
                            }
                            _destroyContainer.appendChild(node.parentNode ? node.parentNode.removeChild(node) : node);
                            // NOTE: see http://trac.dojotoolkit.org/ticket/2931. This may be a bug and not a feature
                            _destroyContainer.innerHTML = "";
                        } catch (e) {
                            /* squelch */
                        }
                    };
                });

        },
        'dijit/_Container': function() {
            define("dijit/_Container", [
                "dojo/_base/array", // array.forEach array.indexOf
                "dojo/_base/declare", // declare
                "dojo/dom-construct" // domConstruct.place
            ], function(array, declare, domConstruct) {

                // module:
                //		dijit/_Container

                return declare("dijit._Container", null, {
                    // summary:
                    //		Mixin for widgets that contain HTML and/or a set of widget children.

                    buildRendering: function() {
                        this.inherited(arguments);
                        if (!this.containerNode) {
                            // all widgets with descendants must set containerNode
                            this.containerNode = this.domNode;
                        }
                    },

                    addChild: function( /*dijit/_WidgetBase*/ widget, /*int?*/ insertIndex) {
                        // summary:
                        //		Makes the given widget a child of this widget.
                        // description:
                        //		Inserts specified child widget's dom node as a child of this widget's
                        //		container node, and possibly does other processing (such as layout).
                        //
                        //		Functionality is undefined if this widget contains anything besides
                        //		a list of child widgets (ie, if it contains arbitrary non-widget HTML).

                        var refNode = this.containerNode;
                        if (insertIndex && typeof insertIndex == "number") {
                            var children = this.getChildren();
                            if (children && children.length >= insertIndex) {
                                refNode = children[insertIndex - 1].domNode;
                                insertIndex = "after";
                            }
                        }
                        domConstruct.place(widget.domNode, refNode, insertIndex);

                        // If I've been started but the child widget hasn't been started,
                        // start it now.  Make sure to do this after widget has been
                        // inserted into the DOM tree, so it can see that it's being controlled by me,
                        // so it doesn't try to size itself.
                        if (this._started && !widget._started) {
                            widget.startup();
                        }
                    },

                    removeChild: function( /*Widget|int*/ widget) {
                        // summary:
                        //		Removes the passed widget instance from this widget but does
                        //		not destroy it.  You can also pass in an integer indicating
                        //		the index within the container to remove (ie, removeChild(5) removes the sixth widget).

                        if (typeof widget == "number") {
                            widget = this.getChildren()[widget];
                        }

                        if (widget) {
                            var node = widget.domNode;
                            if (node && node.parentNode) {
                                node.parentNode.removeChild(node); // detach but don't destroy
                            }
                        }
                    },

                    hasChildren: function() {
                        // summary:
                        //		Returns true if widget has child widgets, i.e. if this.containerNode contains widgets.
                        return this.getChildren().length > 0; // Boolean
                    },

                    _getSiblingOfChild: function( /*dijit/_WidgetBase*/ child, /*int*/ dir) {
                        // summary:
                        //		Get the next or previous widget sibling of child
                        // dir:
                        //		if 1, get the next sibling
                        //		if -1, get the previous sibling
                        // tags:
                        //		private
                        var children = this.getChildren(),
                            idx = array.indexOf(this.getChildren(), child); // int
                        return children[idx + dir];
                    },

                    getIndexOfChild: function( /*dijit/_WidgetBase*/ child) {
                        // summary:
                        //		Gets the index of the child in this container or -1 if not found
                        return array.indexOf(this.getChildren(), child); // int
                    }
                });
            });

        },
        'dojo/when': function() {
            define([
                "./Deferred",
                "./promise/Promise"
            ], function(Deferred, Promise) {
                "use strict";

                // module:
                //		dojo/when

                return function when(valueOrPromise, callback, errback, progback) {
                    // summary:
                    //		Transparently applies callbacks to values and/or promises.
                    // description:
                    //		Accepts promises but also transparently handles non-promises. If no
                    //		callbacks are provided returns a promise, regardless of the initial
                    //		value. Foreign promises are converted.
                    //
                    //		If callbacks are provided and the initial value is not a promise,
                    //		the callback is executed immediately with no error handling. Returns
                    //		a promise if the initial value is a promise, or the result of the
                    //		callback otherwise.
                    // valueOrPromise:
                    //		Either a regular value or an object with a `then()` method that
                    //		follows the Promises/A specification.
                    // callback: Function?
                    //		Callback to be invoked when the promise is resolved, or a non-promise
                    //		is received.
                    // errback: Function?
                    //		Callback to be invoked when the promise is rejected.
                    // progback: Function?
                    //		Callback to be invoked when the promise emits a progress update.
                    // returns: dojo/promise/Promise
                    //		Promise, or if a callback is provided, the result of the callback.

                    var receivedPromise = valueOrPromise && typeof valueOrPromise.then === "function";
                    var nativePromise = receivedPromise && valueOrPromise instanceof Promise;

                    if (!receivedPromise) {
                        if (callback) {
                            return callback(valueOrPromise);
                        } else {
                            return new Deferred().resolve(valueOrPromise);
                        }
                    } else if (!nativePromise) {
                        var deferred = new Deferred(valueOrPromise.cancel);
                        valueOrPromise.then(deferred.resolve, deferred.reject, deferred.progress);
                        valueOrPromise = deferred.promise;
                    }

                    if (callback || errback || progback) {
                        return valueOrPromise.then(callback, errback, progback);
                    }
                    return valueOrPromise;
                };
            });

        },
        'dojo/html': function() {
            define("dojo/html", ["./_base/kernel", "./_base/lang", "./_base/array", "./_base/declare", "./dom", "./dom-construct", "./parser"],
                function(kernel, lang, darray, declare, dom, domConstruct, parser) {
                    // module:
                    //		dojo/html

                    var html = {
                        // summary:
                        //		TODOC
                    };
                    lang.setObject("dojo.html", html);

                    // the parser might be needed..

                    // idCounter is incremented with each instantiation to allow assignment of a unique id for tracking, logging purposes
                    var idCounter = 0;

                    html._secureForInnerHtml = function( /*String*/ cont) {
                        // summary:
                        //		removes !DOCTYPE and title elements from the html string.
                        //
                        //		khtml is picky about dom faults, you can't attach a style or `<title>` node as child of body
                        //		must go into head, so we need to cut out those tags
                        // cont:
                        //		An html string for insertion into the dom
                        //
                        return cont.replace(/(?:\s*<!DOCTYPE\s[^>]+>|<title[^>]*>[\s\S]*?<\/title>)/ig, ""); // String
                    };

                    html._emptyNode = domConstruct.empty;
                    /*=====
                     dojo.html._emptyNode = function(node){
                    	 // summary:
                    	 //		removes all child nodes from the given node
                    	 // node: DOMNode
                    	 //		the parent element
                     };
                     =====*/

                    html._setNodeContent = function( /*DomNode*/ node, /*String|DomNode|NodeList*/ cont) {
                        // summary:
                        //		inserts the given content into the given node
                        // node:
                        //		the parent element
                        // content:
                        //		the content to be set on the parent element.
                        //		This can be an html string, a node reference or a NodeList, dojo/NodeList, Array or other enumerable list of nodes

                        // always empty
                        domConstruct.empty(node);

                        if (cont) {
                            if (typeof cont == "string") {
                                cont = domConstruct.toDom(cont, node.ownerDocument);
                            }
                            if (!cont.nodeType && lang.isArrayLike(cont)) {
                                // handle as enumerable, but it may shrink as we enumerate it
                                for (var startlen = cont.length, i = 0; i < cont.length; i = startlen == cont.length ? i + 1 : 0) {
                                    domConstruct.place(cont[i], node, "last");
                                }
                            } else {
                                // pass nodes, documentFragments and unknowns through to dojo.place
                                domConstruct.place(cont, node, "last");
                            }
                        }

                        // return DomNode
                        return node;
                    };

                    // we wrap up the content-setting operation in a object
                    html._ContentSetter = declare("dojo.html._ContentSetter", null, {
                        // node: DomNode|String
                        //		An node which will be the parent element that we set content into
                        node: "",

                        // content: String|DomNode|DomNode[]
                        //		The content to be placed in the node. Can be an HTML string, a node reference, or a enumerable list of nodes
                        content: "",

                        // id: String?
                        //		Usually only used internally, and auto-generated with each instance
                        id: "",

                        // cleanContent: Boolean
                        //		Should the content be treated as a full html document,
                        //		and the real content stripped of <html>, <body> wrapper before injection
                        cleanContent: false,

                        // extractContent: Boolean
                        //		Should the content be treated as a full html document,
                        //		and the real content stripped of `<html> <body>` wrapper before injection
                        extractContent: false,

                        // parseContent: Boolean
                        //		Should the node by passed to the parser after the new content is set
                        parseContent: false,

                        // parserScope: String
                        //		Flag passed to parser.	Root for attribute names to search for.	  If scopeName is dojo,
                        //		will search for data-dojo-type (or dojoType).  For backwards compatibility
                        //		reasons defaults to dojo._scopeName (which is "dojo" except when
                        //		multi-version support is used, when it will be something like dojo16, dojo20, etc.)
                        parserScope: kernel._scopeName,

                        // startup: Boolean
                        //		Start the child widgets after parsing them.	  Only obeyed if parseContent is true.
                        startup: true,

                        // lifecycle methods
                        constructor: function( /*Object*/ params, /*String|DomNode*/ node) {
                            // summary:
                            //		Provides a configurable, extensible object to wrap the setting on content on a node
                            //		call the set() method to actually set the content..

                            // the original params are mixed directly into the instance "this"
                            lang.mixin(this, params || {});

                            // give precedence to params.node vs. the node argument
                            // and ensure its a node, not an id string
                            node = this.node = dom.byId(this.node || node);

                            if (!this.id) {
                                this.id = [
                                    "Setter",
                                    (node) ? node.id || node.tagName : "",
                                    idCounter++
                                ].join("_");
                            }
                        },
                        set: function( /* String|DomNode|NodeList? */ cont, /*Object?*/ params) {
                            // summary:
                            //		front-end to the set-content sequence
                            // cont:
                            //		An html string, node or enumerable list of nodes for insertion into the dom
                            //		If not provided, the object's content property will be used
                            if (undefined !== cont) {
                                this.content = cont;
                            }
                            // in the re-use scenario, set needs to be able to mixin new configuration
                            if (params) {
                                this._mixin(params);
                            }

                            this.onBegin();
                            this.setContent();

                            var ret = this.onEnd();

                            if (ret && ret.then) {
                                // Make dojox/html/_ContentSetter.set() return a Promise that resolves when load and parse complete.
                                return ret;
                            } else {
                                // Vanilla dojo/html._ContentSetter.set() returns a DOMNode for back compat.   For 2.0, switch it to
                                // return a Deferred like above.
                                return this.node;
                            }
                        },

                        setContent: function() {
                            // summary:
                            //		sets the content on the node

                            var node = this.node;
                            if (!node) {
                                // can't proceed
                                throw new Error(this.declaredClass + ": setContent given no node");
                            }
                            try {
                                node = html._setNodeContent(node, this.content);
                            } catch (e) {
                                // check if a domfault occurs when we are appending this.errorMessage
                                // like for instance if domNode is a UL and we try append a DIV

                                // FIXME: need to allow the user to provide a content error message string
                                var errMess = this.onContentError(e);
                                try {
                                    node.innerHTML = errMess;
                                } catch (e) {
                                    console.error('Fatal ' + this.declaredClass + '.setContent could not change content due to ' + e.message, e);
                                }
                            }
                            // always put back the node for the next method
                            this.node = node; // DomNode
                        },

                        empty: function() {
                            // summary:
                            //		cleanly empty out existing content

                            // If there is a parse in progress, cancel it.
                            if (this.parseDeferred) {
                                if (!this.parseDeferred.isResolved()) {
                                    this.parseDeferred.cancel();
                                }
                                delete this.parseDeferred;
                            }

                            // destroy any widgets from a previous run
                            // NOTE: if you don't want this you'll need to empty
                            // the parseResults array property yourself to avoid bad things happening
                            if (this.parseResults && this.parseResults.length) {
                                darray.forEach(this.parseResults, function(w) {
                                    if (w.destroy) {
                                        w.destroy();
                                    }
                                });
                                delete this.parseResults;
                            }
                            // this is fast, but if you know its already empty or safe, you could
                            // override empty to skip this step
                            html._emptyNode(this.node);
                        },

                        onBegin: function() {
                            // summary:
                            //		Called after instantiation, but before set();
                            //		It allows modification of any of the object properties -
                            //		including the node and content provided - before the set operation actually takes place
                            //		This default implementation checks for cleanContent and extractContent flags to
                            //		optionally pre-process html string content
                            var cont = this.content;

                            if (lang.isString(cont)) {
                                if (this.cleanContent) {
                                    cont = html._secureForInnerHtml(cont);
                                }

                                if (this.extractContent) {
                                    var match = cont.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
                                    if (match) {
                                        cont = match[1];
                                    }
                                }
                            }

                            // clean out the node and any cruft associated with it - like widgets
                            this.empty();

                            this.content = cont;
                            return this.node; // DomNode
                        },

                        onEnd: function() {
                            // summary:
                            //		Called after set(), when the new content has been pushed into the node
                            //		It provides an opportunity for post-processing before handing back the node to the caller
                            //		This default implementation checks a parseContent flag to optionally run the dojo parser over the new content
                            if (this.parseContent) {
                                // populates this.parseResults and this.parseDeferred if you need those..
                                this._parse();
                            }
                            return this.node; // DomNode
                            // TODO: for 2.0 return a Promise indicating that the parse completed.
                        },

                        tearDown: function() {
                            // summary:
                            //		manually reset the Setter instance if its being re-used for example for another set()
                            // description:
                            //		tearDown() is not called automatically.
                            //		In normal use, the Setter instance properties are simply allowed to fall out of scope
                            //		but the tearDown method can be called to explicitly reset this instance.
                            delete this.parseResults;
                            delete this.parseDeferred;
                            delete this.node;
                            delete this.content;
                        },

                        onContentError: function(err) {
                            return "Error occurred setting content: " + err;
                        },

                        onExecError: function(err) {
                            return "Error occurred executing scripts: " + err;
                        },

                        _mixin: function(params) {
                            // mix properties/methods into the instance
                            // TODO: the intention with tearDown is to put the Setter's state
                            // back to that of the original constructor (vs. deleting/resetting everything regardless of ctor params)
                            // so we could do something here to move the original properties aside for later restoration
                            var empty = {},
                                key;
                            for (key in params) {
                                if (key in empty) {
                                    continue;
                                }
                                // TODO: here's our opportunity to mask the properties we don't consider configurable/overridable
                                // .. but history shows we'll almost always guess wrong
                                this[key] = params[key];
                            }
                        },
                        _parse: function() {
                            // summary:
                            //		runs the dojo parser over the node contents, storing any results in this.parseResults
                            //		and the parse promise in this.parseDeferred
                            //		Any errors resulting from parsing are passed to _onError for handling

                            var rootNode = this.node;
                            try {
                                // store the results (widgets, whatever) for potential retrieval
                                var inherited = {};
                                darray.forEach(["dir", "lang", "textDir"], function(name) {
                                    if (this[name]) {
                                        inherited[name] = this[name];
                                    }
                                }, this);
                                var self = this;
                                this.parseDeferred = parser.parse({
                                    rootNode: rootNode,
                                    noStart: !this.startup,
                                    inherited: inherited,
                                    scope: this.parserScope
                                }).then(function(results) {
                                    return self.parseResults = results;
                                });
                            } catch (e) {
                                this._onError('Content', e, "Error parsing in _ContentSetter#" + this.id);
                            }
                        },

                        _onError: function(type, err, consoleText) {
                            // summary:
                            //		shows user the string that is returned by on[type]Error
                            //		override/implement on[type]Error and return your own string to customize
                            var errText = this['on' + type + 'Error'].call(this, err);
                            if (consoleText) {
                                console.error(consoleText, err);
                            } else if (errText) { // a empty string won't change current content
                                html._setNodeContent(this.node, errText, true);
                            }
                        }
                    }); // end declare()

                    html.set = function( /*DomNode*/ node, /*String|DomNode|NodeList*/ cont, /*Object?*/ params) {
                        // summary:
                        //		inserts (replaces) the given content into the given node. dojo.place(cont, node, "only")
                        //		may be a better choice for simple HTML insertion.
                        // description:
                        //		Unless you need to use the params capabilities of this method, you should use
                        //		dojo.place(cont, node, "only"). dojo.place() has more robust support for injecting
                        //		an HTML string into the DOM, but it only handles inserting an HTML string as DOM
                        //		elements, or inserting a DOM node. dojo.place does not handle NodeList insertions
                        //		or the other capabilities as defined by the params object for this method.
                        // node:
                        //		the parent element that will receive the content
                        // cont:
                        //		the content to be set on the parent element.
                        //		This can be an html string, a node reference or a NodeList, dojo/NodeList, Array or other enumerable list of nodes
                        // params:
                        //		Optional flags/properties to configure the content-setting. See dojo/html/_ContentSetter
                        // example:
                        //		A safe string/node/nodelist content replacement/injection with hooks for extension
                        //		Example Usage:
                        //	|	html.set(node, "some string");
                        //	|	html.set(node, contentNode, {options});
                        //	|	html.set(node, myNode.childNodes, {options});
                        if (undefined == cont) {
                            console.warn("dojo.html.set: no cont argument provided, using empty string");
                            cont = "";
                        }
                        if (!params) {
                            // simple and fast
                            return html._setNodeContent(node, cont, true);
                        } else {
                            // more options but slower
                            // note the arguments are reversed in order, to match the convention for instantiation via the parser
                            var op = new html._ContentSetter(lang.mixin(
                                params, {
                                    content: cont,
                                    node: node
                                }
                            ));
                            return op.set();
                        }
                    };

                    return html;
                });

        },
        'url:dijit/templates/TitlePane.html': "<div>\n\t<div data-dojo-attach-event=\"onclick:_onTitleClick, onkeydown:_onTitleKey\"\n\t\t\tclass=\"dijitTitlePaneTitle\" data-dojo-attach-point=\"titleBarNode\" id=\"${id}_titleBarNode\">\n\t\t<div class=\"dijitTitlePaneTitleFocus\" data-dojo-attach-point=\"focusNode\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" data-dojo-attach-point=\"arrowNode\" class=\"dijitArrowNode\" role=\"presentation\"\n\t\t\t/><span data-dojo-attach-point=\"arrowNodeInner\" class=\"dijitArrowNodeInner\"></span\n\t\t\t><span data-dojo-attach-point=\"titleNode\" class=\"dijitTitlePaneTextNode\"></span>\n\t\t</div>\n\t</div>\n\t<div class=\"dijitTitlePaneContentOuter\" data-dojo-attach-point=\"hideNode\" role=\"presentation\">\n\t\t<div class=\"dijitReset\" data-dojo-attach-point=\"wipeNode\" role=\"presentation\">\n\t\t\t<div class=\"dijitTitlePaneContentInner\" data-dojo-attach-point=\"containerNode\" role=\"region\" id=\"${id}_pane\" aria-labelledby=\"${id}_titleBarNode\">\n\t\t\t\t<!-- nested divs because wipeIn()/wipeOut() doesn't work right on node w/padding etc.  Put padding on inner div. -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n",
        'dijit/form/ValidationTextBox': function() {
            require({
                cache: {
                    'url:dijit/form/templates/ValidationTextBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\" role=\"presentation\"\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class=\"dijitReset dijitInputInner\" data-dojo-attach-point='textbox,focusNode' autocomplete=\"off\"\n\t\t\t${!nameAttrSetting} type='${type}'\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/ValidationTextBox", [
                "dojo/_base/declare", // declare
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/i18n", // i18n.getLocalization
                "./TextBox",
                "../Tooltip",
                "dojo/text!./templates/ValidationTextBox.html",
                "dojo/i18n!./nls/validate"
            ], function(declare, kernel, i18n, TextBox, Tooltip, template) {

                // module:
                //		dijit/form/ValidationTextBox


                /*=====
                var __Constraints = {
                	// locale: String
                	//		locale used for validation, picks up value from this widget's lang attribute
                	// _flags_: anything
                	//		various flags passed to pattern function
                };
                =====*/

                var ValidationTextBox;
                return ValidationTextBox = declare("dijit.form.ValidationTextBox", TextBox, {
                    // summary:
                    //		Base class for textbox widgets with the ability to validate content of various types and provide user feedback.

                    templateString: template,

                    // required: Boolean
                    //		User is required to enter data into this field.
                    required: false,

                    // promptMessage: String
                    //		If defined, display this hint string immediately on focus to the textbox, if empty.
                    //		Also displays if the textbox value is Incomplete (not yet valid but will be with additional input).
                    //		Think of this like a tooltip that tells the user what to do, not an error message
                    //		that tells the user what they've done wrong.
                    //
                    //		Message disappears when user starts typing.
                    promptMessage: "",

                    // invalidMessage: String
                    //		The message to display if value is invalid.
                    //		The translated string value is read from the message file by default.
                    //		Set to "" to use the promptMessage instead.
                    invalidMessage: "$_unset_$",

                    // missingMessage: String
                    //		The message to display if value is empty and the field is required.
                    //		The translated string value is read from the message file by default.
                    //		Set to "" to use the invalidMessage instead.
                    missingMessage: "$_unset_$",

                    // message: String
                    //		Currently error/prompt message.
                    //		When using the default tooltip implementation, this will only be
                    //		displayed when the field is focused.
                    message: "",

                    // constraints: __Constraints
                    //		user-defined object needed to pass parameters to the validator functions
                    constraints: {},

                    // pattern: [extension protected] String|Function(constraints) returning a string.
                    //		This defines the regular expression used to validate the input.
                    //		Do not add leading ^ or $ characters since the widget adds these.
                    //		A function may be used to generate a valid pattern when dependent on constraints or other runtime factors.
                    //		set('pattern', String|Function).
                    pattern: ".*",

                    // regExp: Deprecated [extension protected] String.  Use "pattern" instead.
                    regExp: "",

                    regExpGen: function( /*__Constraints*/ /*===== constraints =====*/ ) {
                        // summary:
                        //		Deprecated.  Use set('pattern', Function) instead.
                    },

                    // state: [readonly] String
                    //		Shows current state (ie, validation result) of input (""=Normal, Incomplete, or Error)
                    state: "",

                    // tooltipPosition: String[]
                    //		See description of `dijit/Tooltip.defaultPosition` for details on this parameter.
                    tooltipPosition: [],

                    _deprecateRegExp: function(attr, value) {
                        if (value != ValidationTextBox.prototype[attr]) {
                            kernel.deprecated("ValidationTextBox id=" + this.id + ", set('" + attr + "', ...) is deprecated.  Use set('pattern', ...) instead.", "", "2.0");
                            this.set('pattern', value);
                        }
                    },
                    _setRegExpGenAttr: function( /*Function*/ newFcn) {
                        this._deprecateRegExp("regExpGen", newFcn);
                        this.regExpGen = this._getPatternAttr; // backward compat with this.regExpGen(this.constraints)
                    },
                    _setRegExpAttr: function( /*String*/ value) {
                        this._deprecateRegExp("regExp", value);
                    },

                    _setValueAttr: function() {
                        // summary:
                        //		Hook so set('value', ...) works.
                        this.inherited(arguments);
                        this.validate(this.focused);
                    },

                    validator: function( /*anything*/ value, /*__Constraints*/ constraints) {
                        // summary:
                        //		Overridable function used to validate the text input against the regular expression.
                        // tags:
                        //		protected
                        return (new RegExp("^(?:" + this._getPatternAttr(constraints) + ")" + (this.required ? "" : "?") + "$")).test(value) &&
                            (!this.required || !this._isEmpty(value)) &&
                            (this._isEmpty(value) || this.parse(value, constraints) !== undefined); // Boolean
                    },

                    _isValidSubset: function() {
                        // summary:
                        //		Returns true if the value is either already valid or could be made valid by appending characters.
                        //		This is used for validation while the user [may be] still typing.
                        return this.textbox.value.search(this._partialre) == 0;
                    },

                    isValid: function( /*Boolean*/ /*===== isFocused =====*/ ) {
                        // summary:
                        //		Tests if value is valid.
                        //		Can override with your own routine in a subclass.
                        // tags:
                        //		protected
                        return this.validator(this.textbox.value, this.constraints);
                    },

                    _isEmpty: function(value) {
                        // summary:
                        //		Checks for whitespace
                        return (this.trim ? /^\s*$/ : /^$/).test(value); // Boolean
                    },

                    getErrorMessage: function( /*Boolean*/ /*===== isFocused =====*/ ) {
                        // summary:
                        //		Return an error message to show if appropriate
                        // tags:
                        //		protected
                        var invalid = this.invalidMessage == "$_unset_$" ? this.messages.invalidMessage :
                            !this.invalidMessage ? this.promptMessage : this.invalidMessage;
                        var missing = this.missingMessage == "$_unset_$" ? this.messages.missingMessage :
                            !this.missingMessage ? invalid : this.missingMessage;
                        return (this.required && this._isEmpty(this.textbox.value)) ? missing : invalid; // String
                    },

                    getPromptMessage: function( /*Boolean*/ /*===== isFocused =====*/ ) {
                        // summary:
                        //		Return a hint message to show when widget is first focused
                        // tags:
                        //		protected
                        return this.promptMessage; // String
                    },

                    _maskValidSubsetError: true,
                    validate: function( /*Boolean*/ isFocused) {
                        // summary:
                        //		Called by oninit, onblur, and onkeypress.
                        // description:
                        //		Show missing or invalid messages if appropriate, and highlight textbox field.
                        // tags:
                        //		protected
                        var message = "";
                        var isValid = this.disabled || this.isValid(isFocused);
                        if (isValid) {
                            this._maskValidSubsetError = true;
                        }
                        var isEmpty = this._isEmpty(this.textbox.value);
                        var isValidSubset = !isValid && isFocused && this._isValidSubset();
                        this._set("state", isValid ? "" : (((((!this._hasBeenBlurred || isFocused) && isEmpty) || isValidSubset) && this._maskValidSubsetError) ? "Incomplete" : "Error"));
                        //this.focusNode.setAttribute("aria-invalid", isValid ? "false" : "true");

                        if (this.state == "Error") {
                            this._maskValidSubsetError = isFocused && isValidSubset; // we want the error to show up after a blur and refocus
                            message = this.getErrorMessage(isFocused);
                        } else if (this.state == "Incomplete") {
                            message = this.getPromptMessage(isFocused); // show the prompt whenever the value is not yet complete
                            this._maskValidSubsetError = !this._hasBeenBlurred || isFocused; // no Incomplete warnings while focused
                        } else if (isEmpty) {
                            message = this.getPromptMessage(isFocused); // show the prompt whenever there's no error and no text
                        }
                        this.set("message", message);

                        return isValid;
                    },

                    displayMessage: function( /*String*/ message) {
                        // summary:
                        //		Overridable method to display validation errors/hints.
                        //		By default uses a tooltip.
                        // tags:
                        //		extension
                        if (message && this.focused) {
                            Tooltip.show(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            Tooltip.hide(this.domNode);
                        }
                    },

                    _refreshState: function() {
                        // Overrides TextBox._refreshState()
                        if (this._created) {
                            this.validate(this.focused);
                        }
                        this.inherited(arguments);
                    },

                    //////////// INITIALIZATION METHODS ///////////////////////////////////////

                    constructor: function(params /*===== , srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.

                        this.constraints = {};
                        this.baseClass += ' dijitValidationTextBox';
                    },

                    startup: function() {
                        this.inherited(arguments);
                        this._refreshState(); // after all _set* methods have run
                    },

                    _setConstraintsAttr: function( /*__Constraints*/ constraints) {
                        if (!constraints.locale && this.lang) {
                            constraints.locale = this.lang;
                        }
                        this._set("constraints", constraints);
                        this._refreshState();
                    },

                    _setPatternAttr: function( /*String|Function*/ pattern) {
                        this._set("pattern", pattern); // don't set on INPUT to avoid native HTML5 validation
                    },

                    _getPatternAttr: function( /*__Constraints*/ constraints) {
                        // summary:
                        //		Hook to get the current regExp and to compute the partial validation RE.
                        var p = this.pattern;
                        var type = (typeof p).toLowerCase();
                        if (type == "function") {
                            p = this.pattern(constraints || this.constraints);
                        }
                        if (p != this._lastRegExp) {
                            var partialre = "";
                            this._lastRegExp = p;
                            // parse the regexp and produce a new regexp that matches valid subsets
                            // if the regexp is .* then there's no use in matching subsets since everything is valid
                            if (p != ".*") {
                                p.replace(/\\.|\[\]|\[.*?[^\\]{1}\]|\{.*?\}|\(\?[=:!]|./g,
                                    function(re) {
                                        switch (re.charAt(0)) {
                                            case '{':
                                            case '+':
                                            case '?':
                                            case '*':
                                            case '^':
                                            case '$':
                                            case '|':
                                            case '(':
                                                partialre += re;
                                                break;
                                            case ")":
                                                partialre += "|$)";
                                                break;
                                            default:
                                                partialre += "(?:" + re + "|$)";
                                                break;
                                        }
                                    });
                            }
                            try { // this is needed for now since the above regexp parsing needs more test verification
                                "".search(partialre);
                            } catch (e) { // should never be here unless the original RE is bad or the parsing is bad
                                partialre = this.pattern;
                                console.warn('RegExp error in ' + this.declaredClass + ': ' + this.pattern);
                            } // should never be here unless the original RE is bad or the parsing is bad
                            this._partialre = "^(?:" + partialre + ")$";
                        }
                        return p;
                    },

                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this.messages = i18n.getLocalization("dijit.form", "validate", this.lang);
                        this._setConstraintsAttr(this.constraints); // this needs to happen now (and later) due to codependency on _set*Attr calls attachPoints
                    },

                    _setDisabledAttr: function( /*Boolean*/ value) {
                        this.inherited(arguments); // call FormValueWidget._setDisabledAttr()
                        this._refreshState();
                    },

                    _setRequiredAttr: function( /*Boolean*/ value) {
                        this._set("required", value);
                        this.focusNode.setAttribute("aria-required", value);
                        this._refreshState();
                    },

                    _setMessageAttr: function( /*String*/ message) {
                        this._set("message", message);
                        this.displayMessage(message);
                    },

                    reset: function() {
                        // Overrides dijit/form/TextBox.reset() by also
                        // hiding errors about partial matches
                        this._maskValidSubsetError = true;
                        this.inherited(arguments);
                    },

                    _onBlur: function() {
                        // the message still exists but for back-compat, and to erase the tooltip
                        // (if the message is being displayed as a tooltip), call displayMessage('')
                        this.displayMessage('');

                        this.inherited(arguments);
                    }
                });
            });

        },
        'dojo/window': function() {
            define(["./_base/lang", "./sniff", "./_base/window", "./dom", "./dom-geometry", "./dom-style"],
                function(lang, has, baseWindow, dom, geom, style) {

                    // module:
                    //		dojo/window

                    var window = {
                        // summary:
                        //		TODOC

                        getBox: function( /*Document?*/ doc) {
                            // summary:
                            //		Returns the dimensions and scroll position of the viewable area of a browser window

                            doc = doc || baseWindow.doc;

                            var
                                scrollRoot = (doc.compatMode == 'BackCompat') ? baseWindow.body(doc) : doc.documentElement,
                                // get scroll position
                                scroll = geom.docScroll(doc), // scrollRoot.scrollTop/Left should work
                                w, h;

                            if (has("touch")) { // if(scrollbars not supported)
                                var uiWindow = window.get(doc); // use UI window, not dojo.global window
                                // on mobile, scrollRoot.clientHeight <= uiWindow.innerHeight <= scrollRoot.offsetHeight, return uiWindow.innerHeight
                                w = uiWindow.innerWidth || scrollRoot.clientWidth; // || scrollRoot.clientXXX probably never evaluated
                                h = uiWindow.innerHeight || scrollRoot.clientHeight;
                            } else {
                                // on desktops, scrollRoot.clientHeight <= scrollRoot.offsetHeight <= uiWindow.innerHeight, return scrollRoot.clientHeight
                                // uiWindow.innerWidth/Height includes the scrollbar and cannot be used
                                w = scrollRoot.clientWidth;
                                h = scrollRoot.clientHeight;
                            }
                            return {
                                l: scroll.x,
                                t: scroll.y,
                                w: w,
                                h: h
                            };
                        },

                        get: function( /*Document*/ doc) {
                            // summary:
                            //		Get window object associated with document doc.
                            // doc:
                            //		The document to get the associated window for.

                            // In some IE versions (at least 6.0), document.parentWindow does not return a
                            // reference to the real window object (maybe a copy), so we must fix it as well
                            // We use IE specific execScript to attach the real window reference to
                            // document._parentWindow for later use
                            if (has("ie") && window !== document.parentWindow) {
                                /*
                                In IE 6, only the variable "window" can be used to connect events (others
                                may be only copies).
                                */
                                doc.parentWindow.execScript("document._parentWindow = window;", "Javascript");
                                //to prevent memory leak, unset it after use
                                //another possibility is to add an onUnload handler which seems overkill to me (liucougar)
                                var win = doc._parentWindow;
                                doc._parentWindow = null;
                                return win; //	Window
                            }

                            return doc.parentWindow || doc.defaultView; //	Window
                        },

                        scrollIntoView: function( /*DomNode*/ node, /*Object?*/ pos) {
                            // summary:
                            //		Scroll the passed node into view, if it is not already.

                            // don't rely on node.scrollIntoView working just because the function is there

                            try { // catch unexpected/unrecreatable errors (#7808) since we can recover using a semi-acceptable native method
                                node = dom.byId(node);
                                var doc = node.ownerDocument || baseWindow.doc, // TODO: why baseWindow.doc?  Isn't node.ownerDocument always defined?
                                    body = baseWindow.body(doc),
                                    html = doc.documentElement || body.parentNode,
                                    isIE = has("ie"),
                                    isWK = has("webkit");
                                // if an untested browser, then use the native method
                                if ((!(has("mozilla") || isIE || isWK || has("opera")) || node == body || node == html) && (typeof node.scrollIntoView != "undefined")) {
                                    node.scrollIntoView(false); // short-circuit to native if possible
                                    return;
                                }
                                var backCompat = doc.compatMode == 'BackCompat',
                                    clientAreaRoot = (isIE >= 9 && "frameElement" in node.ownerDocument.parentWindow) ?
                                    ((html.clientHeight > 0 && html.clientWidth > 0 && (body.clientHeight == 0 || body.clientWidth == 0 || body.clientHeight > html.clientHeight || body.clientWidth > html.clientWidth)) ? html : body) :
                                    (backCompat ? body : html),
                                    scrollRoot = isWK ? body : clientAreaRoot,
                                    rootWidth = clientAreaRoot.clientWidth,
                                    rootHeight = clientAreaRoot.clientHeight,
                                    rtl = !geom.isBodyLtr(doc),
                                    nodePos = pos || geom.position(node),
                                    el = node.parentNode,
                                    isFixed = function(el) {
                                        return ((isIE <= 6 || (isIE && backCompat)) ? false : (style.get(el, 'position').toLowerCase() == "fixed"));
                                    };
                                if (isFixed(node)) {
                                    return;
                                } // nothing to do

                                while (el) {
                                    if (el == body) {
                                        el = scrollRoot;
                                    }
                                    var elPos = geom.position(el),
                                        fixedPos = isFixed(el);

                                    if (el == scrollRoot) {
                                        elPos.w = rootWidth;
                                        elPos.h = rootHeight;
                                        if (scrollRoot == html && isIE && rtl) {
                                            elPos.x += scrollRoot.offsetWidth - elPos.w;
                                        } // IE workaround where scrollbar causes negative x
                                        if (elPos.x < 0 || !isIE) {
                                            elPos.x = 0;
                                        } // IE can have values > 0
                                        if (elPos.y < 0 || !isIE) {
                                            elPos.y = 0;
                                        }
                                    } else {
                                        var pb = geom.getPadBorderExtents(el);
                                        elPos.w -= pb.w;
                                        elPos.h -= pb.h;
                                        elPos.x += pb.l;
                                        elPos.y += pb.t;
                                        var clientSize = el.clientWidth,
                                            scrollBarSize = elPos.w - clientSize;
                                        if (clientSize > 0 && scrollBarSize > 0) {
                                            elPos.w = clientSize;
                                            elPos.x += (rtl && (isIE || el.clientLeft > pb.l /*Chrome*/ )) ? scrollBarSize : 0;
                                        }
                                        clientSize = el.clientHeight;
                                        scrollBarSize = elPos.h - clientSize;
                                        if (clientSize > 0 && scrollBarSize > 0) {
                                            elPos.h = clientSize;
                                        }
                                    }
                                    if (fixedPos) { // bounded by viewport, not parents
                                        if (elPos.y < 0) {
                                            elPos.h += elPos.y;
                                            elPos.y = 0;
                                        }
                                        if (elPos.x < 0) {
                                            elPos.w += elPos.x;
                                            elPos.x = 0;
                                        }
                                        if (elPos.y + elPos.h > rootHeight) {
                                            elPos.h = rootHeight - elPos.y;
                                        }
                                        if (elPos.x + elPos.w > rootWidth) {
                                            elPos.w = rootWidth - elPos.x;
                                        }
                                    }
                                    // calculate overflow in all 4 directions
                                    var l = nodePos.x - elPos.x, // beyond left: < 0
                                        t = nodePos.y - Math.max(elPos.y, 0), // beyond top: < 0
                                        r = l + nodePos.w - elPos.w, // beyond right: > 0
                                        bot = t + nodePos.h - elPos.h; // beyond bottom: > 0
                                    if (r * l > 0) {
                                        var s = Math[l < 0 ? "max" : "min"](l, r);
                                        if (rtl && ((isIE == 8 && !backCompat) || isIE >= 9)) {
                                            s = -s;
                                        }
                                        nodePos.x += el.scrollLeft;
                                        el.scrollLeft += s;
                                        nodePos.x -= el.scrollLeft;
                                    }
                                    if (bot * t > 0) {
                                        nodePos.y += el.scrollTop;
                                        el.scrollTop += Math[t < 0 ? "max" : "min"](t, bot);
                                        nodePos.y -= el.scrollTop;
                                    }
                                    el = (el != scrollRoot) && !fixedPos && el.parentNode;
                                }
                            } catch (error) {
                                console.error('scrollIntoView: ' + error);
                                node.scrollIntoView(false);
                            }
                        }
                    };

                    1 && lang.setObject("dojo.window", window);

                    return window;
                });

        },
        'dojo/NodeList-manipulate': function() {
            define(["./query", "./_base/lang", "./_base/array", "./dom-construct", "./NodeList-dom"], function(dquery, lang, array, construct) {
                // module:
                //		dojo/NodeList-manipulate

                /*=====
                return function(){
                	// summary:
                	//		Adds chainable methods to dojo.query() / NodeList instances for manipulating HTML
                	//		and DOM nodes and their properties.
                };
                =====*/

                var NodeList = dquery.NodeList;

                //TODO: add a way to parse for widgets in the injected markup?

                function getText( /*DOMNode*/ node) {
                    // summary:
                    //		recursion method for text() to use. Gets text value for a node.
                    // description:
                    //		Juse uses nodedValue so things like <br/> tags do not end up in
                    //		the text as any sort of line return.
                    var text = "",
                        ch = node.childNodes;
                    for (var i = 0, n; n = ch[i]; i++) {
                        //Skip comments.
                        if (n.nodeType != 8) {
                            if (n.nodeType == 1) {
                                text += getText(n);
                            } else {
                                text += n.nodeValue;
                            }
                        }
                    }
                    return text;
                }

                function getWrapInsertion( /*DOMNode*/ node) {
                    // summary:
                    //		finds the innermost element to use for wrap insertion.

                    //Make it easy, assume single nesting, no siblings.
                    while (node.childNodes[0] && node.childNodes[0].nodeType == 1) {
                        node = node.childNodes[0];
                    }
                    return node; //DOMNode
                }

                function makeWrapNode( /*DOMNode||String*/ html, /*DOMNode*/ refNode) {
                    // summary:
                    //		convert HTML into nodes if it is not already a node.
                    if (typeof html == "string") {
                        html = construct.toDom(html, (refNode && refNode.ownerDocument));
                        if (html.nodeType == 11) {
                            //DocumentFragment cannot handle cloneNode, so choose first child.
                            html = html.childNodes[0];
                        }
                    } else if (html.nodeType == 1 && html.parentNode) {
                        //This element is already in the DOM clone it, but not its children.
                        html = html.cloneNode(false);
                    }
                    return html; /*DOMNode*/
                }

                lang.extend(NodeList, {
                    _placeMultiple: function( /*String||Node||NodeList*/ query, /*String*/ position) {
                        // summary:
                        //		private method for inserting queried nodes into all nodes in this NodeList
                        //		at different positions. Differs from NodeList.place because it will clone
                        //		the nodes in this NodeList if the query matches more than one element.
                        var nl2 = typeof query == "string" || query.nodeType ? dquery(query) : query;
                        var toAdd = [];
                        for (var i = 0; i < nl2.length; i++) {
                            //Go backwards in DOM to make dom insertions easier via insertBefore
                            var refNode = nl2[i];
                            var length = this.length;
                            for (var j = length - 1, item; item = this[j]; j--) {
                                if (i > 0) {
                                    //Need to clone the item. This also means
                                    //it needs to be added to the current NodeList
                                    //so it can also be the target of other chaining operations.
                                    item = this._cloneNode(item);
                                    toAdd.unshift(item);
                                }
                                if (j == length - 1) {
                                    construct.place(item, refNode, position);
                                } else {
                                    refNode.parentNode.insertBefore(item, refNode);
                                }
                                refNode = item;
                            }
                        }

                        if (toAdd.length) {
                            //Add the toAdd items to the current NodeList. Build up list of args
                            //to pass to splice.
                            toAdd.unshift(0);
                            toAdd.unshift(this.length - 1);
                            Array.prototype.splice.apply(this, toAdd);
                        }

                        return this; // dojo/NodeList
                    },

                    innerHTML: function( /*String|DOMNode|NodeList?*/ value) {
                        // summary:
                        //		allows setting the innerHTML of each node in the NodeList,
                        //		if there is a value passed in, otherwise, reads the innerHTML value of the first node.
                        // description:
                        //		This method is simpler than the dojo/NodeList.html() method provided by
                        //		`dojo/NodeList-html`. This method just does proper innerHTML insertion of HTML fragments,
                        //		and it allows for the innerHTML to be read for the first node in the node list.
                        //		Since dojo/NodeList-html already took the "html" name, this method is called
                        //		"innerHTML". However, if dojo/NodeList-html has not been loaded yet, this
                        //		module will define an "html" method that can be used instead. Be careful if you
                        //		are working in an environment where it is possible that dojo/NodeList-html could
                        //		have been loaded, since its definition of "html" will take precedence.
                        //		The nodes represented by the value argument will be cloned if more than one
                        //		node is in this NodeList. The nodes in this NodeList are returned in the "set"
                        //		usage of this method, not the HTML that was inserted.
                        // returns:
                        //		if no value is passed, the result is String, the innerHTML of the first node.
                        //		If a value is passed, the return is this dojo/NodeList
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"></div>
                        //	|	<div id="bar"></div>
                        //		This code inserts `<p>Hello World</p>` into both divs:
                        //	|	dojo.query("div").innerHTML("<p>Hello World</p>");
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"><p>Hello Mars</p></div>
                        //	|	<div id="bar"><p>Hello World</p></div>
                        //		This code returns `<p>Hello Mars</p>`:
                        //	|	var message = dojo.query("div").innerHTML();
                        if (arguments.length) {
                            return this.addContent(value, "only"); // dojo/NodeList
                        } else {
                            return this[0].innerHTML; //String
                        }
                    },

                    /*=====
                    html: function(value){
                    	// summary:
                    	//		see the information for "innerHTML". "html" is an alias for "innerHTML", but is
                    	//		only defined if dojo/NodeList-html has not been loaded.
                    	// description:
                    	//		An alias for the "innerHTML" method, but only defined if there is not an existing
                    	//		"html" method on dojo/NodeList. Be careful if you are working in an environment
                    	//		where it is possible that dojo/NodeList-html could have been loaded, since its
                    	//		definition of "html" will take precedence. If you are not sure if dojo/NodeList-html
                    	//		could be loaded, use the "innerHTML" method.
                    	// value: String|DOMNode|NodeList?
                    	//		The HTML fragment to use as innerHTML. If value is not passed, then the innerHTML
                    	//		of the first element in this NodeList is returned.
                    	// returns:
                    	//		if no value is passed, the result is String, the innerHTML of the first node.
                    	//		If a value is passed, the return is this dojo/NodeList
                    	return; // dojo/NodeList|String
                    },
                    =====*/

                    text: function( /*String*/ value) {
                        // summary:
                        //		allows setting the text value of each node in the NodeList,
                        //		if there is a value passed in, otherwise, returns the text value for all the
                        //		nodes in the NodeList in one string.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"></div>
                        //	|	<div id="bar"></div>
                        //		This code inserts "Hello World" into both divs:
                        //	|	dojo.query("div").text("Hello World");
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"><p>Hello Mars <span>today</span></p></div>
                        //	|	<div id="bar"><p>Hello World</p></div>
                        //		This code returns "Hello Mars today":
                        //	|	var message = dojo.query("div").text();
                        // returns:
                        //		if no value is passed, the result is String, the text value of the first node.
                        //		If a value is passed, the return is this dojo/NodeList
                        if (arguments.length) {
                            for (var i = 0, node; node = this[i]; i++) {
                                if (node.nodeType == 1) {
                                    construct.empty(node);
                                    node.appendChild(node.ownerDocument.createTextNode(value));
                                }
                            }
                            return this; // dojo/NodeList
                        } else {
                            var result = "";
                            for (i = 0; node = this[i]; i++) {
                                result += getText(node);
                            }
                            return result; //String
                        }
                    },

                    val: function( /*String||Array*/ value) {
                        // summary:
                        //		If a value is passed, allows seting the value property of form elements in this
                        //		NodeList, or properly selecting/checking the right value for radio/checkbox/select
                        //		elements. If no value is passed, the value of the first node in this NodeList
                        //		is returned.
                        // returns:
                        //		if no value is passed, the result is String or an Array, for the value of the
                        //		first node.
                        //		If a value is passed, the return is this dojo/NodeList
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<input type="text" value="foo">
                        //	|	<select multiple>
                        //	|		<option value="red" selected>Red</option>
                        //	|		<option value="blue">Blue</option>
                        //	|		<option value="yellow" selected>Yellow</option>
                        //	|	</select>
                        //		This code gets and sets the values for the form fields above:
                        //	|	dojo.query('[type="text"]').val(); //gets value foo
                        //	|	dojo.query('[type="text"]').val("bar"); //sets the input's value to "bar"
                        // 	|	dojo.query("select").val() //gets array value ["red", "yellow"]
                        // 	|	dojo.query("select").val(["blue", "yellow"]) //Sets the blue and yellow options to selected.

                        //Special work for input elements.
                        if (arguments.length) {
                            var isArray = lang.isArray(value);
                            for (var index = 0, node; node = this[index]; index++) {
                                var name = node.nodeName.toUpperCase();
                                var type = node.type;
                                var newValue = isArray ? value[index] : value;

                                if (name == "SELECT") {
                                    var opts = node.options;
                                    for (var i = 0; i < opts.length; i++) {
                                        var opt = opts[i];
                                        if (node.multiple) {
                                            opt.selected = (array.indexOf(value, opt.value) != -1);
                                        } else {
                                            opt.selected = (opt.value == newValue);
                                        }
                                    }
                                } else if (type == "checkbox" || type == "radio") {
                                    node.checked = (node.value == newValue);
                                } else {
                                    node.value = newValue;
                                }
                            }
                            return this; // dojo/NodeList
                        } else {
                            //node already declared above.
                            node = this[0];
                            if (!node || node.nodeType != 1) {
                                return undefined;
                            }
                            value = node.value || "";
                            if (node.nodeName.toUpperCase() == "SELECT" && node.multiple) {
                                //A multivalued selectbox. Do the pain.
                                value = [];
                                //opts declared above in if block.
                                opts = node.options;
                                //i declared above in if block;
                                for (i = 0; i < opts.length; i++) {
                                    //opt declared above in if block
                                    opt = opts[i];
                                    if (opt.selected) {
                                        value.push(opt.value);
                                    }
                                }
                                if (!value.length) {
                                    value = null;
                                }
                            }
                            return value; //String||Array
                        }
                    },

                    append: function( /*String||DOMNode||NodeList*/ content) {
                        // summary:
                        //		appends the content to every node in the NodeList.
                        // description:
                        //		The content will be cloned if the length of NodeList
                        //		is greater than 1. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the appended content.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"><p>Hello Mars</p></div>
                        //	|	<div id="bar"><p>Hello World</p></div>
                        //		Running this code:
                        //	|	dojo.query("div").append("<span>append</span>");
                        //		Results in this DOM structure:
                        //	|	<div id="foo"><p>Hello Mars</p><span>append</span></div>
                        //	|	<div id="bar"><p>Hello World</p><span>append</span></div>
                        return this.addContent(content, "last"); // dojo/NodeList
                    },

                    appendTo: function( /*String*/ query) {
                        // summary:
                        //		appends nodes in this NodeList to the nodes matched by
                        //		the query passed to appendTo.
                        // description:
                        //		The nodes in this NodeList will be cloned if the query
                        //		matches more than one element. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the matched nodes from the query.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<span>append</span>
                        //	|	<p>Hello Mars</p>
                        //	|	<p>Hello World</p>
                        //		Running this code:
                        //	|	dojo.query("span").appendTo("p");
                        //		Results in this DOM structure:
                        //	|	<p>Hello Mars<span>append</span></p>
                        //	|	<p>Hello World<span>append</span></p>
                        return this._placeMultiple(query, "last"); // dojo/NodeList
                    },

                    prepend: function( /*String||DOMNode||NodeList*/ content) {
                        // summary:
                        //		prepends the content to every node in the NodeList.
                        // description:
                        //		The content will be cloned if the length of NodeList
                        //		is greater than 1. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the appended content.
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"><p>Hello Mars</p></div>
                        //	|	<div id="bar"><p>Hello World</p></div>
                        //		Running this code:
                        //	|	dojo.query("div").prepend("<span>prepend</span>");
                        //		Results in this DOM structure:
                        //	|	<div id="foo"><span>prepend</span><p>Hello Mars</p></div>
                        //	|	<div id="bar"><span>prepend</span><p>Hello World</p></div>
                        return this.addContent(content, "first"); // dojo/NodeList
                    },

                    prependTo: function( /*String*/ query) {
                        // summary:
                        //		prepends nodes in this NodeList to the nodes matched by
                        //		the query passed to prependTo.
                        // description:
                        //		The nodes in this NodeList will be cloned if the query
                        //		matches more than one element. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the matched nodes from the query.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<span>prepend</span>
                        //	|	<p>Hello Mars</p>
                        //	|	<p>Hello World</p>
                        //		Running this code:
                        //	|	dojo.query("span").prependTo("p");
                        //		Results in this DOM structure:
                        //	|	<p><span>prepend</span>Hello Mars</p>
                        //	|	<p><span>prepend</span>Hello World</p>
                        return this._placeMultiple(query, "first"); // dojo/NodeList
                    },

                    after: function( /*String||Element||NodeList*/ content) {
                        // summary:
                        //		Places the content after every node in the NodeList.
                        // description:
                        //		The content will be cloned if the length of NodeList
                        //		is greater than 1. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the appended content.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"><p>Hello Mars</p></div>
                        //	|	<div id="bar"><p>Hello World</p></div>
                        //		Running this code:
                        //	|	dojo.query("div").after("<span>after</span>");
                        //		Results in this DOM structure:
                        //	|	<div id="foo"><p>Hello Mars</p></div><span>after</span>
                        //	|	<div id="bar"><p>Hello World</p></div><span>after</span>
                        return this.addContent(content, "after"); // dojo/NodeList
                    },

                    insertAfter: function( /*String*/ query) {
                        // summary:
                        //		The nodes in this NodeList will be placed after the nodes
                        //		matched by the query passed to insertAfter.
                        // description:
                        //		The nodes in this NodeList will be cloned if the query
                        //		matches more than one element. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the matched nodes from the query.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<span>after</span>
                        //	|	<p>Hello Mars</p>
                        //	|	<p>Hello World</p>
                        //		Running this code:
                        //	|	dojo.query("span").insertAfter("p");
                        //		Results in this DOM structure:
                        //	|	<p>Hello Mars</p><span>after</span>
                        //	|	<p>Hello World</p><span>after</span>
                        return this._placeMultiple(query, "after"); // dojo/NodeList
                    },

                    before: function( /*String||DOMNode||NodeList*/ content) {
                        // summary:
                        //		Places the content before every node in the NodeList.
                        // description:
                        //		The content will be cloned if the length of NodeList
                        //		is greater than 1. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the appended content.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div id="foo"><p>Hello Mars</p></div>
                        //	|	<div id="bar"><p>Hello World</p></div>
                        //		Running this code:
                        //	|	dojo.query("div").before("<span>before</span>");
                        //		Results in this DOM structure:
                        //	|	<span>before</span><div id="foo"><p>Hello Mars</p></div>
                        //	|	<span>before</span><div id="bar"><p>Hello World</p></div>
                        return this.addContent(content, "before"); // dojo/NodeList
                    },

                    insertBefore: function( /*String*/ query) {
                        // summary:
                        //		The nodes in this NodeList will be placed after the nodes
                        //		matched by the query passed to insertAfter.
                        // description:
                        //		The nodes in this NodeList will be cloned if the query
                        //		matches more than one element. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		dojo/NodeList, the nodes currently in this NodeList will be returned,
                        //		not the matched nodes from the query.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<span>before</span>
                        //	|	<p>Hello Mars</p>
                        //	|	<p>Hello World</p>
                        //		Running this code:
                        //	|	dojo.query("span").insertBefore("p");
                        //		Results in this DOM structure:
                        //	|	<span>before</span><p>Hello Mars</p>
                        //	|	<span>before</span><p>Hello World</p>
                        return this._placeMultiple(query, "before"); // dojo/NodeList
                    },

                    /*=====
                    remove: function(simpleFilter){
                    	// summary:
                    	//		alias for dojo/NodeList's orphan method. Removes elements
                    	//		in this list that match the simple filter from their parents
                    	//		and returns them as a new NodeList.
                    	// simpleFilter: String
                    	//		single-expression CSS rule. For example, ".thinger" or
                    	//		"#someId[attrName='value']" but not "div > span". In short,
                    	//		anything which does not invoke a descent to evaluate but
                    	//		can instead be used to test a single node is acceptable.

                    	return; // dojo/NodeList
                    },
                    =====*/
                    remove: NodeList.prototype.orphan,

                    wrap: function( /*String||DOMNode*/ html) {
                        // summary:
                        //		Wrap each node in the NodeList with html passed to wrap.
                        // description:
                        //		html will be cloned if the NodeList has more than one
                        //		element. Only DOM nodes are cloned, not any attached
                        //		event handlers.
                        // returns:
                        //		the nodes in the current NodeList will be returned,
                        //		not the nodes from html argument.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<b>one</b>
                        //	|	<b>two</b>
                        //		Running this code:
                        //	|	dojo.query("b").wrap("<div><span></span></div>");
                        //		Results in this DOM structure:
                        //	|	<div><span><b>one</b></span></div>
                        //	|	<div><span><b>two</b></span></div>
                        if (this[0]) {
                            html = makeWrapNode(html, this[0]);

                            //Now cycle through the elements and do the insertion.
                            for (var i = 0, node; node = this[i]; i++) {
                                //Always clone because if html is used to hold one of
                                //the "this" nodes, then on the clone of html it will contain
                                //that "this" node, and that would be bad.
                                var clone = this._cloneNode(html);
                                if (node.parentNode) {
                                    node.parentNode.replaceChild(clone, node);
                                }
                                //Find deepest element and insert old node in it.
                                var insertion = getWrapInsertion(clone);
                                insertion.appendChild(node);
                            }
                        }
                        return this; // dojo/NodeList
                    },

                    wrapAll: function( /*String||DOMNode*/ html) {
                        // summary:
                        //		Insert html where the first node in this NodeList lives, then place all
                        //		nodes in this NodeList as the child of the html.
                        // returns:
                        //		the nodes in the current NodeList will be returned,
                        //		not the nodes from html argument.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".red").wrapAll('<div class="allRed"></div>');
                        //		Results in this DOM structure:
                        //	|	<div class="container">
                        // 	|		<div class="allRed">
                        // 	|			<div class="red">Red One</div>
                        // 	|			<div class="red">Red Two</div>
                        // 	|		</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        if (this[0]) {
                            html = makeWrapNode(html, this[0]);

                            //Place the wrap HTML in place of the first node.
                            this[0].parentNode.replaceChild(html, this[0]);

                            //Now cycle through the elements and move them inside
                            //the wrap.
                            var insertion = getWrapInsertion(html);
                            for (var i = 0, node; node = this[i]; i++) {
                                insertion.appendChild(node);
                            }
                        }
                        return this; // dojo/NodeList
                    },

                    wrapInner: function( /*String||DOMNode*/ html) {
                        // summary:
                        //		For each node in the NodeList, wrap all its children with the passed in html.
                        // description:
                        //		html will be cloned if the NodeList has more than one
                        //		element. Only DOM nodes are cloned, not any attached
                        //		event handlers.
                        // returns:
                        //		the nodes in the current NodeList will be returned,
                        //		not the nodes from html argument.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".red").wrapInner('<span class="special"></span>');
                        //		Results in this DOM structure:
                        //	|	<div class="container">
                        // 	|		<div class="red"><span class="special">Red One</span></div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red"><span class="special">Red Two</span></div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        if (this[0]) {
                            html = makeWrapNode(html, this[0]);
                            for (var i = 0; i < this.length; i++) {
                                //Always clone because if html is used to hold one of
                                //the "this" nodes, then on the clone of html it will contain
                                //that "this" node, and that would be bad.
                                var clone = this._cloneNode(html);

                                //Need to convert the childNodes to an array since wrapAll modifies the
                                //DOM and can change the live childNodes NodeList.
                                this._wrap(lang._toArray(this[i].childNodes), null, this._NodeListCtor).wrapAll(clone);
                            }
                        }
                        return this; // dojo/NodeList
                    },

                    replaceWith: function( /*String||DOMNode||NodeList*/ content) {
                        // summary:
                        //		Replaces each node in ths NodeList with the content passed to replaceWith.
                        // description:
                        //		The content will be cloned if the length of NodeList
                        //		is greater than 1. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		The nodes currently in this NodeList will be returned, not the replacing content.
                        //		Note that the returned nodes have been removed from the DOM.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".red").replaceWith('<div class="green">Green</div>');
                        //		Results in this DOM structure:
                        //	|	<div class="container">
                        // 	|		<div class="green">Green</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="green">Green</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        content = this._normalize(content, this[0]);
                        for (var i = 0, node; node = this[i]; i++) {
                            this._place(content, node, "before", i > 0);
                            node.parentNode.removeChild(node);
                        }
                        return this; // dojo/NodeList
                    },

                    replaceAll: function( /*String*/ query) {
                        // summary:
                        //		replaces nodes matched by the query passed to replaceAll with the nodes
                        //		in this NodeList.
                        // description:
                        //		The nodes in this NodeList will be cloned if the query
                        //		matches more than one element. Only the DOM nodes are cloned, not
                        //		any attached event handlers.
                        // returns:
                        //		The nodes currently in this NodeList will be returned, not the matched nodes
                        //		from the query. The nodes currently in this NodeLIst could have
                        //		been cloned, so the returned NodeList will include the cloned nodes.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".red").replaceAll(".blue");
                        //		Results in this DOM structure:
                        //	|	<div class="container">
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="spacer">___</div>
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="red">Red Two</div>
                        //	|	</div>
                        var nl = dquery(query);
                        var content = this._normalize(this, this[0]);
                        for (var i = 0, node; node = nl[i]; i++) {
                            this._place(content, node, "before", i > 0);
                            node.parentNode.removeChild(node);
                        }
                        return this; // dojo/NodeList
                    },

                    clone: function() {
                        // summary:
                        //		Clones all the nodes in this NodeList and returns them as a new NodeList.
                        // description:
                        //		Only the DOM nodes are cloned, not any attached event handlers.
                        // returns:
                        //		a cloned set of the original nodes.
                        // example:
                        //		assume a DOM created by this markup:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        //	|	</div>
                        //		Running this code:
                        //	|	dojo.query(".red").clone().appendTo(".container");
                        //		Results in this DOM structure:
                        //	|	<div class="container">
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="blue">Blue One</div>
                        // 	|		<div class="red">Red Two</div>
                        // 	|		<div class="blue">Blue Two</div>
                        // 	|		<div class="red">Red One</div>
                        // 	|		<div class="red">Red Two</div>
                        //	|	</div>

                        //TODO: need option to clone events?
                        var ary = [];
                        for (var i = 0; i < this.length; i++) {
                            ary.push(this._cloneNode(this[i]));
                        }
                        return this._wrap(ary, this, this._NodeListCtor); // dojo/NodeList
                    }
                });

                //set up html method if one does not exist
                if (!NodeList.prototype.html) {
                    NodeList.prototype.html = NodeList.prototype.innerHTML;
                }

                return NodeList;
            });

        },
        'dijit/_FocusMixin': function() {
            define("dijit/_FocusMixin", [
                "./focus",
                "./_WidgetBase",
                "dojo/_base/declare", // declare
                "dojo/_base/lang" // lang.extend
            ], function(focus, _WidgetBase, declare, lang) {

                // module:
                //		dijit/_FocusMixin

                // We don't know where _FocusMixin will occur in the inheritance chain, but we need the _onFocus()/_onBlur() below
                // to be last in the inheritance chain, so mixin to _WidgetBase.
                lang.extend(_WidgetBase, {
                    // focused: [readonly] Boolean
                    //		This widget or a widget it contains has focus, or is "active" because
                    //		it was recently clicked.
                    focused: false,

                    onFocus: function() {
                        // summary:
                        //		Called when the widget becomes "active" because
                        //		it or a widget inside of it either has focus, or has recently
                        //		been clicked.
                        // tags:
                        //		callback
                    },

                    onBlur: function() {
                        // summary:
                        //		Called when the widget stops being "active" because
                        //		focus moved to something outside of it, or the user
                        //		clicked somewhere outside of it, or the widget was
                        //		hidden.
                        // tags:
                        //		callback
                    },

                    _onFocus: function() {
                        // summary:
                        //		This is where widgets do processing for when they are active,
                        //		such as changing CSS classes.  See onFocus() for more details.
                        // tags:
                        //		protected
                        this.onFocus();
                    },

                    _onBlur: function() {
                        // summary:
                        //		This is where widgets do processing for when they stop being active,
                        //		such as changing CSS classes.  See onBlur() for more details.
                        // tags:
                        //		protected
                        this.onBlur();
                    }
                });

                return declare("dijit._FocusMixin", null, {
                    // summary:
                    //		Mixin to widget to provide _onFocus() and _onBlur() methods that
                    //		fire when a widget or its descendants get/lose focus

                    // flag that I want _onFocus()/_onBlur() notifications from focus manager
                    _focusManager: focus
                });

            });

        },
        'dojo/data/util/filter': function() {
            define(["../../_base/lang"], function(lang) {
                // module:
                //		dojo/data/util/filter
                // summary:
                //		TODOC

                var filter = {};
                lang.setObject("dojo.data.util.filter", filter);

                filter.patternToRegExp = function( /*String*/ pattern, /*boolean?*/ ignoreCase) {
                    // summary:
                    //		Helper function to convert a simple pattern to a regular expression for matching.
                    // description:
                    //		Returns a regular expression object that conforms to the defined conversion rules.
                    //		For example:
                    //
                    //		- ca*   -> /^ca.*$/
                    //		- *ca*  -> /^.*ca.*$/
                    //		- *c\*a*  -> /^.*c\*a.*$/
                    //		- *c\*a?*  -> /^.*c\*a..*$/
                    //
                    //		and so on.
                    // pattern: string
                    //		A simple matching pattern to convert that follows basic rules:
                    //
                    //		- * Means match anything, so ca* means match anything starting with ca
                    //		- ? Means match single character.  So, b?b will match to bob and bab, and so on.
                    //		- \ is an escape character.  So for example, \* means do not treat * as a match, but literal character *.
                    //
                    //		To use a \ as a character in the string, it must be escaped.  So in the pattern it should be
                    //		represented by \\ to be treated as an ordinary \ character instead of an escape.
                    // ignoreCase:
                    //		An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing
                    //		By default, it is assumed case sensitive.

                    var rxp = "^";
                    var c = null;
                    for (var i = 0; i < pattern.length; i++) {
                        c = pattern.charAt(i);
                        switch (c) {
                            case '\\':
                                rxp += c;
                                i++;
                                rxp += pattern.charAt(i);
                                break;
                            case '*':
                                rxp += ".*";
                                break;
                            case '?':
                                rxp += ".";
                                break;
                            case '$':
                            case '^':
                            case '/':
                            case '+':
                            case '.':
                            case '|':
                            case '(':
                            case ')':
                            case '{':
                            case '}':
                            case '[':
                            case ']':
                                rxp += "\\"; //fallthrough
                            default:
                                rxp += c;
                        }
                    }
                    rxp += "$";
                    if (ignoreCase) {
                        return new RegExp(rxp, "mi"); //RegExp
                    } else {
                        return new RegExp(rxp, "m"); //RegExp
                    }

                };

                return filter;
            });

        },
        'dijit/_WidgetsInTemplateMixin': function() {
            define("dijit/_WidgetsInTemplateMixin", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/parser" // parser.parse
            ], function(array, declare, parser) {

                // module:
                //		dijit/_WidgetsInTemplateMixin

                return declare("dijit._WidgetsInTemplateMixin", null, {
                    // summary:
                    //		Mixin to supplement _TemplatedMixin when template contains widgets

                    // _earlyTemplatedStartup: Boolean
                    //		A fallback to preserve the 1.0 - 1.3 behavior of children in
                    //		templates having their startup called before the parent widget
                    //		fires postCreate. Defaults to 'false', causing child widgets to
                    //		have their .startup() called immediately before a parent widget
                    //		.startup(), but always after the parent .postCreate(). Set to
                    //		'true' to re-enable to previous, arguably broken, behavior.
                    _earlyTemplatedStartup: false,

                    // widgetsInTemplate: [protected] Boolean
                    //		Should we parse the template to find widgets that might be
                    //		declared in markup inside it?  (Remove for 2.0 and assume true)
                    widgetsInTemplate: true,

                    _beforeFillContent: function() {
                        if (this.widgetsInTemplate) {
                            // Before copying over content, instantiate widgets in template
                            var node = this.domNode;

                            var cw = (this._startupWidgets = parser.parse(node, {
                                noStart: !this._earlyTemplatedStartup,
                                template: true,
                                inherited: {
                                    dir: this.dir,
                                    lang: this.lang,
                                    textDir: this.textDir
                                },
                                propsThis: this, // so data-dojo-props of widgets in the template can reference "this" to refer to me
                                scope: "dojo" // even in multi-version mode templates use dojoType/data-dojo-type
                            }));

                            if (!cw.isFulfilled()) {
                                throw new Error(this.declaredClass + ": parser returned unfilled promise (probably waiting for module auto-load), " +
                                    "unsupported by _WidgetsInTemplateMixin.   Must pre-load all supporting widgets before instantiation.");
                            }

                            // _WidgetBase::destroy() will destroy any supporting widgets under this.domNode.
                            // If we wanted to, we could call this.own() on anything in this._startupWidgets that was moved outside
                            // of this.domNode (like Dialog, which is moved to <body>).

                            this._attachTemplateNodes(cw, function(n, p) {
                                return n[p];
                            });
                        }
                    },

                    startup: function() {
                        array.forEach(this._startupWidgets, function(w) {
                            if (w && !w._started && w.startup) {
                                w.startup();
                            }
                        });
                        this.inherited(arguments);
                    }
                });
            });

        },
        'dojo/Deferred': function() {
            define([
                "./has",
                "./_base/lang",
                "./errors/CancelError",
                "./promise/Promise",
                "require"
            ], function(has, lang, CancelError, Promise, instrumentation) {
                "use strict";

                // module:
                //		dojo/Deferred

                var PROGRESS = 0,
                    RESOLVED = 1,
                    REJECTED = 2;
                var FULFILLED_ERROR_MESSAGE = "This deferred has already been fulfilled.";

                var freezeObject = Object.freeze || function() {};

                var signalWaiting = function(waiting, type, result, rejection, deferred) {
                    if (0) {
                        if (type === REJECTED && Deferred.instrumentRejected && waiting.length === 0) {
                            Deferred.instrumentRejected(result, false, rejection, deferred);
                        }
                    }

                    for (var i = 0; i < waiting.length; i++) {
                        signalListener(waiting[i], type, result, rejection);
                    }
                };

                var signalListener = function(listener, type, result, rejection) {
                    var func = listener[type];
                    var deferred = listener.deferred;
                    if (func) {
                        try {
                            var newResult = func(result);
                            if (type === PROGRESS) {
                                if (typeof newResult !== "undefined") {
                                    signalDeferred(deferred, type, newResult);
                                }
                            } else {
                                if (newResult && typeof newResult.then === "function") {
                                    listener.cancel = newResult.cancel;
                                    newResult.then(
                                        // Only make resolvers if they're actually going to be used
                                        makeDeferredSignaler(deferred, RESOLVED),
                                        makeDeferredSignaler(deferred, REJECTED),
                                        makeDeferredSignaler(deferred, PROGRESS));
                                    return;
                                }
                                signalDeferred(deferred, RESOLVED, newResult);
                            }
                        } catch (error) {
                            signalDeferred(deferred, REJECTED, error);
                        }
                    } else {
                        signalDeferred(deferred, type, result);
                    }

                    if (0) {
                        if (type === REJECTED && Deferred.instrumentRejected) {
                            Deferred.instrumentRejected(result, !!func, rejection, deferred.promise);
                        }
                    }
                };

                var makeDeferredSignaler = function(deferred, type) {
                    return function(value) {
                        signalDeferred(deferred, type, value);
                    };
                };

                var signalDeferred = function(deferred, type, result) {
                    if (!deferred.isCanceled()) {
                        switch (type) {
                            case PROGRESS:
                                deferred.progress(result);
                                break;
                            case RESOLVED:
                                deferred.resolve(result);
                                break;
                            case REJECTED:
                                deferred.reject(result);
                                break;
                        }
                    }
                };

                var Deferred = function(canceler) {
                    // summary:
                    //		Creates a new deferred. This API is preferred over
                    //		`dojo/_base/Deferred`.
                    // description:
                    //		Creates a new deferred, as an abstraction over (primarily)
                    //		asynchronous operations. The deferred is the private interface
                    //		that should not be returned to calling code. That's what the
                    //		`promise` is for. See `dojo/promise/Promise`.
                    // canceler: Function?
                    //		Will be invoked if the deferred is canceled. The canceler
                    //		receives the reason the deferred was canceled as its argument.
                    //		The deferred is rejected with its return value, or a new
                    //		`dojo/errors/CancelError` instance.

                    // promise: dojo/promise/Promise
                    //		The public promise object that clients can add callbacks to. 
                    var promise = this.promise = new Promise();

                    var deferred = this;
                    var fulfilled, result, rejection;
                    var canceled = false;
                    var waiting = [];

                    if (0 && Error.captureStackTrace) {
                        Error.captureStackTrace(deferred, Deferred);
                        Error.captureStackTrace(promise, Deferred);
                    }

                    this.isResolved = promise.isResolved = function() {
                        // summary:
                        //		Checks whether the deferred has been resolved.
                        // returns: Boolean

                        return fulfilled === RESOLVED;
                    };

                    this.isRejected = promise.isRejected = function() {
                        // summary:
                        //		Checks whether the deferred has been rejected.
                        // returns: Boolean

                        return fulfilled === REJECTED;
                    };

                    this.isFulfilled = promise.isFulfilled = function() {
                        // summary:
                        //		Checks whether the deferred has been resolved or rejected.
                        // returns: Boolean

                        return !!fulfilled;
                    };

                    this.isCanceled = promise.isCanceled = function() {
                        // summary:
                        //		Checks whether the deferred has been canceled.
                        // returns: Boolean

                        return canceled;
                    };

                    this.progress = function(update, strict) {
                        // summary:
                        //		Emit a progress update on the deferred.
                        // description:
                        //		Emit a progress update on the deferred. Progress updates
                        //		can be used to communicate updates about the asynchronous
                        //		operation before it has finished.
                        // update: any
                        //		The progress update. Passed to progbacks.
                        // strict: Boolean?
                        //		If strict, will throw an error if the deferred has already
                        //		been fulfilled and consequently no progress can be emitted.
                        // returns: dojo/promise/Promise
                        //		Returns the original promise for the deferred.

                        if (!fulfilled) {
                            signalWaiting(waiting, PROGRESS, update, null, deferred);
                            return promise;
                        } else if (strict === true) {
                            throw new Error(FULFILLED_ERROR_MESSAGE);
                        } else {
                            return promise;
                        }
                    };

                    this.resolve = function(value, strict) {
                        // summary:
                        //		Resolve the deferred.
                        // description:
                        //		Resolve the deferred, putting it in a success state.
                        // value: any
                        //		The result of the deferred. Passed to callbacks.
                        // strict: Boolean?
                        //		If strict, will throw an error if the deferred has already
                        //		been fulfilled and consequently cannot be resolved.
                        // returns: dojo/promise/Promise
                        //		Returns the original promise for the deferred.

                        if (!fulfilled) {
                            // Set fulfilled, store value. After signaling waiting listeners unset
                            // waiting.
                            signalWaiting(waiting, fulfilled = RESOLVED, result = value, null, deferred);
                            waiting = null;
                            return promise;
                        } else if (strict === true) {
                            throw new Error(FULFILLED_ERROR_MESSAGE);
                        } else {
                            return promise;
                        }
                    };

                    var reject = this.reject = function(error, strict) {
                        // summary:
                        //		Reject the deferred.
                        // description:
                        //		Reject the deferred, putting it in an error state.
                        // error: any
                        //		The error result of the deferred. Passed to errbacks.
                        // strict: Boolean?
                        //		If strict, will throw an error if the deferred has already
                        //		been fulfilled and consequently cannot be rejected.
                        // returns: dojo/promise/Promise
                        //		Returns the original promise for the deferred.

                        if (!fulfilled) {
                            if (0 && Error.captureStackTrace) {
                                Error.captureStackTrace(rejection = {}, reject);
                            }
                            signalWaiting(waiting, fulfilled = REJECTED, result = error, rejection, deferred);
                            waiting = null;
                            return promise;
                        } else if (strict === true) {
                            throw new Error(FULFILLED_ERROR_MESSAGE);
                        } else {
                            return promise;
                        }
                    };

                    this.then = promise.then = function(callback, errback, progback) {
                        // summary:
                        //		Add new callbacks to the deferred.
                        // description:
                        //		Add new callbacks to the deferred. Callbacks can be added
                        //		before or after the deferred is fulfilled.
                        // callback: Function?
                        //		Callback to be invoked when the promise is resolved.
                        //		Receives the resolution value.
                        // errback: Function?
                        //		Callback to be invoked when the promise is rejected.
                        //		Receives the rejection error.
                        // progback: Function?
                        //		Callback to be invoked when the promise emits a progress
                        //		update. Receives the progress update.
                        // returns: dojo/promise/Promise
                        //		Returns a new promise for the result of the callback(s).
                        //		This can be used for chaining many asynchronous operations.

                        var listener = [progback, callback, errback];
                        // Ensure we cancel the promise we're waiting for, or if callback/errback
                        // have returned a promise, cancel that one.
                        listener.cancel = promise.cancel;
                        listener.deferred = new Deferred(function(reason) {
                            // Check whether cancel is really available, returned promises are not
                            // required to expose `cancel`
                            return listener.cancel && listener.cancel(reason);
                        });
                        if (fulfilled && !waiting) {
                            signalListener(listener, fulfilled, result, rejection);
                        } else {
                            waiting.push(listener);
                        }
                        return listener.deferred.promise;
                    };

                    this.cancel = promise.cancel = function(reason, strict) {
                        // summary:
                        //		Inform the deferred it may cancel its asynchronous operation.
                        // description:
                        //		Inform the deferred it may cancel its asynchronous operation.
                        //		The deferred's (optional) canceler is invoked and the
                        //		deferred will be left in a rejected state. Can affect other
                        //		promises that originate with the same deferred.
                        // reason: any
                        //		A message that may be sent to the deferred's canceler,
                        //		explaining why it's being canceled.
                        // strict: Boolean?
                        //		If strict, will throw an error if the deferred has already
                        //		been fulfilled and consequently cannot be canceled.
                        // returns: any
                        //		Returns the rejection reason if the deferred was canceled
                        //		normally.

                        if (!fulfilled) {
                            // Cancel can be called even after the deferred is fulfilled
                            if (canceler) {
                                var returnedReason = canceler(reason);
                                reason = typeof returnedReason === "undefined" ? reason : returnedReason;
                            }
                            canceled = true;
                            if (!fulfilled) {
                                // Allow canceler to provide its own reason, but fall back to a CancelError
                                if (typeof reason === "undefined") {
                                    reason = new CancelError();
                                }
                                reject(reason);
                                return reason;
                            } else if (fulfilled === REJECTED && result === reason) {
                                return reason;
                            }
                        } else if (strict === true) {
                            throw new Error(FULFILLED_ERROR_MESSAGE);
                        }
                    };

                    freezeObject(promise);
                };

                Deferred.prototype.toString = function() {
                    // returns: String
                    //		Returns `[object Deferred]`.

                    return "[object Deferred]";
                };

                if (instrumentation) {
                    instrumentation(Deferred);
                }

                return Deferred;
            });

        },
        'dojo/_base/connect': function() {
            define(["./kernel", "../on", "../topic", "../aspect", "./event", "../mouse", "./sniff", "./lang", "../keys"], function(dojo, on, hub, aspect, eventModule, mouse, has, lang) {
                // module:
                //		dojo/_base/connect

                has.add("events-keypress-typed", function() { // keypresses should only occur a printable character is hit
                    var testKeyEvent = {
                        charCode: 0
                    };
                    try {
                        testKeyEvent = document.createEvent("KeyboardEvent");
                        (testKeyEvent.initKeyboardEvent || testKeyEvent.initKeyEvent).call(testKeyEvent, "keypress", true, true, null, false, false, false, false, 9, 3);
                    } catch (e) {}
                    return testKeyEvent.charCode == 0 && !has("opera");
                });

                function connect_(obj, event, context, method, dontFix) {
                    method = lang.hitch(context, method);
                    if (!obj || !(obj.addEventListener || obj.attachEvent)) {
                        // it is a not a DOM node and we are using the dojo.connect style of treating a
                        // method like an event, must go right to aspect
                        return aspect.after(obj || dojo.global, event, method, true);
                    }
                    if (typeof event == "string" && event.substring(0, 2) == "on") {
                        event = event.substring(2);
                    }
                    if (!obj) {
                        obj = dojo.global;
                    }
                    if (!dontFix) {
                        switch (event) {
                            // dojo.connect has special handling for these event types
                            case "keypress":
                                event = keypress;
                                break;
                            case "mouseenter":
                                event = mouse.enter;
                                break;
                            case "mouseleave":
                                event = mouse.leave;
                                break;
                        }
                    }
                    return on(obj, event, method, dontFix);
                }

                var _punctMap = {
                    106: 42,
                    111: 47,
                    186: 59,
                    187: 43,
                    188: 44,
                    189: 45,
                    190: 46,
                    191: 47,
                    192: 96,
                    219: 91,
                    220: 92,
                    221: 93,
                    222: 39,
                    229: 113
                };
                var evtCopyKey = has("mac") ? "metaKey" : "ctrlKey";


                var _synthesizeEvent = function(evt, props) {
                    var faux = lang.mixin({}, evt, props);
                    setKeyChar(faux);
                    // FIXME: would prefer to use lang.hitch: lang.hitch(evt, evt.preventDefault);
                    // but it throws an error when preventDefault is invoked on Safari
                    // does Event.preventDefault not support "apply" on Safari?
                    faux.preventDefault = function() {
                        evt.preventDefault();
                    };
                    faux.stopPropagation = function() {
                        evt.stopPropagation();
                    };
                    return faux;
                };

                function setKeyChar(evt) {
                    evt.keyChar = evt.charCode ? String.fromCharCode(evt.charCode) : '';
                    evt.charOrCode = evt.keyChar || evt.keyCode;
                }
                var keypress;
                if (has("events-keypress-typed")) {
                    // this emulates Firefox's keypress behavior where every keydown can correspond to a keypress
                    var _trySetKeyCode = function(e, code) {
                        try {
                            // squelch errors when keyCode is read-only
                            // (e.g. if keyCode is ctrl or shift)
                            return (e.keyCode = code);
                        } catch (e) {
                            return 0;
                        }
                    };
                    keypress = function(object, listener) {
                        var keydownSignal = on(object, "keydown", function(evt) {
                            // munge key/charCode
                            var k = evt.keyCode;
                            // These are Windows Virtual Key Codes
                            // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/WinUI/WindowsUserInterface/UserInput/VirtualKeyCodes.asp
                            var unprintable = (k != 13) && k != 32 && (k != 27 || !has("ie")) && (k < 48 || k > 90) && (k < 96 || k > 111) && (k < 186 || k > 192) && (k < 219 || k > 222) && k != 229;
                            // synthesize keypress for most unprintables and CTRL-keys
                            if (unprintable || evt.ctrlKey) {
                                var c = unprintable ? 0 : k;
                                if (evt.ctrlKey) {
                                    if (k == 3 || k == 13) {
                                        return listener.call(evt.currentTarget, evt); // IE will post CTRL-BREAK, CTRL-ENTER as keypress natively
                                    } else if (c > 95 && c < 106) {
                                        c -= 48; // map CTRL-[numpad 0-9] to ASCII
                                    } else if ((!evt.shiftKey) && (c >= 65 && c <= 90)) {
                                        c += 32; // map CTRL-[A-Z] to lowercase
                                    } else {
                                        c = _punctMap[c] || c; // map other problematic CTRL combinations to ASCII
                                    }
                                }
                                // simulate a keypress event
                                var faux = _synthesizeEvent(evt, {
                                    type: 'keypress',
                                    faux: true,
                                    charCode: c
                                });
                                listener.call(evt.currentTarget, faux);
                                if (has("ie")) {
                                    _trySetKeyCode(evt, faux.keyCode);
                                }
                            }
                        });
                        var keypressSignal = on(object, "keypress", function(evt) {
                            var c = evt.charCode;
                            c = c >= 32 ? c : 0;
                            evt = _synthesizeEvent(evt, {
                                charCode: c,
                                faux: true
                            });
                            return listener.call(this, evt);
                        });
                        return {
                            remove: function() {
                                keydownSignal.remove();
                                keypressSignal.remove();
                            }
                        };
                    };
                } else {
                    if (has("opera")) {
                        keypress = function(object, listener) {
                            return on(object, "keypress", function(evt) {
                                var c = evt.which;
                                if (c == 3) {
                                    c = 99; // Mozilla maps CTRL-BREAK to CTRL-c
                                }
                                // can't trap some keys at all, like INSERT and DELETE
                                // there is no differentiating info between DELETE and ".", or INSERT and "-"
                                c = c < 32 && !evt.shiftKey ? 0 : c;
                                if (evt.ctrlKey && !evt.shiftKey && c >= 65 && c <= 90) {
                                    // lowercase CTRL-[A-Z] keys
                                    c += 32;
                                }
                                return listener.call(this, _synthesizeEvent(evt, {
                                    charCode: c
                                }));
                            });
                        };
                    } else {
                        keypress = function(object, listener) {
                            return on(object, "keypress", function(evt) {
                                setKeyChar(evt);
                                return listener.call(this, evt);
                            });
                        };
                    }
                }

                var connect = {
                    // summary:
                    //		This module defines the dojo.connect API.
                    //		This modules also provides keyboard event handling helpers.
                    //		This module exports an extension event for emulating Firefox's keypress handling.
                    //		However, this extension event exists primarily for backwards compatibility and
                    //		is not recommended. WebKit and IE uses an alternate keypress handling (only
                    //		firing for printable characters, to distinguish from keydown events), and most
                    //		consider the WebKit/IE behavior more desirable.

                    _keypress: keypress,

                    connect: function(obj, event, context, method, dontFix) {
                        // summary:
                        //		`dojo.connect` is a deprecated event handling and delegation method in
                        //		Dojo. It allows one function to "listen in" on the execution of
                        //		any other, triggering the second whenever the first is called. Many
                        //		listeners may be attached to a function, and source functions may
                        //		be either regular function calls or DOM events.
                        //
                        // description:
                        //		Connects listeners to actions, so that after event fires, a
                        //		listener is called with the same arguments passed to the original
                        //		function.
                        //
                        //		Since `dojo.connect` allows the source of events to be either a
                        //		"regular" JavaScript function or a DOM event, it provides a uniform
                        //		interface for listening to all the types of events that an
                        //		application is likely to deal with though a single, unified
                        //		interface. DOM programmers may want to think of it as
                        //		"addEventListener for everything and anything".
                        //
                        //		When setting up a connection, the `event` parameter must be a
                        //		string that is the name of the method/event to be listened for. If
                        //		`obj` is null, `kernel.global` is assumed, meaning that connections
                        //		to global methods are supported but also that you may inadvertently
                        //		connect to a global by passing an incorrect object name or invalid
                        //		reference.
                        //
                        //		`dojo.connect` generally is forgiving. If you pass the name of a
                        //		function or method that does not yet exist on `obj`, connect will
                        //		not fail, but will instead set up a stub method. Similarly, null
                        //		arguments may simply be omitted such that fewer than 4 arguments
                        //		may be required to set up a connection See the examples for details.
                        //
                        //		The return value is a handle that is needed to
                        //		remove this connection with `dojo.disconnect`.
                        //
                        // obj: Object?
                        //		The source object for the event function.
                        //		Defaults to `kernel.global` if null.
                        //		If obj is a DOM node, the connection is delegated
                        //		to the DOM event manager (unless dontFix is true).
                        //
                        // event: String
                        //		String name of the event function in obj.
                        //		I.e. identifies a property `obj[event]`.
                        //
                        // context: Object|null
                        //		The object that method will receive as "this".
                        //
                        //		If context is null and method is a function, then method
                        //		inherits the context of event.
                        //
                        //		If method is a string then context must be the source
                        //		object object for method (context[method]). If context is null,
                        //		kernel.global is used.
                        //
                        // method: String|Function
                        //		A function reference, or name of a function in context.
                        //		The function identified by method fires after event does.
                        //		method receives the same arguments as the event.
                        //		See context argument comments for information on method's scope.
                        //
                        // dontFix: Boolean?
                        //		If obj is a DOM node, set dontFix to true to prevent delegation
                        //		of this connection to the DOM event manager.
                        //
                        // example:
                        //		When obj.onchange(), do ui.update():
                        //	|	dojo.connect(obj, "onchange", ui, "update");
                        //	|	dojo.connect(obj, "onchange", ui, ui.update); // same
                        //
                        // example:
                        //		Using return value for disconnect:
                        //	|	var link = dojo.connect(obj, "onchange", ui, "update");
                        //	|	...
                        //	|	dojo.disconnect(link);
                        //
                        // example:
                        //		When onglobalevent executes, watcher.handler is invoked:
                        //	|	dojo.connect(null, "onglobalevent", watcher, "handler");
                        //
                        // example:
                        //		When ob.onCustomEvent executes, customEventHandler is invoked:
                        //	|	dojo.connect(ob, "onCustomEvent", null, "customEventHandler");
                        //	|	dojo.connect(ob, "onCustomEvent", "customEventHandler"); // same
                        //
                        // example:
                        //		When ob.onCustomEvent executes, customEventHandler is invoked
                        //		with the same scope (this):
                        //	|	dojo.connect(ob, "onCustomEvent", null, customEventHandler);
                        //	|	dojo.connect(ob, "onCustomEvent", customEventHandler); // same
                        //
                        // example:
                        //		When globalEvent executes, globalHandler is invoked
                        //		with the same scope (this):
                        //	|	dojo.connect(null, "globalEvent", null, globalHandler);
                        //	|	dojo.connect("globalEvent", globalHandler); // same

                        // normalize arguments
                        var a = arguments,
                            args = [],
                            i = 0;
                        // if a[0] is a String, obj was omitted
                        args.push(typeof a[0] == "string" ? null : a[i++], a[i++]);
                        // if the arg-after-next is a String or Function, context was NOT omitted
                        var a1 = a[i + 1];
                        args.push(typeof a1 == "string" || typeof a1 == "function" ? a[i++] : null, a[i++]);
                        // absorb any additional arguments
                        for (var l = a.length; i < l; i++) {
                            args.push(a[i]);
                        }
                        return connect_.apply(this, args);
                    },

                    disconnect: function(handle) {
                        // summary:
                        //		Remove a link created by dojo.connect.
                        // description:
                        //		Removes the connection between event and the method referenced by handle.
                        // handle: Handle
                        //		the return value of the dojo.connect call that created the connection.

                        if (handle) {
                            handle.remove();
                        }
                    },

                    subscribe: function(topic, context, method) {
                        // summary:
                        //		Attach a listener to a named topic. The listener function is invoked whenever the
                        //		named topic is published (see: dojo.publish).
                        //		Returns a handle which is needed to unsubscribe this listener.
                        // topic: String
                        //		The topic to which to subscribe.
                        // context: Object?
                        //		Scope in which method will be invoked, or null for default scope.
                        // method: String|Function
                        //		The name of a function in context, or a function reference. This is the function that
                        //		is invoked when topic is published.
                        // example:
                        //	|	dojo.subscribe("alerts", null, function(caption, message){ alert(caption + "\n" + message); });
                        //	|	dojo.publish("alerts", [ "read this", "hello world" ]);
                        return hub.subscribe(topic, lang.hitch(context, method));
                    },

                    publish: function(topic, args) {
                        // summary:
                        //		Invoke all listener method subscribed to topic.
                        // topic: String
                        //		The name of the topic to publish.
                        // args: Array?
                        //		An array of arguments. The arguments will be applied
                        //		to each topic subscriber (as first class parameters, via apply).
                        // example:
                        //	|	dojo.subscribe("alerts", null, function(caption, message){ alert(caption + "\n" + message); };
                        //	|	dojo.publish("alerts", [ "read this", "hello world" ]);
                        return hub.publish.apply(hub, [topic].concat(args));
                    },

                    connectPublisher: function(topic, obj, event) {
                        // summary:
                        //		Ensure that every time obj.event() is called, a message is published
                        //		on the topic. Returns a handle which can be passed to
                        //		dojo.disconnect() to disable subsequent automatic publication on
                        //		the topic.
                        // topic: String
                        //		The name of the topic to publish.
                        // obj: Object?
                        //		The source object for the event function. Defaults to kernel.global
                        //		if null.
                        // event: String
                        //		The name of the event function in obj.
                        //		I.e. identifies a property obj[event].
                        // example:
                        //	|	dojo.connectPublisher("/ajax/start", dojo, "xhrGet");
                        var pf = function() {
                            connect.publish(topic, arguments);
                        };
                        return event ? connect.connect(obj, event, pf) : connect.connect(obj, pf); //Handle
                    },

                    isCopyKey: function(e) {
                        // summary:
                        //		Checks an event for the copy key (meta on Mac, and ctrl anywhere else)
                        // e: Event
                        //		Event object to examine
                        return e[evtCopyKey]; // Boolean
                    }
                };

                connect.unsubscribe = connect.disconnect;
                /*=====
                 connect.unsubscribe = function(handle){
                	 // summary:
                	 //		Remove a topic listener.
                	 // handle: Handle
                	 //		The handle returned from a call to subscribe.
                	 // example:
                	 //	|	var alerter = dojo.subscribe("alerts", null, function(caption, message){ alert(caption + "\n" + message); };
                	 //	|	...
                	 //	|	dojo.unsubscribe(alerter);
                 };
                 =====*/

                1 && lang.mixin(dojo, connect);
                return connect;

            });



        },
        'dojo/request/watch': function() {
            define([
                './util',
                '../errors/RequestTimeoutError',
                '../errors/CancelError',
                '../_base/array',
                '../_base/window',
                '../has!host-browser?dom-addeventlistener?:../on:'
            ], function(util, RequestTimeoutError, CancelError, array, win, on) {
                // avoid setting a timer per request. It degrades performance on IE
                // something fierece if we don't use unified loops.
                var _inFlightIntvl = null,
                    _inFlight = [];

                function watchInFlight() {
                    // summary:
                    //		internal method that checks each inflight XMLHttpRequest to see
                    //		if it has completed or if the timeout situation applies.

                    var now = +(new Date);

                    // we need manual loop because we often modify _inFlight (and therefore 'i') while iterating
                    for (var i = 0, dfd; i < _inFlight.length && (dfd = _inFlight[i]); i++) {
                        var response = dfd.response,
                            options = response.options;
                        if ((dfd.isCanceled && dfd.isCanceled()) || (dfd.isValid && !dfd.isValid(response))) {
                            _inFlight.splice(i--, 1);
                            watch._onAction && watch._onAction();
                        } else if (dfd.isReady && dfd.isReady(response)) {
                            _inFlight.splice(i--, 1);
                            dfd.handleResponse(response);
                            watch._onAction && watch._onAction();
                        } else if (dfd.startTime) {
                            // did we timeout?
                            if (dfd.startTime + (options.timeout || 0) < now) {
                                _inFlight.splice(i--, 1);
                                // Cancel the request so the io module can do appropriate cleanup.
                                dfd.cancel(new RequestTimeoutError('Timeout exceeded', response));
                                watch._onAction && watch._onAction();
                            }
                        }
                    }

                    watch._onInFlight && watch._onInFlight(dfd);

                    if (!_inFlight.length) {
                        clearInterval(_inFlightIntvl);
                        _inFlightIntvl = null;
                    }
                }

                function watch(dfd) {
                    // summary:
                    //		Watches the io request represented by dfd to see if it completes.
                    // dfd: Deferred
                    //		The Deferred object to watch.
                    // response: Object
                    //		The object used as the value of the request promise.
                    // validCheck: Function
                    //		Function used to check if the IO request is still valid. Gets the dfd
                    //		object as its only argument.
                    // ioCheck: Function
                    //		Function used to check if basic IO call worked. Gets the dfd
                    //		object as its only argument.
                    // resHandle: Function
                    //		Function used to process response. Gets the dfd
                    //		object as its only argument.
                    if (dfd.response.options.timeout) {
                        dfd.startTime = +(new Date);
                    }

                    if (dfd.isFulfilled()) {
                        // bail out if the deferred is already fulfilled
                        return;
                    }

                    _inFlight.push(dfd);
                    if (!_inFlightIntvl) {
                        _inFlightIntvl = setInterval(watchInFlight, 50);
                    }

                    // handle sync requests separately from async:
                    // http://bugs.dojotoolkit.org/ticket/8467
                    if (dfd.response.options.sync) {
                        watchInFlight();
                    }
                }

                watch.cancelAll = function cancelAll() {
                    // summary:
                    //		Cancels all pending IO requests, regardless of IO type
                    try {
                        array.forEach(_inFlight, function(dfd) {
                            try {
                                dfd.cancel(new CancelError('All requests canceled.'));
                            } catch (e) {}
                        });
                    } catch (e) {}
                };

                if (win && on && win.doc.attachEvent) {
                    // Automatically call cancel all io calls on unload in IE
                    // http://bugs.dojotoolkit.org/ticket/2357
                    on(win.global, 'unload', function() {
                        watch.cancelAll();
                    });
                }

                return watch;
            });

        },
        'dijit/form/FilteringSelect': function() {
            define("dijit/form/FilteringSelect", [
                "dojo/data/util/filter", // filter.patternToRegExp
                "dojo/_base/declare", // declare
                "dojo/_base/lang", // lang.mixin
                "dojo/when",
                "./MappedTextBox",
                "./ComboBoxMixin"
            ], function(filter, declare, lang, when, MappedTextBox, ComboBoxMixin) {

                // module:
                //		dijit/form/FilteringSelect

                return declare("dijit.form.FilteringSelect", [MappedTextBox, ComboBoxMixin], {
                    // summary:
                    //		An enhanced version of the HTML SELECT tag, populated dynamically
                    //
                    // description:
                    //		An enhanced version of the HTML SELECT tag, populated dynamically. It works
                    //		very nicely with very large data sets because it can load and page data as needed.
                    //		It also resembles ComboBox, but does not allow values outside of the provided ones.
                    //		If OPTION tags are used as the data provider via markup, then the
                    //		OPTION tag's child text node is used as the displayed value when selected
                    //		while the OPTION tag's value attribute is used as the widget value on form submit.
                    //		To set the default value when using OPTION tags, specify the selected
                    //		attribute on 1 of the child OPTION tags.
                    //
                    //		Similar features:
                    //
                    //		- There is a drop down list of possible values.
                    //		- You can only enter a value from the drop down list.  (You can't
                    //			enter an arbitrary value.)
                    //		- The value submitted with the form is the hidden value (ex: CA),
                    //			not the displayed value a.k.a. label (ex: California)
                    //
                    //		Enhancements over plain HTML version:
                    //
                    //		- If you type in some text then it will filter down the list of
                    //			possible values in the drop down list.
                    //		- List can be specified either as a static list or via a javascript
                    //			function (that can get the list from a server)

                    // required: Boolean
                    //		True (default) if user is required to enter a value into this field.
                    required: true,

                    _lastDisplayedValue: "",

                    _isValidSubset: function() {
                        return this._opened;
                    },

                    isValid: function() {
                        // Overrides ValidationTextBox.isValid()
                        return !!this.item || (!this.required && this.get('displayedValue') == ""); // #5974
                    },

                    _refreshState: function() {
                        if (!this.searchTimer) { // state will be refreshed after results are returned
                            this.inherited(arguments);
                        }
                    },

                    _callbackSetLabel: function(
                        /*Array*/
                        result,
                        /*Object*/
                        query,
                        /*Object*/
                        options,
                        /*Boolean?*/
                        priorityChange) {
                        // summary:
                        //		Callback from dojo.store after lookup of user entered value finishes

                        // setValue does a synchronous lookup,
                        // so it calls _callbackSetLabel directly,
                        // and so does not pass dataObject
                        // still need to test against _lastQuery in case it came too late
                        if ((query && query[this.searchAttr] !== this._lastQuery) || (!query && result.length && this.store.getIdentity(result[0]) != this._lastQuery)) {
                            return;
                        }
                        if (!result.length) {
                            //#3268: don't modify display value on bad input
                            //#3285: change CSS to indicate error
                            this.set("value", '', priorityChange || (priorityChange === undefined && !this.focused), this.textbox.value, null);
                        } else {
                            this.set('item', result[0], priorityChange);
                        }
                    },

                    _openResultList: function( /*Object*/ results, /*Object*/ query, /*Object*/ options) {
                        // Callback when a data store query completes.
                        // Overrides ComboBox._openResultList()

                        // #3285: tap into search callback to see if user's query resembles a match
                        if (query[this.searchAttr] !== this._lastQuery) {
                            return;
                        }
                        this.inherited(arguments);

                        if (this.item === undefined) { // item == undefined for keyboard search
                            // If the search returned no items that means that the user typed
                            // in something invalid (and they can't make it valid by typing more characters),
                            // so flag the FilteringSelect as being in an invalid state
                            this.validate(true);
                        }
                    },

                    _getValueAttr: function() {
                        // summary:
                        //		Hook for get('value') to work.

                        // don't get the textbox value but rather the previously set hidden value.
                        // Use this.valueNode.value which isn't always set for other MappedTextBox widgets until blur
                        return this.valueNode.value;
                    },

                    _getValueField: function() {
                        // Overrides ComboBox._getValueField()
                        return "value";
                    },

                    _setValueAttr: function( /*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue, /*item?*/ item) {
                        // summary:
                        //		Hook so set('value', value) works.
                        // description:
                        //		Sets the value of the select.
                        //		Also sets the label to the corresponding value by reverse lookup.
                        if (!this._onChangeActive) {
                            priorityChange = null;
                        }

                        if (item === undefined) {
                            if (value === null || value === '') {
                                value = '';
                                if (!lang.isString(displayedValue)) {
                                    this._setDisplayedValueAttr(displayedValue || '', priorityChange);
                                    return;
                                }
                            }

                            var self = this;
                            this._lastQuery = value;
                            when(this.store.get(value), function(item) {
                                self._callbackSetLabel(item ? [item] : [], undefined, undefined, priorityChange);
                            });
                        } else {
                            this.valueNode.value = value;
                            this.inherited(arguments);
                        }
                    },

                    _setItemAttr: function( /*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue) {
                        // summary:
                        //		Set the displayed valued in the input box, and the hidden value
                        //		that gets submitted, based on a dojo.data store item.
                        // description:
                        //		Users shouldn't call this function; they should be calling
                        //		set('item', value)
                        // tags:
                        //		private
                        this.inherited(arguments);
                        this._lastDisplayedValue = this.textbox.value;
                    },

                    _getDisplayQueryString: function( /*String*/ text) {
                        return text.replace(/([\\\*\?])/g, "\\$1");
                    },

                    _setDisplayedValueAttr: function( /*String*/ label, /*Boolean?*/ priorityChange) {
                        // summary:
                        //		Hook so set('displayedValue', label) works.
                        // description:
                        //		Sets textbox to display label. Also performs reverse lookup
                        //		to set the hidden value.  label should corresponding to item.searchAttr.

                        if (label == null) {
                            label = '';
                        }

                        // This is called at initialization along with every custom setter.
                        // Usually (or always?) the call can be ignored.   If it needs to be
                        // processed then at least make sure that the XHR request doesn't trigger an onChange()
                        // event, even if it returns after creation has finished
                        if (!this._created) {
                            if (!("displayedValue" in this.params)) {
                                return;
                            }
                            priorityChange = false;
                        }

                        // Do a reverse lookup to map the specified displayedValue to the hidden value.
                        // Note that if there's a custom labelFunc() this code
                        if (this.store) {
                            this.closeDropDown();
                            var query = lang.clone(this.query); // #6196: populate query with user-specifics

                            // Generate query
                            var qs = this._getDisplayQueryString(label),
                                q;
                            if (this.store._oldAPI) {
                                // remove this branch for 2.0
                                q = qs;
                            } else {
                                // Query on searchAttr is a regex for benefit of dojo/store/Memory,
                                // but with a toString() method to help dojo/store/JsonRest.
                                // Search string like "Co*" converted to regex like /^Co.*$/i.
                                q = filter.patternToRegExp(qs, this.ignoreCase);
                                q.toString = function() {
                                    return qs;
                                };
                            }
                            this._lastQuery = query[this.searchAttr] = q;

                            // If the label is not valid, the callback will never set it,
                            // so the last valid value will get the warning textbox.   Set the
                            // textbox value now so that the impending warning will make
                            // sense to the user
                            this.textbox.value = label;
                            this._lastDisplayedValue = label;
                            this._set("displayedValue", label); // for watch("displayedValue") notification
                            var _this = this;
                            var options = {
                                ignoreCase: this.ignoreCase,
                                deep: true
                            };
                            lang.mixin(options, this.fetchProperties);
                            this._fetchHandle = this.store.query(query, options);
                            when(this._fetchHandle, function(result) {
                                _this._fetchHandle = null;
                                _this._callbackSetLabel(result || [], query, options, priorityChange);
                            }, function(err) {
                                _this._fetchHandle = null;
                                if (!_this._cancelingQuery) { // don't treat canceled query as an error
                                    console.error('dijit.form.FilteringSelect: ' + err.toString());
                                }
                            });
                        }
                    },

                    undo: function() {
                        this.set('displayedValue', this._lastDisplayedValue);
                    }
                });
            });

        },
        'dojo/data/util/sorter': function() {
            define("dojo/data/util/sorter", ["../../_base/lang"], function(lang) {
                // module:
                //		dojo/data/util/sorter
                // summary:
                //		TODOC

                var sorter = {};
                lang.setObject("dojo.data.util.sorter", sorter);

                sorter.basicComparator = function( /*anything*/ a,
                    /*anything*/
                    b) {
                    // summary:
                    //		Basic comparison function that compares if an item is greater or less than another item
                    // description:
                    //		returns 1 if a > b, -1 if a < b, 0 if equal.
                    //		'null' values (null, undefined) are treated as larger values so that they're pushed to the end of the list.
                    //		And compared to each other, null is equivalent to undefined.

                    //null is a problematic compare, so if null, we set to undefined.
                    //Makes the check logic simple, compact, and consistent
                    //And (null == undefined) === true, so the check later against null
                    //works for undefined and is less bytes.
                    var r = -1;
                    if (a === null) {
                        a = undefined;
                    }
                    if (b === null) {
                        b = undefined;
                    }
                    if (a == b) {
                        r = 0;
                    } else if (a > b || a == null) {
                        r = 1;
                    }
                    return r; //int {-1,0,1}
                };

                sorter.createSortFunction = function( /* attributes[] */ sortSpec, /*dojo/data/api/Read*/ store) {
                    // summary:
                    //		Helper function to generate the sorting function based off the list of sort attributes.
                    // description:
                    //		The sort function creation will look for a property on the store called 'comparatorMap'.  If it exists
                    //		it will look in the mapping for comparisons function for the attributes.  If one is found, it will
                    //		use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates.
                    //		Returns the sorting function for this particular list of attributes and sorting directions.
                    // sortSpec:
                    //		A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending.
                    //		The objects should be formatted as follows:
                    // |	{
                    // |		attribute: "attributeName-string" || attribute,
                    // |		descending: true|false;   // Default is false.
                    // |	}
                    // store:
                    //		The datastore object to look up item values from.

                    var sortFunctions = [];

                    function createSortFunction(attr, dir, comp, s) {
                        //Passing in comp and s (comparator and store), makes this
                        //function much faster.
                        return function(itemA, itemB) {
                            var a = s.getValue(itemA, attr);
                            var b = s.getValue(itemB, attr);
                            return dir * comp(a, b); //int
                        };
                    }
                    var sortAttribute;
                    var map = store.comparatorMap;
                    var bc = sorter.basicComparator;
                    for (var i = 0; i < sortSpec.length; i++) {
                        sortAttribute = sortSpec[i];
                        var attr = sortAttribute.attribute;
                        if (attr) {
                            var dir = (sortAttribute.descending) ? -1 : 1;
                            var comp = bc;
                            if (map) {
                                if (typeof attr !== "string" && ("toString" in attr)) {
                                    attr = attr.toString();
                                }
                                comp = map[attr] || bc;
                            }
                            sortFunctions.push(createSortFunction(attr,
                                dir, comp, store));
                        }
                    }
                    return function(rowA, rowB) {
                        var i = 0;
                        while (i < sortFunctions.length) {
                            var ret = sortFunctions[i++](rowA, rowB);
                            if (ret !== 0) {
                                return ret; //int
                            }
                        }
                        return 0; //int
                    }; // Function
                };

                return sorter;
            });

        },
        'dijit/form/_ButtonMixin': function() {
            define("dijit/form/_ButtonMixin", [
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.setSelectable
                "dojo/_base/event", // event.stop
                "../registry" // registry.byNode
            ], function(declare, dom, event, registry) {

                // module:
                //		dijit/form/_ButtonMixin

                return declare("dijit.form._ButtonMixin", null, {
                    // summary:
                    //		A mixin to add a thin standard API wrapper to a normal HTML button
                    // description:
                    //		A label should always be specified (through innerHTML) or the label attribute.
                    //
                    //		Attach points:
                    //
                    //		- focusNode (required): this node receives focus
                    //		- valueNode (optional): this node's value gets submitted with FORM elements
                    //		- containerNode (optional): this node gets the innerHTML assignment for label
                    // example:
                    // |	<button data-dojo-type="dijit/form/Button" onClick="...">Hello world</button>
                    // example:
                    // |	var button1 = new Button({label: "hello world", onClick: foo});
                    // |	dojo.body().appendChild(button1.domNode);

                    // label: HTML String
                    //		Content to display in button.
                    label: "",

                    // type: [const] String
                    //		Type of button (submit, reset, button, checkbox, radio)
                    type: "button",

                    _onClick: function( /*Event*/ e) {
                        // summary:
                        //		Internal function to handle click actions
                        if (this.disabled) {
                            event.stop(e);
                            return false;
                        }
                        var preventDefault = this.onClick(e) === false; // user click actions
                        if (!preventDefault && this.type == "submit" && !(this.valueNode || this.focusNode).form) { // see if a non-form widget needs to be signalled
                            for (var node = this.domNode; node.parentNode; node = node.parentNode) {
                                var widget = registry.byNode(node);
                                if (widget && typeof widget._onSubmit == "function") {
                                    widget._onSubmit(e);
                                    preventDefault = true;
                                    break;
                                }
                            }
                        }
                        if (preventDefault) {
                            e.preventDefault();
                        }
                        return !preventDefault;
                    },

                    postCreate: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.focusNode, false);
                    },

                    onClick: function( /*Event*/ /*===== e =====*/ ) {
                        // summary:
                        //		Callback for when button is clicked.
                        //		If type="submit", return true to perform submit, or false to cancel it.
                        // type:
                        //		callback
                        return true; // Boolean
                    },

                    _setLabelAttr: function( /*String*/ content) {
                        // summary:
                        //		Hook for set('label', ...) to work.
                        // description:
                        //		Set the label (text) of the button; takes an HTML string.
                        this._set("label", content);
                        (this.containerNode || this.focusNode).innerHTML = content;
                    }
                });

            });

        },
        'dojo/dom-attr': function() {
            define(["exports", "./sniff", "./_base/lang", "./dom", "./dom-style", "./dom-prop"],
                function(exports, has, lang, dom, style, prop) {
                    // module:
                    //		dojo/dom-attr
                    // summary:
                    //		This module defines the core dojo DOM attributes API.

                    // TODOC: summary not showing up in output see https://github.com/csnover/js-doc-parse/issues/42

                    // =============================
                    // Element attribute Functions
                    // =============================

                    // This module will be obsolete soon. Use dojo/prop instead.

                    // dojo.attr() should conform to http://www.w3.org/TR/DOM-Level-2-Core/

                    // attribute-related functions (to be obsolete soon)

                    var forcePropNames = {
                            innerHTML: 1,
                            className: 1,
                            htmlFor: has("ie"),
                            value: 1
                        },
                        attrNames = {
                            // original attribute names
                            classname: "class",
                            htmlfor: "for",
                            // for IE
                            tabindex: "tabIndex",
                            readonly: "readOnly"
                        };

                    function _hasAttr(node, name) {
                        var attr = node.getAttributeNode && node.getAttributeNode(name);
                        return attr && attr.specified; // Boolean
                    }

                    // There is a difference in the presence of certain properties and their default values
                    // between browsers. For example, on IE "disabled" is present on all elements,
                    // but it is value is "false"; "tabIndex" of <div> returns 0 by default on IE, yet other browsers
                    // can return -1.

                    exports.has = function hasAttr( /*DOMNode|String*/ node, /*String*/ name) {
                        // summary:
                        //		Returns true if the requested attribute is specified on the
                        //		given element, and false otherwise.
                        // node: DOMNode|String
                        //		id or reference to the element to check
                        // name: String
                        //		the name of the attribute
                        // returns: Boolean
                        //		true if the requested attribute is specified on the
                        //		given element, and false otherwise

                        var lc = name.toLowerCase();
                        return forcePropNames[prop.names[lc] || name] || _hasAttr(dom.byId(node), attrNames[lc] || name); // Boolean
                    };

                    exports.get = function getAttr( /*DOMNode|String*/ node, /*String*/ name) {
                        // summary:
                        //		Gets an attribute on an HTML element.
                        // description:
                        //		Handles normalized getting of attributes on DOM Nodes.
                        // node: DOMNode|String
                        //		id or reference to the element to get the attribute on
                        // name: String
                        //		the name of the attribute to get.
                        // returns:
                        //		the value of the requested attribute or null if that attribute does not have a specified or
                        //		default value;
                        //
                        // example:
                        //	|	// get the current value of the "foo" attribute on a node
                        //	|	dojo.getAttr(dojo.byId("nodeId"), "foo");
                        //	|	// or we can just pass the id:
                        //	|	dojo.getAttr("nodeId", "foo");

                        node = dom.byId(node);
                        var lc = name.toLowerCase(),
                            propName = prop.names[lc] || name,
                            forceProp = forcePropNames[propName],
                            value = node[propName]; // should we access this attribute via a property or via getAttribute()?

                        if (forceProp && typeof value != "undefined") {
                            // node's property
                            return value; // Anything
                        }
                        if (propName != "href" && (typeof value == "boolean" || lang.isFunction(value))) {
                            // node's property
                            return value; // Anything
                        }
                        // node's attribute
                        // we need _hasAttr() here to guard against IE returning a default value
                        var attrName = attrNames[lc] || name;
                        return _hasAttr(node, attrName) ? node.getAttribute(attrName) : null; // Anything
                    };

                    exports.set = function setAttr( /*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value) {
                        // summary:
                        //		Sets an attribute on an HTML element.
                        // description:
                        //		Handles normalized setting of attributes on DOM Nodes.
                        //
                        //		When passing functions as values, note that they will not be
                        //		directly assigned to slots on the node, but rather the default
                        //		behavior will be removed and the new behavior will be added
                        //		using `dojo.connect()`, meaning that event handler properties
                        //		will be normalized and that some caveats with regards to
                        //		non-standard behaviors for onsubmit apply. Namely that you
                        //		should cancel form submission using `dojo.stopEvent()` on the
                        //		passed event object instead of returning a boolean value from
                        //		the handler itself.
                        // node: DOMNode|String
                        //		id or reference to the element to set the attribute on
                        // name: String|Object
                        //		the name of the attribute to set, or a hash of key-value pairs to set.
                        // value: String?
                        //		the value to set for the attribute, if the name is a string.
                        // returns:
                        //		the DOM node
                        //
                        // example:
                        //	|	// use attr() to set the tab index
                        //	|	dojo.setAttr("nodeId", "tabIndex", 3);
                        //
                        // example:
                        //	Set multiple values at once, including event handlers:
                        //	|	dojo.setAttr("formId", {
                        //	|		"foo": "bar",
                        //	|		"tabIndex": -1,
                        //	|		"method": "POST",
                        //	|		"onsubmit": function(e){
                        //	|			// stop submitting the form. Note that the IE behavior
                        //	|			// of returning true or false will have no effect here
                        //	|			// since our handler is connect()ed to the built-in
                        //	|			// onsubmit behavior and so we need to use
                        //	|			// dojo.stopEvent() to ensure that the submission
                        //	|			// doesn't proceed.
                        //	|			dojo.stopEvent(e);
                        //	|
                        //	|			// submit the form with Ajax
                        //	|			dojo.xhrPost({ form: "formId" });
                        //	|		}
                        //	|	});
                        //
                        // example:
                        //	Style is s special case: Only set with an object hash of styles
                        //	|	dojo.setAttr("someNode",{
                        //	|		id:"bar",
                        //	|		style:{
                        //	|			width:"200px", height:"100px", color:"#000"
                        //	|		}
                        //	|	});
                        //
                        // example:
                        //	Again, only set style as an object hash of styles:
                        //	|	var obj = { color:"#fff", backgroundColor:"#000" };
                        //	|	dojo.setAttr("someNode", "style", obj);
                        //	|
                        //	|	// though shorter to use `dojo.style()` in this case:
                        //	|	dojo.setStyle("someNode", obj);

                        node = dom.byId(node);
                        if (arguments.length == 2) { // inline'd type check
                            // the object form of setter: the 2nd argument is a dictionary
                            for (var x in name) {
                                exports.set(node, x, name[x]);
                            }
                            return node; // DomNode
                        }
                        var lc = name.toLowerCase(),
                            propName = prop.names[lc] || name,
                            forceProp = forcePropNames[propName];
                        if (propName == "style" && typeof value != "string") { // inline'd type check
                            // special case: setting a style
                            style.set(node, value);
                            return node; // DomNode
                        }
                        if (forceProp || typeof value == "boolean" || lang.isFunction(value)) {
                            return prop.set(node, name, value);
                        }
                        // node's attribute
                        node.setAttribute(attrNames[lc] || name, value);
                        return node; // DomNode
                    };

                    exports.remove = function removeAttr( /*DOMNode|String*/ node, /*String*/ name) {
                        // summary:
                        //		Removes an attribute from an HTML element.
                        // node: DOMNode|String
                        //		id or reference to the element to remove the attribute from
                        // name: String
                        //		the name of the attribute to remove

                        dom.byId(node).removeAttribute(attrNames[name.toLowerCase()] || name);
                    };

                    exports.getNodeProp = function getNodeProp( /*DomNode|String*/ node, /*String*/ name) {
                        // summary:
                        //		Returns an effective value of a property or an attribute.
                        // node: DOMNode|String
                        //		id or reference to the element to remove the attribute from
                        // name: String
                        //		the name of the attribute
                        // returns:
                        //		the value of the attribute

                        node = dom.byId(node);
                        var lc = name.toLowerCase(),
                            propName = prop.names[lc] || name;
                        if ((propName in node) && propName != "href") {
                            // node's property
                            return node[propName]; // Anything
                        }
                        // node's attribute
                        var attrName = attrNames[lc] || name;
                        return _hasAttr(node, attrName) ? node.getAttribute(attrName) : null; // Anything
                    };
                });

        },
        'dijit/registry': function() {
            define("dijit/registry", [
                "dojo/_base/array", // array.forEach array.map
                "dojo/sniff", // has("ie")
                "dojo/_base/unload", // unload.addOnWindowUnload
                "dojo/_base/window", // win.body
                "./main" // dijit._scopeName
            ], function(array, has, unload, win, dijit) {

                // module:
                //		dijit/registry

                var _widgetTypeCtr = {},
                    hash = {};

                var registry = {
                    // summary:
                    //		Registry of existing widget on page, plus some utility methods.

                    // length: Number
                    //		Number of registered widgets
                    length: 0,

                    add: function(widget) {
                        // summary:
                        //		Add a widget to the registry. If a duplicate ID is detected, a error is thrown.
                        // widget: dijit/_WidgetBase
                        //		Any dijit/_WidgetBase subclass.
                        if (hash[widget.id]) {
                            throw new Error("Tried to register widget with id==" + widget.id + " but that id is already registered");
                        }
                        hash[widget.id] = widget;
                        this.length++;
                    },

                    remove: function( /*String*/ id) {
                        // summary:
                        //		Remove a widget from the registry. Does not destroy the widget; simply
                        //		removes the reference.
                        if (hash[id]) {
                            delete hash[id];
                            this.length--;
                        }
                    },

                    byId: function( /*String|Widget*/ id) {
                        // summary:
                        //		Find a widget by it's id.
                        //		If passed a widget then just returns the widget.
                        return typeof id == "string" ? hash[id] : id; // dijit/_WidgetBase
                    },

                    byNode: function( /*DOMNode*/ node) {
                        // summary:
                        //		Returns the widget corresponding to the given DOMNode
                        return hash[node.getAttribute("widgetId")]; // dijit/_WidgetBase
                    },

                    toArray: function() {
                        // summary:
                        //		Convert registry into a true Array
                        //
                        // example:
                        //		Work with the widget .domNodes in a real Array
                        //		|	array.map(registry.toArray(), function(w){ return w.domNode; });

                        var ar = [];
                        for (var id in hash) {
                            ar.push(hash[id]);
                        }
                        return ar; // dijit/_WidgetBase[]
                    },

                    getUniqueId: function( /*String*/ widgetType) {
                        // summary:
                        //		Generates a unique id for a given widgetType

                        var id;
                        do {
                            id = widgetType + "_" +
                                (widgetType in _widgetTypeCtr ?
                                    ++_widgetTypeCtr[widgetType] : _widgetTypeCtr[widgetType] = 0);
                        } while (hash[id]);
                        return dijit._scopeName == "dijit" ? id : dijit._scopeName + "_" + id; // String
                    },

                    findWidgets: function(root, skipNode) {
                        // summary:
                        //		Search subtree under root returning widgets found.
                        //		Doesn't search for nested widgets (ie, widgets inside other widgets).
                        // root: DOMNode
                        //		Node to search under.
                        // skipNode: DOMNode
                        //		If specified, don't search beneath this node (usually containerNode).

                        var outAry = [];

                        function getChildrenHelper(root) {
                            for (var node = root.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType == 1) {
                                    var widgetId = node.getAttribute("widgetId");
                                    if (widgetId) {
                                        var widget = hash[widgetId];
                                        if (widget) { // may be null on page w/multiple dojo's loaded
                                            outAry.push(widget);
                                        }
                                    } else if (node !== skipNode) {
                                        getChildrenHelper(node);
                                    }
                                }
                            }
                        }

                        getChildrenHelper(root);
                        return outAry;
                    },

                    _destroyAll: function() {
                        // summary:
                        //		Code to destroy all widgets and do other cleanup on page unload

                        // Clean up focus manager lingering references to widgets and nodes
                        dijit._curFocus = null;
                        dijit._prevFocus = null;
                        dijit._activeStack = [];

                        // Destroy all the widgets, top down
                        array.forEach(registry.findWidgets(win.body()), function(widget) {
                            // Avoid double destroy of widgets like Menu that are attached to <body>
                            // even though they are logically children of other widgets.
                            if (!widget._destroyed) {
                                if (widget.destroyRecursive) {
                                    widget.destroyRecursive();
                                } else if (widget.destroy) {
                                    widget.destroy();
                                }
                            }
                        });
                    },

                    getEnclosingWidget: function( /*DOMNode*/ node) {
                        // summary:
                        //		Returns the widget whose DOM tree contains the specified DOMNode, or null if
                        //		the node is not contained within the DOM tree of any widget
                        while (node) {
                            var id = node.getAttribute && node.getAttribute("widgetId");
                            if (id) {
                                return hash[id];
                            }
                            node = node.parentNode;
                        }
                        return null;
                    },

                    // In case someone needs to access hash.
                    // Actually, this is accessed from WidgetSet back-compatibility code
                    _hash: hash
                };

                dijit.registry = registry;

                return registry;
            });

        },
        'dojo/io-query': function() {
            define(["./_base/lang"], function(lang) {

                // module:
                //		dojo/io-query

                var backstop = {};

                return {
                    // summary:
                    //		This module defines query string processing functions.

                    objectToQuery: function objectToQuery( /*Object*/ map) {
                        // summary:
                        //		takes a name/value mapping object and returns a string representing
                        //		a URL-encoded version of that object.
                        // example:
                        //		this object:
                        //
                        //	|	{
                        //	|		blah: "blah",
                        //	|		multi: [
                        //	|			"thud",
                        //	|			"thonk"
                        //	|		]
                        //	|	};
                        //
                        //		yields the following query string:
                        //
                        //	|	"blah=blah&multi=thud&multi=thonk"

                        // FIXME: need to implement encodeAscii!!
                        var enc = encodeURIComponent,
                            pairs = [];
                        for (var name in map) {
                            var value = map[name];
                            if (value != backstop[name]) {
                                var assign = enc(name) + "=";
                                if (lang.isArray(value)) {
                                    for (var i = 0, l = value.length; i < l; ++i) {
                                        pairs.push(assign + enc(value[i]));
                                    }
                                } else {
                                    pairs.push(assign + enc(value));
                                }
                            }
                        }
                        return pairs.join("&"); // String
                    },

                    queryToObject: function queryToObject( /*String*/ str) {
                        // summary:
                        //		Create an object representing a de-serialized query section of a
                        //		URL. Query keys with multiple values are returned in an array.
                        //
                        // example:
                        //		This string:
                        //
                        //	|		"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&"
                        //
                        //		results in this object structure:
                        //
                        //	|		{
                        //	|			foo: [ "bar", "baz" ],
                        //	|			thinger: " spaces =blah",
                        //	|			zonk: "blarg"
                        //	|		}
                        //
                        //		Note that spaces and other urlencoded entities are correctly
                        //		handled.

                        // FIXME: should we grab the URL string if we're not passed one?
                        var dec = decodeURIComponent,
                            qp = str.split("&"),
                            ret = {},
                            name, val;
                        for (var i = 0, l = qp.length, item; i < l; ++i) {
                            item = qp[i];
                            if (item.length) {
                                var s = item.indexOf("=");
                                if (s < 0) {
                                    name = dec(item);
                                    val = "";
                                } else {
                                    name = dec(item.slice(0, s));
                                    val = dec(item.slice(s + 1));
                                }
                                if (typeof ret[name] == "string") { // inline'd type check
                                    ret[name] = [ret[name]];
                                }

                                if (lang.isArray(ret[name])) {
                                    ret[name].push(val);
                                } else {
                                    ret[name] = val;
                                }
                            }
                        }
                        return ret; // Object
                    }
                };
            });
        },
        'dojo/date/locale': function() {
            define("dojo/date/locale", [
                "../_base/lang",
                "../_base/array",
                "../date",
                /*===== "../_base/declare", =====*/
                "../cldr/supplemental",
                "../i18n",
                "../regexp",
                "../string",
                "../i18n!../cldr/nls/gregorian",
                "module"
            ], function(lang, array, date, /*===== declare, =====*/ supplemental, i18n, regexp, string, gregorian, module) {

                // module:
                //		dojo/date/locale

                var exports = {
                    // summary:
                    //		This modules defines dojo/date/locale, localization methods for Date.
                };
                lang.setObject(module.id.replace(/\//g, "."), exports);

                // Localization methods for Date.   Honor local customs using locale-dependent dojo.cldr data.

                // Load the bundles containing localization information for
                // names and formats

                //NOTE: Everything in this module assumes Gregorian calendars.
                // Other calendars will be implemented in separate modules.

                // Format a pattern without literals
                function formatPattern(dateObject, bundle, options, pattern) {
                    return pattern.replace(/([a-z])\1*/ig, function(match) {
                        var s, pad,
                            c = match.charAt(0),
                            l = match.length,
                            widthList = ["abbr", "wide", "narrow"];
                        switch (c) {
                            case 'G':
                                s = bundle[(l < 4) ? "eraAbbr" : "eraNames"][dateObject.getFullYear() < 0 ? 0 : 1];
                                break;
                            case 'y':
                                s = dateObject.getFullYear();
                                switch (l) {
                                    case 1:
                                        break;
                                    case 2:
                                        if (!options.fullYear) {
                                            s = String(s);
                                            s = s.substr(s.length - 2);
                                            break;
                                        }
                                        // fallthrough
                                    default:
                                        pad = true;
                                }
                                break;
                            case 'Q':
                            case 'q':
                                s = Math.ceil((dateObject.getMonth() + 1) / 3);
                                //					switch(l){
                                //						case 1: case 2:
                                pad = true;
                                //							break;
                                //						case 3: case 4: // unimplemented
                                //					}
                                break;
                            case 'M':
                            case 'L':
                                var m = dateObject.getMonth();
                                if (l < 3) {
                                    s = m + 1;
                                    pad = true;
                                } else {
                                    var propM = [
                                        "months",
                                        c == 'L' ? "standAlone" : "format",
                                        widthList[l - 3]
                                    ].join("-");
                                    s = bundle[propM][m];
                                }
                                break;
                            case 'w':
                                var firstDay = 0;
                                s = exports._getWeekOfYear(dateObject, firstDay);
                                pad = true;
                                break;
                            case 'd':
                                s = dateObject.getDate();
                                pad = true;
                                break;
                            case 'D':
                                s = exports._getDayOfYear(dateObject);
                                pad = true;
                                break;
                            case 'e':
                            case 'c':
                                var d = dateObject.getDay();
                                if (l < 2) {
                                    s = (d - supplemental.getFirstDayOfWeek(options.locale) + 8) % 7
                                    break;
                                }
                                // fallthrough
                            case 'E':
                                d = dateObject.getDay();
                                if (l < 3) {
                                    s = d + 1;
                                    pad = true;
                                } else {
                                    var propD = [
                                        "days",
                                        c == 'c' ? "standAlone" : "format",
                                        widthList[l - 3]
                                    ].join("-");
                                    s = bundle[propD][d];
                                }
                                break;
                            case 'a':
                                var timePeriod = dateObject.getHours() < 12 ? 'am' : 'pm';
                                s = options[timePeriod] || bundle['dayPeriods-format-wide-' + timePeriod];
                                break;
                            case 'h':
                            case 'H':
                            case 'K':
                            case 'k':
                                var h = dateObject.getHours();
                                // strange choices in the date format make it impossible to write this succinctly
                                switch (c) {
                                    case 'h': // 1-12
                                        s = (h % 12) || 12;
                                        break;
                                    case 'H': // 0-23
                                        s = h;
                                        break;
                                    case 'K': // 0-11
                                        s = (h % 12);
                                        break;
                                    case 'k': // 1-24
                                        s = h || 24;
                                        break;
                                }
                                pad = true;
                                break;
                            case 'm':
                                s = dateObject.getMinutes();
                                pad = true;
                                break;
                            case 's':
                                s = dateObject.getSeconds();
                                pad = true;
                                break;
                            case 'S':
                                s = Math.round(dateObject.getMilliseconds() * Math.pow(10, l - 3));
                                pad = true;
                                break;
                            case 'v': // FIXME: don't know what this is. seems to be same as z?
                            case 'z':
                                // We only have one timezone to offer; the one from the browser
                                s = exports._getZone(dateObject, true, options);
                                if (s) {
                                    break;
                                }
                                l = 4;
                                // fallthrough... use GMT if tz not available
                            case 'Z':
                                var offset = exports._getZone(dateObject, false, options);
                                var tz = [
                                    (offset <= 0 ? "+" : "-"),
                                    string.pad(Math.floor(Math.abs(offset) / 60), 2),
                                    string.pad(Math.abs(offset) % 60, 2)
                                ];
                                if (l == 4) {
                                    tz.splice(0, 0, "GMT");
                                    tz.splice(3, 0, ":");
                                }
                                s = tz.join("");
                                break;
                                //				case 'Y': case 'u': case 'W': case 'F': case 'g': case 'A':
                                //					console.log(match+" modifier unimplemented");
                            default:
                                throw new Error("dojo.date.locale.format: invalid pattern char: " + pattern);
                        }
                        if (pad) {
                            s = string.pad(s, l);
                        }
                        return s;
                    });
                }

                /*=====
                var __FormatOptions = exports.__FormatOptions = declare(null, {
                	// selector: String
                	//		choice of 'time','date' (default: date and time)
                	// formatLength: String
                	//		choice of long, short, medium or full (plus any custom additions).  Defaults to 'short'
                	// datePattern:String
                	//		override pattern with this string
                	// timePattern:String
                	//		override pattern with this string
                	// am: String
                	//		override strings for am in times
                	// pm: String
                	//		override strings for pm in times
                	// locale: String
                	//		override the locale used to determine formatting rules
                	// fullYear: Boolean
                	//		(format only) use 4 digit years whenever 2 digit years are called for
                	// strict: Boolean
                	//		(parse only) strict parsing, off by default
                });
                =====*/

                exports._getZone = function( /*Date*/ dateObject, /*boolean*/ getName, /*__FormatOptions?*/ options) {
                    // summary:
                    //		Returns the zone (or offset) for the given date and options.  This
                    //		is broken out into a separate function so that it can be overridden
                    //		by timezone-aware code.
                    //
                    // dateObject:
                    //		the date and/or time being formatted.
                    //
                    // getName:
                    //		Whether to return the timezone string (if true), or the offset (if false)
                    //
                    // options:
                    //		The options being used for formatting
                    if (getName) {
                        return date.getTimezoneName(dateObject);
                    } else {
                        return dateObject.getTimezoneOffset();
                    }
                };


                exports.format = function( /*Date*/ dateObject, /*__FormatOptions?*/ options) {
                    // summary:
                    //		Format a Date object as a String, using locale-specific settings.
                    //
                    // description:
                    //		Create a string from a Date object using a known localized pattern.
                    //		By default, this method formats both date and time from dateObject.
                    //		Formatting patterns are chosen appropriate to the locale.  Different
                    //		formatting lengths may be chosen, with "full" used by default.
                    //		Custom patterns may be used or registered with translations using
                    //		the dojo/date/locale.addCustomFormats() method.
                    //		Formatting patterns are implemented using [the syntax described at
                    //		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
                    //
                    // dateObject:
                    //		the date and/or time to be formatted.  If a time only is formatted,
                    //		the values in the year, month, and day fields are irrelevant.  The
                    //		opposite is true when formatting only dates.

                    options = options || {};

                    var locale = i18n.normalizeLocale(options.locale),
                        formatLength = options.formatLength || 'short',
                        bundle = exports._getGregorianBundle(locale),
                        str = [],
                        sauce = lang.hitch(this, formatPattern, dateObject, bundle, options);
                    if (options.selector == "year") {
                        return _processPattern(bundle["dateFormatItem-yyyy"] || "yyyy", sauce);
                    }
                    var pattern;
                    if (options.selector != "date") {
                        pattern = options.timePattern || bundle["timeFormat-" + formatLength];
                        if (pattern) {
                            str.push(_processPattern(pattern, sauce));
                        }
                    }
                    if (options.selector != "time") {
                        pattern = options.datePattern || bundle["dateFormat-" + formatLength];
                        if (pattern) {
                            str.push(_processPattern(pattern, sauce));
                        }
                    }

                    return str.length == 1 ? str[0] : bundle["dateTimeFormat-" + formatLength].replace(/\{(\d+)\}/g,
                        function(match, key) {
                            return str[key];
                        }); // String
                };

                exports.regexp = function( /*__FormatOptions?*/ options) {
                    // summary:
                    //		Builds the regular needed to parse a localized date

                    return exports._parseInfo(options).regexp; // String
                };

                exports._parseInfo = function( /*__FormatOptions?*/ options) {
                    options = options || {};
                    var locale = i18n.normalizeLocale(options.locale),
                        bundle = exports._getGregorianBundle(locale),
                        formatLength = options.formatLength || 'short',
                        datePattern = options.datePattern || bundle["dateFormat-" + formatLength],
                        timePattern = options.timePattern || bundle["timeFormat-" + formatLength],
                        pattern;
                    if (options.selector == 'date') {
                        pattern = datePattern;
                    } else if (options.selector == 'time') {
                        pattern = timePattern;
                    } else {
                        pattern = bundle["dateTimeFormat-" + formatLength].replace(/\{(\d+)\}/g,
                            function(match, key) {
                                return [timePattern, datePattern][key];
                            });
                    }

                    var tokens = [],
                        re = _processPattern(pattern, lang.hitch(this, _buildDateTimeRE, tokens, bundle, options));
                    return {
                        regexp: re,
                        tokens: tokens,
                        bundle: bundle
                    };
                };

                exports.parse = function( /*String*/ value, /*__FormatOptions?*/ options) {
                    // summary:
                    //		Convert a properly formatted string to a primitive Date object,
                    //		using locale-specific settings.
                    //
                    // description:
                    //		Create a Date object from a string using a known localized pattern.
                    //		By default, this method parses looking for both date and time in the string.
                    //		Formatting patterns are chosen appropriate to the locale.  Different
                    //		formatting lengths may be chosen, with "full" used by default.
                    //		Custom patterns may be used or registered with translations using
                    //		the dojo/date/locale.addCustomFormats() method.
                    //
                    //		Formatting patterns are implemented using [the syntax described at
                    //		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
                    //		When two digit years are used, a century is chosen according to a sliding
                    //		window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns.
                    //		year < 100CE requires strict mode.
                    //
                    // value:
                    //		A string representation of a date

                    // remove non-printing bidi control chars from input and pattern
                    var controlChars = /[\u200E\u200F\u202A\u202E]/g,
                        info = exports._parseInfo(options),
                        tokens = info.tokens,
                        bundle = info.bundle,
                        re = new RegExp("^" + info.regexp.replace(controlChars, "") + "$",
                            info.strict ? "" : "i"),
                        match = re.exec(value && value.replace(controlChars, ""));

                    if (!match) {
                        return null;
                    } // null

                    var widthList = ['abbr', 'wide', 'narrow'],
                        result = [1970, 0, 1, 0, 0, 0, 0], // will get converted to a Date at the end
                        amPm = "",
                        valid = array.every(match, function(v, i) {
                            if (!i) {
                                return true;
                            }
                            var token = tokens[i - 1],
                                l = token.length,
                                c = token.charAt(0);
                            switch (c) {
                                case 'y':
                                    if (l != 2 && options.strict) {
                                        //interpret year literally, so '5' would be 5 A.D.
                                        result[0] = v;
                                    } else {
                                        if (v < 100) {
                                            v = Number(v);
                                            //choose century to apply, according to a sliding window
                                            //of 80 years before and 20 years after present year
                                            var year = '' + new Date().getFullYear(),
                                                century = year.substring(0, 2) * 100,
                                                cutoff = Math.min(Number(year.substring(2, 4)) + 20, 99);
                                            result[0] = (v < cutoff) ? century + v : century - 100 + v;
                                        } else {
                                            //we expected 2 digits and got more...
                                            if (options.strict) {
                                                return false;
                                            }
                                            //interpret literally, so '150' would be 150 A.D.
                                            //also tolerate '1950', if 'yyyy' input passed to 'yy' format
                                            result[0] = v;
                                        }
                                    }
                                    break;
                                case 'M':
                                case 'L':
                                    if (l > 2) {
                                        var months = bundle['months-' +
                                            (c == 'L' ? 'standAlone' : 'format') +
                                            '-' + widthList[l - 3]].concat();
                                        if (!options.strict) {
                                            //Tolerate abbreviating period in month part
                                            //Case-insensitive comparison
                                            v = v.replace(".", "").toLowerCase();
                                            months = array.map(months, function(s) {
                                                return s.replace(".", "").toLowerCase();
                                            });
                                        }
                                        v = array.indexOf(months, v);
                                        if (v == -1) {
                                            //						console.log("dojo/date/locale.parse: Could not parse month name: '" + v + "'.");
                                            return false;
                                        }
                                    } else {
                                        v--;
                                    }
                                    result[1] = v;
                                    break;
                                case 'E':
                                case 'e':
                                case 'c':
                                    var days = bundle['days-' +
                                        (c == 'c' ? 'standAlone' : 'format') +
                                        '-' + widthList[l - 3]].concat();
                                    if (!options.strict) {
                                        //Case-insensitive comparison
                                        v = v.toLowerCase();
                                        days = array.map(days, function(d) {
                                            return d.toLowerCase();
                                        });
                                    }
                                    v = array.indexOf(days, v);
                                    if (v == -1) {
                                        //					console.log("dojo/date/locale.parse: Could not parse weekday name: '" + v + "'.");
                                        return false;
                                    }

                                    //TODO: not sure what to actually do with this input,
                                    //in terms of setting something on the Date obj...?
                                    //without more context, can't affect the actual date
                                    //TODO: just validate?
                                    break;
                                case 'D':
                                    result[1] = 0;
                                    // fallthrough...
                                case 'd':
                                    result[2] = v;
                                    break;
                                case 'a': //am/pm
                                    var am = options.am || bundle['dayPeriods-format-wide-am'],
                                        pm = options.pm || bundle['dayPeriods-format-wide-pm'];
                                    if (!options.strict) {
                                        var period = /\./g;
                                        v = v.replace(period, '').toLowerCase();
                                        am = am.replace(period, '').toLowerCase();
                                        pm = pm.replace(period, '').toLowerCase();
                                    }
                                    if (options.strict && v != am && v != pm) {
                                        //					console.log("dojo/date/locale.parse: Could not parse am/pm part.");
                                        return false;
                                    }

                                    // we might not have seen the hours field yet, so store the state and apply hour change later
                                    amPm = (v == pm) ? 'p' : (v == am) ? 'a' : '';
                                    break;
                                case 'K': //hour (1-24)
                                    if (v == 24) {
                                        v = 0;
                                    }
                                    // fallthrough...
                                case 'h': //hour (1-12)
                                case 'H': //hour (0-23)
                                case 'k': //hour (0-11)
                                    //TODO: strict bounds checking, padding
                                    if (v > 23) {
                                        //					console.log("dojo/date/locale.parse: Illegal hours value");
                                        return false;
                                    }

                                    //in the 12-hour case, adjusting for am/pm requires the 'a' part
                                    //which could come before or after the hour, so we will adjust later
                                    result[3] = v;
                                    break;
                                case 'm': //minutes
                                    result[4] = v;
                                    break;
                                case 's': //seconds
                                    result[5] = v;
                                    break;
                                case 'S': //milliseconds
                                    result[6] = v;
                                    //				break;
                                    //			case 'w':
                                    //TODO				var firstDay = 0;
                                    //			default:
                                    //TODO: throw?
                                    //				console.log("dojo/date/locale.parse: unsupported pattern char=" + token.charAt(0));
                            }
                            return true;
                        });

                    var hours = +result[3];
                    if (amPm === 'p' && hours < 12) {
                        result[3] = hours + 12; //e.g., 3pm -> 15
                    } else if (amPm === 'a' && hours == 12) {
                        result[3] = 0; //12am -> 0
                    }

                    //TODO: implement a getWeekday() method in order to test
                    //validity of input strings containing 'EEE' or 'EEEE'...

                    var dateObject = new Date(result[0], result[1], result[2], result[3], result[4], result[5], result[6]); // Date
                    if (options.strict) {
                        dateObject.setFullYear(result[0]);
                    }

                    // Check for overflow.  The Date() constructor normalizes things like April 32nd...
                    //TODO: why isn't this done for times as well?
                    var allTokens = tokens.join(""),
                        dateToken = allTokens.indexOf('d') != -1,
                        monthToken = allTokens.indexOf('M') != -1;

                    if (!valid ||
                        (monthToken && dateObject.getMonth() > result[1]) ||
                        (dateToken && dateObject.getDate() > result[2])) {
                        return null;
                    }

                    // Check for underflow, due to DST shifts.  See #9366
                    // This assumes a 1 hour dst shift correction at midnight
                    // We could compare the timezone offset after the shift and add the difference instead.
                    if ((monthToken && dateObject.getMonth() < result[1]) ||
                        (dateToken && dateObject.getDate() < result[2])) {
                        dateObject = date.add(dateObject, "hour", 1);
                    }

                    return dateObject; // Date
                };

                function _processPattern(pattern, applyPattern, applyLiteral, applyAll) {
                    //summary: Process a pattern with literals in it

                    // Break up on single quotes, treat every other one as a literal, except '' which becomes '
                    var identity = function(x) {
                        return x;
                    };
                    applyPattern = applyPattern || identity;
                    applyLiteral = applyLiteral || identity;
                    applyAll = applyAll || identity;

                    //split on single quotes (which escape literals in date format strings)
                    //but preserve escaped single quotes (e.g., o''clock)
                    var chunks = pattern.match(/(''|[^'])+/g),
                        literal = pattern.charAt(0) == "'";

                    array.forEach(chunks, function(chunk, i) {
                        if (!chunk) {
                            chunks[i] = '';
                        } else {
                            chunks[i] = (literal ? applyLiteral : applyPattern)(chunk.replace(/''/g, "'"));
                            literal = !literal;
                        }
                    });
                    return applyAll(chunks.join(''));
                }

                function _buildDateTimeRE(tokens, bundle, options, pattern) {
                    pattern = regexp.escapeString(pattern);
                    if (!options.strict) {
                        pattern = pattern.replace(" a", " ?a");
                    } // kludge to tolerate no space before am/pm
                    return pattern.replace(/([a-z])\1*/ig, function(match) {
                        // Build a simple regexp.  Avoid captures, which would ruin the tokens list
                        var s,
                            c = match.charAt(0),
                            l = match.length,
                            p2 = '',
                            p3 = '';
                        if (options.strict) {
                            if (l > 1) {
                                p2 = '0' + '{' + (l - 1) + '}';
                            }
                            if (l > 2) {
                                p3 = '0' + '{' + (l - 2) + '}';
                            }
                        } else {
                            p2 = '0?';
                            p3 = '0{0,2}';
                        }
                        switch (c) {
                            case 'y':
                                s = '\\d{2,4}';
                                break;
                            case 'M':
                            case 'L':
                                s = (l > 2) ? '\\S+?' : '1[0-2]|' + p2 + '[1-9]';
                                break;
                            case 'D':
                                s = '[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|' + p2 + '[1-9][0-9]|' + p3 + '[1-9]';
                                break;
                            case 'd':
                                s = '3[01]|[12]\\d|' + p2 + '[1-9]';
                                break;
                            case 'w':
                                s = '[1-4][0-9]|5[0-3]|' + p2 + '[1-9]';
                                break;
                            case 'E':
                            case 'e':
                            case 'c':
                                s = '\\S+';
                                break;
                            case 'h': //hour (1-12)
                                s = '1[0-2]|' + p2 + '[1-9]';
                                break;
                            case 'k': //hour (0-11)
                                s = '1[01]|' + p2 + '\\d';
                                break;
                            case 'H': //hour (0-23)
                                s = '1\\d|2[0-3]|' + p2 + '\\d';
                                break;
                            case 'K': //hour (1-24)
                                s = '1\\d|2[0-4]|' + p2 + '[1-9]';
                                break;
                            case 'm':
                            case 's':
                                s = '[0-5]\\d';
                                break;
                            case 'S':
                                s = '\\d{' + l + '}';
                                break;
                            case 'a':
                                var am = options.am || bundle['dayPeriods-format-wide-am'],
                                    pm = options.pm || bundle['dayPeriods-format-wide-pm'];
                                s = am + '|' + pm;
                                if (!options.strict) {
                                    if (am != am.toLowerCase()) {
                                        s += '|' + am.toLowerCase();
                                    }
                                    if (pm != pm.toLowerCase()) {
                                        s += '|' + pm.toLowerCase();
                                    }
                                    if (s.indexOf('.') != -1) {
                                        s += '|' + s.replace(/\./g, "");
                                    }
                                }
                                s = s.replace(/\./g, "\\.");
                                break;
                            default:
                                // case 'v':
                                // case 'z':
                                // case 'Z':
                                s = ".*";
                                //				console.log("parse of date format, pattern=" + pattern);
                        }

                        if (tokens) {
                            tokens.push(match);
                        }

                        return "(" + s + ")"; // add capture
                    }).replace(/[\xa0 ]/g, "[\\s\\xa0]"); // normalize whitespace.  Need explicit handling of \xa0 for IE.
                }

                var _customFormats = [];
                exports.addCustomFormats = function( /*String*/ packageName, /*String*/ bundleName) {
                    // summary:
                    //		Add a reference to a bundle containing localized custom formats to be
                    //		used by date/time formatting and parsing routines.
                    //
                    // description:
                    //		The user may add custom localized formats where the bundle has properties following the
                    //		same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`
                    //		The pattern string should match the format used by the CLDR.
                    //		See dojo/date/locale.format() for details.
                    //		The resources must be loaded by dojo.requireLocalization() prior to use

                    _customFormats.push({
                        pkg: packageName,
                        name: bundleName
                    });
                };

                exports._getGregorianBundle = function( /*String*/ locale) {
                    var gregorian = {};
                    array.forEach(_customFormats, function(desc) {
                        var bundle = i18n.getLocalization(desc.pkg, desc.name, locale);
                        gregorian = lang.mixin(gregorian, bundle);
                    }, this);
                    return gregorian; /*Object*/
                };

                exports.addCustomFormats(module.id.replace(/\/date\/locale$/, ".cldr"), "gregorian");

                exports.getNames = function( /*String*/ item, /*String*/ type, /*String?*/ context, /*String?*/ locale) {
                    // summary:
                    //		Used to get localized strings from dojo.cldr for day or month names.
                    //
                    // item:
                    //	'months' || 'days'
                    // type:
                    //	'wide' || 'abbr' || 'narrow' (e.g. "Monday", "Mon", or "M" respectively, in English)
                    // context:
                    //	'standAlone' || 'format' (default)
                    // locale:
                    //	override locale used to find the names

                    var label,
                        lookup = exports._getGregorianBundle(locale),
                        props = [item, context, type];
                    if (context == 'standAlone') {
                        var key = props.join('-');
                        label = lookup[key];
                        // Fall back to 'format' flavor of name
                        if (label[0] == 1) {
                            label = undefined;
                        } // kludge, in the absence of real aliasing support in dojo.cldr
                    }
                    props[1] = 'format';

                    // return by copy so changes won't be made accidentally to the in-memory model
                    return (label || lookup[props.join('-')]).concat(); /*Array*/
                };

                exports.isWeekend = function( /*Date?*/ dateObject, /*String?*/ locale) {
                    // summary:
                    //	Determines if the date falls on a weekend, according to local custom.

                    var weekend = supplemental.getWeekend(locale),
                        day = (dateObject || new Date()).getDay();
                    if (weekend.end < weekend.start) {
                        weekend.end += 7;
                        if (day < weekend.start) {
                            day += 7;
                        }
                    }
                    return day >= weekend.start && day <= weekend.end; // Boolean
                };

                // These are used only by format and strftime.  Do they need to be public?  Which module should they go in?

                exports._getDayOfYear = function( /*Date*/ dateObject) {
                    // summary:
                    //		gets the day of the year as represented by dateObject
                    return date.difference(new Date(dateObject.getFullYear(), 0, 1, dateObject.getHours()), dateObject) + 1; // Number
                };

                exports._getWeekOfYear = function( /*Date*/ dateObject, /*Number*/ firstDayOfWeek) {
                    if (arguments.length == 1) {
                        firstDayOfWeek = 0;
                    } // Sunday

                    var firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1).getDay(),
                        adj = (firstDayOfYear - firstDayOfWeek + 7) % 7,
                        week = Math.floor((exports._getDayOfYear(dateObject) + adj - 1) / 7);

                    // if year starts on the specified day, start counting weeks at 1
                    if (firstDayOfYear == firstDayOfWeek) {
                        week++;
                    }

                    return week; // Number
                };

                return exports;
            });

        },
        'dijit/form/_FormSelectWidget': function() {
            define("dijit/form/_FormSelectWidget", [
                "dojo/_base/array", // array.filter array.forEach array.map array.some
                "dojo/_base/Deferred",
                "dojo/aspect", // aspect.after
                "dojo/data/util/sorter", // util.sorter.createSortFunction
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.setSelectable
                "dojo/dom-class", // domClass.toggle
                "dojo/_base/kernel", // _scopeName
                "dojo/_base/lang", // lang.delegate lang.isArray lang.isObject lang.hitch
                "dojo/query", // query
                "dojo/when",
                "dojo/store/util/QueryResults",
                "./_FormValueWidget"
            ], function(array, Deferred, aspect, sorter, declare, dom, domClass, kernel, lang, query, when,
                QueryResults, _FormValueWidget) {

                // module:
                //		dijit/form/_FormSelectWidget

                /*=====
                var __SelectOption = {
                	// value: String
                	//		The value of the option.  Setting to empty (or missing) will
                	//		place a separator at that location
                	// label: String
                	//		The label for our option.  It can contain html tags.
                	// selected: Boolean
                	//		Whether or not we are a selected option
                	// disabled: Boolean
                	//		Whether or not this specific option is disabled
                };
                =====*/

                var _FormSelectWidget = declare("dijit.form._FormSelectWidget", _FormValueWidget, {
                    // summary:
                    //		Extends _FormValueWidget in order to provide "select-specific"
                    //		values - i.e., those values that are unique to `<select>` elements.
                    //		This also provides the mechanism for reading the elements from
                    //		a store, if desired.

                    // multiple: [const] Boolean
                    //		Whether or not we are multi-valued
                    multiple: false,

                    // options: __SelectOption[]
                    //		The set of options for our select item.  Roughly corresponds to
                    //		the html `<option>` tag.
                    options: null,

                    // store: dojo/store/api/Store
                    //		A store to use for getting our list of options - rather than reading them
                    //		from the `<option>` html tags.   Should support getIdentity().
                    //		For back-compat store can also be a dojo/data/api/Identity.
                    store: null,

                    // query: object
                    //		A query to use when fetching items from our store
                    query: null,

                    // queryOptions: object
                    //		Query options to use when fetching from the store
                    queryOptions: null,

                    // labelAttr: String?
                    //		The entries in the drop down list come from this attribute in the dojo.store items.
                    //		If ``store`` is set, labelAttr must be set too, unless store is an old-style
                    //		dojo.data store rather than a new dojo/store.
                    labelAttr: "",

                    // onFetch: Function
                    //		A callback to do with an onFetch - but before any items are actually
                    //		iterated over (i.e. to filter even further what you want to add)
                    onFetch: null,

                    // sortByLabel: Boolean
                    //		Flag to sort the options returned from a store by the label of
                    //		the store.
                    sortByLabel: true,


                    // loadChildrenOnOpen: Boolean
                    //		By default loadChildren is called when the items are fetched from the
                    //		store.  This property allows delaying loadChildren (and the creation
                    //		of the options/menuitems) until the user clicks the button to open the
                    //		dropdown.
                    loadChildrenOnOpen: false,

                    // onLoadDeferred: [readonly] dojo.Deferred
                    //		This is the `dojo.Deferred` returned by setStore().
                    //		Calling onLoadDeferred.then() registers your
                    //		callback to be called only once, when the prior setStore completes.
                    onLoadDeferred: null,

                    getOptions: function( /*anything*/ valueOrIdx) {
                        // summary:
                        //		Returns a given option (or options).
                        // valueOrIdx:
                        //		If passed in as a string, that string is used to look up the option
                        //		in the array of options - based on the value property.
                        //		(See dijit/form/_FormSelectWidget.__SelectOption).
                        //
                        //		If passed in a number, then the option with the given index (0-based)
                        //		within this select will be returned.
                        //
                        //		If passed in a dijit/form/_FormSelectWidget.__SelectOption, the same option will be
                        //		returned if and only if it exists within this select.
                        //
                        //		If passed an array, then an array will be returned with each element
                        //		in the array being looked up.
                        //
                        //		If not passed a value, then all options will be returned
                        //
                        // returns:
                        //		The option corresponding with the given value or index.  null
                        //		is returned if any of the following are true:
                        //
                        //		- A string value is passed in which doesn't exist
                        //		- An index is passed in which is outside the bounds of the array of options
                        //		- A dijit/form/_FormSelectWidget.__SelectOption is passed in which is not a part of the select

                        // NOTE: the compare for passing in a dijit/form/_FormSelectWidget.__SelectOption checks
                        //		if the value property matches - NOT if the exact option exists
                        // NOTE: if passing in an array, null elements will be placed in the returned
                        //		array when a value is not found.
                        var lookupValue = valueOrIdx,
                            opts = this.options || [],
                            l = opts.length;

                        if (lookupValue === undefined) {
                            return opts; // __SelectOption[]
                        }
                        if (lang.isArray(lookupValue)) {
                            return array.map(lookupValue, "return this.getOptions(item);", this); // __SelectOption[]
                        }
                        if (lang.isObject(valueOrIdx)) {
                            // We were passed an option - so see if it's in our array (directly),
                            // and if it's not, try and find it by value.
                            if (!array.some(this.options, function(o, idx) {
                                    if (o === lookupValue ||
                                        (o.value && o.value === lookupValue.value)) {
                                        lookupValue = idx;
                                        return true;
                                    }
                                    return false;
                                })) {
                                lookupValue = -1;
                            }
                        }
                        if (typeof lookupValue == "string") {
                            for (var i = 0; i < l; i++) {
                                if (opts[i].value === lookupValue) {
                                    lookupValue = i;
                                    break;
                                }
                            }
                        }
                        if (typeof lookupValue == "number" && lookupValue >= 0 && lookupValue < l) {
                            return this.options[lookupValue]; // __SelectOption
                        }
                        return null; // null
                    },

                    addOption: function( /*__SelectOption|__SelectOption[]*/ option) {
                        // summary:
                        //		Adds an option or options to the end of the select.  If value
                        //		of the option is empty or missing, a separator is created instead.
                        //		Passing in an array of options will yield slightly better performance
                        //		since the children are only loaded once.
                        if (!lang.isArray(option)) {
                            option = [option];
                        }
                        array.forEach(option, function(i) {
                            if (i && lang.isObject(i)) {
                                this.options.push(i);
                            }
                        }, this);
                        this._loadChildren();
                    },

                    removeOption: function( /*String|__SelectOption|Number|Array*/ valueOrIdx) {
                        // summary:
                        //		Removes the given option or options.  You can remove by string
                        //		(in which case the value is removed), number (in which case the
                        //		index in the options array is removed), or select option (in
                        //		which case, the select option with a matching value is removed).
                        //		You can also pass in an array of those values for a slightly
                        //		better performance since the children are only loaded once.
                        if (!lang.isArray(valueOrIdx)) {
                            valueOrIdx = [valueOrIdx];
                        }
                        var oldOpts = this.getOptions(valueOrIdx);
                        array.forEach(oldOpts, function(i) {
                            // We can get null back in our array - if our option was not found.  In
                            // that case, we don't want to blow up...
                            if (i) {
                                this.options = array.filter(this.options, function(node) {
                                    return (node.value !== i.value || node.label !== i.label);
                                });
                                this._removeOptionItem(i);
                            }
                        }, this);
                        this._loadChildren();
                    },

                    updateOption: function( /*__SelectOption|__SelectOption[]*/ newOption) {
                        // summary:
                        //		Updates the values of the given option.  The option to update
                        //		is matched based on the value of the entered option.  Passing
                        //		in an array of new options will yield better performance since
                        //		the children will only be loaded once.
                        if (!lang.isArray(newOption)) {
                            newOption = [newOption];
                        }
                        array.forEach(newOption, function(i) {
                            var oldOpt = this.getOptions(i),
                                k;
                            if (oldOpt) {
                                for (k in i) {
                                    oldOpt[k] = i[k];
                                }
                            }
                        }, this);
                        this._loadChildren();
                    },

                    setStore: function(store,
                        selectedValue,
                        fetchArgs) {
                        // summary:
                        //		Sets the store you would like to use with this select widget.
                        //		The selected value is the value of the new store to set.  This
                        //		function returns the original store, in case you want to reuse
                        //		it or something.
                        // store: dojo/store/api/Store
                        //		The dojo.store you would like to use - it MUST implement getIdentity()
                        //		and MAY implement observe().
                        //		For backwards-compatibility this can also be a data.data store, in which case
                        //		it MUST implement dojo/data/api/Identity,
                        //		and MAY implement dojo/data/api/Notification.
                        // selectedValue: anything?
                        //		The value that this widget should set itself to *after* the store
                        //		has been loaded
                        // fetchArgs: Object?
                        //		Hash of parameters to set filter on store, etc.
                        //
                        //		- query: new value for Select.query,
                        //		- queryOptions: new value for Select.queryOptions,
                        //		- onFetch: callback function for each item in data (Deprecated)
                        var oStore = this.store;
                        fetchArgs = fetchArgs || {};

                        if (oStore !== store) {
                            // Our store has changed, so cancel any listeners on old store (remove for 2.0)
                            var h;
                            while ((h = this._notifyConnections.pop())) {
                                h.remove();
                            }

                            // For backwards-compatibility, accept dojo.data store in addition to dojo.store.store.  Remove in 2.0.
                            if (!store.get) {
                                lang.mixin(store, {
                                    _oldAPI: true,
                                    get: function(id) {
                                        // summary:
                                        //		Retrieves an object by it's identity. This will trigger a fetchItemByIdentity.
                                        //		Like dojo.store.DataStore.get() except returns native item.
                                        var deferred = new Deferred();
                                        this.fetchItemByIdentity({
                                            identity: id,
                                            onItem: function(object) {
                                                deferred.resolve(object);
                                            },
                                            onError: function(error) {
                                                deferred.reject(error);
                                            }
                                        });
                                        return deferred.promise;
                                    },
                                    query: function(query, options) {
                                        // summary:
                                        //		Queries the store for objects.   Like dojo/store/DataStore.query()
                                        //		except returned Deferred contains array of native items.
                                        var deferred = new Deferred(function() {
                                            if (fetchHandle.abort) {
                                                fetchHandle.abort();
                                            }
                                        });
                                        deferred.total = new Deferred();
                                        var fetchHandle = this.fetch(lang.mixin({
                                            query: query,
                                            onBegin: function(count) {
                                                deferred.total.resolve(count);
                                            },
                                            onComplete: function(results) {
                                                deferred.resolve(results);
                                            },
                                            onError: function(error) {
                                                deferred.reject(error);
                                            }
                                        }, options));
                                        return new QueryResults(deferred);
                                    }
                                });

                                if (store.getFeatures()["dojo.data.api.Notification"]) {
                                    this._notifyConnections = [
                                        aspect.after(store, "onNew", lang.hitch(this, "_onNewItem"), true),
                                        aspect.after(store, "onDelete", lang.hitch(this, "_onDeleteItem"), true),
                                        aspect.after(store, "onSet", lang.hitch(this, "_onSetItem"), true)
                                    ];
                                }
                            }
                            this._set("store", store); // Our store has changed, so update our notifications
                        }

                        // Remove existing options (if there are any)
                        if (this.options && this.options.length) {
                            this.removeOption(this.options);
                        }

                        // Cancel listener for updates to old store
                        if (this._queryRes && this._queryRes.close) {
                            this._queryRes.close();
                        }

                        // If user has specified new query and query options along with this new store, then use them.
                        if (fetchArgs.query) {
                            this._set("query", fetchArgs.query);
                            this._set("queryOptions", fetchArgs.queryOptions);
                        }

                        // Add our new options
                        if (store) {
                            this._loadingStore = true;
                            this.onLoadDeferred = new Deferred();

                            // Run query
                            // Save result in this._queryRes so we can cancel the listeners we register below
                            this._queryRes = store.query(this.query, this.queryOptions);
                            when(this._queryRes, lang.hitch(this, function(items) {

                                if (this.sortByLabel && !fetchArgs.sort && items.length) {
                                    if (items[0].getValue) {
                                        // Old dojo.data API to access items, remove for 2.0
                                        items.sort(sorter.createSortFunction([{
                                            attribute: store.getLabelAttributes(items[0])[0]
                                        }], store));
                                    } else {
                                        var labelAttr = this.labelAttr;
                                        items.sort(function(a, b) {
                                            return a[labelAttr] > b[labelAttr] ? 1 : b[labelAttr] > a[labelAttr] ? -1 : 0;
                                        });
                                    }
                                }

                                if (fetchArgs.onFetch) {
                                    items = fetchArgs.onFetch.call(this, items, fetchArgs);
                                }

                                // TODO: Add these guys as a batch, instead of separately
                                array.forEach(items, function(i) {
                                    this._addOptionForItem(i);
                                }, this);

                                // Register listener for store updates
                                if (this._queryRes.observe) {
                                    this._queryRes.observe(lang.hitch(this, function(object, deletedFrom, insertedInto) {
                                        if (deletedFrom == insertedInto) {
                                            this._onSetItem(object);
                                        } else {
                                            if (deletedFrom != -1) {
                                                this._onDeleteItem(object);
                                            }
                                            if (insertedInto != -1) {
                                                this._onNewItem(object);
                                            }
                                        }
                                    }), true);
                                }

                                // Set our value (which might be undefined), and then tweak
                                // it to send a change event with the real value
                                this._loadingStore = false;
                                this.set("value", "_pendingValue" in this ? this._pendingValue : selectedValue);
                                delete this._pendingValue;

                                if (!this.loadChildrenOnOpen) {
                                    this._loadChildren();
                                } else {
                                    this._pseudoLoadChildren(items);
                                }
                                this.onLoadDeferred.resolve(true);
                                this.onSetStore();
                            }), function(err) {
                                console.error('dijit.form.Select: ' + err.toString());
                                this.onLoadDeferred.reject(err);
                            });
                        }
                        return oStore; // dojo/data/api/Identity
                    },

                    // TODO: implement set() and watch() for store and query, although not sure how to handle
                    // setting them individually rather than together (as in setStore() above)

                    _setValueAttr: function( /*anything*/ newValue, /*Boolean?*/ priorityChange) {
                        // summary:
                        //		set the value of the widget.
                        //		If a string is passed, then we set our value from looking it up.
                        if (!this._onChangeActive) {
                            priorityChange = null;
                        }
                        if (this._loadingStore) {
                            // Our store is loading - so save our value, and we'll set it when
                            // we're done
                            this._pendingValue = newValue;
                            return;
                        }
                        var opts = this.getOptions() || [];
                        if (!lang.isArray(newValue)) {
                            newValue = [newValue];
                        }
                        array.forEach(newValue, function(i, idx) {
                            if (!lang.isObject(i)) {
                                i = i + "";
                            }
                            if (typeof i === "string") {
                                newValue[idx] = array.filter(opts, function(node) {
                                    return node.value === i;
                                })[0] || {
                                    value: "",
                                    label: ""
                                };
                            }
                        }, this);

                        // Make sure some sane default is set
                        newValue = array.filter(newValue, function(i) {
                            return i && i.value;
                        });
                        if (!this.multiple && (!newValue[0] || !newValue[0].value) && opts.length) {
                            newValue[0] = opts[0];
                        }
                        array.forEach(opts, function(i) {
                            i.selected = array.some(newValue, function(v) {
                                return v.value === i.value;
                            });
                        });
                        var val = array.map(newValue, function(i) {
                                return i.value;
                            }),
                            disp = array.map(newValue, function(i) {
                                return i.label;
                            });

                        if (typeof val == "undefined" || typeof val[0] == "undefined") {
                            return;
                        } // not fully initialized yet or a failed value lookup
                        this._setDisplay(this.multiple ? disp : disp[0]);
                        this.inherited(arguments, [this.multiple ? val : val[0], priorityChange]);
                        this._updateSelection();
                    },

                    _getDisplayedValueAttr: function() {
                        // summary:
                        //		returns the displayed value of the widget
                        var val = this.get("value");
                        if (!lang.isArray(val)) {
                            val = [val];
                        }
                        var ret = array.map(this.getOptions(val), function(v) {
                            if (v && "label" in v) {
                                return v.label;
                            } else if (v) {
                                return v.value;
                            }
                            return null;
                        }, this);
                        return this.multiple ? ret : ret[0];
                    },

                    _loadChildren: function() {
                        // summary:
                        //		Loads the children represented by this widget's options.
                        //		reset the menu to make it populatable on the next click
                        if (this._loadingStore) {
                            return;
                        }
                        array.forEach(this._getChildren(), function(child) {
                            child.destroyRecursive();
                        });
                        // Add each menu item
                        array.forEach(this.options, this._addOptionItem, this);

                        // Update states
                        this._updateSelection();
                    },

                    _updateSelection: function() {
                        // summary:
                        //		Sets the "selected" class on the item for styling purposes
                        this._set("value", this._getValueFromOpts());
                        var val = this.value;
                        if (!lang.isArray(val)) {
                            val = [val];
                        }
                        if (val && val[0]) {
                            array.forEach(this._getChildren(), function(child) {
                                var isSelected = array.some(val, function(v) {
                                    return child.option && (v === child.option.value);
                                });
                                domClass.toggle(child.domNode, this.baseClass.replace(/\s+|$/g, "SelectedOption "), isSelected);
                                child.domNode.setAttribute("aria-selected", isSelected ? "true" : "false");
                            }, this);
                        }
                    },

                    _getValueFromOpts: function() {
                        // summary:
                        //		Returns the value of the widget by reading the options for
                        //		the selected flag
                        var opts = this.getOptions() || [];
                        if (!this.multiple && opts.length) {
                            // Mirror what a select does - choose the first one
                            var opt = array.filter(opts, function(i) {
                                return i.selected;
                            })[0];
                            if (opt && opt.value) {
                                return opt.value;
                            } else {
                                opts[0].selected = true;
                                return opts[0].value;
                            }
                        } else if (this.multiple) {
                            // Set value to be the sum of all selected
                            return array.map(array.filter(opts, function(i) {
                                return i.selected;
                            }), function(i) {
                                return i.value;
                            }) || [];
                        }
                        return "";
                    },

                    // Internal functions to call when we have store notifications come in
                    _onNewItem: function( /*item*/ item, /*Object?*/ parentInfo) {
                        if (!parentInfo || !parentInfo.parent) {
                            // Only add it if we are top-level
                            this._addOptionForItem(item);
                        }
                    },
                    _onDeleteItem: function( /*item*/ item) {
                        var store = this.store;
                        this.removeOption(store.getIdentity(item));
                    },
                    _onSetItem: function( /*item*/ item) {
                        this.updateOption(this._getOptionObjForItem(item));
                    },

                    _getOptionObjForItem: function(item) {
                        // summary:
                        //		Returns an option object based off the given item.  The "value"
                        //		of the option item will be the identity of the item, the "label"
                        //		of the option will be the label of the item.

                        // remove getLabel() call for 2.0 (it's to support the old dojo.data API)
                        var store = this.store,
                            label = (this.labelAttr && this.labelAttr in item) ? item[this.labelAttr] : store.getLabel(item),
                            value = (label ? store.getIdentity(item) : null);
                        return {
                            value: value,
                            label: label,
                            item: item
                        }; // __SelectOption
                    },

                    _addOptionForItem: function( /*item*/ item) {
                        // summary:
                        //		Creates (and adds) the option for the given item
                        var store = this.store;
                        if (store.isItemLoaded && !store.isItemLoaded(item)) {
                            // We are not loaded - so let's load it and add later.
                            // Remove for 2.0 (it's the old dojo.data API)
                            store.loadItem({
                                item: item,
                                onItem: function(i) {
                                    this._addOptionForItem(i);
                                },
                                scope: this
                            });
                            return;
                        }
                        var newOpt = this._getOptionObjForItem(item);
                        this.addOption(newOpt);
                    },

                    constructor: function(params /*===== , srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree

                        //		Saves off our value, if we have an initial one set so we
                        //		can use it if we have a store as well (see startup())
                        this._oValue = (params || {}).value || null;
                        this._notifyConnections = []; // remove for 2.0
                    },

                    buildRendering: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.focusNode, false);
                    },

                    _fillContent: function() {
                        // summary:
                        //		Loads our options and sets up our dropdown correctly.  We
                        //		don't want any content, so we don't call any inherit chain
                        //		function.
                        if (!this.options) {
                            this.options =
                                this.srcNodeRef ?
                                query("> *", this.srcNodeRef).map(
                                    function(node) {
                                        if (node.getAttribute("type") === "separator") {
                                            return {
                                                value: "",
                                                label: "",
                                                selected: false,
                                                disabled: false
                                            };
                                        }
                                        return {
                                            value: (node.getAttribute("data-" + kernel._scopeName + "-value") || node.getAttribute("value")),
                                            label: String(node.innerHTML),
                                            // FIXME: disabled and selected are not valid on complex markup children (which is why we're
                                            // looking for data-dojo-value above.  perhaps we should data-dojo-props="" this whole thing?)
                                            // decide before 1.6
                                            selected: node.getAttribute("selected") || false,
                                            disabled: node.getAttribute("disabled") || false
                                        };
                                    },
                                    this) :
                                [];
                        }
                        if (!this.value) {
                            this._set("value", this._getValueFromOpts());
                        } else if (this.multiple && typeof this.value == "string") {
                            this._set("value", this.value.split(","));
                        }
                    },

                    postCreate: function() {
                        // summary:
                        //		sets up our event handling that we need for functioning
                        //		as a select
                        this.inherited(arguments);

                        // Make our event connections for updating state
                        this.connect(this, "onChange", "_updateSelection");

                        // moved from startup
                        //		Connects in our store, if we have one defined
                        var store = this.store;
                        if (store && (store.getIdentity || store.getFeatures()["dojo.data.api.Identity"])) {
                            // Temporarily set our store to null so that it will get set
                            // and connected appropriately
                            this.store = null;
                            this.setStore(store, this._oValue);
                        }
                    },

                    startup: function() {
                        // summary:
                        this._loadChildren();
                        this.inherited(arguments);
                    },

                    destroy: function() {
                        // summary:
                        //		Clean up our connections

                        var h;
                        while ((h = this._notifyConnections.pop())) {
                            h.remove();
                        }

                        // Cancel listener for store updates
                        if (this._queryRes && this._queryRes.close) {
                            this._queryRes.close();
                        }

                        this.inherited(arguments);
                    },

                    _addOptionItem: function( /*__SelectOption*/ /*===== option =====*/ ) {
                        // summary:
                        //		User-overridable function which, for the given option, adds an
                        //		item to the select.  If the option doesn't have a value, then a
                        //		separator is added in that place.  Make sure to store the option
                        //		in the created option widget.
                    },

                    _removeOptionItem: function( /*__SelectOption*/ /*===== option =====*/ ) {
                        // summary:
                        //		User-overridable function which, for the given option, removes
                        //		its item from the select.
                    },

                    _setDisplay: function( /*String or String[]*/ /*===== newDisplay =====*/ ) {
                        // summary:
                        //		Overridable function which will set the display for the
                        //		widget.  newDisplay is either a string (in the case of
                        //		single selects) or array of strings (in the case of multi-selects)
                    },

                    _getChildren: function() {
                        // summary:
                        //		Overridable function to return the children that this widget contains.
                        return [];
                    },

                    _getSelectedOptionsAttr: function() {
                        // summary:
                        //		hooks into this.attr to provide a mechanism for getting the
                        //		option items for the current value of the widget.
                        return this.getOptions(this.get("value"));
                    },

                    _pseudoLoadChildren: function( /*item[]*/ /*===== items =====*/ ) {
                        // summary:
                        //		a function that will "fake" loading children, if needed, and
                        //		if we have set to not load children until the widget opens.
                        // items:
                        //		An array of items that will be loaded, when needed
                    },

                    onSetStore: function() {
                        // summary:
                        //		a function that can be connected to in order to receive a
                        //		notification that the store has finished loading and all options
                        //		from that store are available
                    }
                });

                /*=====
                _FormSelectWidget.__SelectOption = __SelectOption;
                =====*/

                return _FormSelectWidget;

            });

        },
        'dijit/form/Select': function() {
            require({
                cache: {
                    'url:dijit/form/templates/Select.html': "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\n\trole=\"listbox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitInputField dijitButtonText\"  data-dojo-attach-point=\"containerNode,_popupStateNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitValidationContainer\"\n\t\t\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t/></div\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td\n\t\t><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer\"\n\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t${_buttonInputDisabled}\n\t\t/></td\n\t></tr></tbody\n></table>\n"
                }
            });
            define("dijit/form/Select", [
                "dojo/_base/array", // array.forEach
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.set
                "dojo/dom-class", // domClass.add domClass.remove domClass.toggle
                "dojo/dom-geometry", // domGeometry.setMarginBox
                "dojo/_base/event", // event.stop
                "dojo/i18n", // i18n.getLocalization
                "dojo/_base/lang", // lang.hitch
                "dojo/sniff", // has("ie")
                "./_FormSelectWidget",
                "../_HasDropDown",
                "../Menu",
                "../MenuItem",
                "../MenuSeparator",
                "../Tooltip",
                "dojo/text!./templates/Select.html",
                "dojo/i18n!./nls/validate"
            ], function(array, declare, domAttr, domClass, domGeometry, event, i18n, lang, has,
                _FormSelectWidget, _HasDropDown, Menu, MenuItem, MenuSeparator, Tooltip, template) {

                // module:
                //		dijit/form/Select


                var _SelectMenu = declare("dijit.form._SelectMenu", Menu, {
                    // summary:
                    //		An internally-used menu for dropdown that allows us a vertical scrollbar

                    // Override Menu.autoFocus setting so that opening a Select highlights the current value.
                    autoFocus: true,

                    buildRendering: function() {
                        // summary:
                        //		Stub in our own changes, so that our domNode is not a table
                        //		otherwise, we won't respond correctly to heights/overflows
                        this.inherited(arguments);
                        var o = (this.menuTableNode = this.domNode);
                        var n = (this.domNode = this.ownerDocument.createElement("div"));
                        n.style.cssText = "overflow-x: hidden; overflow-y: scroll";
                        if (o.parentNode) {
                            o.parentNode.replaceChild(n, o);
                        }
                        domClass.remove(o, "dijitMenuTable");
                        n.className = o.className + " dijitSelectMenu";
                        o.className = "dijitReset dijitMenuTable";
                        o.setAttribute("role", "listbox");
                        n.setAttribute("role", "presentation");
                        n.appendChild(o);
                    },

                    postCreate: function() {
                        // summary:
                        //		stop mousemove from selecting text on IE to be consistent with other browsers

                        this.inherited(arguments);

                        this.connect(this.domNode, "onselectstart", event.stop);
                    },


                    focus: function() {
                        // summary:
                        //		Overridden so that the previously selected value will be focused instead of only the first item
                        var found = false,
                            val = this.parentWidget.value;
                        if (lang.isArray(val)) {
                            val = val[val.length - 1];
                        }
                        if (val) { // if focus selected
                            array.forEach(this.parentWidget._getChildren(), function(child) {
                                if (child.option && (val === child.option.value)) { // find menu item widget with this value
                                    found = true;
                                    this.focusChild(child, false); // focus previous selection
                                }
                            }, this);
                        }
                        if (!found) {
                            this.inherited(arguments); // focus first item by default
                        }
                    },

                    resize: function( /*Object*/ mb) {
                        // summary:
                        //		Overridden so that we are able to handle resizing our
                        //		internal widget.  Note that this is not a "full" resize
                        //		implementation - it only works correctly if you pass it a
                        //		marginBox.
                        //
                        // mb: Object
                        //		The margin box to set this dropdown to.
                        if (mb) {
                            domGeometry.setMarginBox(this.domNode, mb);
                            if ("w" in mb) {
                                // We've explicitly set the wrapper <div>'s width, so set <table> width to match.
                                // 100% is safer than a pixel value because there may be a scroll bar with
                                // browser/OS specific width.
                                this.menuTableNode.style.width = "100%";
                            }
                        }
                    }
                });

                var Select = declare("dijit.form.Select", [_FormSelectWidget, _HasDropDown], {
                    // summary:
                    //		This is a "styleable" select box - it is basically a DropDownButton which
                    //		can take a `<select>` as its input.

                    baseClass: "dijitSelect dijitValidationTextBox",

                    templateString: template,

                    _buttonInputDisabled: has("ie") ? "disabled" : "", // allows IE to disallow focus, but Firefox cannot be disabled for mousedown events

                    // required: Boolean
                    //		Can be true or false, default is false.
                    required: false,

                    // state: [readonly] String
                    //		"Incomplete" if this select is required but unset (i.e. blank value), "" otherwise
                    state: "",

                    // message: String
                    //		Currently displayed error/prompt message
                    message: "",

                    // tooltipPosition: String[]
                    //		See description of `dijit/Tooltip.defaultPosition` for details on this parameter.
                    tooltipPosition: [],

                    // emptyLabel: string
                    //		What to display in an "empty" dropdown
                    emptyLabel: "&#160;", // &nbsp;

                    // _isLoaded: Boolean
                    //		Whether or not we have been loaded
                    _isLoaded: false,

                    // _childrenLoaded: Boolean
                    //		Whether or not our children have been loaded
                    _childrenLoaded: false,

                    _fillContent: function() {
                        // summary:
                        //		Set the value to be the first, or the selected index
                        this.inherited(arguments);
                        // set value from selected option
                        if (this.options.length && !this.value && this.srcNodeRef) {
                            var si = this.srcNodeRef.selectedIndex || 0; // || 0 needed for when srcNodeRef is not a SELECT
                            this.value = this.options[si >= 0 ? si : 0].value;
                        }
                        // Create the dropDown widget
                        this.dropDown = new _SelectMenu({
                            id: this.id + "_menu",
                            parentWidget: this
                        });
                        domClass.add(this.dropDown.domNode, this.baseClass.replace(/\s+|$/g, "Menu "));
                    },

                    _getMenuItemForOption: function( /*_FormSelectWidget.__SelectOption*/ option) {
                        // summary:
                        //		For the given option, return the menu item that should be
                        //		used to display it.  This can be overridden as needed
                        if (!option.value && !option.label) {
                            // We are a separator (no label set for it)
                            return new MenuSeparator({
                                ownerDocument: this.ownerDocument
                            });
                        } else {
                            // Just a regular menu option
                            var click = lang.hitch(this, "_setValueAttr", option);
                            var item = new MenuItem({
                                option: option,
                                label: option.label || this.emptyLabel,
                                onClick: click,
                                ownerDocument: this.ownerDocument,
                                dir: this.dir,
                                disabled: option.disabled || false
                            });
                            item.focusNode.setAttribute("role", "option");
                            return item;
                        }
                    },

                    _addOptionItem: function( /*_FormSelectWidget.__SelectOption*/ option) {
                        // summary:
                        //		For the given option, add an option to our dropdown.
                        //		If the option doesn't have a value, then a separator is added
                        //		in that place.
                        if (this.dropDown) {
                            this.dropDown.addChild(this._getMenuItemForOption(option));
                        }
                    },

                    _getChildren: function() {
                        if (!this.dropDown) {
                            return [];
                        }
                        return this.dropDown.getChildren();
                    },

                    _loadChildren: function( /*Boolean*/ loadMenuItems) {
                        // summary:
                        //		Resets the menu and the length attribute of the button - and
                        //		ensures that the label is appropriately set.
                        // loadMenuItems: Boolean
                        //		actually loads the child menu items - we only do this when we are
                        //		populating for showing the dropdown.

                        if (loadMenuItems === true) {
                            // this.inherited destroys this.dropDown's child widgets (MenuItems).
                            // Avoid this.dropDown (Menu widget) having a pointer to a destroyed widget (which will cause
                            // issues later in _setSelected). (see #10296)
                            if (this.dropDown) {
                                delete this.dropDown.focusedChild;
                            }
                            if (this.options.length) {
                                this.inherited(arguments);
                            } else {
                                // Drop down menu is blank but add one blank entry just so something appears on the screen
                                // to let users know that they are no choices (mimicing native select behavior)
                                array.forEach(this._getChildren(), function(child) {
                                    child.destroyRecursive();
                                });
                                var item = new MenuItem({
                                    ownerDocument: this.ownerDocument,
                                    label: this.emptyLabel
                                });
                                this.dropDown.addChild(item);
                            }
                        } else {
                            this._updateSelection();
                        }

                        this._isLoaded = false;
                        this._childrenLoaded = true;

                        if (!this._loadingStore) {
                            // Don't call this if we are loading - since we will handle it later
                            this._setValueAttr(this.value, false);
                        }
                    },

                    _refreshState: function() {
                        if (this._started) {
                            this.validate(this.focused);
                        }
                    },

                    startup: function() {
                        this.inherited(arguments);
                        this._refreshState(); // after all _set* methods have run
                    },

                    _setValueAttr: function(value) {
                        this.inherited(arguments);
                        domAttr.set(this.valueNode, "value", this.get("value"));
                        this._refreshState(); // to update this.state
                    },

                    _setDisabledAttr: function( /*Boolean*/ value) {
                        this.inherited(arguments);
                        this._refreshState(); // to update this.state
                    },

                    _setRequiredAttr: function( /*Boolean*/ value) {
                        this._set("required", value);
                        this.focusNode.setAttribute("aria-required", value);
                        this._refreshState(); // to update this.state
                    },

                    _setOptionsAttr: function( /*Array*/ options) {
                        this._isLoaded = false;
                        this._set('options', options);
                    },

                    _setDisplay: function( /*String*/ newDisplay) {
                        // summary:
                        //		sets the display for the given value (or values)
                        var lbl = newDisplay || this.emptyLabel;
                        this.containerNode.innerHTML = '<span role="option" class="dijitReset dijitInline ' + this.baseClass.replace(/\s+|$/g, "Label ") + '">' + lbl + '</span>';
                    },

                    validate: function( /*Boolean*/ isFocused) {
                        // summary:
                        //		Called by oninit, onblur, and onkeypress, and whenever required/disabled state changes
                        // description:
                        //		Show missing or invalid messages if appropriate, and highlight textbox field.
                        //		Used when a select is initially set to no value and the user is required to
                        //		set the value.

                        var isValid = this.disabled || this.isValid(isFocused);
                        this._set("state", isValid ? "" : (this._hasBeenBlurred ? "Error" : "Incomplete"));
                        //this.focusNode.setAttribute("aria-invalid", isValid ? "false" : "true");
                        var message = isValid ? "" : this._missingMsg;
                        if (message && this.focused && this._hasBeenBlurred) {
                            Tooltip.show(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());
                        } else {
                            Tooltip.hide(this.domNode);
                        }
                        this._set("message", message);
                        return isValid;
                    },

                    isValid: function( /*Boolean*/ /*===== isFocused =====*/ ) {
                        // summary:
                        //		Whether or not this is a valid value.  The only way a Select
                        //		can be invalid is when it's required but nothing is selected.
                        return (!this.required || this.value === 0 || !(/^\s*$/.test(this.value || ""))); // handle value is null or undefined
                    },

                    reset: function() {
                        // summary:
                        //		Overridden so that the state will be cleared.
                        this.inherited(arguments);
                        Tooltip.hide(this.domNode);
                        this._refreshState(); // to update this.state
                    },

                    postMixInProperties: function() {
                        // summary:
                        //		set the missing message
                        this.inherited(arguments);
                        this._missingMsg = i18n.getLocalization("dijit.form", "validate", this.lang).missingMessage;
                    },

                    postCreate: function() {
                        // summary:
                        //		stop mousemove from selecting text on IE to be consistent with other browsers

                        this.inherited(arguments);

                        this.connect(this.domNode, "onselectstart", event.stop);
                        this.domNode.setAttribute("aria-expanded", "false");

                        if (has("ie") < 9) {
                            // IE INPUT tag fontFamily has to be set directly using STYLE
                            // the defer gives IE a chance to render the TextBox and to deal with font inheritance
                            this.defer(function() {
                                try {
                                    var s = domStyle.getComputedStyle(this.domNode); // can throw an exception if widget is immediately destroyed
                                    if (s) {
                                        var ff = s.fontFamily;
                                        if (ff) {
                                            var inputs = this.domNode.getElementsByTagName("INPUT");
                                            if (inputs) {
                                                for (var i = 0; i < inputs.length; i++) {
                                                    inputs[i].style.fontFamily = ff;
                                                }
                                            }
                                        }
                                    }
                                } catch (e) {
                                    /*when used in a Dialog, and this is called before the dialog is
                                    				 shown, s.fontFamily would trigger "Invalid Argument" error.*/
                                }
                            });
                        }
                    },

                    _setStyleAttr: function( /*String||Object*/ value) {
                        this.inherited(arguments);
                        domClass.toggle(this.domNode, this.baseClass.replace(/\s+|$/g, "FixedWidth "), !!this.domNode.style.width);
                    },

                    isLoaded: function() {
                        return this._isLoaded;
                    },

                    loadDropDown: function( /*Function*/ loadCallback) {
                        // summary:
                        //		populates the menu
                        this._loadChildren(true);
                        this._isLoaded = true;
                        loadCallback();
                    },

                    closeDropDown: function() {
                        // overriding _HasDropDown.closeDropDown()
                        this.inherited(arguments);

                        if (this.dropDown && this.dropDown.menuTableNode) {
                            // Erase possible width: 100% setting from _SelectMenu.resize().
                            // Leaving it would interfere with the next openDropDown() call, which
                            // queries the natural size of the drop down.
                            this.dropDown.menuTableNode.style.width = "";
                        }
                    },

                    destroy: function(preserveDom) {
                        if (this.dropDown && !this.dropDown._destroyed) {
                            this.dropDown.destroyRecursive(preserveDom);
                            delete this.dropDown;
                        }
                        this.inherited(arguments);
                    },

                    _onFocus: function() {
                        this.validate(true); // show tooltip if second focus of required tooltip, but no selection
                        this.inherited(arguments);
                    },

                    _onBlur: function() {
                        Tooltip.hide(this.domNode);
                        this.inherited(arguments);
                        this.validate(false);
                    }
                });

                Select._Menu = _SelectMenu; // for monkey patching

                return Select;
            });

        },
        'dojo/_base/json': function() {
            define(["./kernel", "../json"], function(dojo, json) {

                // module:
                //		dojo/_base/json

                /*=====
                return {
                	// summary:
                	//		This module defines the dojo JSON API.
                };
                =====*/

                dojo.fromJson = function( /*String*/ js) {
                    // summary:
                    //		Parses a JavaScript expression and returns a JavaScript value.
                    // description:
                    //		Throws for invalid JavaScript expressions. It does not use a strict JSON parser. It
                    //		always delegates to eval(). The content passed to this method must therefore come
                    //		from a trusted source.
                    //		It is recommend that you use dojo/json's parse function for an
                    //		implementation uses the (faster) native JSON parse when available.
                    // js:
                    //		a string literal of a JavaScript expression, for instance:
                    //		`'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'`

                    return eval("(" + js + ")"); // Object
                };

                /*=====
                dojo._escapeString = function(){
                	// summary:
                	//		Adds escape sequences for non-visual characters, double quote and
                	//		backslash and surrounds with double quotes to form a valid string
                	//		literal.
                };
                =====*/
                dojo._escapeString = json.stringify; // just delegate to json.stringify

                dojo.toJsonIndentStr = "\t";
                dojo.toJson = function( /*Object*/ it, /*Boolean?*/ prettyPrint) {
                    // summary:
                    //		Returns a [JSON](http://json.org) serialization of an object.
                    // description:
                    //		Returns a [JSON](http://json.org) serialization of an object.
                    //		Note that this doesn't check for infinite recursion, so don't do that!
                    //		It is recommend that you use dojo/json's stringify function for an lighter
                    //		and faster implementation that matches the native JSON API and uses the
                    //		native JSON serializer when available.
                    // it:
                    //		an object to be serialized. Objects may define their own
                    //		serialization via a special "__json__" or "json" function
                    //		property. If a specialized serializer has been defined, it will
                    //		be used as a fallback.
                    //		Note that in 1.6, toJson would serialize undefined, but this no longer supported
                    //		since it is not supported by native JSON serializer.
                    // prettyPrint:
                    //		if true, we indent objects and arrays to make the output prettier.
                    //		The variable `dojo.toJsonIndentStr` is used as the indent string --
                    //		to use something other than the default (tab), change that variable
                    //		before calling dojo.toJson().
                    //		Note that if native JSON support is available, it will be used for serialization,
                    //		and native implementations vary on the exact spacing used in pretty printing.
                    // returns:
                    //		A JSON string serialization of the passed-in object.
                    // example:
                    //		simple serialization of a trivial object
                    //		|	var jsonStr = dojo.toJson({ howdy: "stranger!", isStrange: true });
                    //		|	doh.is('{"howdy":"stranger!","isStrange":true}', jsonStr);
                    // example:
                    //		a custom serializer for an objects of a particular class:
                    //		|	dojo.declare("Furby", null, {
                    //		|		furbies: "are strange",
                    //		|		furbyCount: 10,
                    //		|		__json__: function(){
                    //		|		},
                    //		|	});

                    // use dojo/json
                    return json.stringify(it, function(key, value) {
                        if (value) {
                            var tf = value.__json__ || value.json;
                            if (typeof tf == "function") {
                                return tf.call(value);
                            }
                        }
                        return value;
                    }, prettyPrint && dojo.toJsonIndentStr); // String
                };

                return dojo;
            });

        },
        'dojo/store/util/QueryResults': function() {
            define(["../../_base/array", "../../_base/lang", "../../_base/Deferred"], function(array, lang, Deferred) {

                // module:
                //		dojo/store/util/QueryResults

                var QueryResults = function(results) {
                    // summary:
                    //		A function that wraps the results of a store query with additional
                    //		methods.
                    // description:
                    //		QueryResults is a basic wrapper that allows for array-like iteration
                    //		over any kind of returned data from a query.  While the simplest store
                    //		will return a plain array of data, other stores may return deferreds or
                    //		promises; this wrapper makes sure that *all* results can be treated
                    //		the same.
                    //
                    //		Additional methods include `forEach`, `filter` and `map`.
                    // results: Array|dojo/promise/Promise
                    //		The result set as an array, or a promise for an array.
                    // returns:
                    //		An array-like object that can be used for iterating over.
                    // example:
                    //		Query a store and iterate over the results.
                    //
                    //	|	store.query({ prime: true }).forEach(function(item){
                    //	|		//	do something
                    //	|	});

                    if (!results) {
                        return results;
                    }
                    // if it is a promise it may be frozen
                    if (results.then) {
                        results = lang.delegate(results);
                    }

                    function addIterativeMethod(method) {
                        if (!results[method]) {
                            results[method] = function() {
                                var args = arguments;
                                return Deferred.when(results, function(results) {
                                    Array.prototype.unshift.call(args, results);
                                    return QueryResults(array[method].apply(array, args));
                                });
                            };
                        }
                    }
                    addIterativeMethod("forEach");
                    addIterativeMethod("filter");
                    addIterativeMethod("map");
                    if (!results.total) {
                        results.total = Deferred.when(results, function(results) {
                            return results.length;
                        });
                    }
                    return results; // Object
                };

                lang.setObject("dojo.store.util.QueryResults", QueryResults);

                return QueryResults;

            });

        },
        'hsbcwidget/ShowHide1': function() {
            define([
                "dojo/_base/declare",
                "dijit/_WidgetBase",
                "dojo/query",
                "dojo/dom-class",
                "dojo/Stateful",
                "dojo/dom-style",
                "dojo/fx",
                "dojo/html",
                "dojo/dom-attr",
                "dojo/on",
                "dijit/focus",
                "dojo/_base/lang"
            ], function(declare, WidgetBase, query, domClass, stateful, domStyle, fx, html, domAttr, on, focusUtil, lang) {

                return declare([WidgetBase], {
                    startOpen: false,
                    duration: 500,
                    inProgress: false,

                    classes: {
                        open: 'showHideOpen',
                        trigger: 'showHideTrigger',
                        closeTrigger: 'closeTrigger',
                        userInfoSleeve: '.userInfoSleeve',
                        content: 'showHideContent',
                        state: 'showHideState'
                    },

                    states: {
                        open: ' expanded',
                        closed: ' collapsed'
                    },

                    postCreate: function() {
                        this.$trigger = query('.' + this.classes.trigger, this.domNode)[0];
                        this.$triggerAnchor = query('.' + this.classes.trigger + ' a', this.domNode)[0];
                        this.$closeButtons = query('.' + this.classes.closeTrigger, this.domNode);
                        this.$userInfoSleeve = query(this.classes.userInfoSleeve, this.domNode);
                        this.$content = query('.' + this.classes.content, this.domNode)[0];
                        this.$state = query('.' + this.classes.state, this.domNode)[0];
                        this.hideMessage = domAttr.get(this.$trigger, 'data-hide');
                        this.showMessage = domAttr.get(this.$trigger, 'data-show');

                        this.$closeButtons.on("click", lang.hitch(this, function(e) {
                            e.preventDefault();
                            this.close();
                        }));

                        on(this.$trigger, 'click, keyup', lang.hitch(this, function(e) {
                            if ((e.type == 'keyup') && (e.which != 13)) {
                                return;
                            }

                            if (this.inProgress) {
                                return;
                            }
                            this.inProgress = true;
                            this.toggle(e);
                        }));
                        this.$closeButtons.on("keydown,focus", lang.hitch(this, function(e) {
                            if (e.type != "focus" && (e.which == '9' || e.which == 9)) {
                                this.close();
                            }
                        }));
                        /* only used in logon*/
                        this.$userInfoSleeve.on("keydown,focus", lang.hitch(this, function(e) {
                            if (e.type != "focus" && (e.which == '9' || e.which == 9)) {
                                this.close();
                            }
                        }));

                        this.inherited(arguments);
                        on(this.$content, 'blur', lang.hitch(this, function(e) {
                            domAttr.remove(this.$content, 'tabIndex');
                        }));

                        if (this.$state) {
                            domAttr.set(this.$state, {
                                'innerHTML': this.states.closed,
                                'aria-hidden': 'false'
                            })
                        }
                    },
                    toggle: function(e) {
                        e.preventDefault();
                        if (domClass.contains(this.domNode, this.classes.open)) {
                            this.close();
                        } else {
                            this.open();
                        }

                    },

                    startup: function() {
                        if (this.startOpen === false) {
                            this.close(true);
                        } else {
                            this.open(true);
                        }
                    },


                    open: function(snap) {
                        var duration = this.duration,
                            anim;

                        if (snap === true) {
                            duration = 0;
                        }

                        anim = fx.wipeIn({
                            node: this.$content,
                            duration: duration
                        });

                        on(anim, 'End', lang.hitch(this, function(e) {
                            domClass.add(this.domNode, this.classes.open);
                            if (this.hideMessage) {
                                html.set(query('.text', this.$trigger)[0], this.hideMessage);
                            }
                            domAttr.set(this.$content, 'aria-hidden', 'false');
                            domAttr.set(this.$content, 'aria-expanded', 'true');
                            if (this.$state) {
                                html.set(this.$state, this.states.open);
                            }
                            domAttr.set(this.$content, 'tabindex', '0');
                            this.$content.focus();
                            this.$triggerAnchor.focus();
                            this.inProgress = false;
                        }));

                        anim.play();
                    },

                    close: function(snap) {
                        var duration = this.duration,
                            anim;

                        if (snap === true) {
                            duration = 0;
                        }

                        anim = fx.wipeOut({
                            node: this.$content,
                            duration: duration
                        });

                        on(anim, 'End', lang.hitch(this, function(e) {
                            domClass.remove(this.domNode, this.classes.open);
                            if (this.showMessage) {
                                html.set(query('.text', this.$trigger)[0], this.showMessage);
                            }
                            domAttr.set(this.$content, 'aria-hidden', 'true');
                            domAttr.set(this.$content, 'aria-expanded', 'false');
                            if (this.$state) {
                                html.set(this.$state, this.states.closed);
                            }
                            this.inProgress = false;
                        }));

                        anim.play();
                    }
                });

            });
        },
        'dijit/form/_ListBase': function() {
            define("dijit/form/_ListBase", [
                "dojo/_base/declare", // declare
                "dojo/on",
                "dojo/window" // winUtils.scrollIntoView
            ], function(declare, on, winUtils) {

                // module:
                //		dijit/form/_ListBase

                return declare("dijit.form._ListBase", null, {
                    // summary:
                    //		Focus-less menu to handle UI events consistently
                    //		Abstract methods that must be defined externally:
                    //
                    //		- onSelect: item is active (mousedown but not yet mouseup, or keyboard arrow selected but no Enter)
                    //		- onDeselect:  cancels onSelect
                    // tags:
                    //		private

                    // selected: DOMNode
                    //		currently selected node
                    selected: null,

                    _listConnect: function( /*String|Function*/ eventType, /*String*/ callbackFuncName) {
                        // summary:
                        //		Connects 'containerNode' to specified method of this object
                        //		and automatically registers for 'disconnect' on widget destroy.
                        // description:
                        //		Provide widget-specific analog to 'connect'.
                        //		The callback function is called with the normal event object,
                        //		but also a second parameter is passed that indicates which list item
                        //		actually received the event.
                        // returns:
                        //		A handle that can be passed to `disconnect` in order to disconnect
                        //		before the widget is destroyed.
                        // tags:
                        //		private

                        var self = this;
                        return self.own(on(self.containerNode,
                            on.selector(
                                function(eventTarget, selector, target) {
                                    return eventTarget.parentNode == target;
                                },
                                eventType
                            ),
                            function(evt) {
                                evt.preventDefault();
                                self[callbackFuncName](evt, this);
                            }
                        ));
                    },

                    selectFirstNode: function() {
                        // summary:
                        //		Select the first displayed item in the list.
                        var first = this.containerNode.firstChild;
                        while (first && first.style.display == "none") {
                            first = first.nextSibling;
                        }
                        this._setSelectedAttr(first);
                    },

                    selectLastNode: function() {
                        // summary:
                        //		Select the last displayed item in the list
                        var last = this.containerNode.lastChild;
                        while (last && last.style.display == "none") {
                            last = last.previousSibling;
                        }
                        this._setSelectedAttr(last);
                    },

                    selectNextNode: function() {
                        // summary:
                        //		Select the item just below the current selection.
                        //		If nothing selected, select first node.
                        var selectedNode = this.selected;
                        if (!selectedNode) {
                            this.selectFirstNode();
                        } else {
                            var next = selectedNode.nextSibling;
                            while (next && next.style.display == "none") {
                                next = next.nextSibling;
                            }
                            if (!next) {
                                this.selectFirstNode();
                            } else {
                                this._setSelectedAttr(next);
                            }
                        }
                    },

                    selectPreviousNode: function() {
                        // summary:
                        //		Select the item just above the current selection.
                        //		If nothing selected, select last node (if
                        //		you select Previous and try to keep scrolling up the list).
                        var selectedNode = this.selected;
                        if (!selectedNode) {
                            this.selectLastNode();
                        } else {
                            var prev = selectedNode.previousSibling;
                            while (prev && prev.style.display == "none") {
                                prev = prev.previousSibling;
                            }
                            if (!prev) {
                                this.selectLastNode();
                            } else {
                                this._setSelectedAttr(prev);
                            }
                        }
                    },

                    _setSelectedAttr: function( /*DomNode*/ node) {
                        // summary:
                        //		Does the actual select.
                        if (this.selected != node) {
                            var selectedNode = this.selected;
                            if (selectedNode) {
                                this.onDeselect(selectedNode);
                                this.selected = null;
                            }
                            if (node) {
                                this.selected = node;
                                winUtils.scrollIntoView(node);
                                this.onSelect(node);
                            }
                        } else if (node) {
                            this.onSelect(node);
                        }
                    }
                });

            });

        },
        'dijit/form/_FormWidget': function() {
            define("dijit/form/_FormWidget", [
                "dojo/_base/declare", // declare
                "dojo/has", // has("dijit-legacy-requires")
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/ready",
                "../_Widget",
                "../_CssStateMixin",
                "../_TemplatedMixin",
                "./_FormWidgetMixin"
            ], function(declare, has, kernel, ready, _Widget, _CssStateMixin, _TemplatedMixin, _FormWidgetMixin) {


                // module:
                //		dijit/form/_FormWidget

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/form/_FormValueWidget"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                return declare("dijit.form._FormWidget", [_Widget, _TemplatedMixin, _CssStateMixin, _FormWidgetMixin], {
                    // summary:
                    //		Base class for widgets corresponding to native HTML elements such as `<checkbox>` or `<button>`,
                    //		which can be children of a `<form>` node or a `dijit/form/Form` widget.
                    //
                    // description:
                    //		Represents a single HTML element.
                    //		All these widgets should have these attributes just like native HTML input elements.
                    //		You can set them during widget construction or afterwards, via `dijit/_WidgetBase.set()`.
                    //
                    //		They also share some common methods.

                    setDisabled: function( /*Boolean*/ disabled) {
                        // summary:
                        //		Deprecated.  Use set('disabled', ...) instead.
                        kernel.deprecated("setDisabled(" + disabled + ") is deprecated. Use set('disabled'," + disabled + ") instead.", "", "2.0");
                        this.set('disabled', disabled);
                    },

                    setValue: function( /*String*/ value) {
                        // summary:
                        //		Deprecated.  Use set('value', ...) instead.
                        kernel.deprecated("dijit.form._FormWidget:setValue(" + value + ") is deprecated.  Use set('value'," + value + ") instead.", "", "2.0");
                        this.set('value', value);
                    },

                    getValue: function() {
                        // summary:
                        //		Deprecated.  Use get('value') instead.
                        kernel.deprecated(this.declaredClass + "::getValue() is deprecated. Use get('value') instead.", "", "2.0");
                        return this.get('value');
                    },

                    postMixInProperties: function() {
                        // Setup name=foo string to be referenced from the template (but only if a name has been specified)
                        // Unfortunately we can't use _setNameAttr to set the name due to IE limitations, see #8484, #8660.
                        // Regarding escaping, see heading "Attribute values" in
                        // http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
                        this.nameAttrSetting = this.name ? ('name="' + this.name.replace(/"/g, "&quot;") + '"') : '';
                        this.inherited(arguments);
                    },

                    // Override automatic assigning type --> focusNode, it causes exception on IE.
                    // Instead, type must be specified as ${type} in the template, as part of the original DOM
                    _setTypeAttr: null
                });

            });

        },
        'dojo/_base/Color': function() {
            define(["./kernel", "./lang", "./array", "./config"], function(dojo, lang, ArrayUtil, config) {

                var Color = dojo.Color = function( /*Array|String|Object*/ color) {
                    // summary:
                    //		Takes a named string, hex string, array of rgb or rgba values,
                    //		an object with r, g, b, and a properties, or another `Color` object
                    //		and creates a new Color instance to work from.
                    //
                    // example:
                    //		Work with a Color instance:
                    //	 | var c = new Color();
                    //	 | c.setColor([0,0,0]); // black
                    //	 | var hex = c.toHex(); // #000000
                    //
                    // example:
                    //		Work with a node's color:
                    //	 | var color = dojo.style("someNode", "backgroundColor");
                    //	 | var n = new Color(color);
                    //	 | // adjust the color some
                    //	 | n.r *= .5;
                    //	 | console.log(n.toString()); // rgb(128, 255, 255);
                    if (color) {
                        this.setColor(color);
                    }
                };

                // FIXME:
                // there's got to be a more space-efficient way to encode or discover
                // these!! Use hex?
                Color.named = {
                    // summary:
                    //		Dictionary list of all CSS named colors, by name. Values are 3-item arrays with corresponding RG and B values.
                    "black": [0, 0, 0],
                    "silver": [192, 192, 192],
                    "gray": [128, 128, 128],
                    "white": [255, 255, 255],
                    "maroon": [128, 0, 0],
                    "red": [255, 0, 0],
                    "purple": [128, 0, 128],
                    "fuchsia": [255, 0, 255],
                    "green": [0, 128, 0],
                    "lime": [0, 255, 0],
                    "olive": [128, 128, 0],
                    "yellow": [255, 255, 0],
                    "navy": [0, 0, 128],
                    "blue": [0, 0, 255],
                    "teal": [0, 128, 128],
                    "aqua": [0, 255, 255],
                    "transparent": config.transparentColor || [0, 0, 0, 0]
                };

                lang.extend(Color, {
                    r: 255,
                    g: 255,
                    b: 255,
                    a: 1,
                    _set: function(r, g, b, a) {
                        var t = this;
                        t.r = r;
                        t.g = g;
                        t.b = b;
                        t.a = a;
                    },
                    setColor: function( /*Array|String|Object*/ color) {
                        // summary:
                        //		Takes a named string, hex string, array of rgb or rgba values,
                        //		an object with r, g, b, and a properties, or another `Color` object
                        //		and sets this color instance to that value.
                        //
                        // example:
                        //	|	var c = new Color(); // no color
                        //	|	c.setColor("#ededed"); // greyish
                        if (lang.isString(color)) {
                            Color.fromString(color, this);
                        } else if (lang.isArray(color)) {
                            Color.fromArray(color, this);
                        } else {
                            this._set(color.r, color.g, color.b, color.a);
                            if (!(color instanceof Color)) {
                                this.sanitize();
                            }
                        }
                        return this; // Color
                    },
                    sanitize: function() {
                        // summary:
                        //		Ensures the object has correct attributes
                        // description:
                        //		the default implementation does nothing, include dojo.colors to
                        //		augment it with real checks
                        return this; // Color
                    },
                    toRgb: function() {
                        // summary:
                        //		Returns 3 component array of rgb values
                        // example:
                        //	|	var c = new Color("#000000");
                        //	|	console.log(c.toRgb()); // [0,0,0]
                        var t = this;
                        return [t.r, t.g, t.b]; // Array
                    },
                    toRgba: function() {
                        // summary:
                        //		Returns a 4 component array of rgba values from the color
                        //		represented by this object.
                        var t = this;
                        return [t.r, t.g, t.b, t.a]; // Array
                    },
                    toHex: function() {
                        // summary:
                        //		Returns a CSS color string in hexadecimal representation
                        // example:
                        //	|	console.log(new Color([0,0,0]).toHex()); // #000000
                        var arr = ArrayUtil.map(["r", "g", "b"], function(x) {
                            var s = this[x].toString(16);
                            return s.length < 2 ? "0" + s : s;
                        }, this);
                        return "#" + arr.join(""); // String
                    },
                    toCss: function( /*Boolean?*/ includeAlpha) {
                        // summary:
                        //		Returns a css color string in rgb(a) representation
                        // example:
                        //	|	var c = new Color("#FFF").toCss();
                        //	|	console.log(c); // rgb('255','255','255')
                        var t = this,
                            rgb = t.r + ", " + t.g + ", " + t.b;
                        return (includeAlpha ? "rgba(" + rgb + ", " + t.a : "rgb(" + rgb) + ")"; // String
                    },
                    toString: function() {
                        // summary:
                        //		Returns a visual representation of the color
                        return this.toCss(true); // String
                    }
                });

                Color.blendColors = dojo.blendColors = function(
                    /*Color*/
                    start,
                    /*Color*/
                    end,
                    /*Number*/
                    weight,
                    /*Color?*/
                    obj
                ) {
                    // summary:
                    //		Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend,
                    //		can reuse a previously allocated Color object for the result
                    var t = obj || new Color();
                    ArrayUtil.forEach(["r", "g", "b", "a"], function(x) {
                        t[x] = start[x] + (end[x] - start[x]) * weight;
                        if (x != "a") {
                            t[x] = Math.round(t[x]);
                        }
                    });
                    return t.sanitize(); // Color
                };

                Color.fromRgb = dojo.colorFromRgb = function( /*String*/ color, /*Color?*/ obj) {
                    // summary:
                    //		Returns a `Color` instance from a string of the form
                    //		"rgb(...)" or "rgba(...)". Optionally accepts a `Color`
                    //		object to update with the parsed value and return instead of
                    //		creating a new object.
                    // returns:
                    //		A Color object. If obj is passed, it will be the return value.
                    var m = color.toLowerCase().match(/^rgba?\(([\s\.,0-9]+)\)/);
                    return m && Color.fromArray(m[1].split(/\s*,\s*/), obj); // Color
                };

                Color.fromHex = dojo.colorFromHex = function( /*String*/ color, /*Color?*/ obj) {
                    // summary:
                    //		Converts a hex string with a '#' prefix to a color object.
                    //		Supports 12-bit #rgb shorthand. Optionally accepts a
                    //		`Color` object to update with the parsed value.
                    //
                    // returns:
                    //		A Color object. If obj is passed, it will be the return value.
                    //
                    // example:
                    //	 | var thing = dojo.colorFromHex("#ededed"); // grey, longhand
                    //
                    // example:
                    //	| var thing = dojo.colorFromHex("#000"); // black, shorthand
                    var t = obj || new Color(),
                        bits = (color.length == 4) ? 4 : 8,
                        mask = (1 << bits) - 1;
                    color = Number("0x" + color.substr(1));
                    if (isNaN(color)) {
                        return null; // Color
                    }
                    ArrayUtil.forEach(["b", "g", "r"], function(x) {
                        var c = color & mask;
                        color >>= bits;
                        t[x] = bits == 4 ? 17 * c : c;
                    });
                    t.a = 1;
                    return t; // Color
                };

                Color.fromArray = dojo.colorFromArray = function( /*Array*/ a, /*Color?*/ obj) {
                    // summary:
                    //		Builds a `Color` from a 3 or 4 element array, mapping each
                    //		element in sequence to the rgb(a) values of the color.
                    // example:
                    //		| var myColor = dojo.colorFromArray([237,237,237,0.5]); // grey, 50% alpha
                    // returns:
                    //		A Color object. If obj is passed, it will be the return value.
                    var t = obj || new Color();
                    t._set(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3]));
                    if (isNaN(t.a)) {
                        t.a = 1;
                    }
                    return t.sanitize(); // Color
                };

                Color.fromString = dojo.colorFromString = function( /*String*/ str, /*Color?*/ obj) {
                    // summary:
                    //		Parses `str` for a color value. Accepts hex, rgb, and rgba
                    //		style color values.
                    // description:
                    //		Acceptable input values for str may include arrays of any form
                    //		accepted by dojo.colorFromArray, hex strings such as "#aaaaaa", or
                    //		rgb or rgba strings such as "rgb(133, 200, 16)" or "rgba(10, 10,
                    //		10, 50)"
                    // returns:
                    //		A Color object. If obj is passed, it will be the return value.
                    var a = Color.named[str];
                    return a && Color.fromArray(a, obj) || Color.fromRgb(str, obj) || Color.fromHex(str, obj); // Color
                };

                return Color;
            });

        },
        'dojo/errors/RequestError': function() {
            define(['./create'], function(create) {
                // module:
                //		dojo/errors/RequestError

                /*=====
                 return function(){
                	 // summary:
                	 //		TODOC
                 };
                 =====*/

                return create("RequestError", function(message, response) {
                    this.response = response;
                });
            });

        },
        'dojo/dnd/common': function() {
            define("dojo/dnd/common", ["../_base/connect", "../_base/kernel", "../_base/lang", "../dom"],
                function(connect, kernel, lang, dom) {

                    // module:
                    //		dojo/dnd/common

                    var exports = lang.getObject("dojo.dnd", true);
                    /*=====
                    // TODO: for 2.0, replace line above with this code.
                    var exports = {
                    	// summary:
                    	//		TODOC
                    };
                    =====*/

                    exports.getCopyKeyState = connect.isCopyKey;

                    exports._uniqueId = 0;
                    exports.getUniqueId = function() {
                        // summary:
                        //		returns a unique string for use with any DOM element
                        var id;
                        do {
                            id = kernel._scopeName + "Unique" + (++exports._uniqueId);
                        } while (dom.byId(id));
                        return id;
                    };

                    exports._empty = {};

                    exports.isFormElement = function( /*Event*/ e) {
                        // summary:
                        //		returns true if user clicked on a form element
                        var t = e.target;
                        if (t.nodeType == 3 /*TEXT_NODE*/ ) {
                            t = t.parentNode;
                        }
                        return " button textarea input select option ".indexOf(" " + t.tagName.toLowerCase() + " ") >= 0; // Boolean
                    };

                    return exports;
                });

        },
        'dijit/CalendarLite': function() {
            require({
                cache: {
                    'url:dijit/templates/Calendar.html': "<table cellspacing=\"0\" cellpadding=\"0\" class=\"dijitCalendarContainer\" role=\"grid\" aria-labelledby=\"${id}_mddb ${id}_year\">\n\t<thead>\n\t\t<tr class=\"dijitReset dijitCalendarMonthContainer\" valign=\"top\">\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"decrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarDecrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"decreaseArrowNode\" class=\"dijitA11ySideArrow\">-</span>\n\t\t\t</th>\n\t\t\t<th class='dijitReset' colspan=\"5\">\n\t\t\t\t<div data-dojo-attach-point=\"monthNode\">\n\t\t\t\t</div>\n\t\t\t</th>\n\t\t\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\"incrementMonth\">\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarIncrease\" role=\"presentation\"/>\n\t\t\t\t<span data-dojo-attach-point=\"increaseArrowNode\" class=\"dijitA11ySideArrow\">+</span>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr role=\"row\">\n\t\t\t${!dayCellsHtml}\n\t\t</tr>\n\t</thead>\n\t<tbody data-dojo-attach-point=\"dateRowsNode\" data-dojo-attach-event=\"onclick: _onDayClick\" class=\"dijitReset dijitCalendarBodyContainer\">\n\t\t\t${!dateRowsHtml}\n\t</tbody>\n\t<tfoot class=\"dijitReset dijitCalendarYearContainer\">\n\t\t<tr>\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"7\" role=\"presentation\">\n\t\t\t\t<div class=\"dijitCalendarYearLabel\">\n\t\t\t\t\t<span data-dojo-attach-point=\"previousYearLabelNode\" class=\"dijitInline dijitCalendarPreviousYear\" role=\"button\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"currentYearLabelNode\" class=\"dijitInline dijitCalendarSelectedYear\" role=\"button\" id=\"${id}_year\"></span>\n\t\t\t\t\t<span data-dojo-attach-point=\"nextYearLabelNode\" class=\"dijitInline dijitCalendarNextYear\" role=\"button\"></span>\n\t\t\t\t</div>\n\t\t\t</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n"
                }
            });
            define("dijit/CalendarLite", [
                "dojo/_base/array", // array.forEach array.map
                "dojo/_base/declare", // declare
                "dojo/cldr/supplemental", // cldrSupplemental.getFirstDayOfWeek
                "dojo/date", // date
                "dojo/date/locale",
                "dojo/date/stamp", // stamp.fromISOString
                "dojo/dom", // dom.setSelectable
                "dojo/dom-class", // domClass.contains
                "dojo/_base/event", // event.stop
                "dojo/_base/lang", // lang.getObject, lang.hitch
                "dojo/sniff", // has("ie") has("webkit")
                "dojo/string", // string.substitute
                "./_WidgetBase",
                "./_TemplatedMixin",
                "dojo/text!./templates/Calendar.html",
                "./hccss" // not used directly, but sets CSS class on <body>
            ], function(array, declare, cldrSupplemental, date, locale, stamp, dom, domClass, event, lang, has, string,
                _WidgetBase, _TemplatedMixin, template) {


                // module:
                //		dijit/CalendarLite

                var CalendarLite = declare("dijit.CalendarLite", [_WidgetBase, _TemplatedMixin], {
                    // summary:
                    //		Lightweight version of Calendar widget aimed towards mobile use
                    //
                    // description:
                    //		A simple GUI for choosing a date in the context of a monthly calendar.
                    //		This widget can't be used in a form because it doesn't serialize the date to an
                    //		`<input>` field.  For a form element, use dijit/form/DateTextBox instead.
                    //
                    //		Note that the parser takes all dates attributes passed in the
                    //		[RFC 3339 format](http://www.faqs.org/rfcs/rfc3339.html), e.g. `2005-06-30T08:05:00-07:00`
                    //		so that they are serializable and locale-independent.
                    //
                    //		Also note that this widget isn't keyboard accessible; use dijit.Calendar for that
                    // example:
                    //	|	var calendar = new dijit.CalendarLite({}, dojo.byId("calendarNode"));
                    //
                    // example:
                    //	|	<div data-dojo-type="dijit/CalendarLite"></div>

                    // Template for main calendar
                    templateString: template,

                    // Template for cell for a day of the week (ex: M)
                    dowTemplateString: '<th class="dijitReset dijitCalendarDayLabelTemplate" role="columnheader"><span class="dijitCalendarDayLabel">${d}</span></th>',

                    // Templates for a single date (ex: 13), and for a row for a week (ex: 20 21 22 23 24 25 26)
                    dateTemplateString: '<td class="dijitReset" role="gridcell" data-dojo-attach-point="dateCells"><span class="dijitCalendarDateLabel" data-dojo-attach-point="dateLabels"></span></td>',
                    weekTemplateString: '<tr class="dijitReset dijitCalendarWeekTemplate" role="row">${d}${d}${d}${d}${d}${d}${d}</tr>',

                    // value: Date
                    //		The currently selected Date, initially set to invalid date to indicate no selection.
                    value: new Date(""),
                    // TODO: for 2.0 make this a string (ISO format) rather than a Date

                    // datePackage: String
                    //		JavaScript namespace to find calendar routines.	 If unspecified, uses Gregorian calendar routines
                    //		at dojo/date and dojo/date/locale.
                    datePackage: "",
                    //		TODO: for 2.0, replace datePackage with dateModule and dateLocalModule attributes specifying MIDs,
                    //		or alternately just get rid of this completely and tell user to use module ID remapping
                    //		via require

                    // dayWidth: String
                    //		How to represent the days of the week in the calendar header. See locale
                    dayWidth: "narrow",

                    // tabIndex: String
                    //		Order fields are traversed when user hits the tab key
                    tabIndex: "0",

                    // currentFocus: Date
                    //		Date object containing the currently focused date, or the date which would be focused
                    //		if the calendar itself was focused.   Also indicates which year and month to display,
                    //		i.e. the current "page" the calendar is on.
                    currentFocus: new Date(),

                    baseClass: "dijitCalendar",

                    _isValidDate: function( /*Date*/ value) {
                        // summary:
                        //		Runs various tests on the value, checking that it's a valid date, rather
                        //		than blank or NaN.
                        // tags:
                        //		private
                        return value && !isNaN(value) && typeof value == "object" &&
                            value.toString() != this.constructor.prototype.value.toString();
                    },

                    _getValueAttr: function() {
                        // summary:
                        //		Support get('value')

                        // this.value is set to 1AM, but return midnight, local time for back-compat
                        if (this.value && !isNaN(this.value)) {
                            var value = new this.dateClassObj(this.value);
                            value.setHours(0, 0, 0, 0);

                            // If daylight savings pushes midnight to the previous date, fix the Date
                            // object to point at 1am so it will represent the correct day. See #9366
                            if (value.getDate() < this.value.getDate()) {
                                value = this.dateModule.add(value, "hour", 1);
                            }
                            return value;
                        } else {
                            return null;
                        }
                    },

                    _setValueAttr: function( /*Date|Number*/ value, /*Boolean*/ priorityChange) {
                        // summary:
                        //		Support set("value", ...)
                        // description:
                        //		Set the current date and update the UI.  If the date is disabled, the value will
                        //		not change, but the display will change to the corresponding month.
                        // value:
                        //		Either a Date or the number of seconds since 1970.
                        // tags:
                        //		protected
                        if (typeof value == "string") {
                            value = stamp.fromISOString(value);
                        }
                        value = this._patchDate(value);

                        if (this._isValidDate(value) && !this.isDisabledDate(value, this.lang)) {
                            this._set("value", value);

                            // Set focus cell to the new value.   Arguably this should only happen when there isn't a current
                            // focus point.   This will also repopulate the grid to new month/year if necessary.
                            this.set("currentFocus", value);

                            // Mark the selected date
                            this._markSelectedDates([value]);

                            if (this._created && (priorityChange || typeof priorityChange == "undefined")) {
                                this.onChange(this.get('value'));
                            }
                        } else {
                            // clear value, and mark all dates as unselected
                            this._set("value", null);
                            this._markSelectedDates([]);
                        }
                    },

                    _patchDate: function( /*Date|Number*/ value) {
                        // summary:
                        //		Convert Number into Date, or copy Date object.   Then, round to nearest day,
                        //		setting to 1am to avoid issues when DST shift occurs at midnight, see #8521, #9366)
                        if (value) {
                            value = new this.dateClassObj(value);
                            value.setHours(1, 0, 0, 0);
                        }
                        return value;
                    },

                    _setText: function(node, text) {
                        // summary:
                        //		This just sets the content of node to the specified text.
                        //		Can't do "node.innerHTML=text" because of an IE bug w/tables, see #3434.
                        // tags:
                        //		private
                        while (node.firstChild) {
                            node.removeChild(node.firstChild);
                        }
                        node.appendChild(node.ownerDocument.createTextNode(text));
                    },

                    _populateGrid: function() {
                        // summary:
                        //		Fills in the calendar grid with each day (1-31).
                        //		Call this on creation, when moving to a new month.
                        // tags:
                        //		private

                        var month = new this.dateClassObj(this.currentFocus);
                        month.setDate(1);

                        var firstDay = month.getDay(),
                            daysInMonth = this.dateModule.getDaysInMonth(month),
                            daysInPreviousMonth = this.dateModule.getDaysInMonth(this.dateModule.add(month, "month", -1)),
                            today = new this.dateClassObj(),
                            dayOffset = cldrSupplemental.getFirstDayOfWeek(this.lang);
                        if (dayOffset > firstDay) {
                            dayOffset -= 7;
                        }

                        // Mapping from date (as specified by number returned from Date.valueOf()) to corresponding <td>
                        this._date2cell = {};

                        // Iterate through dates in the calendar and fill in date numbers and style info
                        array.forEach(this.dateCells, function(template, idx) {
                            var i = idx + dayOffset;
                            var date = new this.dateClassObj(month),
                                number, clazz = "dijitCalendar",
                                adj = 0;

                            if (i < firstDay) {
                                number = daysInPreviousMonth - firstDay + i + 1;
                                adj = -1;
                                clazz += "Previous";
                            } else if (i >= (firstDay + daysInMonth)) {
                                number = i - firstDay - daysInMonth + 1;
                                adj = 1;
                                clazz += "Next";
                            } else {
                                number = i - firstDay + 1;
                                clazz += "Current";
                            }

                            if (adj) {
                                date = this.dateModule.add(date, "month", adj);
                            }
                            date.setDate(number);

                            if (!this.dateModule.compare(date, today, "date")) {
                                clazz = "dijitCalendarCurrentDate " + clazz;
                            }

                            if (this.isDisabledDate(date, this.lang)) {
                                clazz = "dijitCalendarDisabledDate " + clazz;
                                template.setAttribute("aria-disabled", "true");
                            } else {
                                clazz = "dijitCalendarEnabledDate " + clazz;
                                template.removeAttribute("aria-disabled");
                                template.setAttribute("aria-selected", "false");
                            }

                            var clazz2 = this.getClassForDate(date, this.lang);
                            if (clazz2) {
                                clazz = clazz2 + " " + clazz;
                            }

                            template.className = clazz + "Month dijitCalendarDateTemplate";

                            // Each cell has an associated integer value representing it's date
                            var dateVal = date.valueOf();
                            this._date2cell[dateVal] = template;
                            template.dijitDateValue = dateVal;

                            // Set Date string (ex: "13").
                            this._setText(this.dateLabels[idx], date.getDateLocalized ? date.getDateLocalized(this.lang) : date.getDate());
                        }, this);
                    },

                    _populateControls: function() {
                        // summary:
                        //		Fill in localized month, and prev/current/next years
                        // tags:
                        //		protected

                        var month = new this.dateClassObj(this.currentFocus);
                        month.setDate(1);

                        // set name of this month
                        this.monthWidget.set("month", month);

                        var y = month.getFullYear() - 1;
                        var d = new this.dateClassObj();
                        array.forEach(["previous", "current", "next"], function(name) {
                            d.setFullYear(y++);
                            this._setText(this[name + "YearLabelNode"],
                                this.dateLocaleModule.format(d, {
                                    selector: 'year',
                                    locale: this.lang
                                }));
                        }, this);
                    },

                    goToToday: function() {
                        // summary:
                        //		Sets calendar's value to today's date
                        this.set('value', new this.dateClassObj());
                    },

                    constructor: function(params /*===== , srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree

                        this.dateModule = params.datePackage ? lang.getObject(params.datePackage, false) : date;
                        this.dateClassObj = this.dateModule.Date || Date;
                        this.dateLocaleModule = params.datePackage ? lang.getObject(params.datePackage + ".locale", false) : locale;
                    },

                    _createMonthWidget: function() {
                        // summary:
                        //		Creates the drop down button that displays the current month and lets user pick a new one

                        return CalendarLite._MonthWidget({
                            id: this.id + "_mw",
                            lang: this.lang,
                            dateLocaleModule: this.dateLocaleModule
                        }, this.monthNode);
                    },

                    buildRendering: function() {
                        // Markup for days of the week (referenced from template)
                        var d = this.dowTemplateString,
                            dayNames = this.dateLocaleModule.getNames('days', this.dayWidth, 'standAlone', this.lang),
                            dayOffset = cldrSupplemental.getFirstDayOfWeek(this.lang);
                        this.dayCellsHtml = string.substitute([d, d, d, d, d, d, d].join(""), {
                            d: ""
                        }, function() {
                            return dayNames[dayOffset++ % 7];
                        });

                        // Markup for dates of the month (referenced from template), but without numbers filled in
                        var r = string.substitute(this.weekTemplateString, {
                            d: this.dateTemplateString
                        });
                        this.dateRowsHtml = [r, r, r, r, r, r].join("");

                        // Instantiate from template.
                        // dateCells and dateLabels arrays filled when _Templated parses my template.
                        this.dateCells = [];
                        this.dateLabels = [];
                        this.inherited(arguments);

                        dom.setSelectable(this.domNode, false);

                        var dateObj = new this.dateClassObj(this.currentFocus);

                        this.monthWidget = this._createMonthWidget();

                        this.set('currentFocus', dateObj, false); // draw the grid to the month specified by currentFocus
                    },

                    postCreate: function() {
                        this.inherited(arguments);
                        this._connectControls();
                    },

                    _connectControls: function() {
                        // summary:
                        //		Set up connects for increment/decrement of months/years
                        // tags:
                        //		protected

                        var connect = lang.hitch(this, function(nodeProp, part, amount) {
                            this.connect(this[nodeProp], "onclick", function() {
                                this._setCurrentFocusAttr(this.dateModule.add(this.currentFocus, part, amount));
                            });
                        });

                        connect("incrementMonth", "month", 1);
                        connect("decrementMonth", "month", -1);
                        connect("nextYearLabelNode", "year", 1);
                        connect("previousYearLabelNode", "year", -1);
                    },

                    _setCurrentFocusAttr: function( /*Date*/ date, /*Boolean*/ forceFocus) {
                        // summary:
                        //		If the calendar currently has focus, then focuses specified date,
                        //		changing the currently displayed month/year if necessary.
                        //		If the calendar doesn't have focus, updates currently
                        //		displayed month/year, and sets the cell that will get focus
                        //		when Calendar is focused.
                        // forceFocus:
                        //		If true, will focus() the cell even if calendar itself doesn't have focus

                        var oldFocus = this.currentFocus,
                            oldCell = this._getNodeByDate(oldFocus);
                        date = this._patchDate(date);

                        this._set("currentFocus", date);

                        // If the focus is on a different month than the current calendar month, switch the displayed month.
                        // Also will populate the grid initially, on Calendar creation.
                        if (!this._date2cell || this.dateModule.difference(oldFocus, date, "month") != 0) {
                            this._populateGrid();
                            this._populateControls();
                            this._markSelectedDates([this.value]);
                        }

                        // set tabIndex=0 on new cell, and focus it (but only if Calendar itself is focused)
                        var newCell = this._getNodeByDate(date);
                        newCell.setAttribute("tabIndex", this.tabIndex);
                        if (this.focused || forceFocus) {
                            newCell.focus();
                        }

                        // set tabIndex=-1 on old focusable cell
                        if (oldCell && oldCell != newCell) {
                            if (has("webkit")) { // see #11064 about webkit bug
                                oldCell.setAttribute("tabIndex", "-1");
                            } else {
                                oldCell.removeAttribute("tabIndex");
                            }
                        }
                    },

                    focus: function() {
                        // summary:
                        //		Focus the calendar by focusing one of the calendar cells
                        this._setCurrentFocusAttr(this.currentFocus, true);
                    },

                    _onDayClick: function( /*Event*/ evt) {
                        // summary:
                        //		Handler for day clicks, selects the date if appropriate
                        // tags:
                        //		protected
                        event.stop(evt);
                        for (var node = evt.target; node && !node.dijitDateValue; node = node.parentNode);
                        if (node && !domClass.contains(node, "dijitCalendarDisabledDate")) {
                            this.set('value', node.dijitDateValue);
                        }
                    },

                    _getNodeByDate: function( /*Date*/ value) {
                        // summary:
                        //		Returns the cell corresponding to the date, or null if the date is not within the currently
                        //		displayed month.
                        value = this._patchDate(value);
                        return value && this._date2cell ? this._date2cell[value.valueOf()] : null;
                    },

                    _markSelectedDates: function( /*Date[]*/ dates) {
                        // summary:
                        //		Marks the specified cells as selected, and clears cells previously marked as selected.
                        //		For CalendarLite at most one cell is selected at any point, but this allows an array
                        //		for easy subclassing.

                        // Function to mark a cell as selected or unselected
                        function mark( /*Boolean*/ selected, /*DomNode*/ cell) {
                            domClass.toggle(cell, "dijitCalendarSelectedDate", selected);
                            cell.setAttribute("aria-selected", selected ? "true" : "false");
                        }

                        // Clear previously selected cells.
                        array.forEach(this._selectedCells || [], lang.partial(mark, false));

                        // Mark newly selected cells.  Ignore dates outside the currently displayed month.
                        this._selectedCells = array.filter(array.map(dates, this._getNodeByDate, this), function(n) {
                            return n;
                        });
                        array.forEach(this._selectedCells, lang.partial(mark, true));
                    },

                    onChange: function( /*Date*/ /*===== date =====*/ ) {
                        // summary:
                        //		Called only when the selected date has changed
                    },

                    isDisabledDate: function( /*===== dateObject, locale =====*/ ) {
                        // summary:
                        //		May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`
                        // dateObject: Date
                        // locale: String?
                        // tags:
                        //		extension
                        /*=====
                        			return false; // Boolean
                        =====*/
                    },

                    getClassForDate: function( /*===== dateObject, locale =====*/ ) {
                        // summary:
                        //		May be overridden to return CSS classes to associate with the date entry for the given dateObject,
                        //		for example to indicate a holiday in specified locale.
                        // dateObject: Date
                        // locale: String?
                        // tags:
                        //		extension

                        /*=====
                        			return ""; // String
                        =====*/
                    }
                });

                CalendarLite._MonthWidget = declare("dijit.CalendarLite._MonthWidget", _WidgetBase, {
                    // summary:
                    //		Displays name of current month padded to the width of the month
                    //		w/the longest name, so that changing months doesn't change width.
                    //
                    //		Create as:
                    // |	new Calendar._MonthWidget({
                    // |			lang: ...,
                    // |			dateLocaleModule: ...
                    // |		})

                    _setMonthAttr: function(month) {
                        // summary:
                        //		Set the current month to display as a label
                        var monthNames = this.dateLocaleModule.getNames('months', 'wide', 'standAlone', this.lang, month),
                            spacer =
                            (has("ie") == 6 ? "" : "<div class='dijitSpacer'>" +
                                array.map(monthNames, function(s) {
                                    return "<div>" + s + "</div>";
                                }).join("") + "</div>");

                        // Set name of current month and also fill in spacer element with all the month names
                        // (invisible) so that the maximum width will affect layout.   But not on IE6 because then
                        // the center <TH> overlaps the right <TH> (due to a browser bug).
                        this.domNode.innerHTML =
                            spacer +
                            "<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>" +
                            monthNames[month.getMonth()] + "</div>";
                    }
                });

                return CalendarLite;
            });

        },
        'dijit/CheckedMenuItem': function() {
            require({
                cache: {
                    'url:dijit/templates/CheckedMenuItem.html': "<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode,labelNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&#160;</td>\n</tr>\n"
                }
            });
            define("dijit/CheckedMenuItem", [
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.toggle
                "./MenuItem",
                "dojo/text!./templates/CheckedMenuItem.html",
                "./hccss"
            ], function(declare, domClass, MenuItem, template) {

                // module:
                //		dijit/CheckedMenuItem

                return declare("dijit.CheckedMenuItem", MenuItem, {
                    // summary:
                    //		A checkbox-like menu item for toggling on and off

                    templateString: template,

                    // checked: Boolean
                    //		Our checked state
                    checked: false,
                    _setCheckedAttr: function( /*Boolean*/ checked) {
                        // summary:
                        //		Hook so attr('checked', bool) works.
                        //		Sets the class and state for the check box.
                        domClass.toggle(this.domNode, "dijitCheckedMenuItemChecked", checked);
                        this.domNode.setAttribute("aria-checked", checked ? "true" : "false");
                        this._set("checked", checked);
                    },

                    iconClass: "", // override dijitNoIcon

                    onChange: function( /*Boolean*/ /*===== checked =====*/ ) {
                        // summary:
                        //		User defined function to handle check/uncheck events
                        // tags:
                        //		callback
                    },

                    _onClick: function(evt) {
                        // summary:
                        //		Clicking this item just toggles its state
                        // tags:
                        //		private
                        if (!this.disabled) {
                            this.set("checked", !this.checked);
                            this.onChange(this.checked);
                        }
                        this.onClick(evt);
                    }
                });
            });

        },
        'dijit/Viewport': function() {
            define("dijit/Viewport", [
                "dojo/Evented",
                "dojo/on",
                "dojo/ready",
                "dojo/sniff",
                "dojo/_base/window", // global
                "dojo/window" // getBox()
            ], function(Evented, on, ready, has, win, winUtils) {

                // module:
                //		dijit/Viewport

                /*=====
                return {
                	// summary:
                	//		Utility singleton to watch for viewport resizes, avoiding duplicate notifications
                	//		which can lead to infinite loops.
                	// description:
                	//		Usage: Viewport.on("resize", myCallback).
                	//
                	//		myCallback() is called without arguments in case it's _WidgetBase.resize(),
                	//		which would interpret the argument as the size to make the widget.
                };
                =====*/

                var Viewport = new Evented();

                ready(200, function() {
                    var oldBox = winUtils.getBox();
                    Viewport._rlh = on(win.global, "resize", function() {
                        var newBox = winUtils.getBox();
                        if (oldBox.h == newBox.h && oldBox.w == newBox.w) {
                            return;
                        }
                        oldBox = newBox;
                        Viewport.emit("resize");
                    });

                    // Also catch zoom changes on IE8, since they don't naturally generate resize events
                    if (has("ie") == 8) {
                        var deviceXDPI = screen.deviceXDPI;
                        setInterval(function() {
                            if (screen.deviceXDPI != deviceXDPI) {
                                deviceXDPI = screen.deviceXDPI;
                                Viewport.emit("resize");
                            }
                        }, 500);
                    }
                });

                return Viewport;
            });

        },
        'hsbcwidget/Search': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/on",
                    "dojo/dom-style",
                    "hsbccore/aria"
                ],
                function(declare, _WidgetBase, query, on, domStyle, aria) {

                    return declare([_WidgetBase], {
                        type: 'masthead',

                        postCreate: function() {
                            var self = this;

                            this._findNodes();
                            aria.setWrapper(this.domNode);

                            //Setup nodes
                            domStyle.set(this.srchBtnNode, 'display', 'none');

                            //Setup events
                        },

                        _findNodes: function() {
                            //Find Nodes
                            this.srchBtnNode = query('.searchButton', this.domNode)[0];
                            this.formNode = query('form.searchForm', this.domNode)[0];

                            this.srchLinkNode = query('a:first', this.srchBtnNode)[0];
                            this.inputNode = query('input.qtext', this.formNode)[0];
                        }
                    });

                }
            );
        },
        'dojo/topic': function() {
            define("dojo/topic", ["./Evented"], function(Evented) {

                // module:
                //		dojo/topic

                var hub = new Evented;
                return {
                    // summary:
                    //		Pubsub hub.
                    // example:
                    //		| 	topic.subscribe("some/topic", function(event){
                    //		|	... do something with event
                    //		|	});
                    //		|	topic.publish("some/topic", {name:"some event", ...});

                    publish: function(topic, event) {
                        // summary:
                        //		Publishes a message to a topic on the pub/sub hub. All arguments after
                        //		the first will be passed to the subscribers, so any number of arguments
                        //		can be provided (not just event).
                        // topic: String
                        //		The name of the topic to publish to
                        // event: Object
                        //		An event to distribute to the topic listeners
                        return hub.emit.apply(hub, arguments);
                    },

                    subscribe: function(topic, listener) {
                        // summary:
                        //		Subscribes to a topic on the pub/sub hub
                        // topic: String
                        //		The topic to subscribe to
                        // listener: Function
                        //		A function to call when a message is published to the given topic
                        return hub.on.apply(hub, arguments);
                    }
                };
            });

        },
        'dijit/MenuSeparator': function() {
            require({
                cache: {
                    'url:dijit/templates/MenuSeparator.html': "<tr class=\"dijitMenuSeparator\">\n\t<td class=\"dijitMenuSeparatorIconCell\">\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\n\t</td>\n</tr>"
                }
            });
            define("dijit/MenuSeparator", [
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.setSelectable
                "./_WidgetBase",
                "./_TemplatedMixin",
                "./_Contained",
                "dojo/text!./templates/MenuSeparator.html"
            ], function(declare, dom, _WidgetBase, _TemplatedMixin, _Contained, template) {

                // module:
                //		dijit/MenuSeparator

                return declare("dijit.MenuSeparator", [_WidgetBase, _TemplatedMixin, _Contained], {
                    // summary:
                    //		A line between two menu items

                    templateString: template,

                    buildRendering: function() {
                        this.inherited(arguments);
                        dom.setSelectable(this.domNode, false);
                    },

                    isFocusable: function() {
                        // summary:
                        //		Override to always return false
                        // tags:
                        //		protected

                        return false; // Boolean
                    }
                });
            });

        },
        'dijit/form/_ComboBoxMenu': function() {
            define("dijit/form/_ComboBoxMenu", [
                "dojo/_base/declare", // declare
                "dojo/dom-class", // domClass.add domClass.remove
                "dojo/dom-style", // domStyle.get
                "dojo/keys", // keys.DOWN_ARROW keys.PAGE_DOWN keys.PAGE_UP keys.UP_ARROW
                "../_WidgetBase",
                "../_TemplatedMixin",
                "./_ComboBoxMenuMixin",
                "./_ListMouseMixin"
            ], function(declare, domClass, domStyle, keys,
                _WidgetBase, _TemplatedMixin, _ComboBoxMenuMixin, _ListMouseMixin) {


                // module:
                //		dijit/form/_ComboBoxMenu

                return declare("dijit.form._ComboBoxMenu", [_WidgetBase, _TemplatedMixin, _ListMouseMixin, _ComboBoxMenuMixin], {
                    // summary:
                    //		Focus-less menu for internal use in `dijit/form/ComboBox`
                    //		Abstract methods that must be defined externally:
                    //
                    //		- onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)
                    //		- onPage: next(1) or previous(-1) button pressed
                    // tags:
                    //		private

                    templateString: "<div class='dijitReset dijitMenu' data-dojo-attach-point='containerNode' style='overflow: auto; overflow-x: hidden;'>" +
                        "<div class='dijitMenuItem dijitMenuPreviousButton' data-dojo-attach-point='previousButton' role='option'></div>" +
                        "<div class='dijitMenuItem dijitMenuNextButton' data-dojo-attach-point='nextButton' role='option'></div>" +
                        "</div>",

                    baseClass: "dijitComboBoxMenu",

                    postCreate: function() {
                        this.inherited(arguments);
                        if (!this.isLeftToRight()) {
                            domClass.add(this.previousButton, "dijitMenuItemRtl");
                            domClass.add(this.nextButton, "dijitMenuItemRtl");
                        }
                    },

                    _createMenuItem: function() {
                        // note: not using domConstruct.create() because need to specify document
                        var item = this.ownerDocument.createElement("div");
                        item.className = "dijitReset dijitMenuItem" + (this.isLeftToRight() ? "" : " dijitMenuItemRtl");
                        item.setAttribute("role", "option");
                        return item;
                    },

                    onHover: function( /*DomNode*/ node) {
                        // summary:
                        //		Add hover CSS
                        domClass.add(node, "dijitMenuItemHover");
                    },

                    onUnhover: function( /*DomNode*/ node) {
                        // summary:
                        //		Remove hover CSS
                        domClass.remove(node, "dijitMenuItemHover");
                    },

                    onSelect: function( /*DomNode*/ node) {
                        // summary:
                        //		Add selected CSS
                        domClass.add(node, "dijitMenuItemSelected");
                    },

                    onDeselect: function( /*DomNode*/ node) {
                        // summary:
                        //		Remove selected CSS
                        domClass.remove(node, "dijitMenuItemSelected");
                    },

                    _page: function( /*Boolean*/ up) {
                        // summary:
                        //		Handles page-up and page-down keypresses

                        var scrollamount = 0;
                        var oldscroll = this.domNode.scrollTop;
                        var height = domStyle.get(this.domNode, "height");
                        // if no item is highlighted, highlight the first option
                        if (!this.getHighlightedOption()) {
                            this.selectNextNode();
                        }
                        while (scrollamount < height) {
                            var highlighted_option = this.getHighlightedOption();
                            if (up) {
                                // stop at option 1
                                if (!highlighted_option.previousSibling ||
                                    highlighted_option.previousSibling.style.display == "none") {
                                    break;
                                }
                                this.selectPreviousNode();
                            } else {
                                // stop at last option
                                if (!highlighted_option.nextSibling ||
                                    highlighted_option.nextSibling.style.display == "none") {
                                    break;
                                }
                                this.selectNextNode();
                            }
                            // going backwards
                            var newscroll = this.domNode.scrollTop;
                            scrollamount += (newscroll - oldscroll) * (up ? -1 : 1);
                            oldscroll = newscroll;
                        }
                    },

                    handleKey: function(evt) {
                        // summary:
                        //		Handle keystroke event forwarded from ComboBox, returning false if it's
                        //		a keystroke I recognize and process, true otherwise.
                        switch (evt.keyCode) {
                            case keys.DOWN_ARROW:
                                this.selectNextNode();
                                return false;
                            case keys.PAGE_DOWN:
                                this._page(false);
                                return false;
                            case keys.UP_ARROW:
                                this.selectPreviousNode();
                                return false;
                            case keys.PAGE_UP:
                                this._page(true);
                                return false;
                            default:
                                return true;
                        }
                    }
                });
            });

        },
        'dojo/_base/declare': function() {
            define(["./kernel", "../has", "./lang"], function(dojo, has, lang) {
                // module:
                //		dojo/_base/declare

                var mix = lang.mixin,
                    op = Object.prototype,
                    opts = op.toString,
                    xtor = new Function,
                    counter = 0,
                    cname = "constructor";

                function err(msg, cls) {
                    throw new Error("declare" + (cls ? " " + cls : "") + ": " + msg);
                }

                // C3 Method Resolution Order (see http://www.python.org/download/releases/2.3/mro/)
                function c3mro(bases, className) {
                    var result = [],
                        roots = [{
                            cls: 0,
                            refs: []
                        }],
                        nameMap = {},
                        clsCount = 1,
                        l = bases.length,
                        i = 0,
                        j, lin, base, top, proto, rec, name, refs;

                    // build a list of bases naming them if needed
                    for (; i < l; ++i) {
                        base = bases[i];
                        if (!base) {
                            err("mixin #" + i + " is unknown. Did you use dojo.require to pull it in?", className);
                        } else if (opts.call(base) != "[object Function]") {
                            err("mixin #" + i + " is not a callable constructor.", className);
                        }
                        lin = base._meta ? base._meta.bases : [base];
                        top = 0;
                        // add bases to the name map
                        for (j = lin.length - 1; j >= 0; --j) {
                            proto = lin[j].prototype;
                            if (!proto.hasOwnProperty("declaredClass")) {
                                proto.declaredClass = "uniqName_" + (counter++);
                            }
                            name = proto.declaredClass;
                            if (!nameMap.hasOwnProperty(name)) {
                                nameMap[name] = {
                                    count: 0,
                                    refs: [],
                                    cls: lin[j]
                                };
                                ++clsCount;
                            }
                            rec = nameMap[name];
                            if (top && top !== rec) {
                                rec.refs.push(top);
                                ++top.count;
                            }
                            top = rec;
                        }
                        ++top.count;
                        roots[0].refs.push(top);
                    }

                    // remove classes without external references recursively
                    while (roots.length) {
                        top = roots.pop();
                        result.push(top.cls);
                        --clsCount;
                        // optimization: follow a single-linked chain
                        while (refs = top.refs, refs.length == 1) {
                            top = refs[0];
                            if (!top || --top.count) {
                                // branch or end of chain => do not end to roots
                                top = 0;
                                break;
                            }
                            result.push(top.cls);
                            --clsCount;
                        }
                        if (top) {
                            // branch
                            for (i = 0, l = refs.length; i < l; ++i) {
                                top = refs[i];
                                if (!--top.count) {
                                    roots.push(top);
                                }
                            }
                        }
                    }
                    if (clsCount) {
                        err("can't build consistent linearization", className);
                    }

                    // calculate the superclass offset
                    base = bases[0];
                    result[0] = base ?
                        base._meta && base === result[result.length - base._meta.bases.length] ?
                        base._meta.bases.length : 1 : 0;

                    return result;
                }

                function inherited(args, a, f) {
                    var name, chains, bases, caller, meta, base, proto, opf, pos,
                        cache = this._inherited = this._inherited || {};

                    // crack arguments
                    if (typeof args == "string") {
                        name = args;
                        args = a;
                        a = f;
                    }
                    f = 0;

                    caller = args.callee;
                    name = name || caller.nom;
                    if (!name) {
                        err("can't deduce a name to call inherited()", this.declaredClass);
                    }

                    meta = this.constructor._meta;
                    bases = meta.bases;

                    pos = cache.p;
                    if (name != cname) {
                        // method
                        if (cache.c !== caller) {
                            // cache bust
                            pos = 0;
                            base = bases[0];
                            meta = base._meta;
                            if (meta.hidden[name] !== caller) {
                                // error detection
                                chains = meta.chains;
                                if (chains && typeof chains[name] == "string") {
                                    err("calling chained method with inherited: " + name, this.declaredClass);
                                }
                                // find caller
                                do {
                                    meta = base._meta;
                                    proto = base.prototype;
                                    if (meta && (proto[name] === caller && proto.hasOwnProperty(name) || meta.hidden[name] === caller)) {
                                        break;
                                    }
                                } while (base = bases[++pos]); // intentional assignment
                                pos = base ? pos : -1;
                            }
                        }
                        // find next
                        base = bases[++pos];
                        if (base) {
                            proto = base.prototype;
                            if (base._meta && proto.hasOwnProperty(name)) {
                                f = proto[name];
                            } else {
                                opf = op[name];
                                do {
                                    proto = base.prototype;
                                    f = proto[name];
                                    if (f && (base._meta ? proto.hasOwnProperty(name) : f !== opf)) {
                                        break;
                                    }
                                } while (base = bases[++pos]); // intentional assignment
                            }
                        }
                        f = base && f || op[name];
                    } else {
                        // constructor
                        if (cache.c !== caller) {
                            // cache bust
                            pos = 0;
                            meta = bases[0]._meta;
                            if (meta && meta.ctor !== caller) {
                                // error detection
                                chains = meta.chains;
                                if (!chains || chains.constructor !== "manual") {
                                    err("calling chained constructor with inherited", this.declaredClass);
                                }
                                // find caller
                                while (base = bases[++pos]) { // intentional assignment
                                    meta = base._meta;
                                    if (meta && meta.ctor === caller) {
                                        break;
                                    }
                                }
                                pos = base ? pos : -1;
                            }
                        }
                        // find next
                        while (base = bases[++pos]) { // intentional assignment
                            meta = base._meta;
                            f = meta ? meta.ctor : base;
                            if (f) {
                                break;
                            }
                        }
                        f = base && f;
                    }

                    // cache the found super method
                    cache.c = f;
                    cache.p = pos;

                    // now we have the result
                    if (f) {
                        return a === true ? f : f.apply(this, a || args);
                    }
                    // intentionally no return if a super method was not found
                }

                function getInherited(name, args) {
                    if (typeof name == "string") {
                        return this.__inherited(name, args, true);
                    }
                    return this.__inherited(name, true);
                }

                function inherited__debug(args, a1, a2) {
                    var f = this.getInherited(args, a1);
                    if (f) {
                        return f.apply(this, a2 || a1 || args);
                    }
                    // intentionally no return if a super method was not found
                }

                var inheritedImpl = dojo.config.isDebug ? inherited__debug : inherited;

                // emulation of "instanceof"
                function isInstanceOf(cls) {
                    var bases = this.constructor._meta.bases;
                    for (var i = 0, l = bases.length; i < l; ++i) {
                        if (bases[i] === cls) {
                            return true;
                        }
                    }
                    return this instanceof cls;
                }

                function mixOwn(target, source) {
                    // add props adding metadata for incoming functions skipping a constructor
                    for (var name in source) {
                        if (name != cname && source.hasOwnProperty(name)) {
                            target[name] = source[name];
                        }
                    }
                    if (0) {
                        for (var extraNames = lang._extraNames, i = extraNames.length; i;) {
                            name = extraNames[--i];
                            if (name != cname && source.hasOwnProperty(name)) {
                                target[name] = source[name];
                            }
                        }
                    }
                }

                // implementation of safe mixin function
                function safeMixin(target, source) {
                    // summary:
                    //		Mix in properties skipping a constructor and decorating functions
                    //		like it is done by declare().
                    // target: Object
                    //		Target object to accept new properties.
                    // source: Object
                    //		Source object for new properties.
                    // description:
                    //		This function is used to mix in properties like lang.mixin does,
                    //		but it skips a constructor property and decorates functions like
                    //		declare() does.
                    //
                    //		It is meant to be used with classes and objects produced with
                    //		declare. Functions mixed in with dojo.safeMixin can use
                    //		this.inherited() like normal methods.
                    //
                    //		This function is used to implement extend() method of a constructor
                    //		produced with declare().
                    //
                    // example:
                    //	|	var A = declare(null, {
                    //	|		m1: function(){
                    //	|			console.log("A.m1");
                    //	|		},
                    //	|		m2: function(){
                    //	|			console.log("A.m2");
                    //	|		}
                    //	|	});
                    //	|	var B = declare(A, {
                    //	|		m1: function(){
                    //	|			this.inherited(arguments);
                    //	|			console.log("B.m1");
                    //	|		}
                    //	|	});
                    //	|	B.extend({
                    //	|		m2: function(){
                    //	|			this.inherited(arguments);
                    //	|			console.log("B.m2");
                    //	|		}
                    //	|	});
                    //	|	var x = new B();
                    //	|	dojo.safeMixin(x, {
                    //	|		m1: function(){
                    //	|			this.inherited(arguments);
                    //	|			console.log("X.m1");
                    //	|		},
                    //	|		m2: function(){
                    //	|			this.inherited(arguments);
                    //	|			console.log("X.m2");
                    //	|		}
                    //	|	});
                    //	|	x.m2();
                    //	|	// prints:
                    //	|	// A.m1
                    //	|	// B.m1
                    //	|	// X.m1

                    var name, t;
                    // add props adding metadata for incoming functions skipping a constructor
                    for (name in source) {
                        t = source[name];
                        if ((t !== op[name] || !(name in op)) && name != cname) {
                            if (opts.call(t) == "[object Function]") {
                                // non-trivial function method => attach its name
                                t.nom = name;
                            }
                            target[name] = t;
                        }
                    }
                    if (0) {
                        for (var extraNames = lang._extraNames, i = extraNames.length; i;) {
                            name = extraNames[--i];
                            t = source[name];
                            if ((t !== op[name] || !(name in op)) && name != cname) {
                                if (opts.call(t) == "[object Function]") {
                                    // non-trivial function method => attach its name
                                    t.nom = name;
                                }
                                target[name] = t;
                            }
                        }
                    }
                    return target;
                }

                function extend(source) {
                    declare.safeMixin(this.prototype, source);
                    return this;
                }

                function createSubclass(mixins) {
                    return declare([this].concat(mixins));
                }

                // chained constructor compatible with the legacy declare()
                function chainedConstructor(bases, ctorSpecial) {
                    return function() {
                        var a = arguments,
                            args = a,
                            a0 = a[0],
                            f, i, m,
                            l = bases.length,
                            preArgs;

                        if (!(this instanceof a.callee)) {
                            // not called via new, so force it
                            return applyNew(a);
                        }

                        //this._inherited = {};
                        // perform the shaman's rituals of the original declare()
                        // 1) call two types of the preamble
                        if (ctorSpecial && (a0 && a0.preamble || this.preamble)) {
                            // full blown ritual
                            preArgs = new Array(bases.length);
                            // prepare parameters
                            preArgs[0] = a;
                            for (i = 0;;) {
                                // process the preamble of the 1st argument
                                a0 = a[0];
                                if (a0) {
                                    f = a0.preamble;
                                    if (f) {
                                        a = f.apply(this, a) || a;
                                    }
                                }
                                // process the preamble of this class
                                f = bases[i].prototype;
                                f = f.hasOwnProperty("preamble") && f.preamble;
                                if (f) {
                                    a = f.apply(this, a) || a;
                                }
                                // one peculiarity of the preamble:
                                // it is called if it is not needed,
                                // e.g., there is no constructor to call
                                // let's watch for the last constructor
                                // (see ticket #9795)
                                if (++i == l) {
                                    break;
                                }
                                preArgs[i] = a;
                            }
                        }
                        // 2) call all non-trivial constructors using prepared arguments
                        for (i = l - 1; i >= 0; --i) {
                            f = bases[i];
                            m = f._meta;
                            f = m ? m.ctor : f;
                            if (f) {
                                f.apply(this, preArgs ? preArgs[i] : a);
                            }
                        }
                        // 3) continue the original ritual: call the postscript
                        f = this.postscript;
                        if (f) {
                            f.apply(this, args);
                        }
                    };
                }


                // chained constructor compatible with the legacy declare()
                function singleConstructor(ctor, ctorSpecial) {
                    return function() {
                        var a = arguments,
                            t = a,
                            a0 = a[0],
                            f;

                        if (!(this instanceof a.callee)) {
                            // not called via new, so force it
                            return applyNew(a);
                        }

                        //this._inherited = {};
                        // perform the shaman's rituals of the original declare()
                        // 1) call two types of the preamble
                        if (ctorSpecial) {
                            // full blown ritual
                            if (a0) {
                                // process the preamble of the 1st argument
                                f = a0.preamble;
                                if (f) {
                                    t = f.apply(this, t) || t;
                                }
                            }
                            f = this.preamble;
                            if (f) {
                                // process the preamble of this class
                                f.apply(this, t);
                                // one peculiarity of the preamble:
                                // it is called even if it is not needed,
                                // e.g., there is no constructor to call
                                // let's watch for the last constructor
                                // (see ticket #9795)
                            }
                        }
                        // 2) call a constructor
                        if (ctor) {
                            ctor.apply(this, a);
                        }
                        // 3) continue the original ritual: call the postscript
                        f = this.postscript;
                        if (f) {
                            f.apply(this, a);
                        }
                    };
                }

                // plain vanilla constructor (can use inherited() to call its base constructor)
                function simpleConstructor(bases) {
                    return function() {
                        var a = arguments,
                            i = 0,
                            f, m;

                        if (!(this instanceof a.callee)) {
                            // not called via new, so force it
                            return applyNew(a);
                        }

                        //this._inherited = {};
                        // perform the shaman's rituals of the original declare()
                        // 1) do not call the preamble
                        // 2) call the top constructor (it can use this.inherited())
                        for (; f = bases[i]; ++i) { // intentional assignment
                            m = f._meta;
                            f = m ? m.ctor : f;
                            if (f) {
                                f.apply(this, a);
                                break;
                            }
                        }
                        // 3) call the postscript
                        f = this.postscript;
                        if (f) {
                            f.apply(this, a);
                        }
                    };
                }

                function chain(name, bases, reversed) {
                    return function() {
                        var b, m, f, i = 0,
                            step = 1;
                        if (reversed) {
                            i = bases.length - 1;
                            step = -1;
                        }
                        for (; b = bases[i]; i += step) { // intentional assignment
                            m = b._meta;
                            f = (m ? m.hidden : b.prototype)[name];
                            if (f) {
                                f.apply(this, arguments);
                            }
                        }
                    };
                }

                // forceNew(ctor)
                // return a new object that inherits from ctor.prototype but
                // without actually running ctor on the object.
                function forceNew(ctor) {
                    // create object with correct prototype using a do-nothing
                    // constructor
                    xtor.prototype = ctor.prototype;
                    var t = new xtor;
                    xtor.prototype = null; // clean up
                    return t;
                }

                // applyNew(args)
                // just like 'new ctor()' except that the constructor and its arguments come
                // from args, which must be an array or an arguments object
                function applyNew(args) {
                    // create an object with ctor's prototype but without
                    // calling ctor on it.
                    var ctor = args.callee,
                        t = forceNew(ctor);
                    // execute the real constructor on the new object
                    ctor.apply(t, args);
                    return t;
                }

                function declare(className, superclass, props) {
                    // summary:
                    //		Create a feature-rich constructor from compact notation.
                    // className: String?
                    //		The optional name of the constructor (loosely, a "class")
                    //		stored in the "declaredClass" property in the created prototype.
                    //		It will be used as a global name for a created constructor.
                    // superclass: Function|Function[]
                    //		May be null, a Function, or an Array of Functions. This argument
                    //		specifies a list of bases (the left-most one is the most deepest
                    //		base).
                    // props: Object
                    //		An object whose properties are copied to the created prototype.
                    //		Add an instance-initialization function by making it a property
                    //		named "constructor".
                    // returns: dojo/_base/declare.__DeclareCreatedObject
                    //		New constructor function.
                    // description:
                    //		Create a constructor using a compact notation for inheritance and
                    //		prototype extension.
                    //
                    //		Mixin ancestors provide a type of multiple inheritance.
                    //		Prototypes of mixin ancestors are copied to the new class:
                    //		changes to mixin prototypes will not affect classes to which
                    //		they have been mixed in.
                    //
                    //		Ancestors can be compound classes created by this version of
                    //		declare(). In complex cases all base classes are going to be
                    //		linearized according to C3 MRO algorithm
                    //		(see http://www.python.org/download/releases/2.3/mro/ for more
                    //		details).
                    //
                    //		"className" is cached in "declaredClass" property of the new class,
                    //		if it was supplied. The immediate super class will be cached in
                    //		"superclass" property of the new class.
                    //
                    //		Methods in "props" will be copied and modified: "nom" property
                    //		(the declared name of the method) will be added to all copied
                    //		functions to help identify them for the internal machinery. Be
                    //		very careful, while reusing methods: if you use the same
                    //		function under different names, it can produce errors in some
                    //		cases.
                    //
                    //		It is possible to use constructors created "manually" (without
                    //		declare()) as bases. They will be called as usual during the
                    //		creation of an instance, their methods will be chained, and even
                    //		called by "this.inherited()".
                    //
                    //		Special property "-chains-" governs how to chain methods. It is
                    //		a dictionary, which uses method names as keys, and hint strings
                    //		as values. If a hint string is "after", this method will be
                    //		called after methods of its base classes. If a hint string is
                    //		"before", this method will be called before methods of its base
                    //		classes.
                    //
                    //		If "constructor" is not mentioned in "-chains-" property, it will
                    //		be chained using the legacy mode: using "after" chaining,
                    //		calling preamble() method before each constructor, if available,
                    //		and calling postscript() after all constructors were executed.
                    //		If the hint is "after", it is chained as a regular method, but
                    //		postscript() will be called after the chain of constructors.
                    //		"constructor" cannot be chained "before", but it allows
                    //		a special hint string: "manual", which means that constructors
                    //		are not going to be chained in any way, and programmer will call
                    //		them manually using this.inherited(). In the latter case
                    //		postscript() will be called after the construction.
                    //
                    //		All chaining hints are "inherited" from base classes and
                    //		potentially can be overridden. Be very careful when overriding
                    //		hints! Make sure that all chained methods can work in a proposed
                    //		manner of chaining.
                    //
                    //		Once a method was chained, it is impossible to unchain it. The
                    //		only exception is "constructor". You don't need to define a
                    //		method in order to supply a chaining hint.
                    //
                    //		If a method is chained, it cannot use this.inherited() because
                    //		all other methods in the hierarchy will be called automatically.
                    //
                    //		Usually constructors and initializers of any kind are chained
                    //		using "after" and destructors of any kind are chained as
                    //		"before". Note that chaining assumes that chained methods do not
                    //		return any value: any returned value will be discarded.
                    //
                    // example:
                    //	|	declare("my.classes.bar", my.classes.foo, {
                    //	|		// properties to be added to the class prototype
                    //	|		someValue: 2,
                    //	|		// initialization function
                    //	|		constructor: function(){
                    //	|			this.myComplicatedObject = new ReallyComplicatedObject();
                    //	|		},
                    //	|		// other functions
                    //	|		someMethod: function(){
                    //	|			doStuff();
                    //	|		}
                    //	|	});
                    //
                    // example:
                    //	|	var MyBase = declare(null, {
                    //	|		// constructor, properties, and methods go here
                    //	|		// ...
                    //	|	});
                    //	|	var MyClass1 = declare(MyBase, {
                    //	|		// constructor, properties, and methods go here
                    //	|		// ...
                    //	|	});
                    //	|	var MyClass2 = declare(MyBase, {
                    //	|		// constructor, properties, and methods go here
                    //	|		// ...
                    //	|	});
                    //	|	var MyDiamond = declare([MyClass1, MyClass2], {
                    //	|		// constructor, properties, and methods go here
                    //	|		// ...
                    //	|	});
                    //
                    // example:
                    //	|	var F = function(){ console.log("raw constructor"); };
                    //	|	F.prototype.method = function(){
                    //	|		console.log("raw method");
                    //	|	};
                    //	|	var A = declare(F, {
                    //	|		constructor: function(){
                    //	|			console.log("A.constructor");
                    //	|		},
                    //	|		method: function(){
                    //	|			console.log("before calling F.method...");
                    //	|			this.inherited(arguments);
                    //	|			console.log("...back in A");
                    //	|		}
                    //	|	});
                    //	|	new A().method();
                    //	|	// will print:
                    //	|	// raw constructor
                    //	|	// A.constructor
                    //	|	// before calling F.method...
                    //	|	// raw method
                    //	|	// ...back in A
                    //
                    // example:
                    //	|	var A = declare(null, {
                    //	|		"-chains-": {
                    //	|			destroy: "before"
                    //	|		}
                    //	|	});
                    //	|	var B = declare(A, {
                    //	|		constructor: function(){
                    //	|			console.log("B.constructor");
                    //	|		},
                    //	|		destroy: function(){
                    //	|			console.log("B.destroy");
                    //	|		}
                    //	|	});
                    //	|	var C = declare(B, {
                    //	|		constructor: function(){
                    //	|			console.log("C.constructor");
                    //	|		},
                    //	|		destroy: function(){
                    //	|			console.log("C.destroy");
                    //	|		}
                    //	|	});
                    //	|	new C().destroy();
                    //	|	// prints:
                    //	|	// B.constructor
                    //	|	// C.constructor
                    //	|	// C.destroy
                    //	|	// B.destroy
                    //
                    // example:
                    //	|	var A = declare(null, {
                    //	|		"-chains-": {
                    //	|			constructor: "manual"
                    //	|		}
                    //	|	});
                    //	|	var B = declare(A, {
                    //	|		constructor: function(){
                    //	|			// ...
                    //	|			// call the base constructor with new parameters
                    //	|			this.inherited(arguments, [1, 2, 3]);
                    //	|			// ...
                    //	|		}
                    //	|	});
                    //
                    // example:
                    //	|	var A = declare(null, {
                    //	|		"-chains-": {
                    //	|			m1: "before"
                    //	|		},
                    //	|		m1: function(){
                    //	|			console.log("A.m1");
                    //	|		},
                    //	|		m2: function(){
                    //	|			console.log("A.m2");
                    //	|		}
                    //	|	});
                    //	|	var B = declare(A, {
                    //	|		"-chains-": {
                    //	|			m2: "after"
                    //	|		},
                    //	|		m1: function(){
                    //	|			console.log("B.m1");
                    //	|		},
                    //	|		m2: function(){
                    //	|			console.log("B.m2");
                    //	|		}
                    //	|	});
                    //	|	var x = new B();
                    //	|	x.m1();
                    //	|	// prints:
                    //	|	// B.m1
                    //	|	// A.m1
                    //	|	x.m2();
                    //	|	// prints:
                    //	|	// A.m2
                    //	|	// B.m2

                    // crack parameters
                    if (typeof className != "string") {
                        props = superclass;
                        superclass = className;
                        className = "";
                    }
                    props = props || {};

                    var proto, i, t, ctor, name, bases, chains, mixins = 1,
                        parents = superclass;

                    // build a prototype
                    if (opts.call(superclass) == "[object Array]") {
                        // C3 MRO
                        bases = c3mro(superclass, className);
                        t = bases[0];
                        mixins = bases.length - t;
                        superclass = bases[mixins];
                    } else {
                        bases = [0];
                        if (superclass) {
                            if (opts.call(superclass) == "[object Function]") {
                                t = superclass._meta;
                                bases = bases.concat(t ? t.bases : superclass);
                            } else {
                                err("base class is not a callable constructor.", className);
                            }
                        } else if (superclass !== null) {
                            err("unknown base class. Did you use dojo.require to pull it in?", className);
                        }
                    }
                    if (superclass) {
                        for (i = mixins - 1;; --i) {
                            proto = forceNew(superclass);
                            if (!i) {
                                // stop if nothing to add (the last base)
                                break;
                            }
                            // mix in properties
                            t = bases[i];
                            (t._meta ? mixOwn : mix)(proto, t.prototype);
                            // chain in new constructor
                            ctor = new Function;
                            ctor.superclass = superclass;
                            ctor.prototype = proto;
                            superclass = proto.constructor = ctor;
                        }
                    } else {
                        proto = {};
                    }
                    // add all properties
                    declare.safeMixin(proto, props);
                    // add constructor
                    t = props.constructor;
                    if (t !== op.constructor) {
                        t.nom = cname;
                        proto.constructor = t;
                    }

                    // collect chains and flags
                    for (i = mixins - 1; i; --i) { // intentional assignment
                        t = bases[i]._meta;
                        if (t && t.chains) {
                            chains = mix(chains || {}, t.chains);
                        }
                    }
                    if (proto["-chains-"]) {
                        chains = mix(chains || {}, proto["-chains-"]);
                    }

                    // build ctor
                    t = !chains || !chains.hasOwnProperty(cname);
                    bases[0] = ctor = (chains && chains.constructor === "manual") ? simpleConstructor(bases) :
                        (bases.length == 1 ? singleConstructor(props.constructor, t) : chainedConstructor(bases, t));

                    // add meta information to the constructor
                    ctor._meta = {
                        bases: bases,
                        hidden: props,
                        chains: chains,
                        parents: parents,
                        ctor: props.constructor
                    };
                    ctor.superclass = superclass && superclass.prototype;
                    ctor.extend = extend;
                    ctor.createSubclass = createSubclass;
                    ctor.prototype = proto;
                    proto.constructor = ctor;

                    // add "standard" methods to the prototype
                    proto.getInherited = getInherited;
                    proto.isInstanceOf = isInstanceOf;
                    proto.inherited = inheritedImpl;
                    proto.__inherited = inherited;

                    // add name if specified
                    if (className) {
                        proto.declaredClass = className;
                        lang.setObject(className, ctor);
                    }

                    // build chains and add them to the prototype
                    if (chains) {
                        for (name in chains) {
                            if (proto[name] && typeof chains[name] == "string" && name != cname) {
                                t = proto[name] = chain(name, bases, chains[name] === "after");
                                t.nom = name;
                            }
                        }
                    }
                    // chained methods do not return values
                    // no need to chain "invisible" functions

                    return ctor; // Function
                }

                /*=====
                declare.__DeclareCreatedObject = {
                	// summary:
                	//		dojo/_base/declare() returns a constructor `C`.   `new C()` returns an Object with the following
                	//		methods, in addition to the methods and properties specified via the arguments passed to declare().

                	inherited: function(name, args, newArgs){
                		// summary:
                		//		Calls a super method.
                		// name: String?
                		//		The optional method name. Should be the same as the caller's
                		//		name. Usually "name" is specified in complex dynamic cases, when
                		//		the calling method was dynamically added, undecorated by
                		//		declare(), and it cannot be determined.
                		// args: Arguments
                		//		The caller supply this argument, which should be the original
                		//		"arguments".
                		// newArgs: Object?
                		//		If "true", the found function will be returned without
                		//		executing it.
                		//		If Array, it will be used to call a super method. Otherwise
                		//		"args" will be used.
                		// returns:
                		//		Whatever is returned by a super method, or a super method itself,
                		//		if "true" was specified as newArgs.
                		// description:
                		//		This method is used inside method of classes produced with
                		//		declare() to call a super method (next in the chain). It is
                		//		used for manually controlled chaining. Consider using the regular
                		//		chaining, because it is faster. Use "this.inherited()" only in
                		//		complex cases.
                		//
                		//		This method cannot me called from automatically chained
                		//		constructors including the case of a special (legacy)
                		//		constructor chaining. It cannot be called from chained methods.
                		//
                		//		If "this.inherited()" cannot find the next-in-chain method, it
                		//		does nothing and returns "undefined". The last method in chain
                		//		can be a default method implemented in Object, which will be
                		//		called last.
                		//
                		//		If "name" is specified, it is assumed that the method that
                		//		received "args" is the parent method for this call. It is looked
                		//		up in the chain list and if it is found the next-in-chain method
                		//		is called. If it is not found, the first-in-chain method is
                		//		called.
                		//
                		//		If "name" is not specified, it will be derived from the calling
                		//		method (using a methoid property "nom").
                		//
                		// example:
                		//	|	var B = declare(A, {
                		//	|		method1: function(a, b, c){
                		//	|			this.inherited(arguments);
                		//	|		},
                		//	|		method2: function(a, b){
                		//	|			return this.inherited(arguments, [a + b]);
                		//	|		}
                		//	|	});
                		//	|	// next method is not in the chain list because it is added
                		//	|	// manually after the class was created.
                		//	|	B.prototype.method3 = function(){
                		//	|		console.log("This is a dynamically-added method.");
                		//	|		this.inherited("method3", arguments);
                		//	|	};
                		// example:
                		//	|	var B = declare(A, {
                		//	|		method: function(a, b){
                		//	|			var super = this.inherited(arguments, true);
                		//	|			// ...
                		//	|			if(!super){
                		//	|				console.log("there is no super method");
                		//	|				return 0;
                		//	|			}
                		//	|			return super.apply(this, arguments);
                		//	|		}
                		//	|	});
                		return	{};	// Object
                	},

                	getInherited: function(name, args){
                		// summary:
                		//		Returns a super method.
                		// name: String?
                		//		The optional method name. Should be the same as the caller's
                		//		name. Usually "name" is specified in complex dynamic cases, when
                		//		the calling method was dynamically added, undecorated by
                		//		declare(), and it cannot be determined.
                		// args: Arguments
                		//		The caller supply this argument, which should be the original
                		//		"arguments".
                		// returns:
                		//		Returns a super method (Function) or "undefined".
                		// description:
                		//		This method is a convenience method for "this.inherited()".
                		//		It uses the same algorithm but instead of executing a super
                		//		method, it returns it, or "undefined" if not found.
                		//
                		// example:
                		//	|	var B = declare(A, {
                		//	|		method: function(a, b){
                		//	|			var super = this.getInherited(arguments);
                		//	|			// ...
                		//	|			if(!super){
                		//	|				console.log("there is no super method");
                		//	|				return 0;
                		//	|			}
                		//	|			return super.apply(this, arguments);
                		//	|		}
                		//	|	});
                		return	{};	// Object
                	},

                	isInstanceOf: function(cls){
                		// summary:
                		//		Checks the inheritance chain to see if it is inherited from this
                		//		class.
                		// cls: Function
                		//		Class constructor.
                		// returns:
                		//		"true", if this object is inherited from this class, "false"
                		//		otherwise.
                		// description:
                		//		This method is used with instances of classes produced with
                		//		declare() to determine of they support a certain interface or
                		//		not. It models "instanceof" operator.
                		//
                		// example:
                		//	|	var A = declare(null, {
                		//	|		// constructor, properties, and methods go here
                		//	|		// ...
                		//	|	});
                		//	|	var B = declare(null, {
                		//	|		// constructor, properties, and methods go here
                		//	|		// ...
                		//	|	});
                		//	|	var C = declare([A, B], {
                		//	|		// constructor, properties, and methods go here
                		//	|		// ...
                		//	|	});
                		//	|	var D = declare(A, {
                		//	|		// constructor, properties, and methods go here
                		//	|		// ...
                		//	|	});
                		//	|
                		//	|	var a = new A(), b = new B(), c = new C(), d = new D();
                		//	|
                		//	|	console.log(a.isInstanceOf(A)); // true
                		//	|	console.log(b.isInstanceOf(A)); // false
                		//	|	console.log(c.isInstanceOf(A)); // true
                		//	|	console.log(d.isInstanceOf(A)); // true
                		//	|
                		//	|	console.log(a.isInstanceOf(B)); // false
                		//	|	console.log(b.isInstanceOf(B)); // true
                		//	|	console.log(c.isInstanceOf(B)); // true
                		//	|	console.log(d.isInstanceOf(B)); // false
                		//	|
                		//	|	console.log(a.isInstanceOf(C)); // false
                		//	|	console.log(b.isInstanceOf(C)); // false
                		//	|	console.log(c.isInstanceOf(C)); // true
                		//	|	console.log(d.isInstanceOf(C)); // false
                		//	|
                		//	|	console.log(a.isInstanceOf(D)); // false
                		//	|	console.log(b.isInstanceOf(D)); // false
                		//	|	console.log(c.isInstanceOf(D)); // false
                		//	|	console.log(d.isInstanceOf(D)); // true
                		return	{};	// Object
                	},

                	extend: function(source){
                		// summary:
                		//		Adds all properties and methods of source to constructor's
                		//		prototype, making them available to all instances created with
                		//		constructor. This method is specific to constructors created with
                		//		declare().
                		// source: Object
                		//		Source object which properties are going to be copied to the
                		//		constructor's prototype.
                		// description:
                		//		Adds source properties to the constructor's prototype. It can
                		//		override existing properties.
                		//
                		//		This method is similar to dojo.extend function, but it is specific
                		//		to constructors produced by declare(). It is implemented
                		//		using dojo.safeMixin, and it skips a constructor property,
                		//		and properly decorates copied functions.
                		//
                		// example:
                		//	|	var A = declare(null, {
                		//	|		m1: function(){},
                		//	|		s1: "Popokatepetl"
                		//	|	});
                		//	|	A.extend({
                		//	|		m1: function(){},
                		//	|		m2: function(){},
                		//	|		f1: true,
                		//	|		d1: 42
                		//	|	});
                	}
                };
                =====*/

                // For back-compat, remove for 2.0
                dojo.safeMixin = declare.safeMixin = safeMixin;
                dojo.declare = declare;

                return declare;
            });

        },
        'dojox/string/Builder': function() {
            define("dojox/string/Builder", ["dojo/_base/lang"],
                function(lang) {
                    lang.getObject("string", true, dojox).Builder =
                        function( /*String?*/ str) {
                            // summary:
                            //		A fast buffer for creating large strings.

                            //	N.B. the public nature of the internal buffer is no longer
                            //	needed because the IE-specific fork is no longer needed--TRT.
                            var b = "";

                            // length: Number
                            //		The current length of the internal string.
                            this.length = 0;

                            this.append = function( /* String... */ s) {
                                // summary:
                                //		Append all arguments to the end of the buffer
                                if (arguments.length > 1) {
                                    /*
                                    	This is a loop unroll was designed specifically for Firefox;
                                    	it would seem that static index access on an Arguments
                                    	object is a LOT faster than doing dynamic index access.
                                    	Therefore, we create a buffer string and take advantage
                                    	of JS's switch fallthrough.  The peformance of this method
                                    	comes very close to straight up string concatenation (+=).

                                    	If the arguments object length is greater than 9, we fall
                                    	back to standard dynamic access.

                                    	This optimization seems to have no real effect on either
                                    	Safari or Opera, so we just use it for all.

                                    	It turns out also that this loop unroll can increase performance
                                    	significantly with Internet Explorer, particularly when
                                    	as many arguments are provided as possible.

                                    	Loop unroll per suggestion from Kris Zyp, implemented by
                                    	Tom Trenka.

                                    	Note: added empty string to force a string cast if needed.
                                     */
                                    var tmp = "",
                                        l = arguments.length;
                                    switch (l) {
                                        case 9:
                                            tmp = "" + arguments[8] + tmp;
                                        case 8:
                                            tmp = "" + arguments[7] + tmp;
                                        case 7:
                                            tmp = "" + arguments[6] + tmp;
                                        case 6:
                                            tmp = "" + arguments[5] + tmp;
                                        case 5:
                                            tmp = "" + arguments[4] + tmp;
                                        case 4:
                                            tmp = "" + arguments[3] + tmp;
                                        case 3:
                                            tmp = "" + arguments[2] + tmp;
                                        case 2:
                                            {
                                                b += "" + arguments[0] + arguments[1] + tmp;
                                                break;
                                            }
                                        default:
                                            {
                                                var i = 0;
                                                while (i < arguments.length) {
                                                    tmp += arguments[i++];
                                                }
                                                b += tmp;
                                            }
                                    }
                                } else {
                                    b += s;
                                }
                                this.length = b.length;
                                return this; //	dojox.string.Builder
                            };

                            this.concat = function( /*String...*/ s) {
                                // summary:
                                //		Alias for append.
                                return this.append.apply(this, arguments); //	dojox.string.Builder
                            };

                            this.appendArray = function( /*Array*/ strings) {
                                // summary:
                                //		Append an array of items to the internal buffer.

                                //	Changed from String.prototype.concat.apply because of IE.
                                return this.append.apply(this, strings); //	dojox.string.Builder
                            };

                            this.clear = function() {
                                // summary:
                                //		Remove all characters from the buffer.
                                b = "";
                                this.length = 0;
                                return this; //	dojox.string.Builder
                            };

                            this.replace = function( /* String */ oldStr, /* String */ newStr) {
                                // summary:
                                //		Replace instances of one string with another in the buffer.
                                b = b.replace(oldStr, newStr);
                                this.length = b.length;
                                return this; //	dojox.string.Builder
                            };

                            this.remove = function( /* Number */ start, /* Number? */ len) {
                                // summary:
                                //		Remove len characters starting at index start.  If len
                                //		is not provided, the end of the string is assumed.
                                if (len === undefined) {
                                    len = b.length;
                                }
                                if (len == 0) {
                                    return this;
                                }
                                b = b.substr(0, start) + b.substr(start + len);
                                this.length = b.length;
                                return this; //	dojox.string.Builder
                            };

                            this.insert = function( /* Number */ index, /* String */ str) {
                                // summary:
                                //		Insert string str starting at index.
                                if (index == 0) {
                                    b = str + b;
                                } else {
                                    b = b.slice(0, index) + str + b.slice(index);
                                }
                                this.length = b.length;
                                return this; //	dojox.string.Builder
                            };

                            this.toString = function() {
                                // summary:
                                //		Return the string representation of the internal buffer.
                                return b; //	String
                            };

                            //	initialize the buffer.
                            if (str) {
                                this.append(str);
                            }
                        };
                    return dojox.string.Builder;
                });

        },
        'url:dijit/layout/templates/ScrollingTabController.html': "<div class=\"dijitTabListContainer-${tabPosition}\" style=\"visibility:hidden\">\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerMenuButton\"\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\n\t\t\tid=\"${id}_menuBtn\"\n\t\t\tdata-dojo-props=\"containerId: '${containerId}', iconClass: 'dijitTabStripMenuIcon',\n\t\t\t\t\tdropDownPosition: ['below-alt', 'above-alt']\"\n\t\t\tdata-dojo-attach-point=\"_menuBtn\" showLabel=\"false\" title=\"\">&#9660;</div>\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\n\t\t\tid=\"${id}_leftBtn\"\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideLeftIcon', showLabel:false, title:''\"\n\t\t\tdata-dojo-attach-point=\"_leftBtn\" data-dojo-attach-event=\"onClick: doSlideLeft\">&#9664;</div>\n\t<div data-dojo-type=\"dijit.layout._ScrollingTabControllerButton\"\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\n\t\t\tid=\"${id}_rightBtn\"\n\t\t\tdata-dojo-props=\"iconClass:'dijitTabStripSlideRightIcon', showLabel:false, title:''\"\n\t\t\tdata-dojo-attach-point=\"_rightBtn\" data-dojo-attach-event=\"onClick: doSlideRight\">&#9654;</div>\n\t<div class='dijitTabListWrapper' data-dojo-attach-point='tablistWrapper'>\n\t\t<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'\n\t\t\t\tdata-dojo-attach-point='containerNode' class='nowrapTabStrip'></div>\n\t</div>\n</div>",
        'dijit/Dialog': function() {
            require({
                cache: {
                    'url:dijit/templates/Dialog.html': "<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\n\t<div data-dojo-attach-point=\"titleBar\" class=\"dijitDialogTitleBar\">\n\t\t<span data-dojo-attach-point=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"\n\t\t\t\trole=\"header\" level=\"1\"></span>\n\t\t<span data-dojo-attach-point=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" data-dojo-attach-event=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\n\t\t\t<span data-dojo-attach-point=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\n\t\t</span>\n\t</div>\n\t<div data-dojo-attach-point=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\n</div>\n"
                }
            });
            define("dijit/Dialog", [
                "require",
                "dojo/_base/array", // array.forEach array.indexOf array.map
                "dojo/_base/connect", // connect._keypress
                "dojo/_base/declare", // declare
                "dojo/_base/Deferred", // Deferred
                "dojo/dom", // dom.isDescendant
                "dojo/dom-class", // domClass.add domClass.contains
                "dojo/dom-geometry", // domGeometry.position
                "dojo/dom-style", // domStyle.set
                "dojo/_base/event", // event.stop
                "dojo/_base/fx", // fx.fadeIn fx.fadeOut
                "dojo/i18n", // i18n.getLocalization
                "dojo/keys",
                "dojo/_base/lang", // lang.mixin lang.hitch
                "dojo/on",
                "dojo/ready",
                "dojo/sniff", // has("ie") has("opera") has("dijit-legacy-requires")
                "dojo/window", // winUtils.getBox, winUtils.get
                "dojo/dnd/Moveable", // Moveable
                "dojo/dnd/TimedMoveable", // TimedMoveable
                "./focus",
                "./_base/manager", // manager.defaultDuration
                "./_Widget",
                "./_TemplatedMixin",
                "./_CssStateMixin",
                "./form/_FormMixin",
                "./_DialogMixin",
                "./DialogUnderlay",
                "./layout/ContentPane",
                "dojo/text!./templates/Dialog.html",
                "./main", // for back-compat, exporting dijit._underlay (remove in 2.0)
                "dojo/i18n!./nls/common"
            ], function(require, array, connect, declare, Deferred,
                dom, domClass, domGeometry, domStyle, event, fx, i18n, keys, lang, on, ready, has, winUtils,
                Moveable, TimedMoveable, focus, manager, _Widget, _TemplatedMixin, _CssStateMixin, _FormMixin, _DialogMixin,
                DialogUnderlay, ContentPane, template, dijit) {

                // module:
                //		dijit/Dialog

                /*=====
                dijit._underlay = function(kwArgs){
                	// summary:
                	//		A shared instance of a `dijit.DialogUnderlay`
                	//
                	// description:
                	//		A shared instance of a `dijit.DialogUnderlay` created and
                	//		used by `dijit.Dialog`, though never created until some Dialog
                	//		or subclass thereof is shown.
                };
                =====*/

                var _DialogBase = declare("dijit._DialogBase", [_TemplatedMixin, _FormMixin, _DialogMixin, _CssStateMixin], {
                    templateString: template,

                    baseClass: "dijitDialog",

                    cssStateNodes: {
                        closeButtonNode: "dijitDialogCloseIcon"
                    },

                    // Map widget attributes to DOMNode attributes.
                    _setTitleAttr: [{
                            node: "titleNode",
                            type: "innerHTML"
                        },
                        {
                            node: "titleBar",
                            type: "attribute"
                        }
                    ],

                    // open: [readonly] Boolean
                    //		True if Dialog is currently displayed on screen.
                    open: false,

                    // duration: Integer
                    //		The time in milliseconds it takes the dialog to fade in and out
                    duration: manager.defaultDuration,

                    // refocus: Boolean
                    //		A Toggle to modify the default focus behavior of a Dialog, which
                    //		is to re-focus the element which had focus before being opened.
                    //		False will disable refocusing. Default: true
                    refocus: true,

                    // autofocus: Boolean
                    //		A Toggle to modify the default focus behavior of a Dialog, which
                    //		is to focus on the first dialog element after opening the dialog.
                    //		False will disable autofocusing. Default: true
                    autofocus: true,

                    // _firstFocusItem: [private readonly] DomNode
                    //		The pointer to the first focusable node in the dialog.
                    //		Set by `dijit/_DialogMixin._getFocusItems()`.
                    _firstFocusItem: null,

                    // _lastFocusItem: [private readonly] DomNode
                    //		The pointer to which node has focus prior to our dialog.
                    //		Set by `dijit/_DialogMixin._getFocusItems()`.
                    _lastFocusItem: null,

                    // doLayout: [protected] Boolean
                    //		Don't change this parameter from the default value.
                    //		This ContentPane parameter doesn't make sense for Dialog, since Dialog
                    //		is never a child of a layout container, nor can you specify the size of
                    //		Dialog in order to control the size of an inner widget.
                    doLayout: false,

                    // draggable: Boolean
                    //		Toggles the moveable aspect of the Dialog. If true, Dialog
                    //		can be dragged by it's title. If false it will remain centered
                    //		in the viewport.
                    draggable: true,

                    _setDraggableAttr: function( /*Boolean*/ val) {
                        // Avoid _WidgetBase behavior of copying draggable attribute to this.domNode,
                        // as that prevents text select on modern browsers (#14452)
                        this._set("draggable", val);
                    },

                    // aria-describedby: String
                    //		Allows the user to add an aria-describedby attribute onto the dialog.   The value should
                    //		be the id of the container element of text that describes the dialog purpose (usually
                    //		the first text in the dialog).
                    //	|	<div data-dojo-type="dijit/Dialog" aria-describedby="intro" .....>
                    //	|		<div id="intro">Introductory text</div>
                    //	|		<div>rest of dialog contents</div>
                    //	|	</div>
                    "aria-describedby": "",

                    // maxRatio: Number
                    //		Maximum size to allow the dialog to expand to, relative to viewport size
                    maxRatio: 0.9,

                    postMixInProperties: function() {
                        var _nlsResources = i18n.getLocalization("dijit", "common");
                        lang.mixin(this, _nlsResources);
                        this.inherited(arguments);
                    },

                    postCreate: function() {
                        domStyle.set(this.domNode, {
                            display: "none",
                            position: "absolute"
                        });
                        this.ownerDocumentBody.appendChild(this.domNode);

                        this.inherited(arguments);

                        this.connect(this, "onExecute", "hide");
                        this.connect(this, "onCancel", "hide");
                        this._modalconnects = [];
                    },

                    onLoad: function() {
                        // summary:
                        //		Called when data has been loaded from an href.
                        //		Unlike most other callbacks, this function can be connected to (via `dojo.connect`)
                        //		but should *not* be overridden.
                        // tags:
                        //		callback

                        // when href is specified we need to reposition the dialog after the data is loaded
                        // and find the focusable elements
                        this._position();
                        if (this.autofocus && DialogLevelManager.isTop(this)) {
                            this._getFocusItems(this.domNode);
                            focus.focus(this._firstFocusItem);
                        }
                        this.inherited(arguments);
                    },

                    _endDrag: function() {
                        // summary:
                        //		Called after dragging the Dialog. Saves the position of the dialog in the viewport,
                        //		and also adjust position to be fully within the viewport, so user doesn't lose access to handle
                        var nodePosition = domGeometry.position(this.domNode),
                            viewport = winUtils.getBox(this.ownerDocument);
                        nodePosition.y = Math.min(Math.max(nodePosition.y, 0), (viewport.h - nodePosition.h));
                        nodePosition.x = Math.min(Math.max(nodePosition.x, 0), (viewport.w - nodePosition.w));
                        this._relativePosition = nodePosition;
                        this._position();
                    },

                    _setup: function() {
                        // summary:
                        //		Stuff we need to do before showing the Dialog for the first
                        //		time (but we defer it until right beforehand, for
                        //		performance reasons).
                        // tags:
                        //		private

                        var node = this.domNode;

                        if (this.titleBar && this.draggable) {
                            this._moveable = new((has("ie") == 6) ? TimedMoveable // prevent overload, see #5285
                                :
                                Moveable)(node, {
                                handle: this.titleBar
                            });
                            this.connect(this._moveable, "onMoveStop", "_endDrag");
                        } else {
                            domClass.add(node, "dijitDialogFixed");
                        }

                        this.underlayAttrs = {
                            dialogId: this.id,
                            "class": array.map(this["class"].split(/\s/), function(s) {
                                return s + "_underlay";
                            }).join(" "),
                            ownerDocument: this.ownerDocument
                        };
                    },

                    _size: function() {
                        // summary:
                        //		If necessary, shrink dialog contents so dialog fits in viewport
                        // tags:
                        //		private

                        this._checkIfSingleChild();

                        // If we resized the dialog contents earlier, reset them back to original size, so
                        // that if the user later increases the viewport size, the dialog can display w/out a scrollbar.
                        // Need to do this before the domGeometry.position(this.domNode) call below.
                        if (this._singleChild) {
                            if (typeof this._singleChildOriginalStyle != "undefined") {
                                this._singleChild.domNode.style.cssText = this._singleChildOriginalStyle;
                                delete this._singleChildOriginalStyle;
                            }
                        } else {
                            domStyle.set(this.containerNode, {
                                width: "auto",
                                height: "auto"
                            });
                        }

                        var bb = domGeometry.position(this.domNode);

                        // Get viewport size but then reduce it by a bit; Dialog should always have some space around it
                        // to indicate that it's a popup.   This will also compensate for possible scrollbars on viewport.
                        var viewport = winUtils.getBox(this.ownerDocument);
                        viewport.w *= this.maxRatio;
                        viewport.h *= this.maxRatio;

                        if (bb.w >= viewport.w || bb.h >= viewport.h) {
                            // Reduce size of dialog contents so that dialog fits in viewport

                            var containerSize = domGeometry.position(this.containerNode),
                                w = Math.min(bb.w, viewport.w) - (bb.w - containerSize.w),
                                h = Math.min(bb.h, viewport.h) - (bb.h - containerSize.h);

                            if (this._singleChild && this._singleChild.resize) {
                                if (typeof this._singleChildOriginalStyle == "undefined") {
                                    this._singleChildOriginalStyle = this._singleChild.domNode.style.cssText;
                                }
                                this._singleChild.resize({
                                    w: w,
                                    h: h
                                });
                            } else {
                                domStyle.set(this.containerNode, {
                                    width: w + "px",
                                    height: h + "px",
                                    overflow: "auto",
                                    position: "relative" // workaround IE bug moving scrollbar or dragging dialog
                                });
                            }
                        } else {
                            if (this._singleChild && this._singleChild.resize) {
                                this._singleChild.resize();
                            }
                        }
                    },

                    _position: function() {
                        // summary:
                        //		Position modal dialog in the viewport. If no relative offset
                        //		in the viewport has been determined (by dragging, for instance),
                        //		center the node. Otherwise, use the Dialog's stored relative offset,
                        //		and position the node to top: left: values based on the viewport.
                        if (!domClass.contains(this.ownerDocumentBody, "dojoMove")) { // don't do anything if called during auto-scroll
                            var node = this.domNode,
                                viewport = winUtils.getBox(this.ownerDocument),
                                p = this._relativePosition,
                                bb = p ? null : domGeometry.position(node),
                                l = Math.floor(viewport.l + (p ? p.x : (viewport.w - bb.w) / 2)),
                                t = Math.floor(viewport.t + (p ? p.y : (viewport.h - bb.h) / 2));
                            domStyle.set(node, {
                                left: l + "px",
                                top: t + "px"
                            });
                        }
                    },

                    _onKey: function( /*Event*/ evt) {
                        // summary:
                        //		Handles the keyboard events for accessibility reasons
                        // tags:
                        //		private

                        if (evt.charOrCode) {
                            var node = evt.target;
                            if (evt.charOrCode === keys.TAB) {
                                this._getFocusItems(this.domNode);
                            }
                            var singleFocusItem = (this._firstFocusItem == this._lastFocusItem);
                            // see if we are shift-tabbing from first focusable item on dialog
                            if (node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === keys.TAB) {
                                if (!singleFocusItem) {
                                    focus.focus(this._lastFocusItem); // send focus to last item in dialog
                                }
                                event.stop(evt);
                            } else if (node == this._lastFocusItem && evt.charOrCode === keys.TAB && !evt.shiftKey) {
                                if (!singleFocusItem) {
                                    focus.focus(this._firstFocusItem); // send focus to first item in dialog
                                }
                                event.stop(evt);
                            } else {
                                // see if the key is for the dialog
                                while (node) {
                                    if (node == this.domNode || domClass.contains(node, "dijitPopup")) {
                                        if (evt.charOrCode == keys.ESCAPE) {
                                            this.onCancel();
                                        } else {
                                            return; // just let it go
                                        }
                                    }
                                    node = node.parentNode;
                                }
                                // this key is for the disabled document window
                                if (evt.charOrCode !== keys.TAB) { // allow tabbing into the dialog for a11y
                                    event.stop(evt);
                                    // opera won't tab to a div
                                } else if (!has("opera")) {
                                    try {
                                        this._firstFocusItem.focus();
                                    } catch (e) { /*squelch*/ }
                                }
                            }
                        }
                    },

                    show: function() {
                        // summary:
                        //		Display the dialog
                        // returns: dojo/_base/Deferred
                        //		Deferred object that resolves when the display animation is complete

                        if (this.open) {
                            return;
                        }

                        if (!this._started) {
                            this.startup();
                        }

                        // first time we show the dialog, there's some initialization stuff to do
                        if (!this._alreadyInitialized) {
                            this._setup();
                            this._alreadyInitialized = true;
                        }

                        if (this._fadeOutDeferred) {
                            this._fadeOutDeferred.cancel();
                        }

                        // Recenter Dialog if user scrolls browser.  Connecting to document doesn't work on IE, need to use window.
                        var win = winUtils.get(this.ownerDocument);
                        this._modalconnects.push(on(win, "scroll", lang.hitch(this, "resize")));

                        this._modalconnects.push(on(this.domNode, connect._keypress, lang.hitch(this, "_onKey")));

                        domStyle.set(this.domNode, {
                            opacity: 0,
                            display: ""
                        });

                        this._set("open", true);
                        this._onShow(); // lazy load trigger

                        this._size();
                        this._position();

                        // fade-in Animation object, setup below
                        var fadeIn;

                        this._fadeInDeferred = new Deferred(lang.hitch(this, function() {
                            fadeIn.stop();
                            delete this._fadeInDeferred;
                        }));

                        fadeIn = fx.fadeIn({
                            node: this.domNode,
                            duration: this.duration,
                            beforeBegin: lang.hitch(this, function() {
                                DialogLevelManager.show(this, this.underlayAttrs);
                            }),
                            onEnd: lang.hitch(this, function() {
                                if (this.autofocus && DialogLevelManager.isTop(this)) {
                                    // find focusable items each time dialog is shown since if dialog contains a widget the
                                    // first focusable items can change
                                    this._getFocusItems(this.domNode);
                                    focus.focus(this._firstFocusItem);
                                }
                                this._fadeInDeferred.resolve(true);
                                delete this._fadeInDeferred;
                            })
                        }).play();

                        return this._fadeInDeferred;
                    },

                    hide: function() {
                        // summary:
                        //		Hide the dialog
                        // returns: dojo/_base/Deferred
                        //		Deferred object that resolves when the hide animation is complete

                        // If we haven't been initialized yet then we aren't showing and we can just return.
                        // Likewise if we are already hidden, or are currently fading out.
                        if (!this._alreadyInitialized || !this.open) {
                            return;
                        }
                        if (this._fadeInDeferred) {
                            this._fadeInDeferred.cancel();
                        }

                        // fade-in Animation object, setup below
                        var fadeOut;

                        this._fadeOutDeferred = new Deferred(lang.hitch(this, function() {
                            fadeOut.stop();
                            delete this._fadeOutDeferred;
                        }));
                        // fire onHide when the promise resolves.
                        this._fadeOutDeferred.then(lang.hitch(this, 'onHide'));

                        fadeOut = fx.fadeOut({
                            node: this.domNode,
                            duration: this.duration,
                            onEnd: lang.hitch(this, function() {
                                this.domNode.style.display = "none";
                                DialogLevelManager.hide(this);
                                this._fadeOutDeferred.resolve(true);
                                delete this._fadeOutDeferred;
                            })
                        }).play();

                        if (this._scrollConnected) {
                            this._scrollConnected = false;
                        }
                        var h;
                        while (h = this._modalconnects.pop()) {
                            h.remove();
                        }

                        if (this._relativePosition) {
                            delete this._relativePosition;
                        }
                        this._set("open", false);

                        return this._fadeOutDeferred;
                    },

                    resize: function() {
                        // summary:
                        //		Called when viewport scrolled or size changed.  Position the Dialog and the underlay.
                        // tags:
                        //		private
                        if (this.domNode.style.display != "none") {
                            if (DialogUnderlay._singleton) { // avoid race condition during show()
                                DialogUnderlay._singleton.layout();
                            }
                            this._position();
                            this._size();
                        }
                    },

                    destroy: function() {
                        if (this._fadeInDeferred) {
                            this._fadeInDeferred.cancel();
                        }
                        if (this._fadeOutDeferred) {
                            this._fadeOutDeferred.cancel();
                        }
                        if (this._moveable) {
                            this._moveable.destroy();
                        }
                        var h;
                        while (h = this._modalconnects.pop()) {
                            h.remove();
                        }

                        DialogLevelManager.hide(this);

                        this.inherited(arguments);
                    }
                });

                var Dialog = declare("dijit.Dialog", [ContentPane, _DialogBase], {
                    // summary:
                    //		A modal dialog Widget.
                    // description:
                    //		Pops up a modal dialog window, blocking access to the screen
                    //		and also graying out the screen Dialog is extended from
                    //		ContentPane so it supports all the same parameters (href, etc.).
                    // example:
                    // |	<div data-dojo-type="dijit/Dialog" data-dojo-props="href: 'test.html'"></div>
                    // example:
                    // |	var foo = new Dialog({ title: "test dialog", content: "test content" };
                    // |	foo.placeAt(win.body());
                    // |	foo.startup();
                });
                Dialog._DialogBase = _DialogBase; // for monkey patching and dojox/widget/DialogSimple

                var DialogLevelManager = Dialog._DialogLevelManager = {
                    // summary:
                    //		Controls the various active "levels" on the page, starting with the
                    //		stuff initially visible on the page (at z-index 0), and then having an entry for
                    //		each Dialog shown.

                    _beginZIndex: 950,

                    show: function( /*dijit/_WidgetBase*/ dialog, /*Object*/ underlayAttrs) {
                        // summary:
                        //		Call right before fade-in animation for new dialog.
                        //		Saves current focus, displays/adjusts underlay for new dialog,
                        //		and sets the z-index of the dialog itself.
                        //
                        //		New dialog will be displayed on top of all currently displayed dialogs.
                        //
                        //		Caller is responsible for setting focus in new dialog after the fade-in
                        //		animation completes.

                        // Save current focus
                        ds[ds.length - 1].focus = focus.curNode;

                        // Display the underlay, or if already displayed then adjust for this new dialog
                        // TODO: one underlay per document (based on dialog.ownerDocument)
                        var underlay = DialogUnderlay._singleton;
                        if (!underlay || underlay._destroyed) {
                            underlay = dijit._underlay = DialogUnderlay._singleton = new DialogUnderlay(underlayAttrs);
                        } else {
                            underlay.set(dialog.underlayAttrs);
                        }

                        // Set z-index a bit above previous dialog
                        var zIndex = ds[ds.length - 1].dialog ? ds[ds.length - 1].zIndex + 2 : Dialog._DialogLevelManager._beginZIndex;
                        if (ds.length == 1) { // first dialog
                            underlay.show();
                        }
                        domStyle.set(DialogUnderlay._singleton.domNode, 'zIndex', zIndex - 1);

                        // Dialog
                        domStyle.set(dialog.domNode, 'zIndex', zIndex);

                        ds.push({
                            dialog: dialog,
                            underlayAttrs: underlayAttrs,
                            zIndex: zIndex
                        });
                    },

                    hide: function( /*dijit/_WidgetBase*/ dialog) {
                        // summary:
                        //		Called when the specified dialog is hidden/destroyed, after the fade-out
                        //		animation ends, in order to reset page focus, fix the underlay, etc.
                        //		If the specified dialog isn't open then does nothing.
                        //
                        //		Caller is responsible for either setting display:none on the dialog domNode,
                        //		or calling dijit/popup.hide(), or removing it from the page DOM.

                        if (ds[ds.length - 1].dialog == dialog) {
                            // Removing the top (or only) dialog in the stack, return focus
                            // to previous dialog

                            ds.pop();

                            var pd = ds[ds.length - 1]; // the new active dialog (or the base page itself)

                            // Adjust underlay, unless the underlay widget has already been destroyed
                            // because we are being called during page unload (when all widgets are destroyed)
                            if (!DialogUnderlay._singleton._destroyed) {
                                if (ds.length == 1) {
                                    // Returning to original page.  Hide the underlay.
                                    DialogUnderlay._singleton.hide();
                                } else {
                                    // Popping back to previous dialog, adjust underlay.
                                    domStyle.set(DialogUnderlay._singleton.domNode, 'zIndex', pd.zIndex - 1);
                                    DialogUnderlay._singleton.set(pd.underlayAttrs);
                                }
                            }

                            // Adjust focus
                            if (dialog.refocus) {
                                // If we are returning control to a previous dialog but for some reason
                                // that dialog didn't have a focused field, set focus to first focusable item.
                                // This situation could happen if two dialogs appeared at nearly the same time,
                                // since a dialog doesn't set it's focus until the fade-in is finished.
                                var focus = pd.focus;
                                if (pd.dialog && (!focus || !dom.isDescendant(focus, pd.dialog.domNode))) {
                                    pd.dialog._getFocusItems(pd.dialog.domNode);
                                    focus = pd.dialog._firstFocusItem;
                                }

                                if (focus) {
                                    // Refocus the button that spawned the Dialog.   This will fail in corner cases including
                                    // page unload on IE, because the dijit/form/Button that launched the Dialog may get destroyed
                                    // before this code runs.  (#15058)
                                    try {
                                        focus.focus();
                                    } catch (e) {}
                                }
                            }
                        } else {
                            // Removing a dialog out of order (#9944, #10705).
                            // Don't need to mess with underlay or z-index or anything.
                            var idx = array.indexOf(array.map(ds, function(elem) {
                                return elem.dialog
                            }), dialog);
                            if (idx != -1) {
                                ds.splice(idx, 1);
                            }
                        }
                    },

                    isTop: function( /*dijit/_WidgetBase*/ dialog) {
                        // summary:
                        //		Returns true if specified Dialog is the top in the task
                        return ds[ds.length - 1].dialog == dialog;
                    }
                };

                // Stack representing the various active "levels" on the page, starting with the
                // stuff initially visible on the page (at z-index 0), and then having an entry for
                // each Dialog shown.
                // Each element in stack has form {
                //		dialog: dialogWidget,
                //		focus: returnFromGetFocus(),
                //		underlayAttrs: attributes to set on underlay (when this widget is active)
                // }
                var ds = Dialog._dialogStack = [{
                        dialog: null,
                        focus: null,
                        underlayAttrs: null
                    } // entry for stuff at z-index: 0
                ];

                // Back compat w/1.6, remove for 2.0
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/TooltipDialog"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                return Dialog;
            });

        },
        'hsbcwidget/cssLoader': function() {
            define([
                'dojo/query',
                'dojo/dom',
                'dojo/dom-prop',
                'dojo/dom-attr',
                'dojo/dom-construct',
                'dojo/_base/connect',
                'dojo/has',
                'dojo/_base/sniff'
            ], function(query, dom, domProp, domAttr, domConstruct, connect, has) {
                var fileList = [],
                    ieLinkLimit = 30;

                var fncs = {

                    /**
                     * @Public Function - Gather the css files that currently exist on the page
                     * @param callback - {function} - Function to be called once the gathering has been completed
                     */
                    gatherFileList: function(callback) {
                        var $files = query('head link[rel="stylesheet"], head style[data-css-href]');
                        $files.forEach(function($node) {
                            fileList.push({
                                $file: $node,
                                priority: domAttr.get($node, 'data-css-priority') ? domAttr.get($node, 'data-css-priority') : domAttr.get(domAttr.set($node, 'data-css-priority', 1), 'data-css-priority'),
                                link: $node.tagName === 'LINK' ? domProp.get($node, 'href') ? domProp.get($node, 'href') : null : domAttr.get($node, 'data-css-href') ? domAttr.get($node, 'data-css-href') : null
                            })
                        });
                        if (typeof callback === 'function') {
                            callback(fileList);
                        }
                    },

                    /**
                     * @Public Function - Return current css file list
                     * @Return {Array of object Objects} - Css file(s) on the page
                     */
                    getFileList: function() {
                        return fileList;
                    },

                    /**
                     * @Public Function - Remove css file(s) from page
                     * @param files {Array, String, HTML Element or array of any of the former} - css resources to be removed from the page
                     * @param callback {Function} - Executes after removal of css resources.
                     */
                    remove: function(files, callback) {
                        if (Object.prototype.toString.call(files) === '[object Array]') {
                            var numRemoved = 0;
                            for (var i = 0, len = files.length; i < len; i++) {
                                fncs._removeSingle(files[i], function(success) {
                                    numRemoved++;
                                    if (numRemoved === len) {
                                        if (typeof callback === 'function') {
                                            callback(success);
                                        }
                                    }
                                });
                            }
                        } else {
                            fncs._removeSingle(files, function(success) {
                                callback(success);
                            });
                        }

                    },

                    /**
                     * @Public Function - Checks to see if a css resource already exists on the page
                     * @param file {object Object} -
                     * @return {Int or Bool} Index position of loaded css file or false if not loaded.
                     */
                    checkLoaded: function(file) {
                        for (var i = 0, len = fileList.length; i < len; i++) {
                            if (file.link === fileList[i].link) {
                                return i;
                            }
                        }
                        return false;
                    },

                    /**
                     * @Public Function - Adds css file(s) to the head of the page
                     * @param files {object Object or Array of Objects} - the css file(s) details
                     * @param force {Bool} - if true adds the file(s) to the head of the page even if it already exists
                     * @param callback {Function} - Function to execute after the file(s) have been added to the page and loaded
                     */
                    add: function(files, force, callback) {
                        if (Object.prototype.toString.call(files) === '[object Array]') {
                            var numAdded = 0,
                                cssArr = [];

                            for (var i = 0, len = files.length; i < len; i++) {
                                cssArr.push(
                                    fncs._addSingle(files[i], force, function(css) {
                                        numAdded++;
                                        if (numAdded === len) {
                                            if (typeof callback === 'function') {
                                                callback(cssArr);
                                            }
                                        }
                                    })
                                );
                            }
                        } else if (Object.prototype.toString.call(files) === '[object Object]') {
                            fncs._addSingle(files, force, function(css) {
                                if (typeof callback === 'function') {
                                    callback(css);
                                }
                            });
                        } else {
                            throw new Error('dijit.cssLoader. first param of add(files, force, callback) must be an object or array of objects.');
                        }
                    },

                    /**
                     * @private Function - remove a single css file.
                     * @param file {object Object} - the file to be removed
                     * @param callback {Function} - Function to be executed after the file has been removed
                     * @return {Boolean} - successfully added or not
                     */
                    _removeSingle: function(file, callback) {
                        var link = null;
                        if (typeof file === 'string') {
                            link = file;
                        } else if (Object.prototype.toString.call(file) === '[object HTMLLinkElement]') {
                            link = domAttr.get(file, 'href');
                        } else if (Object.prototype.toString.call(file) === '[object HTMLStyleElement]') {
                            link = domAttr.get(file, 'data-css-href');
                        } else if (Object.prototype.toString.call(file) === '[object Object]' && file.link) {
                            link = file.link;
                        } else {
                            throw new Error('dijit.cssLoader. first param of remove(files, callback) must be an object, HTMLLinkElement, String or array of any of the former.');
                        }

                        fncs.checkLoaded({
                            link: link
                        });
                        var pos = null;
                        for (var i = 0, len = fileList.length; i < len; i++) {
                            if (fileList[i].link === link) {
                                pos = i;
                            }
                        }

                        if (pos >= 0 && pos !== null) {
                            domConstruct.destroy(fileList[pos].$file)
                            fileList.splice(pos, 1);
                            return true;
                        } else {
                            return false;
                        }
                    },

                    /**
                     * @private Function to add a single file
                     * @param file {object Object} - the file to be added
                     * @param force {Bool} - if true adds the file(s) to the head of the page even if it already exists
                     * @param callback {Function} - Function to be executed after the file has been removed
                     */
                    _addSingle: function(file, force, callback) {
                        if (!file.$file && file.link) {
                            if (!file.priority) {
                                file.priority = 1;
                            }
                            if (!file.media) {
                                file.media = 'screen';
                            }
                            //create node and set attributes
                            if (has('ie') <= 9 && fileList.length >= ieLinkLimit) {
                                file.$file = domConstruct.create('style');
                                domAttr.set(file.$file, 'data-css-priority', file.priority);
                                domAttr.set(file.$file, 'data-css-href', file.link);
                            } else {
                                file.$file = domConstruct.create('link');
                                domProp.set(file.$file, 'media', file.media);
                                domProp.set(file.$file, 'type', 'text/css');
                                domProp.set(file.$file, 'href', file.link);
                                domProp.set(file.$file, 'rel', 'stylesheet');
                                domAttr.set(file.$file, 'data-css-priority', file.priority);
                            }
                        } else if (file.$file && !file.link) {
                            //gather properties
                            file.link = file.tagName === 'LINK' ? domAttr.get(file, 'href') : domAttr.get(file, 'data-css-href');
                            file.priority = domAttr.get(file.$file, 'data-css-priority');
                            file.media = domAttr.get(file.$file, 'media');

                            //set priority
                            if (!file.priority) {
                                file.priority = 1;
                            }

                            //check required attributes
                            if (!file.media || !file.link) {
                                throw new Error('dijit.cssLoader. src and/or media not set.');
                            }
                        } else {
                            throw new Error('dijit.cssLoader. $file or link and media must be specified when adding a new css file.');
                        }
                        //work around for IE limit on number of link elements allowed
                        if (has('ie') <= 9 && fileList.length >= ieLinkLimit) {
                            require(['dojo/_base/xhr', 'dojo/html'], function(xhr, html) {
                                xhr.get({
                                    url: file.link,
                                    load: function(result) {
                                        html.set(file.$file, result);
                                        if (fncs._addDomNode(file, force)) {
                                            if (typeof callback === 'function') {
                                                callback(file);
                                            }
                                        }
                                    },
                                    error: function(msg) {
                                        throw new Error('dijit.cssLoader. Ajax request for css file failed. ' + msg);
                                    }
                                })
                            });
                        } else {
                            if (fncs._addDomNode(file, force)) {
                                connect.connect(file.$file, 'onload', function(e) {
                                    if (typeof callback === 'function') {
                                        callback(file);
                                    }
                                });
                            }
                        }
                        return file;

                    },

                    /**
                     * @private Function to add the DOM node for a new link or style tag
                     * @param file {object Object} - css file to be added
                     * @param force {Boolean} - if the addition should be forced in
                     * @return {Boolean} - True if successful, false otherwise
                     */
                    _addDomNode: function(file, force) {
                        if (!fncs.checkLoaded(file) || force) {
                            var pos = fncs._findPos(file);
                            fileList.splice(pos, 0, file);
                            if (pos) {
                                domConstruct.place(file.$file, fileList[pos - 1].$file, 'after');
                            } else {
                                domConstruct.place(file.$file, query('head')[0], 'last');
                            }
                            return true;
                        }
                        return false;
                    },

                    /**
                     * @private Function to find the position the css file to be added needs to be placed in.
                     * @param file {object Object} - File to check the position for
                     * @return {Int} - the position for the file to be placed in
                     */
                    _findPos: function(file) {
                        var pos = 0;
                        for (var i = 0, len = fileList.length; i < len; i++) {
                            if (fileList[i].priority <= file.priority) {
                                pos = i;
                            }
                        }
                        return pos === 0 ? 0 : pos + 1;
                    }
                }

                fncs.gatherFileList();
                return fncs;
            });
        },
        'dijit/form/_DateTimeTextBox': function() {
            require({
                cache: {
                    'url:dijit/form/templates/DropDownBox.html': "<div class=\"dijit dijitReset dijitInline dijitLeft\"\n\tid=\"widget_${id}\"\n\trole=\"combobox\"\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\n\t\tdata-dojo-attach-point=\"_buttonNode, _popupStateNode\" role=\"presentation\"\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t${_buttonInputDisabled}\n\t/></div\n\t><div class='dijitReset dijitValidationContainer'\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t/></div\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\n\t\t\tdata-dojo-attach-point=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\n\t/></div\n></div>\n"
                }
            });
            define("dijit/form/_DateTimeTextBox", [
                "dojo/date", // date date.compare
                "dojo/date/locale", // locale.regexp
                "dojo/date/stamp", // stamp.fromISOString stamp.toISOString
                "dojo/_base/declare", // declare
                "dojo/_base/lang", // lang.getObject
                "./RangeBoundTextBox",
                "../_HasDropDown",
                "dojo/text!./templates/DropDownBox.html"
            ], function(date, locale, stamp, declare, lang, RangeBoundTextBox, _HasDropDown, template) {

                // module:
                //		dijit/form/_DateTimeTextBox

                new Date("X"); // workaround for #11279, new Date("") == NaN

                var _DateTimeTextBox = declare("dijit.form._DateTimeTextBox", [RangeBoundTextBox, _HasDropDown], {
                    // summary:
                    //		Base class for validating, serializable, range-bound date or time text box.

                    templateString: template,

                    // hasDownArrow: [const] Boolean
                    //		Set this textbox to display a down arrow button, to open the drop down list.
                    hasDownArrow: true,

                    // Set classes like dijitDownArrowButtonHover depending on mouse action over button node
                    cssStateNodes: {
                        "_buttonNode": "dijitDownArrowButton"
                    },

                    /*=====
                    // constraints: _DateTimeTextBox.__Constraints
                    //		Despite the name, this parameter specifies both constraints on the input
                    //		(including starting/ending dates/times allowed) as well as
                    //		formatting options like whether the date is displayed in long (ex: December 25, 2005)
                    //		or short (ex: 12/25/2005) format.  See `dijit/form/_DateTimeTextBox.__Constraints` for details.
                    constraints: {},
                    ======*/

                    // Override ValidationTextBox.pattern.... we use a reg-ex generating function rather
                    // than a straight regexp to deal with locale  (plus formatting options too?)
                    pattern: locale.regexp,

                    // datePackage: String
                    //		JavaScript namespace to find calendar routines.	 If unspecified, uses Gregorian calendar routines
                    //		at dojo/date and dojo/date/locale.
                    datePackage: "",
                    //		TODO: for 2.0, replace datePackage with dateModule and dateLocalModule attributes specifying MIDs,
                    //		or alternately just get rid of this completely and tell user to use module ID remapping
                    //		via require

                    postMixInProperties: function() {
                        this.inherited(arguments);
                        this._set("type", "text"); // in case type="date"|"time" was specified which messes up parse/format
                    },

                    // Override _FormWidget.compare() to work for dates/times
                    compare: function( /*Date*/ val1, /*Date*/ val2) {
                        var isInvalid1 = this._isInvalidDate(val1);
                        var isInvalid2 = this._isInvalidDate(val2);
                        return isInvalid1 ? (isInvalid2 ? 0 : -1) : (isInvalid2 ? 1 : date.compare(val1, val2, this._selector));
                    },

                    // flag to _HasDropDown to make drop down Calendar width == <input> width
                    forceWidth: true,

                    format: function( /*Date*/ value, /*locale.__FormatOptions*/ constraints) {
                        // summary:
                        //		Formats the value as a Date, according to specified locale (second argument)
                        // tags:
                        //		protected
                        if (!value) {
                            return '';
                        }
                        return this.dateLocaleModule.format(value, constraints);
                    },

                    "parse": function( /*String*/ value, /*locale.__FormatOptions*/ constraints) {
                        // summary:
                        //		Parses as string as a Date, according to constraints
                        // tags:
                        //		protected

                        return this.dateLocaleModule.parse(value, constraints) || (this._isEmpty(value) ? null : undefined); // Date
                    },

                    // Overrides ValidationTextBox.serialize() to serialize a date in canonical ISO format.
                    serialize: function( /*anything*/ val, /*Object?*/ options) {
                        if (val.toGregorian) {
                            val = val.toGregorian();
                        }
                        return stamp.toISOString(val, options);
                    },

                    // dropDownDefaultValue: Date
                    //		The default value to focus in the popupClass widget when the textbox value is empty.
                    dropDownDefaultValue: new Date(),

                    // value: Date
                    //		The value of this widget as a JavaScript Date object.  Use get("value") / set("value", val) to manipulate.
                    //		When passed to the parser in markup, must be specified according to `dojo/date/stamp.fromISOString()`
                    value: new Date(""), // value.toString()="NaN"

                    _blankValue: null, // used by filter() when the textbox is blank

                    // popupClass: [protected extension] String
                    //		Name of the popup widget class used to select a date/time.
                    //		Subclasses should specify this.
                    popupClass: "", // default is no popup = text only


                    // _selector: [protected extension] String
                    //		Specifies constraints.selector passed to dojo.date functions, should be either
                    //		"date" or "time".
                    //		Subclass must specify this.
                    _selector: "",

                    constructor: function(params /*===== , srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree

                        this.dateModule = params.datePackage ? lang.getObject(params.datePackage, false) : date;
                        this.dateClassObj = this.dateModule.Date || Date;
                        this.dateLocaleModule = params.datePackage ? lang.getObject(params.datePackage + ".locale", false) : locale;
                        this._set('pattern', this.dateLocaleModule.regexp);
                        this._invalidDate = this.constructor.prototype.value.toString();
                    },

                    buildRendering: function() {
                        this.inherited(arguments);

                        if (!this.hasDownArrow) {
                            this._buttonNode.style.display = "none";
                        }

                        // If hasDownArrow is false, we basically just want to treat the whole widget as the
                        // button.
                        if (!this.hasDownArrow) {
                            this._buttonNode = this.domNode;
                            this.baseClass += " dijitComboBoxOpenOnClick";
                        }
                    },

                    _setConstraintsAttr: function( /*Object*/ constraints) {
                        constraints.selector = this._selector;
                        constraints.fullYear = true; // see #5465 - always format with 4-digit years
                        var fromISO = stamp.fromISOString;
                        if (typeof constraints.min == "string") {
                            constraints.min = fromISO(constraints.min);
                        }
                        if (typeof constraints.max == "string") {
                            constraints.max = fromISO(constraints.max);
                        }
                        this.inherited(arguments);
                    },

                    _isInvalidDate: function( /*Date*/ value) {
                        // summary:
                        //		Runs various tests on the value, checking for invalid conditions
                        // tags:
                        //		private
                        return !value || isNaN(value) || typeof value != "object" || value.toString() == this._invalidDate;
                    },

                    _setValueAttr: function( /*Date|String*/ value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue) {
                        // summary:
                        //		Sets the date on this textbox. Note: value can be a JavaScript Date literal or a string to be parsed.
                        if (value !== undefined) {
                            if (typeof value == "string") {
                                value = stamp.fromISOString(value);
                            }
                            if (this._isInvalidDate(value)) {
                                value = null;
                            }
                            if (value instanceof Date && !(this.dateClassObj instanceof Date)) {
                                value = new this.dateClassObj(value);
                            }
                        }
                        this.inherited(arguments);
                        if (this.value instanceof Date) {
                            this.filterString = "";
                        }
                        if (this.dropDown) {
                            this.dropDown.set('value', value, false);
                        }
                    },

                    _set: function(attr, value) {
                        // Avoid spurious watch() notifications when value is changed to new Date object w/the same value
                        if (attr == "value" && this.value instanceof Date && this.compare(value, this.value) == 0) {
                            return;
                        }
                        this.inherited(arguments);
                    },

                    _setDropDownDefaultValueAttr: function( /*Date*/ val) {
                        if (this._isInvalidDate(val)) {
                            // convert null setting into today's date, since there needs to be *some* default at all times.
                            val = new this.dateClassObj();
                        }
                        this.dropDownDefaultValue = val;
                    },

                    openDropDown: function( /*Function*/ callback) {
                        // rebuild drop down every time, so that constraints get copied (#6002)
                        if (this.dropDown) {
                            this.dropDown.destroy();
                        }
                        var PopupProto = lang.isString(this.popupClass) ? lang.getObject(this.popupClass, false) : this.popupClass,
                            textBox = this,
                            value = this.get("value");
                        this.dropDown = new PopupProto({
                            onChange: function(value) {
                                // this will cause InlineEditBox and other handlers to do stuff so make sure it's last
                                textBox.set('value', value, true);
                            },
                            id: this.id + "_popup",
                            dir: textBox.dir,
                            lang: textBox.lang,
                            value: value,
                            currentFocus: !this._isInvalidDate(value) ? value : this.dropDownDefaultValue,
                            constraints: textBox.constraints,
                            filterString: textBox.filterString, // for TimeTextBox, to filter times shown
                            datePackage: textBox.params.datePackage,
                            isDisabledDate: function( /*Date*/ date) {
                                // summary:
                                //		disables dates outside of the min/max of the _DateTimeTextBox
                                return !textBox.rangeCheck(date, textBox.constraints);
                            }
                        });

                        this.inherited(arguments);
                    },

                    _getDisplayedValueAttr: function() {
                        return this.textbox.value;
                    },

                    _setDisplayedValueAttr: function( /*String*/ value, /*Boolean?*/ priorityChange) {
                        this._setValueAttr(this.parse(value, this.constraints), priorityChange, value);
                    }
                });


                /*=====
                 _DateTimeTextBox.__Constraints = declare([RangeBoundTextBox.__Constraints, locale.__FormatOptions], {
                	 // summary:
                	 //		Specifies both the rules on valid/invalid values (first/last date/time allowed),
                	 //		and also formatting options for how the date/time is displayed.
                	 // example:
                	 //		To restrict to dates within 2004, displayed in a long format like "December 25, 2005":
                	 //	|		{min:'2004-01-01',max:'2004-12-31', formatLength:'long'}
                 });
                 =====*/

                return _DateTimeTextBox;
            });

        },
        'hsbcwidget/Logon': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/on"
                ],
                function(declare, _WidgetBase, query, on) {

                    return declare([_WidgetBase], {

                    });

                }
            );
        },
        'dojo/query': function() {
            define(["./_base/kernel", "./has", "./dom", "./on", "./_base/array", "./_base/lang", "./selector/_loader", "./selector/_loader!default"],
                function(dojo, has, dom, on, array, lang, loader, defaultEngine) {

                    "use strict";

                    has.add("array-extensible", function() {
                        // test to see if we can extend an array (not supported in old IE)
                        return lang.delegate([], {
                            length: 1
                        }).length == 1 && !0;
                    });

                    var ap = Array.prototype,
                        aps = ap.slice,
                        apc = ap.concat,
                        forEach = array.forEach;

                    var tnl = function( /*Array*/ a, /*dojo/NodeList?*/ parent, /*Function?*/ NodeListCtor) {
                        // summary:
                        //		decorate an array to make it look like a `dojo/NodeList`.
                        // a:
                        //		Array of nodes to decorate.
                        // parent:
                        //		An optional parent NodeList that generated the current
                        //		list of nodes. Used to call _stash() so the parent NodeList
                        //		can be accessed via end() later.
                        // NodeListCtor:
                        //		An optional constructor function to use for any
                        //		new NodeList calls. This allows a certain chain of
                        //		NodeList calls to use a different object than dojo/NodeList.
                        var nodeList = new(NodeListCtor || this._NodeListCtor || nl)(a);
                        return parent ? nodeList._stash(parent) : nodeList;
                    };

                    var loopBody = function(f, a, o) {
                        a = [0].concat(aps.call(a, 0));
                        o = o || dojo.global;
                        return function(node) {
                            a[0] = node;
                            return f.apply(o, a);
                        };
                    };

                    // adapters

                    var adaptAsForEach = function(f, o) {
                        // summary:
                        //		adapts a single node function to be used in the forEach-type
                        //		actions. The initial object is returned from the specialized
                        //		function.
                        // f: Function
                        //		a function to adapt
                        // o: Object?
                        //		an optional context for f
                        return function() {
                            this.forEach(loopBody(f, arguments, o));
                            return this; // Object
                        };
                    };

                    var adaptAsMap = function(f, o) {
                        // summary:
                        //		adapts a single node function to be used in the map-type
                        //		actions. The return is a new array of values, as via `dojo.map`
                        // f: Function
                        //		a function to adapt
                        // o: Object?
                        //		an optional context for f
                        return function() {
                            return this.map(loopBody(f, arguments, o));
                        };
                    };

                    var adaptAsFilter = function(f, o) {
                        // summary:
                        //		adapts a single node function to be used in the filter-type actions
                        // f: Function
                        //		a function to adapt
                        // o: Object?
                        //		an optional context for f
                        return function() {
                            return this.filter(loopBody(f, arguments, o));
                        };
                    };

                    var adaptWithCondition = function(f, g, o) {
                        // summary:
                        //		adapts a single node function to be used in the map-type
                        //		actions, behaves like forEach() or map() depending on arguments
                        // f: Function
                        //		a function to adapt
                        // g: Function
                        //		a condition function, if true runs as map(), otherwise runs as forEach()
                        // o: Object?
                        //		an optional context for f and g
                        return function() {
                            var a = arguments,
                                body = loopBody(f, a, o);
                            if (g.call(o || dojo.global, a)) {
                                return this.map(body); // self
                            }
                            this.forEach(body);
                            return this; // self
                        };
                    };

                    var NodeList = function(array) {
                        // summary:
                        //		Array-like object which adds syntactic
                        //		sugar for chaining, common iteration operations, animation, and
                        //		node manipulation. NodeLists are most often returned as the
                        //		result of dojo.query() calls.
                        // description:
                        //		NodeList instances provide many utilities that reflect
                        //		core Dojo APIs for Array iteration and manipulation, DOM
                        //		manipulation, and event handling. Instead of needing to dig up
                        //		functions in the dojo.* namespace, NodeLists generally make the
                        //		full power of Dojo available for DOM manipulation tasks in a
                        //		simple, chainable way.
                        // example:
                        //		create a node list from a node
                        //		|	new query.NodeList(dojo.byId("foo"));
                        // example:
                        //		get a NodeList from a CSS query and iterate on it
                        //		|	var l = dojo.query(".thinger");
                        //		|	l.forEach(function(node, index, nodeList){
                        //		|		console.log(index, node.innerHTML);
                        //		|	});
                        // example:
                        //		use native and Dojo-provided array methods to manipulate a
                        //		NodeList without needing to use dojo.* functions explicitly:
                        //		|	var l = dojo.query(".thinger");
                        //		|	// since NodeLists are real arrays, they have a length
                        //		|	// property that is both readable and writable and
                        //		|	// push/pop/shift/unshift methods
                        //		|	console.log(l.length);
                        //		|	l.push(dojo.create("span"));
                        //		|
                        //		|	// dojo's normalized array methods work too:
                        //		|	console.log( l.indexOf(dojo.byId("foo")) );
                        //		|	// ...including the special "function as string" shorthand
                        //		|	console.log( l.every("item.nodeType == 1") );
                        //		|
                        //		|	// NodeLists can be [..] indexed, or you can use the at()
                        //		|	// function to get specific items wrapped in a new NodeList:
                        //		|	var node = l[3]; // the 4th element
                        //		|	var newList = l.at(1, 3); // the 2nd and 4th elements
                        // example:
                        //		the style functions you expect are all there too:
                        //		|	// style() as a getter...
                        //		|	var borders = dojo.query(".thinger").style("border");
                        //		|	// ...and as a setter:
                        //		|	dojo.query(".thinger").style("border", "1px solid black");
                        //		|	// class manipulation
                        //		|	dojo.query("li:nth-child(even)").addClass("even");
                        //		|	// even getting the coordinates of all the items
                        //		|	var coords = dojo.query(".thinger").coords();
                        // example:
                        //		DOM manipulation functions from the dojo.* namespace area also available:
                        //		|	// remove all of the elements in the list from their
                        //		|	// parents (akin to "deleting" them from the document)
                        //		|	dojo.query(".thinger").orphan();
                        //		|	// place all elements in the list at the front of #foo
                        //		|	dojo.query(".thinger").place("foo", "first");
                        // example:
                        //		Event handling couldn't be easier. `dojo.connect` is mapped in,
                        //		and shortcut handlers are provided for most DOM events:
                        //		|	// like dojo.connect(), but with implicit scope
                        //		|	dojo.query("li").connect("onclick", console, "log");
                        //		|
                        //		|	// many common event handlers are already available directly:
                        //		|	dojo.query("li").onclick(console, "log");
                        //		|	var toggleHovered = dojo.hitch(dojo, "toggleClass", "hovered");
                        //		|	dojo.query("p")
                        //		|		.onmouseenter(toggleHovered)
                        //		|		.onmouseleave(toggleHovered);
                        // example:
                        //		chainability is a key advantage of NodeLists:
                        //		|	dojo.query(".thinger")
                        //		|		.onclick(function(e){ /* ... */ })
                        //		|		.at(1, 3, 8) // get a subset
                        //		|			.style("padding", "5px")
                        //		|			.forEach(console.log);
                        var isNew = this instanceof nl && has("array-extensible");
                        if (typeof array == "number") {
                            array = Array(array);
                        }
                        var nodeArray = (array && "length" in array) ? array : arguments;
                        if (isNew || !nodeArray.sort) {
                            // make sure it's a real array before we pass it on to be wrapped 
                            var target = isNew ? this : [],
                                l = target.length = nodeArray.length;
                            for (var i = 0; i < l; i++) {
                                target[i] = nodeArray[i];
                            }
                            if (isNew) {
                                // called with new operator, this means we are going to use this instance and push
                                // the nodes on to it. This is usually much faster since the NodeList properties
                                //	don't need to be copied (unless the list of nodes is extremely large).
                                return target;
                            }
                            nodeArray = target;
                        }
                        // called without new operator, use a real array and copy prototype properties,
                        // this is slower and exists for back-compat. Should be removed in 2.0.
                        lang._mixin(nodeArray, nlp);
                        nodeArray._NodeListCtor = function(array) {
                            // call without new operator to preserve back-compat behavior
                            return nl(array);
                        };
                        return nodeArray;
                    };

                    var nl = NodeList,
                        nlp = nl.prototype =
                        has("array-extensible") ? [] : {}; // extend an array if it is extensible

                    // expose adapters and the wrapper as private functions

                    nl._wrap = nlp._wrap = tnl;
                    nl._adaptAsMap = adaptAsMap;
                    nl._adaptAsForEach = adaptAsForEach;
                    nl._adaptAsFilter = adaptAsFilter;
                    nl._adaptWithCondition = adaptWithCondition;

                    // mass assignment

                    // add array redirectors
                    forEach(["slice", "splice"], function(name) {
                        var f = ap[name];
                        //Use a copy of the this array via this.slice() to allow .end() to work right in the splice case.
                        // CANNOT apply ._stash()/end() to splice since it currently modifies
                        // the existing this array -- it would break backward compatibility if we copy the array before
                        // the splice so that we can use .end(). So only doing the stash option to this._wrap for slice.
                        nlp[name] = function() {
                            return this._wrap(f.apply(this, arguments), name == "slice" ? this : null);
                        };
                    });
                    // concat should be here but some browsers with native NodeList have problems with it

                    // add array.js redirectors
                    forEach(["indexOf", "lastIndexOf", "every", "some"], function(name) {
                        var f = array[name];
                        nlp[name] = function() {
                            return f.apply(dojo, [this].concat(aps.call(arguments, 0)));
                        };
                    });

                    lang.extend(NodeList, {
                        // copy the constructors
                        constructor: nl,
                        _NodeListCtor: nl,
                        toString: function() {
                            // Array.prototype.toString can't be applied to objects, so we use join
                            return this.join(",");
                        },
                        _stash: function(parent) {
                            // summary:
                            //		private function to hold to a parent NodeList. end() to return the parent NodeList.
                            //
                            // example:
                            //		How to make a `dojo/NodeList` method that only returns the third node in
                            //		the dojo/NodeList but allows access to the original NodeList by using this._stash:
                            //	|	dojo.extend(NodeList, {
                            //	|		third: function(){
                            //	|			var newNodeList = NodeList(this[2]);
                            //	|			return newNodeList._stash(this);
                            //	|		}
                            //	|	});
                            //	|	// then see how _stash applies a sub-list, to be .end()'ed out of
                            //	|	dojo.query(".foo")
                            //	|		.third()
                            //	|			.addClass("thirdFoo")
                            //	|		.end()
                            //	|		// access to the orig .foo list
                            //	|		.removeClass("foo")
                            //	|
                            //
                            this._parent = parent;
                            return this; // dojo/NodeList
                        },

                        on: function(eventName, listener) {
                            // summary:
                            //		Listen for events on the nodes in the NodeList. Basic usage is:
                            //		| query(".my-class").on("click", listener);
                            //		This supports event delegation by using selectors as the first argument with the event names as
                            //		pseudo selectors. For example:
                            //		| dojo.query("#my-list").on("li:click", listener);
                            //		This will listen for click events within `<li>` elements that are inside the `#my-list` element.
                            //		Because on supports CSS selector syntax, we can use comma-delimited events as well:
                            //		| dojo.query("#my-list").on("li button:mouseover, li:click", listener);
                            var handles = this.map(function(node) {
                                return on(node, eventName, listener); // TODO: apply to the NodeList so the same selector engine is used for matches
                            });
                            handles.remove = function() {
                                for (var i = 0; i < handles.length; i++) {
                                    handles[i].remove();
                                }
                            };
                            return handles;
                        },

                        end: function() {
                            // summary:
                            //		Ends use of the current `NodeList` by returning the previous NodeList
                            //		that generated the current NodeList.
                            // description:
                            //		Returns the `NodeList` that generated the current `NodeList`. If there
                            //		is no parent NodeList, an empty NodeList is returned.
                            // example:
                            //	|	dojo.query("a")
                            //	|		.filter(".disabled")
                            //	|			// operate on the anchors that only have a disabled class
                            //	|			.style("color", "grey")
                            //	|		.end()
                            //	|		// jump back to the list of anchors
                            //	|		.style(...)
                            //
                            if (this._parent) {
                                return this._parent;
                            } else {
                                //Just return empty list.
                                return new this._NodeListCtor(0);
                            }
                        },

                        // http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array#Methods

                        // FIXME: handle return values for #3244
                        //		http://trac.dojotoolkit.org/ticket/3244

                        // FIXME:
                        //		need to wrap or implement:
                        //			join (perhaps w/ innerHTML/outerHTML overload for toString() of items?)
                        //			reduce
                        //			reduceRight

                        /*=====
                        slice: function(begin, end){
                        	// summary:
                        	//		Returns a new NodeList, maintaining this one in place
                        	// description:
                        	//		This method behaves exactly like the Array.slice method
                        	//		with the caveat that it returns a dojo/NodeList and not a
                        	//		raw Array. For more details, see Mozilla's [slice
                        	//		documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice)
                        	// begin: Integer
                        	//		Can be a positive or negative integer, with positive
                        	//		integers noting the offset to begin at, and negative
                        	//		integers denoting an offset from the end (i.e., to the left
                        	//		of the end)
                        	// end: Integer?
                        	//		Optional parameter to describe what position relative to
                        	//		the NodeList's zero index to end the slice at. Like begin,
                        	//		can be positive or negative.
                        	return this._wrap(a.slice.apply(this, arguments));
                        },

                        splice: function(index, howmany, item){
                        	// summary:
                        	//		Returns a new NodeList, manipulating this NodeList based on
                        	//		the arguments passed, potentially splicing in new elements
                        	//		at an offset, optionally deleting elements
                        	// description:
                        	//		This method behaves exactly like the Array.splice method
                        	//		with the caveat that it returns a dojo/NodeList and not a
                        	//		raw Array. For more details, see Mozilla's [splice
                        	//		documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice)
                        	//		For backwards compatibility, calling .end() on the spliced NodeList
                        	//		does not return the original NodeList -- splice alters the NodeList in place.
                        	// index: Integer
                        	//		begin can be a positive or negative integer, with positive
                        	//		integers noting the offset to begin at, and negative
                        	//		integers denoting an offset from the end (i.e., to the left
                        	//		of the end)
                        	// howmany: Integer?
                        	//		Optional parameter to describe what position relative to
                        	//		the NodeList's zero index to end the slice at. Like begin,
                        	//		can be positive or negative.
                        	// item: Object...?
                        	//		Any number of optional parameters may be passed in to be
                        	//		spliced into the NodeList
                        	return this._wrap(a.splice.apply(this, arguments));	// dojo/NodeList
                        },

                        indexOf: function(value, fromIndex){
                        	// summary:
                        	//		see dojo.indexOf(). The primary difference is that the acted-on
                        	//		array is implicitly this NodeList
                        	// value: Object
                        	//		The value to search for.
                        	// fromIndex: Integer?
                        	//		The location to start searching from. Optional. Defaults to 0.
                        	// description:
                        	//		For more details on the behavior of indexOf, see Mozilla's
                        	//		[indexOf
                        	//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)
                        	// returns:
                        	//		Positive Integer or 0 for a match, -1 of not found.
                        	return d.indexOf(this, value, fromIndex); // Integer
                        },

                        lastIndexOf: function(value, fromIndex){
                        	// summary:
                        	//		see dojo.lastIndexOf(). The primary difference is that the
                        	//		acted-on array is implicitly this NodeList
                        	// description:
                        	//		For more details on the behavior of lastIndexOf, see
                        	//		Mozilla's [lastIndexOf
                        	//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)
                        	// value: Object
                        	//		The value to search for.
                        	// fromIndex: Integer?
                        	//		The location to start searching from. Optional. Defaults to 0.
                        	// returns:
                        	//		Positive Integer or 0 for a match, -1 of not found.
                        	return d.lastIndexOf(this, value, fromIndex); // Integer
                        },

                        every: function(callback, thisObject){
                        	// summary:
                        	//		see `dojo.every()` and the [Array.every
                        	//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every).
                        	//		Takes the same structure of arguments and returns as
                        	//		dojo.every() with the caveat that the passed array is
                        	//		implicitly this NodeList
                        	// callback: Function
                        	//		the callback
                        	// thisObject: Object?
                        	//		the context
                        	return d.every(this, callback, thisObject); // Boolean
                        },

                        some: function(callback, thisObject){
                        	// summary:
                        	//		Takes the same structure of arguments and returns as
                        	//		`dojo.some()` with the caveat that the passed array is
                        	//		implicitly this NodeList.  See `dojo.some()` and Mozilla's
                        	//		[Array.some
                        	//		documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some).
                        	// callback: Function
                        	//		the callback
                        	// thisObject: Object?
                        	//		the context
                        	return d.some(this, callback, thisObject); // Boolean
                        },
                        =====*/

                        concat: function(item) {
                            // summary:
                            //		Returns a new NodeList comprised of items in this NodeList
                            //		as well as items passed in as parameters
                            // description:
                            //		This method behaves exactly like the Array.concat method
                            //		with the caveat that it returns a `NodeList` and not a
                            //		raw Array. For more details, see the [Array.concat
                            //		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat)
                            // item: Object?
                            //		Any number of optional parameters may be passed in to be
                            //		spliced into the NodeList

                            //return this._wrap(apc.apply(this, arguments));
                            // the line above won't work for the native NodeList, or for Dojo NodeLists either :-(

                            // implementation notes:
                            // Array.concat() doesn't recognize native NodeLists or Dojo NodeLists
                            // as arrays, and so does not inline them into a unioned array, but
                            // appends them as single entities. Both the original NodeList and the
                            // items passed in as parameters must be converted to raw Arrays
                            // and then the concatenation result may be re-_wrap()ed as a Dojo NodeList.

                            var t = aps.call(this, 0),
                                m = array.map(arguments, function(a) {
                                    return aps.call(a, 0);
                                });
                            return this._wrap(apc.apply(t, m), this); // dojo/NodeList
                        },

                        map: function( /*Function*/ func, /*Function?*/ obj) {
                            // summary:
                            //		see dojo.map(). The primary difference is that the acted-on
                            //		array is implicitly this NodeList and the return is a
                            //		NodeList (a subclass of Array)
                            return this._wrap(array.map(this, func, obj), this); // dojo/NodeList
                        },

                        forEach: function(callback, thisObj) {
                            // summary:
                            //		see `dojo.forEach()`. The primary difference is that the acted-on
                            //		array is implicitly this NodeList. If you want the option to break out
                            //		of the forEach loop, use every() or some() instead.
                            forEach(this, callback, thisObj);
                            // non-standard return to allow easier chaining
                            return this; // dojo/NodeList
                        },
                        filter: function( /*String|Function*/ filter) {
                            // summary:
                            //		"masks" the built-in javascript filter() method (supported
                            //		in Dojo via `dojo.filter`) to support passing a simple
                            //		string filter in addition to supporting filtering function
                            //		objects.
                            // filter:
                            //		If a string, a CSS rule like ".thinger" or "div > span".
                            // example:
                            //		"regular" JS filter syntax as exposed in dojo.filter:
                            //		|	dojo.query("*").filter(function(item){
                            //		|		// highlight every paragraph
                            //		|		return (item.nodeName == "p");
                            //		|	}).style("backgroundColor", "yellow");
                            // example:
                            //		the same filtering using a CSS selector
                            //		|	dojo.query("*").filter("p").styles("backgroundColor", "yellow");

                            var a = arguments,
                                items = this,
                                start = 0;
                            if (typeof filter == "string") { // inline'd type check
                                items = query._filterResult(this, a[0]);
                                if (a.length == 1) {
                                    // if we only got a string query, pass back the filtered results
                                    return items._stash(this); // dojo/NodeList
                                }
                                // if we got a callback, run it over the filtered items
                                start = 1;
                            }
                            return this._wrap(array.filter(items, a[start], a[start + 1]), this); // dojo/NodeList
                        },
                        instantiate: function( /*String|Object*/ declaredClass, /*Object?*/ properties) {
                            // summary:
                            //		Create a new instance of a specified class, using the
                            //		specified properties and each node in the NodeList as a
                            //		srcNodeRef.
                            // example:
                            //		Grabs all buttons in the page and converts them to dijit/form/Button's.
                            //	|	var buttons = query("button").instantiate(Button, {showLabel: true});
                            var c = lang.isFunction(declaredClass) ? declaredClass : lang.getObject(declaredClass);
                            properties = properties || {};
                            return this.forEach(function(node) {
                                new c(properties, node);
                            }); // dojo/NodeList
                        },
                        at: function( /*===== index =====*/ ) {
                            // summary:
                            //		Returns a new NodeList comprised of items in this NodeList
                            //		at the given index or indices.
                            //
                            // index: Integer...
                            //		One or more 0-based indices of items in the current
                            //		NodeList. A negative index will start at the end of the
                            //		list and go backwards.
                            //
                            // example:
                            //	Shorten the list to the first, second, and third elements
                            //	|	query("a").at(0, 1, 2).forEach(fn);
                            //
                            // example:
                            //	Retrieve the first and last elements of a unordered list:
                            //	|	query("ul > li").at(0, -1).forEach(cb);
                            //
                            // example:
                            //	Do something for the first element only, but end() out back to
                            //	the original list and continue chaining:
                            //	|	query("a").at(0).onclick(fn).end().forEach(function(n){
                            //	|		console.log(n); // all anchors on the page.
                            //	|	})

                            var t = new this._NodeListCtor(0);
                            forEach(arguments, function(i) {
                                if (i < 0) {
                                    i = this.length + i;
                                }
                                if (this[i]) {
                                    t.push(this[i]);
                                }
                            }, this);
                            return t._stash(this); // dojo/NodeList
                        }
                    });

                    function queryForEngine(engine, NodeList) {
                        var query = function( /*String*/ query, /*String|DOMNode?*/ root) {
                            // summary:
                            //		Returns nodes which match the given CSS selector, searching the
                            //		entire document by default but optionally taking a node to scope
                            //		the search by. Returns an instance of NodeList.
                            if (typeof root == "string") {
                                root = dom.byId(root);
                                if (!root) {
                                    return new NodeList([]);
                                }
                            }
                            var results = typeof query == "string" ? engine(query, root) : query ? query.orphan ? query : [query] : [];
                            if (results.orphan) {
                                // already wrapped
                                return results;
                            }
                            return new NodeList(results);
                        };
                        query.matches = engine.match || function(node, selector, root) {
                            // summary:
                            //		Test to see if a node matches a selector
                            return query.filter([node], selector, root).length > 0;
                        };
                        // the engine provides a filtering function, use it to for matching
                        query.filter = engine.filter || function(nodes, selector, root) {
                            // summary:
                            //		Filters an array of nodes. Note that this does not guarantee to return a NodeList, just an array.
                            return query(selector, root).filter(function(node) {
                                return array.indexOf(nodes, node) > -1;
                            });
                        };
                        if (typeof engine != "function") {
                            var search = engine.search;
                            engine = function(selector, root) {
                                // Slick does it backwards (or everyone else does it backwards, probably the latter)
                                return search(root || document, selector);
                            };
                        }
                        return query;
                    }
                    var query = queryForEngine(defaultEngine, NodeList);
                    /*=====
                    query = function(selector, context){
                    	// summary:
                    	//		This modules provides DOM querying functionality. The module export is a function
                    	//		that can be used to query for DOM nodes by CSS selector and returns a NodeList
                    	//		representing the matching nodes.
                    	// selector: String
                    	//		A CSS selector to search for.
                    	// context: String|DomNode?
                    	//		An optional context to limit the searching scope. Only nodes under `context` will be
                    	//		scanned.
                    	// example:
                    	//		add an onclick handler to every submit button in the document
                    	//		which causes the form to be sent via Ajax instead:
                    	//	|	require(["dojo/query"], function(query){
                    	//	|		query("input[type='submit']").on("click", function(e){
                    	//	|			dojo.stopEvent(e); // prevent sending the form
                    	//	|			var btn = e.target;
                    	//	|			dojo.xhrPost({
                    	//	|				form: btn.form,
                    	//	|				load: function(data){
                    	//	|					// replace the form with the response
                    	//	|					var div = dojo.doc.createElement("div");
                    	//	|					dojo.place(div, btn.form, "after");
                    	//	|					div.innerHTML = data;
                    	//	|					dojo.style(btn.form, "display", "none");
                    	//	|				}
                    	//	|			});
                    	//	|		});
                    	// |	});
                    	//
                    	// description:
                    	//		dojo/query is responsible for loading the appropriate query engine and wrapping
                    	//		its results with a `NodeList`. You can use dojo/query with a specific selector engine
                    	//		by using it as a plugin. For example, if you installed the sizzle package, you could
                    	//		use it as the selector engine with:
                    	//		|	require(["dojo/query!sizzle"], function(query){
                    	//		|		query("div")...
                    	//
                    	//		The id after the ! can be a module id of the selector engine or one of the following values:
                    	//
                    	//		- acme: This is the default engine used by Dojo base, and will ensure that the full
                    	//		Acme engine is always loaded.
                    	//
                    	//		- css2: If the browser has a native selector engine, this will be used, otherwise a
                    	//		very minimal lightweight selector engine will be loaded that can do simple CSS2 selectors
                    	//		(by #id, .class, tag, and [name=value] attributes, with standard child or descendant (>)
                    	//		operators) and nothing more.
                    	//
                    	//		- css2.1: If the browser has a native selector engine, this will be used, otherwise the
                    	//		full Acme engine will be loaded.
                    	//
                    	//		- css3: If the browser has a native selector engine with support for CSS3 pseudo
                    	//		selectors (most modern browsers except IE8), this will be used, otherwise the
                    	//		full Acme engine will be loaded.
                    	//
                    	//		- Or the module id of a selector engine can be used to explicitly choose the selector engine
                    	//
                    	//		For example, if you are using CSS3 pseudo selectors in module, you can specify that
                    	//		you will need support them with:
                    	//		|	require(["dojo/query!css3"], function(query){
                    	//		|		query('#t > h3:nth-child(odd)')...
                    	//
                    	//		You can also choose the selector engine/load configuration by setting the query-selector:
                    	//		For example:
                    	//		|	<script data-dojo-config="query-selector:'css3'" src="dojo.js"></script>
                    	//
                    	return new NodeList(); // dojo/NodeList
                     };
                     =====*/

                    // the query that is returned from this module is slightly different than dojo.query,
                    // because dojo.query has to maintain backwards compatibility with returning a
                    // true array which has performance problems. The query returned from the module
                    // does not use true arrays, but rather inherits from Array, making it much faster to
                    // instantiate.
                    dojo.query = queryForEngine(defaultEngine, function(array) {
                        // call it without the new operator to invoke the back-compat behavior that returns a true array
                        return NodeList(array); // dojo/NodeList
                    });

                    query.load = function(id, parentRequire, loaded) {
                        // summary:
                        //		can be used as AMD plugin to conditionally load new query engine
                        // example:
                        //	|	require(["dojo/query!custom"], function(qsa){
                        //	|		// loaded selector/custom.js as engine
                        //	|		qsa("#foobar").forEach(...);
                        //	|	});
                        loader.load(id, parentRequire, function(engine) {
                            loaded(queryForEngine(engine, NodeList));
                        });
                    };

                    dojo._filterQueryResult = query._filterResult = function(nodes, selector, root) {
                        return new NodeList(query.filter(nodes, selector, root));
                    };
                    dojo.NodeList = query.NodeList = NodeList;
                    return query;
                });

        },
        'hsbcwidget/stepTracker': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_Widget",
                    "dojo/query",
                    "dojo/dom-class",
                    "dojo/html",
                    "dojo/Stateful",
                    "dojo/dom-geometry",
                    "dojo/dom-style",
                    "dojo/dom-construct"
                ],
                function(declare, Widget, query, domClass, html, stateful, domGeom, domStyle, domConstruct) {

                    return declare("hsbcwidget.stepTracker", [Widget], {
                        widgetsInTemplate: false,
                        addNums: true,
                        selectors: {
                            step: 'li'
                        },
                        classes: {
                            first: 'first',
                            last: 'last',
                            complete: 'completed',
                            current: 'selected',
                            lastCurrent: 'lastSelected',
                            beforeCurrent: 'beforeSelected',
                            linesPrefix: 'lines',
                            stepCountPrefix: 'stepCount'
                        },
                        steps: [],
                        applyDynamicHeight: function() {
                            try {
                                if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                                    document.querySelector('html').classList.add("dj_firefox")
                                }
                                var elemMaxHeight = 0;
                                for (var i = 0; i < document.querySelectorAll('ul.stepTracker.stepProgress li').length; i++) {
                                    if (document.querySelectorAll('ul.stepTracker.stepProgress li')[i].offsetHeight > elemMaxHeight)
                                        elemMaxHeight = document.querySelectorAll('ul.stepTracker.stepProgress li')[i].offsetHeight;
                                }
                                for (var i = 0; i < document.querySelectorAll('ul.stepTracker.stepProgress li').length; i++) {
                                    document.querySelectorAll('ul.stepTracker.stepProgress li')[i].style.height = elemMaxHeight + "px";
                                }
                            } catch (err) {
                                console.log(err);
                            }
                        },
                        postCreate: function() {
                            var self = this,
                                $steps = query(this.selectors.step, this.domNode),
                                numSteps = $steps.length;

                            this.steps = [];

                            domClass.add(this.domNode, this.classes.stepCountPrefix + numSteps);

                            $steps.forEach(function($step, index) {
                                var $link = query('a', $step)[0],
                                    $selected = query('span.stepSelected', $step)[0],
                                    $stepNumber = query('span.stepNumber', $link)[0],
                                    $stepTotal = query('span.stepTotal', $link)[0];

                                var current = domClass.contains($step, self.classes.current);

                                domAttr.set($link, {
                                    'aria-hidden': (current) ? "false" : "true",
                                    'role': (current) ? "" : "presentation",
                                    'tabindex': (current) ? '0' : '-1'
                                });
                                if (current) {
                                    domAttr.remove($link, 'role');
                                }

                                $stepNumber.innerHTML = index + 1;
                                $stepTotal.innerHTML = numSteps;

                                //add first and last classes
                                if (index === 0) {
                                    domClass.add($step, self.classes.first)
                                } else if (index === numSteps - 1) {
                                    domClass.add($step, self.classes.last);
                                }

                                //add numbers if required
                                var $prenumtxt = "";
                                var $postnumtxt = ". ";
                                if (self.addNumsNoDots) {
                                    $prenumtxt = '<span class="progressNum">';
                                    $postnumtxt = "</span>";
                                }

                                if (self.addNums) {
                                    html.set($link, $prenumtxt + (index + 1) + $postnumtxt + $link.innerHTML);
                                }

                                //push into step array
                                self.steps.push({
                                    node: $step,
                                    $link: $link,
                                    $selected: $selected,
                                    complete: domClass.contains($step, self.classes.complete),
                                    current: current
                                });

                                //add before current class if needed
                                if (current && index > 0) {
                                    domClass.add(self.steps[index - 1].node, self.classes.beforeCurrent);
                                }

                                //add classes for multi line steps
                                var cs = domStyle.getComputedStyle($link),
                                    pad = parseInt(cs.paddingTop.replace(/[a-zA-Z]+/g, '')) + parseInt(cs.paddingBottom.replace(/[a-zA-Z]+/g, '')),
                                    geom = domGeom.position($step),
                                    lines = Math.floor((geom.h - pad) / parseInt(cs.lineHeight.replace(/[a-zA-Z]+/g, '')));

                                if (lines > 1) {
                                    domClass.add($step, self.classes.linesPrefix + lines);
                                }
                                this.applyDynamicHeight();
                                //bind watch events (DOES NOT WORK IN IE<9);
                                /*self.steps[index].watch("complete", function(name, oldValue, value){
                                    if (value && !oldValue){
                                        domClass.add(self.steps[index].node, self.classes.complete);
                                    }
                                });
                                self.steps[index].watch("current", function(name, oldValue, value){
                                    if (value && !oldValue){
                                        $steps.forEach(function($node){
                                            domClass.remove($node, self.classes.current);
                                        });
                                        if (index > 0){
                                            domClass.add(self.steps[index-1].node, self.classes.beforeCurrent);
                                        }
                                        domClass.add(self.steps[index].node, self.classes.current);
                                        if (index === self.steps.length-1){
                                            domClass.add(self.steps[index].node. self.classes.lastCurrent);
                                        }
                                    }
                                });*/
                            });
                        },

                        findCurrentStepIndex: function() {
                            for (var i = 0; i < this.steps.length; i++) {
                                var step = this.steps[i];

                                if (step.current === true) {
                                    return i;
                                }
                            }

                            return -1;
                        },

                        _setCurrentStep: function(index) {
                            for (var i = 0; i < this.steps.length; i++) {
                                var step = this.steps[i];

                                if (i === index) {
                                    step.current = true;
                                } else {
                                    step.current = false;
                                }
                            }
                        },

                        completeStep: function(index) {
                            if (typeof index === 'undefined') {
                                index = this.findCurrentStepIndex();
                            }

                            this.steps[index].complete = true;
                            this.applyClasses();
                        },

                        uncompleteStep: function(index) {
                            if (typeof index === 'undefined') {
                                index = this.findCurrentStepIndex();
                            }

                            this.steps[index].complete = false;
                            this.applyClasses();
                        },

                        gotoStep: function(index) {
                            if (index < 0 || index >= this.steps.length) {
                                return -1;
                            }

                            this._setCurrentStep(index);

                            this.applyClasses();

                            return index;
                        },

                        prev: function() {
                            var currentStepIndex = this.findCurrentStepIndex();
                            return this.gotoStep(currentStepIndex - 1);
                        },

                        next: function() {
                            var currentStepIndex = this.findCurrentStepIndex();
                            return this.gotoStep(currentStepIndex + 1);
                        },

                        applyClasses: function() {
                            for (var i = 0, len = this.steps.length; i < len; i++) {
                                var step = this.steps[i];

                                domConstruct.destroy(query('span.stepSelected', step.node)[0]);

                                domClass.remove(step.node, [this.classes.current, this.classes.complete, this.classes.beforeCurrent, this.classes.lastCurrent]);

                                if (step.current === true) {
                                    domClass.add(step.node, this.classes.current);
                                    domConstruct.place(step.$selected, query('span.hidden', step.$link)[0]);
                                    if (i === len - 1) {
                                        domClass.add(step.node, this.classes.lastCurrent);
                                    }

                                    if (i > 0) {
                                        var prevStep = this.steps[i - 1];

                                        domClass.add(prevStep.node, this.classes.beforeCurrent);
                                    }
                                }

                                if (step.complete === true) {
                                    domClass.add(step.node, this.classes.complete);
                                }
                            }
                            this.applyDynamicHeight();
                        }

                    });

                }
            );
        },
        'dijit/a11y': function() {
            define("dijit/a11y", [
                "dojo/_base/array", // array.forEach array.map
                "dojo/_base/config", // defaultDuration
                "dojo/_base/declare", // declare
                "dojo/dom", // dom.byId
                "dojo/dom-attr", // domAttr.attr domAttr.has
                "dojo/dom-style", // style.style
                "dojo/sniff", // has("ie")
                "./main" // for exporting methods to dijit namespace
            ], function(array, config, declare, dom, domAttr, domStyle, has, dijit) {

                // module:
                //		dijit/a11y

                var shown = (dijit._isElementShown = function( /*Element*/ elem) {
                    var s = domStyle.get(elem);
                    return (s.visibility != "hidden") &&
                        (s.visibility != "collapsed") &&
                        (s.display != "none") &&
                        (domAttr.get(elem, "type") != "hidden");
                });

                dijit.hasDefaultTabStop = function( /*Element*/ elem) {
                    // summary:
                    //		Tests if element is tab-navigable even without an explicit tabIndex setting

                    // No explicit tabIndex setting, need to investigate node type
                    switch (elem.nodeName.toLowerCase()) {
                        case "a":
                            // An <a> w/out a tabindex is only navigable if it has an href
                            return domAttr.has(elem, "href");
                        case "area":
                        case "button":
                        case "input":
                        case "object":
                        case "select":
                        case "textarea":
                            // These are navigable by default
                            return true;
                        case "iframe":
                            // If it's an editor <iframe> then it's tab navigable.
                            var body;
                            try {
                                // non-IE
                                var contentDocument = elem.contentDocument;
                                if ("designMode" in contentDocument && contentDocument.designMode == "on") {
                                    return true;
                                }
                                body = contentDocument.body;
                            } catch (e1) {
                                // contentWindow.document isn't accessible within IE7/8
                                // if the iframe.src points to a foreign url and this
                                // page contains an element, that could get focus
                                try {
                                    body = elem.contentWindow.document.body;
                                } catch (e2) {
                                    return false;
                                }
                            }
                            return body && (body.contentEditable == 'true' ||
                                (body.firstChild && body.firstChild.contentEditable == 'true'));
                        default:
                            return elem.contentEditable == 'true';
                    }
                };

                var isTabNavigable = (dijit.isTabNavigable = function( /*Element*/ elem) {
                    // summary:
                    //		Tests if an element is tab-navigable

                    // TODO: convert (and rename method) to return effective tabIndex; will save time in _getTabNavigable()
                    if (domAttr.get(elem, "disabled")) {
                        return false;
                    } else if (domAttr.has(elem, "tabIndex")) {
                        // Explicit tab index setting
                        return domAttr.get(elem, "tabIndex") >= 0; // boolean
                    } else {
                        // No explicit tabIndex setting, so depends on node type
                        return dijit.hasDefaultTabStop(elem);
                    }
                });

                dijit._getTabNavigable = function( /*DOMNode*/ root) {
                    // summary:
                    //		Finds descendants of the specified root node.
                    // description:
                    //		Finds the following descendants of the specified root node:
                    //
                    //		- the first tab-navigable element in document order
                    //		  without a tabIndex or with tabIndex="0"
                    //		- the last tab-navigable element in document order
                    //		  without a tabIndex or with tabIndex="0"
                    //		- the first element in document order with the lowest
                    //		  positive tabIndex value
                    //		- the last element in document order with the highest
                    //		  positive tabIndex value
                    var first, last, lowest, lowestTabindex, highest, highestTabindex, radioSelected = {};

                    function radioName(node) {
                        // If this element is part of a radio button group, return the name for that group.
                        return node && node.tagName.toLowerCase() == "input" &&
                            node.type && node.type.toLowerCase() == "radio" &&
                            node.name && node.name.toLowerCase();
                    }

                    var walkTree = function( /*DOMNode*/ parent) {
                        for (var child = parent.firstChild; child; child = child.nextSibling) {
                            // Skip text elements, hidden elements, and also non-HTML elements (those in custom namespaces) in IE,
                            // since show() invokes getAttribute("type"), which crash on VML nodes in IE.
                            if (child.nodeType != 1 || (has("ie") && child.scopeName !== "HTML") || !shown(child)) {
                                continue;
                            }

                            if (isTabNavigable(child)) {
                                var tabindex = +domAttr.get(child, "tabIndex"); // + to convert string --> number
                                if (!domAttr.has(child, "tabIndex") || tabindex == 0) {
                                    if (!first) {
                                        first = child;
                                    }
                                    last = child;
                                } else if (tabindex > 0) {
                                    if (!lowest || tabindex < lowestTabindex) {
                                        lowestTabindex = tabindex;
                                        lowest = child;
                                    }
                                    if (!highest || tabindex >= highestTabindex) {
                                        highestTabindex = tabindex;
                                        highest = child;
                                    }
                                }
                                var rn = radioName(child);
                                if (domAttr.get(child, "checked") && rn) {
                                    radioSelected[rn] = child;
                                }
                            }
                            if (child.nodeName.toUpperCase() != 'SELECT') {
                                walkTree(child);
                            }
                        }
                    };
                    if (shown(root)) {
                        walkTree(root);
                    }

                    function rs(node) {
                        // substitute checked radio button for unchecked one, if there is a checked one with the same name.
                        return radioSelected[radioName(node)] || node;
                    }

                    return {
                        first: rs(first),
                        last: rs(last),
                        lowest: rs(lowest),
                        highest: rs(highest)
                    };
                };
                dijit.getFirstInTabbingOrder = function( /*String|DOMNode*/ root, /*Document?*/ doc) {
                    // summary:
                    //		Finds the descendant of the specified root node
                    //		that is first in the tabbing order
                    var elems = dijit._getTabNavigable(dom.byId(root, doc));
                    return elems.lowest ? elems.lowest : elems.first; // DomNode
                };

                dijit.getLastInTabbingOrder = function( /*String|DOMNode*/ root, /*Document?*/ doc) {
                    // summary:
                    //		Finds the descendant of the specified root node
                    //		that is last in the tabbing order
                    var elems = dijit._getTabNavigable(dom.byId(root, doc));
                    return elems.last ? elems.last : elems.highest; // DomNode
                };

                return {
                    // summary:
                    //		Accessibility utility functions (keyboard, tab stops, etc.)

                    hasDefaultTabStop: dijit.hasDefaultTabStop,
                    isTabNavigable: dijit.isTabNavigable,
                    _getTabNavigable: dijit._getTabNavigable,
                    getFirstInTabbingOrder: dijit.getFirstInTabbingOrder,
                    getLastInTabbingOrder: dijit.getLastInTabbingOrder
                };
            });

        },
        'hsbcwidget/MastHead': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/on"
                ],
                function(declare, _WidgetBase, query, on) {

                    return declare([_WidgetBase], {});

                }
            );
        },
        'hsbccore/accessibility': function() {
            define("hsbccore/accessibility", [
                "dojo/query",
                "dojo/dom-style",
                "dojo/dom-attr",
                "dojo/dom-prop",
                "dojo/dom-class",
                "dojo/_base/array",
                "dojo/has",
                "dojo/on"
            ], function(query, domStyle, domAttr, domProp, domClass, array, has, on) {

                return {
                    removeOutlines: function() {
                        var noOutlineNodes = query(
                            'div#logo a,' +
                            '#sections .doormat p a,' +
                            '#sections .doormat ul li.last a,' +
                            '#innerPage a,' +
                            'form #products .productInfo td input,' +
                            '#businessProductTable td input,' +
                            '#productSet .options .filter label input,' +
                            '.jqmWindow a'
                        );

                        noOutlineNodes.on('mousedown', function(e) {
                            domStyle.set(this, 'outline', '0');
                        });

                        query('input[type="submit"]').on('mousedown', function(e) {
                            domStyle.set(this, {
                                'border': '0',
                                'outline': '0'
                            });
                        });

                    },

                    ieFocusClasses: function() {
                        if (has("ie") <= 7) {
                            query('input').forEach(function(node) {
                                var type = domProp.get(node, 'type');
                                if (typeof type === 'undefined' || type === null) {
                                    type = domAttr.get(node, 'type');
                                }

                                if (type === 'text') {
                                    on(node, 'focus', function(e) {
                                        domClass.add(node, 'ieTextFocus');
                                    });

                                    on(node, 'blur', function(e) {
                                        domClass.remove(node, 'ieTextFocus');
                                    });
                                } else if (type === 'submit') {
                                    on(node, 'focus', function(e) {
                                        domClass.add(node, 'ieSubmitFocus');
                                    });

                                    on(node, 'blur', function(e) {
                                        domClass.remove(node, 'ieSubmitFocus');
                                    });
                                }
                            });
                        }
                    }
                };
            });

        },
        'dijit/Calendar': function() {
            define("dijit/Calendar", [
                "dojo/_base/array", // array.map
                "dojo/date",
                "dojo/date/locale",
                "dojo/_base/declare", // declare
                "dojo/dom-attr", // domAttr.get
                "dojo/dom-class", // domClass.add domClass.contains domClass.remove domClass.toggle
                "dojo/_base/event", // event.stop
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/keys", // keys
                "dojo/_base/lang", // lang.hitch
                "dojo/sniff", // has("ie")
                "./CalendarLite",
                "./_Widget",
                "./_CssStateMixin",
                "./_TemplatedMixin",
                "./form/DropDownButton"
            ], function(array, date, local, declare, domAttr, domClass, event, kernel, keys, lang, has,
                CalendarLite, _Widget, _CssStateMixin, _TemplatedMixin, DropDownButton) {

                // module:
                //		dijit/Calendar

                var Calendar = declare("dijit.Calendar", [CalendarLite, _Widget, _CssStateMixin], // _Widget for deprecated methods like setAttribute()
                    {
                        // summary:
                        //		A simple GUI for choosing a date in the context of a monthly calendar.
                        //
                        // description:
                        //		See CalendarLite for general description.   Calendar extends CalendarLite, adding:
                        //
                        //		- month drop down list
                        //		- keyboard navigation
                        //		- CSS classes for hover/mousepress on date, month, and year nodes
                        //		- support of deprecated methods (will be removed in 2.0)

                        // Set node classes for various mouse events, see dijit._CssStateMixin for more details
                        cssStateNodes: {
                            "decrementMonth": "dijitCalendarArrow",
                            "incrementMonth": "dijitCalendarArrow",
                            "previousYearLabelNode": "dijitCalendarPreviousYear",
                            "nextYearLabelNode": "dijitCalendarNextYear"
                        },

                        setValue: function( /*Date*/ value) {
                            // summary:
                            //		Deprecated.   Use set('value', ...) instead.
                            // tags:
                            //		deprecated
                            kernel.deprecated("dijit.Calendar:setValue() is deprecated.  Use set('value', ...) instead.", "", "2.0");
                            this.set('value', value);
                        },

                        _createMonthWidget: function() {
                            // summary:
                            //		Creates the drop down button that displays the current month and lets user pick a new one

                            return new Calendar._MonthDropDownButton({
                                id: this.id + "_mddb",
                                tabIndex: -1,
                                onMonthSelect: lang.hitch(this, "_onMonthSelect"),
                                lang: this.lang,
                                dateLocaleModule: this.dateLocaleModule
                            }, this.monthNode);
                        },

                        postCreate: function() {
                            this.inherited(arguments);

                            // Events specific to Calendar, not used in CalendarLite
                            this.connect(this.domNode, "onkeydown", "_onKeyDown");
                            this.connect(this.dateRowsNode, "onmouseover", "_onDayMouseOver");
                            this.connect(this.dateRowsNode, "onmouseout", "_onDayMouseOut");
                            this.connect(this.dateRowsNode, "onmousedown", "_onDayMouseDown");
                            this.connect(this.dateRowsNode, "onmouseup", "_onDayMouseUp");
                        },

                        _onMonthSelect: function( /*Number*/ newMonth) {
                            // summary:
                            //		Handler for when user selects a month from the drop down list
                            // tags:
                            //		protected

                            // move to selected month, bounding by the number of days in the month
                            // (ex: jan 31 --> feb 28, not feb 31)
                            var date = new this.dateClassObj(this.currentFocus);
                            date.setDate(1);
                            date.setMonth(newMonth);
                            var daysInMonth = this.dateModule.getDaysInMonth(date);
                            var currentDate = this.currentFocus.getDate();
                            date.setDate(Math.min(currentDate, daysInMonth));
                            this._setCurrentFocusAttr(date);
                        },

                        _onDayMouseOver: function( /*Event*/ evt) {
                            // summary:
                            //		Handler for mouse over events on days, sets hovered style
                            // tags:
                            //		protected

                            // event can occur on <td> or the <span> inside the td,
                            // set node to the <td>.
                            var node =
                                domClass.contains(evt.target, "dijitCalendarDateLabel") ?
                                evt.target.parentNode :
                                evt.target;

                            if (node && (
                                    (node.dijitDateValue && !domClass.contains(node, "dijitCalendarDisabledDate")) ||
                                    node == this.previousYearLabelNode || node == this.nextYearLabelNode
                                )) {
                                domClass.add(node, "dijitCalendarHoveredDate");
                                this._currentNode = node;
                            }
                        },

                        _onDayMouseOut: function( /*Event*/ evt) {
                            // summary:
                            //		Handler for mouse out events on days, clears hovered style
                            // tags:
                            //		protected

                            if (!this._currentNode) {
                                return;
                            }

                            // if mouse out occurs moving from <td> to <span> inside <td>, ignore it
                            if (evt.relatedTarget && evt.relatedTarget.parentNode == this._currentNode) {
                                return;
                            }
                            var cls = "dijitCalendarHoveredDate";
                            if (domClass.contains(this._currentNode, "dijitCalendarActiveDate")) {
                                cls += " dijitCalendarActiveDate";
                            }
                            domClass.remove(this._currentNode, cls);
                            this._currentNode = null;
                        },

                        _onDayMouseDown: function( /*Event*/ evt) {
                            var node = evt.target.parentNode;
                            if (node && node.dijitDateValue && !domClass.contains(node, "dijitCalendarDisabledDate")) {
                                domClass.add(node, "dijitCalendarActiveDate");
                                this._currentNode = node;
                            }
                        },

                        _onDayMouseUp: function( /*Event*/ evt) {
                            var node = evt.target.parentNode;
                            if (node && node.dijitDateValue) {
                                domClass.remove(node, "dijitCalendarActiveDate");
                            }
                        },

                        handleKey: function( /*Event*/ evt) {
                            // summary:
                            //		Provides keyboard navigation of calendar.
                            // description:
                            //		Called from _onKeyDown() to handle keypress on a stand alone Calendar,
                            //		and also from `dijit/form/_DateTimeTextBox` to pass a keydown event
                            //		from the `dijit/form/DateTextBox` to be handled in this widget
                            // returns:
                            //		False if the key was recognized as a navigation key,
                            //		to indicate that the event was handled by Calendar and shouldn't be propagated
                            // tags:
                            //		protected
                            var increment = -1,
                                interval,
                                newValue = this.currentFocus;
                            switch (evt.keyCode) {
                                case keys.RIGHT_ARROW:
                                    increment = 1;
                                    //fallthrough...
                                case keys.LEFT_ARROW:
                                    interval = "day";
                                    if (!this.isLeftToRight()) {
                                        increment *= -1;
                                    }
                                    break;
                                case keys.DOWN_ARROW:
                                    increment = 1;
                                    //fallthrough...
                                case keys.UP_ARROW:
                                    interval = "week";
                                    break;
                                case keys.PAGE_DOWN:
                                    increment = 1;
                                    //fallthrough...
                                case keys.PAGE_UP:
                                    interval = evt.ctrlKey || evt.altKey ? "year" : "month";
                                    break;
                                case keys.END:
                                    // go to the next month
                                    newValue = this.dateModule.add(newValue, "month", 1);
                                    // subtract a day from the result when we're done
                                    interval = "day";
                                    //fallthrough...
                                case keys.HOME:
                                    newValue = new this.dateClassObj(newValue);
                                    newValue.setDate(1);
                                    break;
                                case keys.ENTER:
                                case keys.SPACE:
                                    this.set("value", this.currentFocus);
                                    break;
                                default:
                                    return true;
                            }

                            if (interval) {
                                newValue = this.dateModule.add(newValue, interval, increment);
                            }

                            this._setCurrentFocusAttr(newValue);

                            return false;
                        },

                        _onKeyDown: function( /*Event*/ evt) {
                            // summary:
                            //		For handling keypress events on a stand alone calendar
                            if (!this.handleKey(evt)) {
                                event.stop(evt);
                            }
                        },

                        onValueSelected: function( /*Date*/ /*===== date =====*/ ) {
                            // summary:
                            //		Deprecated.   Notification that a date cell was selected.  It may be the same as the previous value.
                            // description:
                            //		Formerly used by `dijit/form/_DateTimeTextBox` (and thus `dijit/form/DateTextBox`)
                            //		to get notification when the user has clicked a date.  Now onExecute() (above) is used.
                            // tags:
                            //		protected
                        },

                        onChange: function(value) {
                            this.onValueSelected(value); // remove in 2.0
                        },

                        getClassForDate: function( /*===== dateObject, locale =====*/ ) {
                            // summary:
                            //		May be overridden to return CSS classes to associate with the date entry for the given dateObject,
                            //		for example to indicate a holiday in specified locale.
                            // dateObject: Date
                            // locale: String?
                            // tags:
                            //		extension

                            /*=====
                            			return ""; // String
                            =====*/
                        }
                    });

                Calendar._MonthDropDownButton = declare("dijit.Calendar._MonthDropDownButton", DropDownButton, {
                    // summary:
                    //		DropDownButton for the current month.    Displays name of current month
                    //		and a list of month names in the drop down

                    onMonthSelect: function() {},

                    postCreate: function() {
                        this.inherited(arguments);
                        this.dropDown = new Calendar._MonthDropDown({
                            id: this.id + "_mdd", //do not change this id because it is referenced in the template
                            onChange: this.onMonthSelect
                        });
                    },
                    _setMonthAttr: function(month) {
                        // summary:
                        //		Set the current month to display as a label
                        var monthNames = this.dateLocaleModule.getNames('months', 'wide', 'standAlone', this.lang, month);
                        this.dropDown.set("months", monthNames);

                        // Set name of current month and also fill in spacer element with all the month names
                        // (invisible) so that the maximum width will affect layout.   But not on IE6 because then
                        // the center <TH> overlaps the right <TH> (due to a browser bug).
                        this.containerNode.innerHTML =
                            (has("ie") == 6 ? "" : "<div class='dijitSpacer'>" + this.dropDown.domNode.innerHTML + "</div>") +
                            "<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>" + monthNames[month.getMonth()] + "</div>";
                    }
                });

                Calendar._MonthDropDown = declare("dijit.Calendar._MonthDropDown", [_Widget, _TemplatedMixin], {
                    // summary:
                    //		The list-of-months drop down from the MonthDropDownButton

                    // months: String[]
                    //		List of names of months, possibly w/some undefined entries for Hebrew leap months
                    //		(ex: ["January", "February", undefined, "April", ...])
                    months: [],

                    templateString: "<div class='dijitCalendarMonthMenu dijitMenu' " +
                        "data-dojo-attach-event='onclick:_onClick,onmouseover:_onMenuHover,onmouseout:_onMenuHover'></div>",

                    _setMonthsAttr: function( /*String[]*/ months) {
                        this.domNode.innerHTML = array.map(months, function(month, idx) {
                            return month ? "<div class='dijitCalendarMonthLabel' month='" + idx + "'>" + month + "</div>" : "";
                        }).join("");
                    },

                    _onClick: function( /*Event*/ evt) {
                        this.onChange(domAttr.get(evt.target, "month"));
                    },

                    onChange: function( /*Number*/ /*===== month =====*/ ) {
                        // summary:
                        //		Callback when month is selected from drop down
                    },

                    _onMenuHover: function(evt) {
                        domClass.toggle(evt.target, "dijitCalendarMonthLabelHover", evt.type == "mouseover");
                    }
                });

                return Calendar;
            });

        },
        'dijit/form/_ToggleButtonMixin': function() {
            define("dijit/form/_ToggleButtonMixin", [
                "dojo/_base/declare", // declare
                "dojo/dom-attr" // domAttr.set
            ], function(declare, domAttr) {

                // module:
                //		dijit/form/_ToggleButtonMixin

                return declare("dijit.form._ToggleButtonMixin", null, {
                    // summary:
                    //		A mixin to provide functionality to allow a button that can be in two states (checked or not).

                    // checked: Boolean
                    //		Corresponds to the native HTML `<input>` element's attribute.
                    //		In markup, specified as "checked='checked'" or just "checked".
                    //		True if the button is depressed, or the checkbox is checked,
                    //		or the radio button is selected, etc.
                    checked: false,

                    // aria-pressed for toggle buttons, and aria-checked for checkboxes
                    _aria_attr: "aria-pressed",

                    _onClick: function( /*Event*/ evt) {
                        var original = this.checked;
                        this._set('checked', !original); // partially set the toggled value, assuming the toggle will work, so it can be overridden in the onclick handler
                        var ret = this.inherited(arguments); // the user could reset the value here
                        this.set('checked', ret ? this.checked : original); // officially set the toggled or user value, or reset it back
                        return ret;
                    },

                    _setCheckedAttr: function( /*Boolean*/ value, /*Boolean?*/ priorityChange) {
                        this._set("checked", value);
                        domAttr.set(this.focusNode || this.domNode, "checked", value);
                        (this.focusNode || this.domNode).setAttribute(this._aria_attr, value ? "true" : "false"); // aria values should be strings
                        this._handleOnChange(value, priorityChange);
                    },

                    reset: function() {
                        // summary:
                        //		Reset the widget's value to what it was at initialization time

                        this._hasBeenBlurred = false;

                        // set checked state to original setting
                        this.set('checked', this.params.checked || false);
                    }
                });

            });

        },
        'dijit/_Widget': function() {
            define("dijit/_Widget", [
                "dojo/aspect", // aspect.around
                "dojo/_base/config", // config.isDebug
                "dojo/_base/connect", // connect.connect
                "dojo/_base/declare", // declare
                "dojo/has",
                "dojo/_base/kernel", // kernel.deprecated
                "dojo/_base/lang", // lang.hitch
                "dojo/query",
                "dojo/ready",
                "./registry", // registry.byNode
                "./_WidgetBase",
                "./_OnDijitClickMixin",
                "./_FocusMixin",
                "dojo/uacss", // browser sniffing (included for back-compat; subclasses may be using)
                "./hccss" // high contrast mode sniffing (included to set CSS classes on <body>, module ret value unused)
            ], function(aspect, config, connect, declare, has, kernel, lang, query, ready,
                registry, _WidgetBase, _OnDijitClickMixin, _FocusMixin) {


                // module:
                //		dijit/_Widget


                function connectToDomNode() {
                    // summary:
                    //		If user connects to a widget method === this function, then they will
                    //		instead actually be connecting the equivalent event on this.domNode
                }

                // Trap dojo.connect() calls to connectToDomNode methods, and redirect to _Widget.on()
                function aroundAdvice(originalConnect) {
                    return function(obj, event, scope, method) {
                        if (obj && typeof event == "string" && obj[event] == connectToDomNode) {
                            return obj.on(event.substring(2).toLowerCase(), lang.hitch(scope, method));
                        }
                        return originalConnect.apply(connect, arguments);
                    };
                }
                aspect.around(connect, "connect", aroundAdvice);
                if (kernel.connect) {
                    aspect.around(kernel, "connect", aroundAdvice);
                }

                var _Widget = declare("dijit._Widget", [_WidgetBase, _OnDijitClickMixin, _FocusMixin], {
                    // summary:
                    //		Old base class for widgets.   New widgets should extend `dijit/_WidgetBase` instead
                    // description:
                    //		Old Base class for Dijit widgets.
                    //
                    //		Extends _WidgetBase, adding support for:
                    //
                    //		- declaratively/programatically specifying widget initialization parameters like
                    //			onMouseMove="foo" that call foo when this.domNode gets a mousemove event
                    //		- ondijitclick:
                    //			Support new data-dojo-attach-event="ondijitclick: ..." that is triggered by a mouse click or a SPACE/ENTER keypress
                    //		- focus related functions:
                    //			In particular, the onFocus()/onBlur() callbacks.   Driven internally by
                    //			dijit/_base/focus.js.
                    //		- deprecated methods
                    //		- onShow(), onHide(), onClose()
                    //
                    //		Also, by loading code in dijit/_base, turns on:
                    //
                    //		- browser sniffing (putting browser class like `dj_ie` on `<html>` node)
                    //		- high contrast mode sniffing (add `dijit_a11y` class to `<body>` if machine is in high contrast mode)


                    ////////////////// DEFERRED CONNECTS ///////////////////

                    onClick: connectToDomNode,
                    /*=====
                    onClick: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of mouse click events.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onDblClick: connectToDomNode,
                    /*=====
                    onDblClick: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of mouse double click events.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onKeyDown: connectToDomNode,
                    /*=====
                    onKeyDown: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of keys being pressed down.
                    	// event:
                    	//		key Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onKeyPress: connectToDomNode,
                    /*=====
                    onKeyPress: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of printable keys being typed.
                    	// event:
                    	//		key Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onKeyUp: connectToDomNode,
                    /*=====
                    onKeyUp: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of keys being released.
                    	// event:
                    	//		key Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseDown: connectToDomNode,
                    /*=====
                    onMouseDown: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse button is pressed down.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseMove: connectToDomNode,
                    /*=====
                    onMouseMove: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse moves over nodes contained within this widget.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseOut: connectToDomNode,
                    /*=====
                    onMouseOut: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse moves off of nodes contained within this widget.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseOver: connectToDomNode,
                    /*=====
                    onMouseOver: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse moves onto nodes contained within this widget.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseLeave: connectToDomNode,
                    /*=====
                    onMouseLeave: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse moves off of this widget.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseEnter: connectToDomNode,
                    /*=====
                    onMouseEnter: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse moves onto this widget.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/
                    onMouseUp: connectToDomNode,
                    /*=====
                    onMouseUp: function(event){
                    	// summary:
                    	//		Connect to this function to receive notifications of when the mouse button is released.
                    	// event:
                    	//		mouse Event
                    	// tags:
                    	//		callback
                    },
                    =====*/

                    constructor: function(params /*===== ,srcNodeRef =====*/ ) {
                        // summary:
                        //		Create the widget.
                        // params: Object|null
                        //		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
                        //		and functions, typically callbacks like onClick.
                        //		The hash can contain any of the widget's properties, excluding read-only properties.
                        // srcNodeRef: DOMNode|String?
                        //		If a srcNodeRef (DOM node) is specified:
                        //
                        //		- use srcNodeRef.innerHTML as my contents
                        //		- if this is a behavioral widget then apply behavior to that srcNodeRef
                        //		- otherwise, replace srcNodeRef with my generated DOM tree

                        // extract parameters like onMouseMove that should connect directly to this.domNode
                        this._toConnect = {};
                        for (var name in params) {
                            if (this[name] === connectToDomNode) {
                                this._toConnect[name.replace(/^on/, "").toLowerCase()] = params[name];
                                delete params[name];
                            }
                        }
                    },

                    postCreate: function() {
                        this.inherited(arguments);

                        // perform connection from this.domNode to user specified handlers (ex: onMouseMove)
                        for (var name in this._toConnect) {
                            this.on(name, this._toConnect[name]);
                        }
                        delete this._toConnect;
                    },

                    on: function( /*String|Function*/ type, /*Function*/ func) {
                        if (this[this._onMap(type)] === connectToDomNode) {
                            // Use connect.connect() rather than on() to get handling for "onmouseenter" on non-IE,
                            // normalization of onkeypress/onkeydown to behave like firefox, etc.
                            // Also, need to specify context as "this" rather than the default context of the DOMNode
                            // Remove in 2.0.
                            return connect.connect(this.domNode, type.toLowerCase(), this, func);
                        }
                        return this.inherited(arguments);
                    },

                    _setFocusedAttr: function(val) {
                        // Remove this method in 2.0 (or sooner), just here to set _focused == focused, for back compat
                        // (but since it's a private variable we aren't required to keep supporting it).
                        this._focused = val;
                        this._set("focused", val);
                    },

                    ////////////////// DEPRECATED METHODS ///////////////////

                    setAttribute: function( /*String*/ attr, /*anything*/ value) {
                        // summary:
                        //		Deprecated.  Use set() instead.
                        // tags:
                        //		deprecated
                        kernel.deprecated(this.declaredClass + "::setAttribute(attr, value) is deprecated. Use set() instead.", "", "2.0");
                        this.set(attr, value);
                    },

                    attr: function( /*String|Object*/ name, /*Object?*/ value) {
                        // summary:
                        //		Set or get properties on a widget instance.
                        // name:
                        //		The property to get or set. If an object is passed here and not
                        //		a string, its keys are used as names of attributes to be set
                        //		and the value of the object as values to set in the widget.
                        // value:
                        //		Optional. If provided, attr() operates as a setter. If omitted,
                        //		the current value of the named property is returned.
                        // description:
                        //		This method is deprecated, use get() or set() directly.

                        // Print deprecation warning but only once per calling function
                        if (config.isDebug) {
                            var alreadyCalledHash = arguments.callee._ach || (arguments.callee._ach = {}),
                                caller = (arguments.callee.caller || "unknown caller").toString();
                            if (!alreadyCalledHash[caller]) {
                                kernel.deprecated(this.declaredClass + "::attr() is deprecated. Use get() or set() instead, called from " +
                                    caller, "", "2.0");
                                alreadyCalledHash[caller] = true;
                            }
                        }

                        var args = arguments.length;
                        if (args >= 2 || typeof name === "object") { // setter
                            return this.set.apply(this, arguments);
                        } else { // getter
                            return this.get(name);
                        }
                    },

                    getDescendants: function() {
                        // summary:
                        //		Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.
                        //		This method should generally be avoided as it returns widgets declared in templates, which are
                        //		supposed to be internal/hidden, but it's left here for back-compat reasons.

                        kernel.deprecated(this.declaredClass + "::getDescendants() is deprecated. Use getChildren() instead.", "", "2.0");
                        return this.containerNode ? query('[widgetId]', this.containerNode).map(registry.byNode) : []; // dijit/_WidgetBase[]
                    },

                    ////////////////// MISCELLANEOUS METHODS ///////////////////

                    _onShow: function() {
                        // summary:
                        //		Internal method called when this widget is made visible.
                        //		See `onShow` for details.
                        this.onShow();
                    },

                    onShow: function() {
                        // summary:
                        //		Called when this widget becomes the selected pane in a
                        //		`dijit/layout/TabContainer`, `dijit/layout/StackContainer`,
                        //		`dijit/layout/AccordionContainer`, etc.
                        //
                        //		Also called to indicate display of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.
                        // tags:
                        //		callback
                    },

                    onHide: function() {
                        // summary:
                        //		Called when another widget becomes the selected pane in a
                        //		`dijit/layout/TabContainer`, `dijit/layout/StackContainer`,
                        //		`dijit/layout/AccordionContainer`, etc.
                        //
                        //		Also called to indicate hide of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.
                        // tags:
                        //		callback
                    },

                    onClose: function() {
                        // summary:
                        //		Called when this widget is being displayed as a popup (ex: a Calendar popped
                        //		up from a DateTextBox), and it is hidden.
                        //		This is called from the dijit.popup code, and should not be called directly.
                        //
                        //		Also used as a parameter for children of `dijit/layout/StackContainer` or subclasses.
                        //		Callback if a user tries to close the child.   Child will be closed if this function returns true.
                        // tags:
                        //		extension

                        return true; // Boolean
                    }
                });

                // For back-compat, remove in 2.0.
                if (has("dijit-legacy-requires")) {
                    ready(0, function() {
                        var requires = ["dijit/_base"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }
                return _Widget;
            });

        },
        'dojo/json': function() {
            define(["./has"], function(has) {
                "use strict";
                var hasJSON = typeof JSON != "undefined";
                has.add("json-parse", hasJSON); // all the parsers work fine
                // Firefox 3.5/Gecko 1.9 fails to use replacer in stringify properly https://bugzilla.mozilla.org/show_bug.cgi?id=509184
                has.add("json-stringify", hasJSON && JSON.stringify({
                    a: 0
                }, function(k, v) {
                    return v || 1;
                }) == '{"a":1}');

                /*=====
                return {
                	// summary:
                	//		Functions to parse and serialize JSON

                	parse: function(str, strict){
                		// summary:
                		//		Parses a [JSON](http://json.org) string to return a JavaScript object.
                		// description:
                		//		This function follows [native JSON API](https://developer.mozilla.org/en/JSON)
                		//		Throws for invalid JSON strings. This delegates to eval() if native JSON
                		//		support is not available. By default this will evaluate any valid JS expression.
                		//		With the strict parameter set to true, the parser will ensure that only
                		//		valid JSON strings are parsed (otherwise throwing an error). Without the strict
                		//		parameter, the content passed to this method must come
                		//		from a trusted source.
                		// str:
                		//		a string literal of a JSON item, for instance:
                		//		`'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'`
                		// strict:
                		//		When set to true, this will ensure that only valid, secure JSON is ever parsed.
                		//		Make sure this is set to true for untrusted content. Note that on browsers/engines
                		//		without native JSON support, setting this to true will run slower.
                	},
                	stringify: function(value, replacer, spacer){
                		// summary:
                		//		Returns a [JSON](http://json.org) serialization of an object.
                		// description:
                		//		Returns a [JSON](http://json.org) serialization of an object.
                		//		This function follows [native JSON API](https://developer.mozilla.org/en/JSON)
                		//		Note that this doesn't check for infinite recursion, so don't do that!
                		// value:
                		//		A value to be serialized.
                		// replacer:
                		//		A replacer function that is called for each value and can return a replacement
                		// spacer:
                		//		A spacer string to be used for pretty printing of JSON
                		// example:
                		//		simple serialization of a trivial object
                		//	|	define(["dojo/json"], function(JSON){
                		// 	|		var jsonStr = JSON.stringify({ howdy: "stranger!", isStrange: true });
                		//	|		doh.is('{"howdy":"stranger!","isStrange":true}', jsonStr);
                	}
                };
                =====*/

                if (has("json-stringify")) {
                    return JSON;
                } else {
                    var escapeString = function( /*String*/ str) {
                        // summary:
                        //		Adds escape sequences for non-visual characters, double quote and
                        //		backslash and surrounds with double quotes to form a valid string
                        //		literal.
                        return ('"' + str.replace(/(["\\])/g, '\\$1') + '"').
                        replace(/[\f]/g, "\\f").replace(/[\b]/g, "\\b").replace(/[\n]/g, "\\n").
                        replace(/[\t]/g, "\\t").replace(/[\r]/g, "\\r"); // string
                    };
                    return {
                        parse: has("json-parse") ? JSON.parse : function(str, strict) {
                            if (strict && !/^([\s\[\{]*(?:"(?:\\.|[^"])+"|-?\d[\d\.]*(?:[Ee][+-]?\d+)?|null|true|false|)[\s\]\}]*(?:,|:|$))+$/.test(str)) {
                                throw new SyntaxError("Invalid characters in JSON");
                            }
                            return eval('(' + str + ')');
                        },
                        stringify: function(value, replacer, spacer) {
                            var undef;
                            if (typeof replacer == "string") {
                                spacer = replacer;
                                replacer = null;
                            }

                            function stringify(it, indent, key) {
                                if (replacer) {
                                    it = replacer(key, it);
                                }
                                var val, objtype = typeof it;
                                if (objtype == "number") {
                                    return isFinite(it) ? it + "" : "null";
                                }
                                if (objtype == "boolean") {
                                    return it + "";
                                }
                                if (it === null) {
                                    return "null";
                                }
                                if (typeof it == "string") {
                                    return escapeString(it);
                                }
                                if (objtype == "function" || objtype == "undefined") {
                                    return undef; // undefined
                                }
                                // short-circuit for objects that support "json" serialization
                                // if they return "self" then just pass-through...
                                if (typeof it.toJSON == "function") {
                                    return stringify(it.toJSON(key), indent, key);
                                }
                                if (it instanceof Date) {
                                    return '"{FullYear}-{Month+}-{Date}T{Hours}:{Minutes}:{Seconds}Z"'.replace(/\{(\w+)(\+)?\}/g, function(t, prop, plus) {
                                        var num = it["getUTC" + prop]() + (plus ? 1 : 0);
                                        return num < 10 ? "0" + num : num;
                                    });
                                }
                                if (it.valueOf() !== it) {
                                    // primitive wrapper, try again unwrapped:
                                    return stringify(it.valueOf(), indent, key);
                                }
                                var nextIndent = spacer ? (indent + spacer) : "";
                                /* we used to test for DOM nodes and throw, but FF serializes them as {}, so cross-browser consistency is probably not efficiently attainable */

                                var sep = spacer ? " " : "";
                                var newLine = spacer ? "\n" : "";

                                // array
                                if (it instanceof Array) {
                                    var itl = it.length,
                                        res = [];
                                    for (key = 0; key < itl; key++) {
                                        var obj = it[key];
                                        val = stringify(obj, nextIndent, key);
                                        if (typeof val != "string") {
                                            val = "null";
                                        }
                                        res.push(newLine + nextIndent + val);
                                    }
                                    return "[" + res.join(",") + newLine + indent + "]";
                                }
                                // generic object code path
                                var output = [];
                                for (key in it) {
                                    var keyStr;
                                    if (it.hasOwnProperty(key)) {
                                        if (typeof key == "number") {
                                            keyStr = '"' + key + '"';
                                        } else if (typeof key == "string") {
                                            keyStr = escapeString(key);
                                        } else {
                                            // skip non-string or number keys
                                            continue;
                                        }
                                        val = stringify(it[key], nextIndent, key);
                                        if (typeof val != "string") {
                                            // skip non-serializable values
                                            continue;
                                        }
                                        // At this point, the most non-IE browsers don't get in this branch 
                                        // (they have native JSON), so push is definitely the way to
                                        output.push(newLine + nextIndent + keyStr + ":" + sep + val);
                                    }
                                }
                                return "{" + output.join(",") + newLine + indent + "}"; // String
                            }
                            return stringify(value, "", "");
                        }
                    };
                }
            });

        },
        'hsbcwidget/randCharChal_02': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dijit/_TemplatedMixin",
                    "dijit/_WidgetsInTemplateMixin",
                    "dojo/query",
                    "dojo/_base/array",
                    "dojo/_base/lang",
                    "dojo/dom-attr",
                    "dojo/dom-class",
                    "dojo/html",
                    "dojo/text!hsbcwidget/themes/ursula/templates/randCharChal.html",
                    "dijit/focus",
                    "dojo/on",
                    "dijit/Tooltip",
                    "dojo/parser",
                    "dojo/NodeList-traverse"

                ],
                function(declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, query, array, lang, domAttr, domClass, html, template, focusUtil, on, Tooltip, parser) {

                    return declare("dijit.randCharChal", [_WidgetBase, _TemplatedMixin], {
                        templateString: template,
                        widgetsInTemplate: true,
                        chalNums: null,

                        staticTemplateData: null,

                        constructor: function(kwArgs) {
                            var staticTemplateData = {

                            };


                            if ('staticTemplateData' in kwArgs) {
                                lang.mixin(staticTemplateData, kwArgs.staticTemplateData);
                                kwArgs.staticTemplateData = staticTemplateData;
                            } else {
                                this.staticTemplateData = staticTemplateData;
                            }

                            this.chalNums = [];

                            staticTemplateData = null;
                        },

                        postCreate: function() {
                            this.inherited(arguments);
                            var self = this;

                            this.init();
                            this.setLabel();

                            parser.parse(this.domNode);
                        },

                        init: function() {
                            var self = this;

                            this.$inputs = query('.jsInputWrapper input[type="password"]', this.domNode);

                            this.$inputs.forEach(function($input, index) {

                                if (array.indexOf(self.chalNums, index + 1) !== -1) {
                                    domAttr.remove($input, 'disabled');
                                    domClass.add($input, 'active');

                                    on($input, 'keyup', function(e) {
                                        var $this = query(e.currentTarget);
                                        var key = (e.keyCode ? e.keyCode : e.which);

                                        if (key >= 48 && key <= 105) {
                                            var $nextNode = $this.nextAll('.active')[0];
                                            if (typeof $nextNode === 'undefined') return;

                                            focusUtil.focus($nextNode);
                                        }
                                    });

                                    on($input, 'blur', function() {
                                        self.validate($input);
                                    });
                                }

                            });
                        },

                        setLabel: function() {
                            var self = this,
                                $label = query('label', self.domNode),
                                $items = query('span', $label[0]);

                            if ($items.length !== self.chalNums.length) {
                                throw new Error('randCharChal: number of spans in label does not match number of active challenge items.')
                            } else {
                                $items.forEach(function($span, index) {
                                    var text = 'FIRST';
                                    switch (self.chalNums[index]) {
                                        case 2:
                                            text = 'SECOND';
                                            break;
                                        case 3:
                                            text = 'THIRD';
                                            break;
                                        case 4:
                                            text = 'FOURTH';
                                            break;
                                        case 5:
                                            text = 'FIFTH';
                                            break;
                                        case 6:
                                            text = 'SIXTH';
                                            break;
                                        case 7:
                                            text = 'SECOND TO LAST';
                                            break;
                                        case 8:
                                            text = 'LAST';
                                            break;
                                    }
                                    html.set($span, text);
                                });
                            }
                        },

                        validate: function($input) {
                            var self = this;
                            var SvalidationMegShow = false;
                            var $validDiv = query('.jsInputWrapper .rValidationMsg', this.domNode)[0];


                            if (!$input.value) {
                                domClass.add($input, 'SvalidationMsg');
                                $validDiv && domClass.remove($validDiv, 'ValidationMsgHide');
                            } else {
                                domClass.remove($input, 'SvalidationMsg');
                            }

                            for (var i = 0; i < this.$inputs.length; i++) {
                                if (domClass.contains(this.$inputs[i], 'SvalidationMsg')) {
                                    SvalidationMegShow = true;
                                }
                            }

                            if (!SvalidationMegShow) {
                                $validDiv && domClass.add($validDiv, 'ValidationMsgHide');
                            }

                            SvalidationMegShow = false;
                        },

                        reset: function() {
                            var self = this;

                            query('.jsInputWrapper input[type="text"]', this.domNode).forEach(function($input, index) {
                                domAttr.add($input, 'disabled', 'disabled');
                                domClass.remove($input, 'active');
                            });

                            this.init();
                        }
                    });

                }
            );
        },
        'dojo/touch': function() {
            define("dojo/touch", ["./_base/kernel", "./_base/lang", "./aspect", "./dom", "./on", "./has", "./mouse", "./ready", "./_base/window"],
                function(dojo, lang, aspect, dom, on, has, mouse, ready, win) {

                    // module:
                    //		dojo/touch

                    var hasTouch = has("touch");

                    // TODO for 2.0: detection of IOS version should be moved from mobile/sniff to dojo/sniff
                    var ios4 = false;
                    if (has("ios")) {
                        var ua = navigator.userAgent;
                        var v = ua.match(/OS ([\d_]+)/) ? RegExp.$1 : "1";
                        var os = parseFloat(v.replace(/_/, '.').replace(/_/g, ''));
                        ios4 = os < 5;
                    }

                    var touchmove, hoveredNode;

                    if (hasTouch) {
                        ready(function() {
                            // Keep track of currently hovered node
                            hoveredNode = win.body(); // currently hovered node

                            win.doc.addEventListener("touchstart", function(evt) {
                                // Precede touchstart event with touch.over event.  DnD depends on this.
                                // Use addEventListener(cb, true) to run cb before any touchstart handlers on node run,
                                // and to ensure this code runs even if the listener on the node does event.stop().
                                var oldNode = hoveredNode;
                                hoveredNode = evt.target;
                                on.emit(oldNode, "dojotouchout", {
                                    target: oldNode,
                                    relatedTarget: hoveredNode,
                                    bubbles: true
                                });
                                on.emit(hoveredNode, "dojotouchover", {
                                    target: hoveredNode,
                                    relatedTarget: oldNode,
                                    bubbles: true
                                });
                            }, true);

                            // Fire synthetic touchover and touchout events on nodes since the browser won't do it natively.
                            on(win.doc, "touchmove", function(evt) {
                                var newNode = win.doc.elementFromPoint(
                                    evt.pageX - (ios4 ? 0 : win.global.pageXOffset), // iOS 4 expects page coords
                                    evt.pageY - (ios4 ? 0 : win.global.pageYOffset)
                                );
                                if (newNode && hoveredNode !== newNode) {
                                    // touch out on the old node
                                    on.emit(hoveredNode, "dojotouchout", {
                                        target: hoveredNode,
                                        relatedTarget: newNode,
                                        bubbles: true
                                    });

                                    // touchover on the new node
                                    on.emit(newNode, "dojotouchover", {
                                        target: newNode,
                                        relatedTarget: hoveredNode,
                                        bubbles: true
                                    });

                                    hoveredNode = newNode;
                                }
                            });
                        });

                        // Define synthetic touchmove event that unlike the native touchmove, fires for the node the finger is
                        // currently dragging over rather than the node where the touch started.
                        touchmove = function(node, listener) {
                            return on(win.doc, "touchmove", function(evt) {
                                if (node === win.doc || dom.isDescendant(hoveredNode, node)) {
                                    listener.call(this, lang.mixin({}, evt, {
                                        target: hoveredNode,
                                        // forcing the copy of the "touches" property is needed for iOS6:
                                        // differently than in iOS 4 and 5, the code used by lang.mixin
                                        // to iterate over the properties of the source object:
                                        //   for(name in source){ ... }
                                        // does not hit anymore the "touches" property... Apparently it 
                                        // became a "non-enumerable" property.
                                        touches: evt.touches,
                                        preventDefault: function() {
                                            evt.preventDefault();
                                        },
                                        stopPropagation: function() {
                                            evt.stopPropagation();
                                        }
                                    }));
                                }
                            });
                        };
                    }


                    function _handle(type) {
                        // type: String
                        //		press | move | release | cancel

                        return function(node, listener) { //called by on(), see dojo.on
                            return on(node, type, listener);
                        };
                    }

                    //device neutral events - touch.press|move|release|cancel/over/out
                    var touch = {
                        press: _handle(hasTouch ? "touchstart" : "mousedown"),
                        move: hasTouch ? touchmove : _handle("mousemove"),
                        release: _handle(hasTouch ? "touchend" : "mouseup"),
                        cancel: hasTouch ? _handle("touchcancel") : mouse.leave,
                        over: _handle(hasTouch ? "dojotouchover" : "mouseover"),
                        out: _handle(hasTouch ? "dojotouchout" : "mouseout"),
                        enter: mouse._eventHandler(hasTouch ? "dojotouchover" : "mouseover"),
                        leave: mouse._eventHandler(hasTouch ? "dojotouchout" : "mouseout")
                    };
                    /*=====
                    touch = {
                    	// summary:
                    	//		This module provides unified touch event handlers by exporting
                    	//		press, move, release and cancel which can also run well on desktop.
                    	//		Based on http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html
                    	//
                    	// example:
                    	//		Used with dojo.on
                    	//		|	define(["dojo/on", "dojo/touch"], function(on, touch){
                    	//		|		on(node, touch.press, function(e){});
                    	//		|		on(node, touch.move, function(e){});
                    	//		|		on(node, touch.release, function(e){});
                    	//		|		on(node, touch.cancel, function(e){});
                    	// example:
                    	//		Used with touch.* directly
                    	//		|	touch.press(node, function(e){});
                    	//		|	touch.move(node, function(e){});
                    	//		|	touch.release(node, function(e){});
                    	//		|	touch.cancel(node, function(e){});

                    	press: function(node, listener){
                    		// summary:
                    		//		Register a listener to 'touchstart'|'mousedown' for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	move: function(node, listener){
                    		// summary:
                    		//		Register a listener to 'touchmove'|'mousemove' for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	release: function(node, listener){
                    		// summary:
                    		//		Register a listener to 'touchend'|'mouseup' for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	cancel: function(node, listener){
                    		// summary:
                    		//		Register a listener to 'touchcancel'|'mouseleave' for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	over: function(node, listener){
                    		// summary:
                    		//		Register a listener to 'mouseover' or touch equivalent for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	out: function(node, listener){
                    		// summary:
                    		//		Register a listener to 'mouseout' or touch equivalent for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	enter: function(node, listener){
                    		// summary:
                    		//		Register a listener to mouse.enter or touch equivalent for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	},
                    	leave: function(node, listener){
                    		// summary:
                    		//		Register a listener to mouse.leave or touch equivalent for the given node
                    		// node: Dom
                    		//		Target node to listen to
                    		// listener: Function
                    		//		Callback function
                    		// returns:
                    		//		A handle which will be used to remove the listener by handle.remove()
                    	}
                    };
                    =====*/

                    1 && (dojo.touch = touch);

                    return touch;
                });

        },
        'url:dijit/form/templates/Select.html': "<table class=\"dijit dijitReset dijitInline dijitLeft\"\n\tdata-dojo-attach-point=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\n\trole=\"listbox\" aria-haspopup=\"true\"\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents\" role=\"presentation\"\n\t\t\t><div class=\"dijitReset dijitInputField dijitButtonText\"  data-dojo-attach-point=\"containerNode,_popupStateNode\" role=\"presentation\"></div\n\t\t\t><div class=\"dijitReset dijitValidationContainer\"\n\t\t\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t/></div\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} data-dojo-attach-point=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\n\t\t/></td\n\t\t><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer\"\n\t\t\tdata-dojo-attach-point=\"titleNode\" role=\"presentation\"\n\t\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\n\t\t\t\t${_buttonInputDisabled}\n\t\t/></td\n\t></tr></tbody\n></table>\n",
        'dojo/fx': function() {
            define([
                "./_base/lang",
                "./Evented",
                "./_base/kernel",
                "./_base/array",
                "./_base/connect",
                "./_base/fx",
                "./dom",
                "./dom-style",
                "./dom-geometry",
                "./ready",
                "require" // for context sensitive loading of Toggler
            ], function(lang, Evented, dojo, arrayUtil, connect, baseFx, dom, domStyle, geom, ready, require) {

                // module:
                //		dojo/fx

                // For back-compat, remove in 2.0.
                if (!dojo.isAsync) {
                    ready(0, function() {
                        var requires = ["./fx/Toggler"];
                        require(requires); // use indirection so modules not rolled into a build
                    });
                }

                var coreFx = dojo.fx = {
                    // summary:
                    //		Effects library on top of Base animations
                };

                var _baseObj = {
                    _fire: function(evt, args) {
                        if (this[evt]) {
                            this[evt].apply(this, args || []);
                        }
                        return this;
                    }
                };

                var _chain = function(animations) {
                    this._index = -1;
                    this._animations = animations || [];
                    this._current = this._onAnimateCtx = this._onEndCtx = null;

                    this.duration = 0;
                    arrayUtil.forEach(this._animations, function(a) {
                        this.duration += a.duration;
                        if (a.delay) {
                            this.duration += a.delay;
                        }
                    }, this);
                };
                _chain.prototype = new Evented();
                lang.extend(_chain, {
                    _onAnimate: function() {
                        this._fire("onAnimate", arguments);
                    },
                    _onEnd: function() {
                        connect.disconnect(this._onAnimateCtx);
                        connect.disconnect(this._onEndCtx);
                        this._onAnimateCtx = this._onEndCtx = null;
                        if (this._index + 1 == this._animations.length) {
                            this._fire("onEnd");
                        } else {
                            // switch animations
                            this._current = this._animations[++this._index];
                            this._onAnimateCtx = connect.connect(this._current, "onAnimate", this, "_onAnimate");
                            this._onEndCtx = connect.connect(this._current, "onEnd", this, "_onEnd");
                            this._current.play(0, true);
                        }
                    },
                    play: function( /*int?*/ delay, /*Boolean?*/ gotoStart) {
                        if (!this._current) {
                            this._current = this._animations[this._index = 0];
                        }
                        if (!gotoStart && this._current.status() == "playing") {
                            return this;
                        }
                        var beforeBegin = connect.connect(this._current, "beforeBegin", this, function() {
                                this._fire("beforeBegin");
                            }),
                            onBegin = connect.connect(this._current, "onBegin", this, function(arg) {
                                this._fire("onBegin", arguments);
                            }),
                            onPlay = connect.connect(this._current, "onPlay", this, function(arg) {
                                this._fire("onPlay", arguments);
                                connect.disconnect(beforeBegin);
                                connect.disconnect(onBegin);
                                connect.disconnect(onPlay);
                            });
                        if (this._onAnimateCtx) {
                            connect.disconnect(this._onAnimateCtx);
                        }
                        this._onAnimateCtx = connect.connect(this._current, "onAnimate", this, "_onAnimate");
                        if (this._onEndCtx) {
                            connect.disconnect(this._onEndCtx);
                        }
                        this._onEndCtx = connect.connect(this._current, "onEnd", this, "_onEnd");
                        this._current.play.apply(this._current, arguments);
                        return this;
                    },
                    pause: function() {
                        if (this._current) {
                            var e = connect.connect(this._current, "onPause", this, function(arg) {
                                this._fire("onPause", arguments);
                                connect.disconnect(e);
                            });
                            this._current.pause();
                        }
                        return this;
                    },
                    gotoPercent: function( /*Decimal*/ percent, /*Boolean?*/ andPlay) {
                        this.pause();
                        var offset = this.duration * percent;
                        this._current = null;
                        arrayUtil.some(this._animations, function(a) {
                            if (a.duration <= offset) {
                                this._current = a;
                                return true;
                            }
                            offset -= a.duration;
                            return false;
                        });
                        if (this._current) {
                            this._current.gotoPercent(offset / this._current.duration, andPlay);
                        }
                        return this;
                    },
                    stop: function( /*boolean?*/ gotoEnd) {
                        if (this._current) {
                            if (gotoEnd) {
                                for (; this._index + 1 < this._animations.length; ++this._index) {
                                    this._animations[this._index].stop(true);
                                }
                                this._current = this._animations[this._index];
                            }
                            var e = connect.connect(this._current, "onStop", this, function(arg) {
                                this._fire("onStop", arguments);
                                connect.disconnect(e);
                            });
                            this._current.stop();
                        }
                        return this;
                    },
                    status: function() {
                        return this._current ? this._current.status() : "stopped";
                    },
                    destroy: function() {
                        if (this._onAnimateCtx) {
                            connect.disconnect(this._onAnimateCtx);
                        }
                        if (this._onEndCtx) {
                            connect.disconnect(this._onEndCtx);
                        }
                    }
                });
                lang.extend(_chain, _baseObj);

                coreFx.chain = function( /*dojo/_base/fx.Animation[]*/ animations) {
                    // summary:
                    //		Chain a list of `dojo.Animation`s to run in sequence
                    //
                    // description:
                    //		Return a `dojo.Animation` which will play all passed
                    //		`dojo.Animation` instances in sequence, firing its own
                    //		synthesized events simulating a single animation. (eg:
                    //		onEnd of this animation means the end of the chain,
                    //		not the individual animations within)
                    //
                    // example:
                    //	Once `node` is faded out, fade in `otherNode`
                    //	|	fx.chain([
                    //	|		dojo.fadeIn({ node:node }),
                    //	|		dojo.fadeOut({ node:otherNode })
                    //	|	]).play();
                    //
                    return new _chain(animations); // dojo/_base/fx.Animation
                };

                var _combine = function(animations) {
                    this._animations = animations || [];
                    this._connects = [];
                    this._finished = 0;

                    this.duration = 0;
                    arrayUtil.forEach(animations, function(a) {
                        var duration = a.duration;
                        if (a.delay) {
                            duration += a.delay;
                        }
                        if (this.duration < duration) {
                            this.duration = duration;
                        }
                        this._connects.push(connect.connect(a, "onEnd", this, "_onEnd"));
                    }, this);

                    this._pseudoAnimation = new baseFx.Animation({
                        curve: [0, 1],
                        duration: this.duration
                    });
                    var self = this;
                    arrayUtil.forEach(["beforeBegin", "onBegin", "onPlay", "onAnimate", "onPause", "onStop", "onEnd"],
                        function(evt) {
                            self._connects.push(connect.connect(self._pseudoAnimation, evt,
                                function() {
                                    self._fire(evt, arguments);
                                }
                            ));
                        }
                    );
                };
                lang.extend(_combine, {
                    _doAction: function(action, args) {
                        arrayUtil.forEach(this._animations, function(a) {
                            a[action].apply(a, args);
                        });
                        return this;
                    },
                    _onEnd: function() {
                        if (++this._finished > this._animations.length) {
                            this._fire("onEnd");
                        }
                    },
                    _call: function(action, args) {
                        var t = this._pseudoAnimation;
                        t[action].apply(t, args);
                    },
                    play: function( /*int?*/ delay, /*Boolean?*/ gotoStart) {
                        this._finished = 0;
                        this._doAction("play", arguments);
                        this._call("play", arguments);
                        return this;
                    },
                    pause: function() {
                        this._doAction("pause", arguments);
                        this._call("pause", arguments);
                        return this;
                    },
                    gotoPercent: function( /*Decimal*/ percent, /*Boolean?*/ andPlay) {
                        var ms = this.duration * percent;
                        arrayUtil.forEach(this._animations, function(a) {
                            a.gotoPercent(a.duration < ms ? 1 : (ms / a.duration), andPlay);
                        });
                        this._call("gotoPercent", arguments);
                        return this;
                    },
                    stop: function( /*boolean?*/ gotoEnd) {
                        this._doAction("stop", arguments);
                        this._call("stop", arguments);
                        return this;
                    },
                    status: function() {
                        return this._pseudoAnimation.status();
                    },
                    destroy: function() {
                        arrayUtil.forEach(this._connects, connect.disconnect);
                    }
                });
                lang.extend(_combine, _baseObj);

                coreFx.combine = function( /*dojo/_base/fx.Animation[]*/ animations) {
                    // summary:
                    //		Combine a list of `dojo.Animation`s to run in parallel
                    //
                    // description:
                    //		Combine an array of `dojo.Animation`s to run in parallel,
                    //		providing a new `dojo.Animation` instance encompasing each
                    //		animation, firing standard animation events.
                    //
                    // example:
                    //	Fade out `node` while fading in `otherNode` simultaneously
                    //	|	fx.combine([
                    //	|		dojo.fadeIn({ node:node }),
                    //	|		dojo.fadeOut({ node:otherNode })
                    //	|	]).play();
                    //
                    // example:
                    //	When the longest animation ends, execute a function:
                    //	|	var anim = fx.combine([
                    //	|		dojo.fadeIn({ node: n, duration:700 }),
                    //	|		dojo.fadeOut({ node: otherNode, duration: 300 })
                    //	|	]);
                    //	|	dojo.connect(anim, "onEnd", function(){
                    //	|		// overall animation is done.
                    //	|	});
                    //	|	anim.play(); // play the animation
                    //
                    return new _combine(animations); // dojo/_base/fx.Animation
                };

                coreFx.wipeIn = function( /*Object*/ args) {
                    // summary:
                    //		Expand a node to it's natural height.
                    //
                    // description:
                    //		Returns an animation that will expand the
                    //		node defined in 'args' object from it's current height to
                    //		it's natural height (with no scrollbar).
                    //		Node must have no margin/border/padding.
                    //
                    // args: Object
                    //		A hash-map of standard `dojo.Animation` constructor properties
                    //		(such as easing: node: duration: and so on)
                    //
                    // example:
                    //	|	fx.wipeIn({
                    //	|		node:"someId"
                    //	|	}).play()
                    var node = args.node = dom.byId(args.node),
                        s = node.style,
                        o;

                    var anim = baseFx.animateProperty(lang.mixin({
                        properties: {
                            height: {
                                // wrapped in functions so we wait till the last second to query (in case value has changed)
                                start: function() {
                                    // start at current [computed] height, but use 1px rather than 0
                                    // because 0 causes IE to display the whole panel
                                    o = s.overflow;
                                    s.overflow = "hidden";
                                    if (s.visibility == "hidden" || s.display == "none") {
                                        s.height = "1px";
                                        s.display = "";
                                        s.visibility = "";
                                        return 1;
                                    } else {
                                        var height = domStyle.get(node, "height");
                                        return Math.max(height, 1);
                                    }
                                },
                                end: function() {
                                    return node.scrollHeight;
                                }
                            }
                        }
                    }, args));

                    var fini = function() {
                        s.height = "auto";
                        s.overflow = o;
                    };
                    connect.connect(anim, "onStop", fini);
                    connect.connect(anim, "onEnd", fini);

                    return anim; // dojo/_base/fx.Animation
                };

                coreFx.wipeOut = function( /*Object*/ args) {
                    // summary:
                    //		Shrink a node to nothing and hide it.
                    //
                    // description:
                    //		Returns an animation that will shrink node defined in "args"
                    //		from it's current height to 1px, and then hide it.
                    //
                    // args: Object
                    //		A hash-map of standard `dojo.Animation` constructor properties
                    //		(such as easing: node: duration: and so on)
                    //
                    // example:
                    //	|	fx.wipeOut({ node:"someId" }).play()

                    var node = args.node = dom.byId(args.node),
                        s = node.style,
                        o;

                    var anim = baseFx.animateProperty(lang.mixin({
                        properties: {
                            height: {
                                end: 1 // 0 causes IE to display the whole panel
                            }
                        }
                    }, args));

                    connect.connect(anim, "beforeBegin", function() {
                        o = s.overflow;
                        s.overflow = "hidden";
                        s.display = "";
                    });
                    var fini = function() {
                        s.overflow = o;
                        s.height = "auto";
                        s.display = "none";
                    };
                    connect.connect(anim, "onStop", fini);
                    connect.connect(anim, "onEnd", fini);

                    return anim; // dojo/_base/fx.Animation
                };

                coreFx.slideTo = function( /*Object*/ args) {
                    // summary:
                    //		Slide a node to a new top/left position
                    //
                    // description:
                    //		Returns an animation that will slide "node"
                    //		defined in args Object from its current position to
                    //		the position defined by (args.left, args.top).
                    //
                    // args: Object
                    //		A hash-map of standard `dojo.Animation` constructor properties
                    //		(such as easing: node: duration: and so on). Special args members
                    //		are `top` and `left`, which indicate the new position to slide to.
                    //
                    // example:
                    //	|	.slideTo({ node: node, left:"40", top:"50", units:"px" }).play()

                    var node = args.node = dom.byId(args.node),
                        top = null,
                        left = null;

                    var init = (function(n) {
                        return function() {
                            var cs = domStyle.getComputedStyle(n);
                            var pos = cs.position;
                            top = (pos == 'absolute' ? n.offsetTop : parseInt(cs.top) || 0);
                            left = (pos == 'absolute' ? n.offsetLeft : parseInt(cs.left) || 0);
                            if (pos != 'absolute' && pos != 'relative') {
                                var ret = geom.position(n, true);
                                top = ret.y;
                                left = ret.x;
                                n.style.position = "absolute";
                                n.style.top = top + "px";
                                n.style.left = left + "px";
                            }
                        };
                    })(node);
                    init();

                    var anim = baseFx.animateProperty(lang.mixin({
                        properties: {
                            top: args.top || 0,
                            left: args.left || 0
                        }
                    }, args));
                    connect.connect(anim, "beforeBegin", anim, init);

                    return anim; // dojo/_base/fx.Animation
                };

                return coreFx;
            });

        },
        'dijit/form/nls/ComboBox': function() {
            define("dijit/form/nls/ComboBox", {
                root:
                    //begin v1.x content
                    ({
                        previousMessage: "Previous choices",
                        nextMessage: "More choices"
                    })
                    //end v1.x content
                    ,
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });

        },
        'hsbcwidget/confirm': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/on"
                ],
                function(declare, _WidgetBase, on) {

                    return declare("hsbcdijit.confirm", [_WidgetBase], {
                        confirmText: null,
                        startup: function() {
                            var c = this.confirmText;
                            on(this, 'click', function(e) {
                                var r = confirm(c);
                                if (r != true) {
                                    e.preventDefault();
                                }
                            });

                        }
                    });

                }
            );
        },
        'hsbcwidget/DoormatController': function() {
            define(
                [
                    "dojo/_base/declare",
                    "dijit/_WidgetBase",
                    "dojo/query",
                    "dojo/_base/array",
                    "dojo/_base/lang",
                    "dojo/dom-style",
                    "dojo/dom-class",
                    "dojo/dom-attr",
                    "dojo/dom-geometry",
                    "dojo/on",
                    "dojo/_base/fx",
                    "dojo/mouse",
                    "dijit/focus",
                    "dojo/has"
                ],
                function(declare, _WidgetBase, query, array, lang, domStyle, domClass, domAttr, domGeom, on, fx, mouse, focusUtil, has) {

                    var Doormat = declare([_WidgetBase], {
                        index: null,
                        controller: null,
                        wrapperNode: null,
                        triggerNode: null,
                        skipLinkNode: null,
                        duration: 160,
                        leaveDelayTime: 600,
                        hoverDelayTime: 160,
                        status: 'closed',

                        openAnim: null,
                        closeAnim: null,

                        postCreate: function() {
                            //Find Nodes
                            this.triggerNode = query('a.mainTopNav', this.domNode)[0];
                            this.wrapperNode = query('.doormatWrapper', this.domNode)[0];
                            this.skipLinkNode = query('.skipLink a', this.wrapperNode)[0];
                            this.skipLinkLastNode = query('.skipLinkLast a', this.wrapperNode)[0];

                            //Get the wrapper ready
                            this.close(true);

                            this.setupEvents();
                        },

                        startup: function() {
                            this.inherited(arguments);

                            //Arrow Width
                            if (has("ie") <= 7) {
                                var arrowWidth = domGeom.getContentBox(this.domNode).w;
                                domStyle.set(query('.arrow:first', this.wrapperNode)[0], 'width', arrowWidth + 'px');
                            }
                        },

                        open: function(snap) {
                            var self = this;
                            snap = snap || false;

                            if (!this.openAnim) {
                                this.openAnim = fx.fadeIn({
                                    node: this.wrapperNode,
                                    onEnd: function() {
                                        self.status = 'open';
                                    },
                                    rate: 20
                                });
                            }

                            if (this.openAnim.status() === 'playing') {
                                return;
                            }

                            if (snap) {
                                this.openAnim.duration = 0;
                            } else {
                                this.openAnim.duration = this.duration;
                            }

                            domStyle.set(this.wrapperNode, 'display', 'block');
                            domAttr.set(this.wrapperNode, 'aria-hidden', 'false');

                            if (this.closeAnim && this.closeAnim.status() === 'playing') {
                                this.closeAnim.stop();
                            }
                            this.openAnim.play();
                        },

                        close: function(snap) {
                            var self = this;
                            snap = snap || false;

                            if (!this.closeAnim) {
                                this.closeAnim = fx.fadeOut({
                                    node: this.wrapperNode,
                                    onEnd: function() {
                                        domStyle.set(self.wrapperNode, 'display', 'none');
                                        domAttr.set(self.wrapperNode, 'aria-hidden', 'true');
                                        self.status = 'closed';
                                    },
                                    rate: 20
                                });
                            }

                            if (this.closeAnim.status() === 'playing') {
                                return;
                            }

                            if (snap) {
                                this.closeAnim.duration = 0;
                            } else {
                                this.closeAnim.duration = this.duration;
                            }

                            if (this.openAnim && this.openAnim.status() === 'playing') {
                                this.openAnim.stop();
                            }
                            this.closeAnim.play();

                        },

                        setupEvents: function() {
                            var self = this;

                            //Mouse Events
                            var leaveDelay,
                                hoverDelay;

                            on(this.triggerNode, mouse.enter, function(e) {
                                clearTimeout(leaveDelay);

                                hoverDelay = setTimeout(function() {
                                    self.controller.closeAll(self.index);
                                    self.close();
                                    self.open();
                                }, self.hoverDelayTime);

                            });

                            on(this.triggerNode, mouse.leave, function(e) {
                                clearTimeout(hoverDelay);
                            });

                            on(this.domNode, mouse.leave, function(e) {
                                leaveDelay = setTimeout(function() {
                                    self.close();
                                }, self.leaveDelayTime);
                            });

                            on(this.domNode, mouse.enter, function(e) {
                                clearTimeout(leaveDelay);
                            });


                            //Keybaord Events
                            var timeout;
                            //Open
                            on(this.triggerNode, 'keyup', function(e) {
                                e.preventDefault();
                                if (e.type === 'keyup' && e.which !== 13) {
                                    return;
                                }
                                self.open();
                            });

                            //Close
                            on(this.domNode, 'focusout', function(e) {
                                timeout = setTimeout(function() {
                                    self.close();
                                }, 0);
                            });

                            on(this.domNode, 'focusin', function(e) {
                                clearTimeout(timeout);
                            });
                        }

                    });

                    return declare([_WidgetBase], {
                        doormats: [],

                        postCreate: function() {
                            var self = this,
                                doormatNodes = query('li.level1', this.domNode);

                            domAttr.set(this.domNode, 'aria-relevant', 'all');
                            domAttr.set(this.domNode, 'aria-live', 'polite');

                            array.forEach(doormatNodes, lang.hitch(this, function(node, i) {
                                var doormat = new Doormat({
                                    index: i,
                                    controller: this
                                }, node);

                                if (doormat.skipLinkNode) {
                                    on(doormat.skipLinkNode, 'click', function(e) {
                                        e.preventDefault();

                                        var nextDoormat = self.doormats[i + 1];

                                        nextDoormat.open();
                                        focusUtil.focus(nextDoormat.triggerNode);
                                    });
                                } else if (doormat.skipLinkLastNode) {
                                    on(doormat.skipLinkLastNode, 'click, keyup', function(e) {
                                        e.preventDefault();
                                        if (e.type === 'keyup' && e.which !== 13) {
                                            return;
                                        }

                                        doormat.close();
                                        var fisrtFocusSkipLast = query('#innerPage a:first')[0];
                                        focusUtil.focus(fisrtFocusSkipLast);
                                    });
                                }

                                doormat.startup();

                                this.doormats.push(doormat);
                            }));

                        },

                        closeAll: function(ignoreIndex) {
                            array.forEach(this.doormats, function(doormat, i) {
                                if (ignoreIndex !== i) {
                                    doormat.close();
                                }
                            });
                        }
                    });

                }
            );
        },
        'dojo/dom-form': function() {
            define(["./_base/lang", "./dom", "./io-query", "./json"], function(lang, dom, ioq, json) {
                // module:
                //		dojo/dom-form

                function setValue( /*Object*/ obj, /*String*/ name, /*String*/ value) {
                    // summary:
                    //		For the named property in object, set the value. If a value
                    //		already exists and it is a string, convert the value to be an
                    //		array of values.

                    // Skip it if there is no value
                    if (value === null) {
                        return;
                    }

                    var val = obj[name];
                    if (typeof val == "string") { // inline'd type check
                        obj[name] = [val, value];
                    } else if (lang.isArray(val)) {
                        val.push(value);
                    } else {
                        obj[name] = value;
                    }
                }

                var exclude = "file|submit|image|reset|button";

                var form = {
                    // summary:
                    //		This module defines form-processing functions.

                    fieldToObject: function fieldToObject( /*DOMNode|String*/ inputNode) {
                        // summary:
                        //		Serialize a form field to a JavaScript object.
                        // description:
                        //		Returns the value encoded in a form field as
                        //		as a string or an array of strings. Disabled form elements
                        //		and unchecked radio and checkboxes are skipped.	Multi-select
                        //		elements are returned as an array of string values.
                        // inputNode: DOMNode|String
                        // returns: Object

                        var ret = null;
                        inputNode = dom.byId(inputNode);
                        if (inputNode) {
                            var _in = inputNode.name,
                                type = (inputNode.type || "").toLowerCase();
                            if (_in && type && !inputNode.disabled) {
                                if (type == "radio" || type == "checkbox") {
                                    if (inputNode.checked) {
                                        ret = inputNode.value;
                                    }
                                } else if (inputNode.multiple) {
                                    ret = [];
                                    var nodes = [inputNode.firstChild];
                                    while (nodes.length) {
                                        for (var node = nodes.pop(); node; node = node.nextSibling) {
                                            if (node.nodeType == 1 && node.tagName.toLowerCase() == "option") {
                                                if (node.selected) {
                                                    ret.push(node.value);
                                                }
                                            } else {
                                                if (node.nextSibling) {
                                                    nodes.push(node.nextSibling);
                                                }
                                                if (node.firstChild) {
                                                    nodes.push(node.firstChild);
                                                }
                                                break;
                                            }
                                        }
                                    }
                                } else {
                                    ret = inputNode.value;
                                }
                            }
                        }
                        return ret; // Object
                    },

                    toObject: function formToObject( /*DOMNode|String*/ formNode) {
                        // summary:
                        //		Serialize a form node to a JavaScript object.
                        // description:
                        //		Returns the values encoded in an HTML form as
                        //		string properties in an object which it then returns. Disabled form
                        //		elements, buttons, and other non-value form elements are skipped.
                        //		Multi-select elements are returned as an array of string values.
                        // formNode: DOMNode|String
                        // example:
                        //		This form:
                        //		|	<form id="test_form">
                        //		|		<input type="text" name="blah" value="blah">
                        //		|		<input type="text" name="no_value" value="blah" disabled>
                        //		|		<input type="button" name="no_value2" value="blah">
                        //		|		<select type="select" multiple name="multi" size="5">
                        //		|			<option value="blah">blah</option>
                        //		|			<option value="thud" selected>thud</option>
                        //		|			<option value="thonk" selected>thonk</option>
                        //		|		</select>
                        //		|	</form>
                        //
                        //		yields this object structure as the result of a call to
                        //		formToObject():
                        //
                        //		|	{
                        //		|		blah: "blah",
                        //		|		multi: [
                        //		|			"thud",
                        //		|			"thonk"
                        //		|		]
                        //		|	};

                        var ret = {},
                            elems = dom.byId(formNode).elements;
                        for (var i = 0, l = elems.length; i < l; ++i) {
                            var item = elems[i],
                                _in = item.name,
                                type = (item.type || "").toLowerCase();
                            if (_in && type && exclude.indexOf(type) < 0 && !item.disabled) {
                                setValue(ret, _in, form.fieldToObject(item));
                                if (type == "image") {
                                    ret[_in + ".x"] = ret[_in + ".y"] = ret[_in].x = ret[_in].y = 0;
                                }
                            }
                        }
                        return ret; // Object
                    },

                    toQuery: function formToQuery( /*DOMNode|String*/ formNode) {
                        // summary:
                        //		Returns a URL-encoded string representing the form passed as either a
                        //		node or string ID identifying the form to serialize
                        // formNode: DOMNode|String
                        // returns: String

                        return ioq.objectToQuery(form.toObject(formNode)); // String
                    },

                    toJson: function formToJson( /*DOMNode|String*/ formNode, /*Boolean?*/ prettyPrint) {
                        // summary:
                        //		Create a serialized JSON string from a form node or string
                        //		ID identifying the form to serialize
                        // formNode: DOMNode|String
                        // prettyPrint: Boolean?
                        // returns: String

                        return json.stringify(form.toObject(formNode), null, prettyPrint ? 4 : 0); // String
                    }
                };

                return form;
            });

        },
        'dijit/_DialogMixin': function() {
            define("dijit/_DialogMixin", [
                "dojo/_base/declare", // declare
                "./a11y" // _getTabNavigable
            ], function(declare, a11y) {

                // module:
                //		dijit/_DialogMixin

                return declare("dijit._DialogMixin", null, {
                    // summary:
                    //		This provides functions useful to Dialog and TooltipDialog

                    execute: function( /*Object*/ /*===== formContents =====*/ ) {
                        // summary:
                        //		Callback when the user hits the submit button.
                        //		Override this method to handle Dialog execution.
                        // description:
                        //		After the user has pressed the submit button, the Dialog
                        //		first calls onExecute() to notify the container to hide the
                        //		dialog and restore focus to wherever it used to be.
                        //
                        //		*Then* this method is called.
                        // type:
                        //		callback
                    },

                    onCancel: function() {
                        // summary:
                        //		Called when user has pressed the Dialog's cancel button, to notify container.
                        // description:
                        //		Developer shouldn't override or connect to this method;
                        //		it's a private communication device between the TooltipDialog
                        //		and the thing that opened it (ex: `dijit/form/DropDownButton`)
                        // type:
                        //		protected
                    },

                    onExecute: function() {
                        // summary:
                        //		Called when user has pressed the dialog's OK button, to notify container.
                        // description:
                        //		Developer shouldn't override or connect to this method;
                        //		it's a private communication device between the TooltipDialog
                        //		and the thing that opened it (ex: `dijit/form/DropDownButton`)
                        // type:
                        //		protected
                    },

                    _onSubmit: function() {
                        // summary:
                        //		Callback when user hits submit button
                        // type:
                        //		protected
                        this.onExecute(); // notify container that we are about to execute
                        this.execute(this.get('value'));
                    },

                    _getFocusItems: function() {
                        // summary:
                        //		Finds focusable items in dialog,
                        //		and sets this._firstFocusItem and this._lastFocusItem
                        // tags:
                        //		protected

                        var elems = a11y._getTabNavigable(this.containerNode);
                        this._firstFocusItem = elems.lowest || elems.first || this.closeButtonNode || this.domNode;
                        this._lastFocusItem = elems.last || elems.highest || this._firstFocusItem;
                    }
                });
            });

        },
        'dojo/request': function() {
            define([
                './request/default!'
                /*=====,
                	'./_base/declare',
                	'./promise/Promise' =====*/
            ], function(request /*=====, declare, Promise =====*/ ) {
                /*=====
                request = function(url, options){
                	// summary:
                	//		Send a request using the default transport for the current platform.
                	// url: String
                	//		The URL to request.
                	// options: dojo/request.__Options?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                request.__Promise = declare(Promise, {
                	// response: dojo/promise/Promise
                	//		A promise resolving to an object representing
                	//		the response from the server.
                });
                request.__BaseOptions = declare(null, {
                	// query: String|Object?
                	//		Query parameters to append to the URL.
                	// data: String|Object?
                	//		Data to transfer.  This is ignored for GET and DELETE
                	//		requests.
                	// preventCache: Boolean?
                	//		Whether to append a cache-busting parameter to the URL.
                	// timeout: Integer?
                	//		Milliseconds to wait for the response.  If this time
                	//		passes, the then the promise is rejected.
                	// handleAs: String?
                	//		How to handle the response from the server.  Default is
                	//		'text'.  Other values are 'json', 'javascript', and 'xml'.
                });
                request.__MethodOptions = declare(null, {
                	// method: String?
                	//		The HTTP method to use to make the request.  Must be
                	//		uppercase.
                });
                request.__Options = declare([request.__BaseOptions, request.__MethodOptions]);

                request.get = function(url, options){
                	// summary:
                	//		Send an HTTP GET request using the default transport for the current platform.
                	// url: String
                	//		URL to request
                	// options: dojo/request.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                request.post = function(url, options){
                	// summary:
                	//		Send an HTTP POST request using the default transport for the current platform.
                	// url: String
                	//		URL to request
                	// options: dojo/request.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                request.put = function(url, options){
                	// summary:
                	//		Send an HTTP POST request using the default transport for the current platform.
                	// url: String
                	//		URL to request
                	// options: dojo/request.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                request.del = function(url, options){
                	// summary:
                	//		Send an HTTP DELETE request using the default transport for the current platform.
                	// url: String
                	//		URL to request
                	// options: dojo/request.__BaseOptions?
                	//		Options for the request.
                	// returns: dojo/request.__Promise
                };
                =====*/
                return request;
            });

        },
        'dijit/nls/common': function() {
            define("dijit/nls/common", {
                root:
                    //begin v1.x content
                    ({
                        buttonOk: "OK",
                        buttonCancel: "Cancel",
                        buttonSave: "Save",
                        itemClose: "Close"
                    })
                    //end v1.x content
                    ,
                "zh": true,
                "zh-tw": true,
                "tr": true,
                "th": true,
                "sv": true,
                "sl": true,
                "sk": true,
                "ru": true,
                "ro": true,
                "pt": true,
                "pt-pt": true,
                "pl": true,
                "nl": true,
                "nb": true,
                "ko": true,
                "kk": true,
                "ja": true,
                "it": true,
                "hu": true,
                "hr": true,
                "he": true,
                "fr": true,
                "fi": true,
                "es": true,
                "el": true,
                "de": true,
                "da": true,
                "cs": true,
                "ca": true,
                "az": true,
                "ar": true
            });

        },
        'dijit/form/_FormValueWidget': function() {
            define("dijit/form/_FormValueWidget", [
                "dojo/_base/declare", // declare
                "dojo/sniff", // has("ie")
                "./_FormWidget",
                "./_FormValueMixin"
            ], function(declare, has, _FormWidget, _FormValueMixin) {

                // module:
                //		dijit/form/_FormValueWidget

                return declare("dijit.form._FormValueWidget", [_FormWidget, _FormValueMixin], {
                    // summary:
                    //		Base class for widgets corresponding to native HTML elements such as `<input>` or `<select>`
                    //		that have user changeable values.
                    // description:
                    //		Each _FormValueWidget represents a single input value, and has a (possibly hidden) `<input>` element,
                    //		to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)
                    //		works as expected.

                    // Don't attempt to mixin the 'type', 'name' attributes here programatically -- they must be declared
                    // directly in the template as read by the parser in order to function. IE is known to specifically
                    // require the 'name' attribute at element creation time.  See #8484, #8660.

                    _layoutHackIE7: function() {
                        // summary:
                        //		Work around table sizing bugs on IE7 by forcing redraw

                        if (has("ie") == 7) { // fix IE7 layout bug when the widget is scrolled out of sight
                            var domNode = this.domNode;
                            var parent = domNode.parentNode;
                            var pingNode = domNode.firstChild || domNode; // target node most unlikely to have a custom filter
                            var origFilter = pingNode.style.filter; // save custom filter, most likely nothing
                            var _this = this;
                            while (parent && parent.clientHeight == 0) { // search for parents that haven't rendered yet
                                (function ping() {
                                    var disconnectHandle = _this.connect(parent, "onscroll",
                                        function() {
                                            _this.disconnect(disconnectHandle); // only call once
                                            pingNode.style.filter = (new Date()).getMilliseconds(); // set to anything that's unique
                                            _this.defer(function() {
                                                pingNode.style.filter = origFilter;
                                            }); // restore custom filter, if any
                                        }
                                    );
                                })();
                                parent = parent.parentNode;
                            }
                        }
                    }
                });

            });

        }
    }
});
require({
    cache: {}
});
require.boot && require.apply(null, require.boot);